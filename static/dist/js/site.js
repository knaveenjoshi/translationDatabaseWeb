/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/site_media/static";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	__webpack_require__(87);

	window.jQuery = window.$ = __webpack_require__(112);

	__webpack_require__(113);
	__webpack_require__(126);
	__webpack_require__(130);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(133);

	var glmap = __webpack_require__(134);

	(function ($) {
	  $('[data-toggle="tooltip"]').tooltip();
	  $('[data-toggle="popover"]').popover();
	  if (document.getElementById('mapcontainer') !== null) glmap.drawMap();
	  $(document).on("click", ".btn-export-map", function () {
	    glmap.submitDownloadForm("pdf");
	  });
	  $.fn.languageSelector = function (options) {
	    var settings = $.extend({}, options);
	    return this.each(function () {
	      var $input = $(this);
	      $input.select2({
	        placeholder: "Search for a language...",
	        minimumInputLength: 2,
	        ajax: {
	          url: $input.data("source-url"),
	          dataType: "json",
	          quietMillis: 250,
	          data: function data(term, page) {
	            return { q: term };
	          },
	          results: function results(data, page) {
	            console.log(data.results);
	            return { results: data.results };
	          },
	          cache: true
	        },
	        initSelection: function initSelection(element, callback) {
	          data = {
	            "pk": element.data("lang-pk"),
	            "ln": element.data("lang-ln"),
	            "lc": element.data("lang-lc"),
	            "lr": element.data("lang-lr")
	          };
	          callback(data);
	        },
	        id: function id(lang) {
	          return lang.pk;
	        },
	        formatResult: function formatResult(lang) {
	          return "<strong>" + lang.ln + "</strong> <code>" + lang.lc + "</code> [" + lang.lr + "]";
	        },
	        formatSelection: function formatSelection(lang) {
	          return "<strong>" + lang.ln + "</strong> <code>" + lang.lc + "</code> [" + lang.lr + "]";
	        },
	        escapeMarkup: function escapeMarkup(m) {
	          return m;
	        }
	      });
	    });
	  };
	})(jQuery);

	$(function () {
	  $("table[data-source]").each(function () {
	    var $el = $(this);
	    $el.DataTable({
	      serverSide: true,
	      ajax: $el.data("source"),
	      stateSave: true
	    });
	  });
	  $(".select2-multiple").select2();
	  $(".language-selector").languageSelector();
	  $(".date-picker").daterangepicker({
	    singleDatePicker: true
	  });
	  $(document).on("eldarion-ajax:success", function (evt, $el) {
	    if ($el.hasClass("navbar-form")) {
	      var $el = $("<div>").addClass("alert").addClass("alert-info").html("<strong>Invite was sent!</sent>");
	      $("body").prepend($el);
	      setTimeout(function () {
	        $el.remove();
	      }, 3000);
	    }
	  });
	});

/***/ },

/***/ 87:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 112:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.1.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-04-28T16:01Z
	 */

	"use strict";

	(function (global, factory) {

		if (typeof module === "object" && typeof module.exports === "object") {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ? factory(global, true) : function (w) {
				if (!w.document) {
					throw new Error("jQuery requires a window with a document");
				}
				return factory(w);
			};
		} else {
			factory(global);
		}

		// Pass this if window is not defined yet
	})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

		// Support: Firefox 18+
		// Can't be in strict mode, several libs including ASP.NET trace
		// the stack via arguments.caller.callee and Firefox dies if
		// you try to trace through "use strict" call chains. (#13335)
		//

		var arr = [];

		var _slice = arr.slice;

		var concat = arr.concat;

		var push = arr.push;

		var indexOf = arr.indexOf;

		var class2type = {};

		var toString = class2type.toString;

		var hasOwn = class2type.hasOwnProperty;

		var support = {};

		var
		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,
		    version = "2.1.4",
		   

		// Define a local copy of jQuery
		jQuery = function jQuery(selector, context) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init(selector, context);
		},
		   

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
		   

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		    rdashAlpha = /-([\da-z])/gi,
		   

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function fcamelCase(all, letter) {
			return letter.toUpperCase();
		};

		jQuery.fn = jQuery.prototype = {
			// The current version of jQuery being used
			jquery: version,

			constructor: jQuery,

			// Start with an empty selector
			selector: "",

			// The default length of a jQuery object is 0
			length: 0,

			toArray: function toArray() {
				return _slice.call(this);
			},

			// Get the Nth element in the matched element set OR
			// Get the whole matched element set as a clean array
			get: function get(num) {
				return num != null ?

				// Return just the one element from the set
				num < 0 ? this[num + this.length] : this[num] :

				// Return all the elements in a clean array
				_slice.call(this);
			},

			// Take an array of elements and push it onto the stack
			// (returning the new matched element set)
			pushStack: function pushStack(elems) {

				// Build a new jQuery matched element set
				var ret = jQuery.merge(this.constructor(), elems);

				// Add the old object onto the stack (as a reference)
				ret.prevObject = this;
				ret.context = this.context;

				// Return the newly-formed element set
				return ret;
			},

			// Execute a callback for every element in the matched set.
			// (You can seed the arguments with an array of args, but this is
			// only used internally.)
			each: function each(callback, args) {
				return jQuery.each(this, callback, args);
			},

			map: function map(callback) {
				return this.pushStack(jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem);
				}));
			},

			slice: function slice() {
				return this.pushStack(_slice.apply(this, arguments));
			},

			first: function first() {
				return this.eq(0);
			},

			last: function last() {
				return this.eq(-1);
			},

			eq: function eq(i) {
				var len = this.length,
				    j = +i + (i < 0 ? len : 0);
				return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
			},

			end: function end() {
				return this.prevObject || this.constructor(null);
			},

			// For internal use only.
			// Behaves like an Array's method, not like a jQuery method.
			push: push,
			sort: arr.sort,
			splice: arr.splice
		};

		jQuery.extend = jQuery.fn.extend = function () {
			var options,
			    name,
			    src,
			    copy,
			    copyIsArray,
			    clone,
			    target = arguments[0] || {},
			    i = 1,
			    length = arguments.length,
			    deep = false;

			// Handle a deep copy situation
			if (typeof target === "boolean") {
				deep = target;

				// Skip the boolean and the target
				target = arguments[i] || {};
				i++;
			}

			// Handle case when target is a string or something (possible in deep copy)
			if (typeof target !== "object" && !jQuery.isFunction(target)) {
				target = {};
			}

			// Extend jQuery itself if only one argument is passed
			if (i === length) {
				target = this;
				i--;
			}

			for (; i < length; i++) {
				// Only deal with non-null/undefined values
				if ((options = arguments[i]) != null) {
					// Extend the base object
					for (name in options) {
						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && jQuery.isArray(src) ? src : [];
							} else {
								clone = src && jQuery.isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							target[name] = jQuery.extend(deep, clone, copy);

							// Don't bring in undefined values
						} else if (copy !== undefined) {
								target[name] = copy;
							}
					}
				}
			}

			// Return the modified object
			return target;
		};

		jQuery.extend({
			// Unique for each copy of jQuery on the page
			expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

			// Assume jQuery is ready without the ready module
			isReady: true,

			error: function error(msg) {
				throw new Error(msg);
			},

			noop: function noop() {},

			isFunction: function isFunction(obj) {
				return jQuery.type(obj) === "function";
			},

			isArray: Array.isArray,

			isWindow: function isWindow(obj) {
				return obj != null && obj === obj.window;
			},

			isNumeric: function isNumeric(obj) {
				// parseFloat NaNs numeric-cast false positives (null|true|false|"")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				// adding 1 corrects loss of precision from parseFloat (#15100)
				return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
			},

			isPlainObject: function isPlainObject(obj) {
				// Not plain objects:
				// - Any object or value whose internal [[Class]] property is not "[object Object]"
				// - DOM nodes
				// - window
				if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
					return false;
				}

				if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
					return false;
				}

				// If the function hasn't returned already, we're confident that
				// |obj| is a plain object, created by {} or constructed with new Object
				return true;
			},

			isEmptyObject: function isEmptyObject(obj) {
				var name;
				for (name in obj) {
					return false;
				}
				return true;
			},

			type: function type(obj) {
				if (obj == null) {
					return obj + "";
				}
				// Support: Android<4.0, iOS<6 (functionish RegExp)
				return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
			},

			// Evaluates a script in a global context
			globalEval: function globalEval(code) {
				var script,
				    indirect = eval;

				code = jQuery.trim(code);

				if (code) {
					// If the code includes a valid, prologue position
					// strict mode pragma, execute code by injecting a
					// script tag into the document.
					if (code.indexOf("use strict") === 1) {
						script = document.createElement("script");
						script.text = code;
						document.head.appendChild(script).parentNode.removeChild(script);
					} else {
						// Otherwise, avoid the DOM node creation, insertion
						// and removal by using an indirect global eval
						indirect(code);
					}
				}
			},

			// Convert dashed to camelCase; used by the css and data modules
			// Support: IE9-11+
			// Microsoft forgot to hump their vendor prefix (#9572)
			camelCase: function camelCase(string) {
				return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
			},

			nodeName: function nodeName(elem, name) {
				return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
			},

			// args is for internal usage only
			each: function each(obj, callback, args) {
				var value,
				    i = 0,
				    length = obj.length,
				    isArray = isArraylike(obj);

				if (args) {
					if (isArray) {
						for (; i < length; i++) {
							value = callback.apply(obj[i], args);

							if (value === false) {
								break;
							}
						}
					} else {
						for (i in obj) {
							value = callback.apply(obj[i], args);

							if (value === false) {
								break;
							}
						}
					}

					// A special, fast, case for the most common use of each
				} else {
						if (isArray) {
							for (; i < length; i++) {
								value = callback.call(obj[i], i, obj[i]);

								if (value === false) {
									break;
								}
							}
						} else {
							for (i in obj) {
								value = callback.call(obj[i], i, obj[i]);

								if (value === false) {
									break;
								}
							}
						}
					}

				return obj;
			},

			// Support: Android<4.1
			trim: function trim(text) {
				return text == null ? "" : (text + "").replace(rtrim, "");
			},

			// results is for internal usage only
			makeArray: function makeArray(arr, results) {
				var ret = results || [];

				if (arr != null) {
					if (isArraylike(Object(arr))) {
						jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
					} else {
						push.call(ret, arr);
					}
				}

				return ret;
			},

			inArray: function inArray(elem, arr, i) {
				return arr == null ? -1 : indexOf.call(arr, elem, i);
			},

			merge: function merge(first, second) {
				var len = +second.length,
				    j = 0,
				    i = first.length;

				for (; j < len; j++) {
					first[i++] = second[j];
				}

				first.length = i;

				return first;
			},

			grep: function grep(elems, callback, invert) {
				var callbackInverse,
				    matches = [],
				    i = 0,
				    length = elems.length,
				    callbackExpect = !invert;

				// Go through the array, only saving the items
				// that pass the validator function
				for (; i < length; i++) {
					callbackInverse = !callback(elems[i], i);
					if (callbackInverse !== callbackExpect) {
						matches.push(elems[i]);
					}
				}

				return matches;
			},

			// arg is for internal usage only
			map: function map(elems, callback, arg) {
				var value,
				    i = 0,
				    length = elems.length,
				    isArray = isArraylike(elems),
				    ret = [];

				// Go through the array, translating each of the items to their new values
				if (isArray) {
					for (; i < length; i++) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}

					// Go through every key on the object,
				} else {
						for (i in elems) {
							value = callback(elems[i], i, arg);

							if (value != null) {
								ret.push(value);
							}
						}
					}

				// Flatten any nested arrays
				return concat.apply([], ret);
			},

			// A global GUID counter for objects
			guid: 1,

			// Bind a function to a context, optionally partially applying any
			// arguments.
			proxy: function proxy(fn, context) {
				var tmp, args, proxy;

				if (typeof context === "string") {
					tmp = fn[context];
					context = fn;
					fn = tmp;
				}

				// Quick check to determine if target is callable, in the spec
				// this throws a TypeError, but we will just return undefined.
				if (!jQuery.isFunction(fn)) {
					return undefined;
				}

				// Simulated bind
				args = _slice.call(arguments, 2);
				proxy = function () {
					return fn.apply(context || this, args.concat(_slice.call(arguments)));
				};

				// Set the guid of unique handler to the same of original handler, so it can be removed
				proxy.guid = fn.guid = fn.guid || jQuery.guid++;

				return proxy;
			},

			now: Date.now,

			// jQuery.support is not used in Core but other projects attach their
			// properties to it so it needs to exist.
			support: support
		});

		// Populate the class2type map
		jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
			class2type["[object " + name + "]"] = name.toLowerCase();
		});

		function isArraylike(obj) {

			// Support: iOS 8.2 (not reproducible in simulator)
			// `in` check used to prevent JIT error (gh-2145)
			// hasOwn isn't used here due to false negatives
			// regarding Nodelist length in IE
			var length = "length" in obj && obj.length,
			    type = jQuery.type(obj);

			if (type === "function" || jQuery.isWindow(obj)) {
				return false;
			}

			if (obj.nodeType === 1 && length) {
				return true;
			}

			return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
		}
		var Sizzle =
		/*!
	  * Sizzle CSS Selector Engine v2.2.0-pre
	  * http://sizzlejs.com/
	  *
	  * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
	  * Released under the MIT license
	  * http://jquery.org/license
	  *
	  * Date: 2014-12-16
	  */
		(function (window) {

			var i,
			    support,
			    Expr,
			    getText,
			    isXML,
			    tokenize,
			    compile,
			    select,
			    outermostContext,
			    sortInput,
			    hasDuplicate,
			   

			// Local document vars
			setDocument,
			    document,
			    docElem,
			    documentIsHTML,
			    rbuggyQSA,
			    rbuggyMatches,
			    matches,
			    contains,
			   

			// Instance-specific data
			expando = "sizzle" + 1 * new Date(),
			    preferredDoc = window.document,
			    dirruns = 0,
			    done = 0,
			    classCache = createCache(),
			    tokenCache = createCache(),
			    compilerCache = createCache(),
			    sortOrder = function sortOrder(a, b) {
				if (a === b) {
					hasDuplicate = true;
				}
				return 0;
			},
			   

			// General-purpose constants
			MAX_NEGATIVE = 1 << 31,
			   

			// Instance methods
			hasOwn = ({}).hasOwnProperty,
			    arr = [],
			    pop = arr.pop,
			    push_native = arr.push,
			    push = arr.push,
			    slice = arr.slice,
			   
			// Use a stripped-down indexOf as it's faster than native
			// http://jsperf.com/thor-indexof-vs-for/5
			indexOf = function indexOf(list, elem) {
				var i = 0,
				    len = list.length;
				for (; i < len; i++) {
					if (list[i] === elem) {
						return i;
					}
				}
				return -1;
			},
			    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
			   

			// Regular expressions

			// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
			whitespace = "[\\x20\\t\\r\\n\\f]",
			   
			// http://www.w3.org/TR/css3-syntax/#characters
			characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
			   

			// Loosely modeled on CSS identifier characters
			// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
			// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
			identifier = characterEncoding.replace("w", "w#"),
			   

			// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
			attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
			    pseudos = ":(" + characterEncoding + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" + ")\\)|)",
			   

			// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
			rwhitespace = new RegExp(whitespace + "+", "g"),
			    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
			    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
			    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
			    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
			    rpseudo = new RegExp(pseudos),
			    ridentifier = new RegExp("^" + identifier + "$"),
			    matchExpr = {
				"ID": new RegExp("^#(" + characterEncoding + ")"),
				"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
				"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
				"ATTR": new RegExp("^" + attributes),
				"PSEUDO": new RegExp("^" + pseudos),
				"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
				"bool": new RegExp("^(?:" + booleans + ")$", "i"),
				// For use in libraries implementing .is()
				// We use this for POS matching in `select`
				"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
			},
			    rinputs = /^(?:input|select|textarea|button)$/i,
			    rheader = /^h\d$/i,
			    rnative = /^[^{]+\{\s*\[native \w/,
			   

			// Easily-parseable/retrievable ID or TAG or CLASS selectors
			rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
			    rsibling = /[+~]/,
			    rescape = /'|\\/g,
			   

			// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
			runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
			    funescape = function funescape(_, escaped, escapedWhitespace) {
				var high = "0x" + escaped - 0x10000;
				// NaN means non-codepoint
				// Support: Firefox<24
				// Workaround erroneous numeric interpretation of +"0x"
				return high !== high || escapedWhitespace ? escaped : high < 0 ?
				// BMP codepoint
				String.fromCharCode(high + 0x10000) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
			},
			   

			// Used for iframes
			// See setDocument()
			// Removing the function wrapper causes a "Permission Denied"
			// error in IE
			unloadHandler = function unloadHandler() {
				setDocument();
			};

			// Optimize for push.apply( _, NodeList )
			try {
				push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
				// Support: Android<4.0
				// Detect silently failing push.apply
				arr[preferredDoc.childNodes.length].nodeType;
			} catch (e) {
				push = { apply: arr.length ?

					// Leverage slice if possible
					function (target, els) {
						push_native.apply(target, slice.call(els));
					} :

					// Support: IE<9
					function (target, els) {
						var j = target.length,
						    i = 0;
						// Can't trust NodeList.length
						while (target[j++] = els[i++]) {}
						target.length = j - 1;
					}
				};
			}

			function Sizzle(selector, context, results, seed) {
				var match, elem, m, nodeType,
				// QSA vars
				i, groups, old, nid, newContext, newSelector;

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}

				context = context || document;
				results = results || [];
				nodeType = context.nodeType;

				if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

					return results;
				}

				if (!seed && documentIsHTML) {

					// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
						// Speed-up: Sizzle("#ID")
						if (m = match[1]) {
							if (nodeType === 9) {
								elem = context.getElementById(m);
								// Check parentNode to catch when Blackberry 4.6 returns
								// nodes that are no longer in the document (jQuery #6963)
								if (elem && elem.parentNode) {
									// Handle the case where IE, Opera, and Webkit return items
									// by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}
							} else {
								// Context is not a document
								if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
									results.push(elem);
									return results;
								}
							}

							// Speed-up: Sizzle("TAG")
						} else if (match[2]) {
								push.apply(results, context.getElementsByTagName(selector));
								return results;

								// Speed-up: Sizzle(".CLASS")
							} else if ((m = match[3]) && support.getElementsByClassName) {
									push.apply(results, context.getElementsByClassName(m));
									return results;
								}
					}

					// QSA path
					if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
						nid = old = expando;
						newContext = context;
						newSelector = nodeType !== 1 && selector;

						// qSA works strangely on Element-rooted queries
						// We can work around this by specifying an extra ID on the root
						// and working up from there (Thanks to Andrew Dupont for the technique)
						// IE 8 doesn't work on object elements
						if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
							groups = tokenize(selector);

							if (old = context.getAttribute("id")) {
								nid = old.replace(rescape, "\\$&");
							} else {
								context.setAttribute("id", nid);
							}
							nid = "[id='" + nid + "'] ";

							i = groups.length;
							while (i--) {
								groups[i] = nid + toSelector(groups[i]);
							}
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
							newSelector = groups.join(",");
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (!old) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}

				// All others
				return select(selector.replace(rtrim, "$1"), context, results, seed);
			}

			/**
	   * Create key-value caches of limited size
	   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	   *	deleting the oldest entry
	   */
			function createCache() {
				var keys = [];

				function cache(key, value) {
					// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
					if (keys.push(key + " ") > Expr.cacheLength) {
						// Only keep the most recent entries
						delete cache[keys.shift()];
					}
					return cache[key + " "] = value;
				}
				return cache;
			}

			/**
	   * Mark a function for special use by Sizzle
	   * @param {Function} fn The function to mark
	   */
			function markFunction(fn) {
				fn[expando] = true;
				return fn;
			}

			/**
	   * Support testing using an element
	   * @param {Function} fn Passed the created div and expects a boolean result
	   */
			function assert(fn) {
				var div = document.createElement("div");

				try {
					return !!fn(div);
				} catch (e) {
					return false;
				} finally {
					// Remove from its parent by default
					if (div.parentNode) {
						div.parentNode.removeChild(div);
					}
					// release memory in IE
					div = null;
				}
			}

			/**
	   * Adds the same handler for all of the specified attrs
	   * @param {String} attrs Pipe-separated list of attributes
	   * @param {Function} handler The method that will be applied
	   */
			function addHandle(attrs, handler) {
				var arr = attrs.split("|"),
				    i = attrs.length;

				while (i--) {
					Expr.attrHandle[arr[i]] = handler;
				}
			}

			/**
	   * Checks document order of two siblings
	   * @param {Element} a
	   * @param {Element} b
	   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	   */
			function siblingCheck(a, b) {
				var cur = b && a,
				    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

				// Use IE sourceIndex if available on both nodes
				if (diff) {
					return diff;
				}

				// Check if b follows a
				if (cur) {
					while (cur = cur.nextSibling) {
						if (cur === b) {
							return -1;
						}
					}
				}

				return a ? 1 : -1;
			}

			/**
	   * Returns a function to use in pseudos for input types
	   * @param {String} type
	   */
			function createInputPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for buttons
	   * @param {String} type
	   */
			function createButtonPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return (name === "input" || name === "button") && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for positionals
	   * @param {Function} fn
	   */
			function createPositionalPseudo(fn) {
				return markFunction(function (argument) {
					argument = +argument;
					return markFunction(function (seed, matches) {
						var j,
						    matchIndexes = fn([], seed.length, argument),
						    i = matchIndexes.length;

						// Match elements found at the specified indexes
						while (i--) {
							if (seed[j = matchIndexes[i]]) {
								seed[j] = !(matches[j] = seed[j]);
							}
						}
					});
				});
			}

			/**
	   * Checks a node for validity as a Sizzle context
	   * @param {Element|Object=} context
	   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	   */
			function testContext(context) {
				return context && typeof context.getElementsByTagName !== "undefined" && context;
			}

			// Expose support vars for convenience
			support = Sizzle.support = {};

			/**
	   * Detects XML nodes
	   * @param {Element|Object} elem An element or a document
	   * @returns {Boolean} True iff elem is a non-HTML XML node
	   */
			isXML = Sizzle.isXML = function (elem) {
				// documentElement is verified for cases where it doesn't yet exist
				// (such as loading iframes in IE - #4833)
				var documentElement = elem && (elem.ownerDocument || elem).documentElement;
				return documentElement ? documentElement.nodeName !== "HTML" : false;
			};

			/**
	   * Sets document-related variables once based on the current document
	   * @param {Element|Object} [doc] An element or document object to use to set the document
	   * @returns {Object} Returns the current document
	   */
			setDocument = Sizzle.setDocument = function (node) {
				var hasCompare,
				    parent,
				    doc = node ? node.ownerDocument || node : preferredDoc;

				// If no document and documentElement is available, return
				if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
					return document;
				}

				// Set our document
				document = doc;
				docElem = doc.documentElement;
				parent = doc.defaultView;

				// Support: IE>8
				// If iframe document is assigned to "document" variable and if iframe has been reloaded,
				// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
				// IE6-8 do not support the defaultView property so parent will be undefined
				if (parent && parent !== parent.top) {
					// IE11 does not have attachEvent, so all must suffer
					if (parent.addEventListener) {
						parent.addEventListener("unload", unloadHandler, false);
					} else if (parent.attachEvent) {
						parent.attachEvent("onunload", unloadHandler);
					}
				}

				/* Support tests
	   ---------------------------------------------------------------------- */
				documentIsHTML = !isXML(doc);

				/* Attributes
	   ---------------------------------------------------------------------- */

				// Support: IE<8
				// Verify that getAttribute really returns attributes and not properties
				// (excepting IE8 booleans)
				support.attributes = assert(function (div) {
					div.className = "i";
					return !div.getAttribute("className");
				});

				/* getElement(s)By*
	   ---------------------------------------------------------------------- */

				// Check if getElementsByTagName("*") returns only elements
				support.getElementsByTagName = assert(function (div) {
					div.appendChild(doc.createComment(""));
					return !div.getElementsByTagName("*").length;
				});

				// Support: IE<9
				support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

				// Support: IE<10
				// Check if getElementById returns elements by name
				// The broken getElementById methods don't pick up programatically-set names,
				// so use a roundabout getElementsByName test
				support.getById = assert(function (div) {
					docElem.appendChild(div).id = expando;
					return !doc.getElementsByName || !doc.getElementsByName(expando).length;
				});

				// ID find and filter
				if (support.getById) {
					Expr.find["ID"] = function (id, context) {
						if (typeof context.getElementById !== "undefined" && documentIsHTML) {
							var m = context.getElementById(id);
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document #6963
							return m && m.parentNode ? [m] : [];
						}
					};
					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							return elem.getAttribute("id") === attrId;
						};
					};
				} else {
					// Support: IE6/7
					// getElementById is not reliable as a find shortcut
					delete Expr.find["ID"];

					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
							return node && node.value === attrId;
						};
					};
				}

				// Tag
				Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
					if (typeof context.getElementsByTagName !== "undefined") {
						return context.getElementsByTagName(tag);

						// DocumentFragment nodes don't have gEBTN
					} else if (support.qsa) {
							return context.querySelectorAll(tag);
						}
				} : function (tag, context) {
					var elem,
					    tmp = [],
					    i = 0,
					   
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName(tag);

					// Filter out possible comments
					if (tag === "*") {
						while (elem = results[i++]) {
							if (elem.nodeType === 1) {
								tmp.push(elem);
							}
						}

						return tmp;
					}
					return results;
				};

				// Class
				Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
					if (documentIsHTML) {
						return context.getElementsByClassName(className);
					}
				};

				/* QSA/matchesSelector
	   ---------------------------------------------------------------------- */

				// QSA and matchesSelector support

				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				rbuggyMatches = [];

				// qSa(:focus) reports false when true (Chrome 21)
				// We allow this because of a bug in IE8/9 that throws an error
				// whenever `document.activeElement` is accessed on an iframe
				// So, we allow :focus to pass through QSA all the time to avoid the IE error
				// See http://bugs.jquery.com/ticket/13378
				rbuggyQSA = [];

				if (support.qsa = rnative.test(doc.querySelectorAll)) {
					// Build QSA regex
					// Regex strategy adopted from Diego Perini
					assert(function (div) {
						// Select is set to empty string on purpose
						// This is to test IE's treatment of not explicitly
						// setting a boolean content attribute,
						// since its presence should be enough
						// http://bugs.jquery.com/ticket/12359
						docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";

						// Support: IE8, Opera 11-12.16
						// Nothing should be selected when empty strings follow ^= or $= or *=
						// The test attribute must be unknown in Opera but "safe" for WinRT
						// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
						if (div.querySelectorAll("[msallowcapture^='']").length) {
							rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
						}

						// Support: IE8
						// Boolean attributes and "value" are not treated correctly
						if (!div.querySelectorAll("[selected]").length) {
							rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
						}

						// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
						if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
							rbuggyQSA.push("~=");
						}

						// Webkit/Opera - :checked should return selected option elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						// IE8 throws error here and will not see later tests
						if (!div.querySelectorAll(":checked").length) {
							rbuggyQSA.push(":checked");
						}

						// Support: Safari 8+, iOS 8+
						// https://bugs.webkit.org/show_bug.cgi?id=136851
						// In-page `selector#id sibing-combinator selector` fails
						if (!div.querySelectorAll("a#" + expando + "+*").length) {
							rbuggyQSA.push(".#.+[+~]");
						}
					});

					assert(function (div) {
						// Support: Windows 8 Native Apps
						// The type and name attributes are restricted during .innerHTML assignment
						var input = doc.createElement("input");
						input.setAttribute("type", "hidden");
						div.appendChild(input).setAttribute("name", "D");

						// Support: IE8
						// Enforce case-sensitivity of name attribute
						if (div.querySelectorAll("[name=d]").length) {
							rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
						}

						// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
						// IE8 throws error here and will not see later tests
						if (!div.querySelectorAll(":enabled").length) {
							rbuggyQSA.push(":enabled", ":disabled");
						}

						// Opera 10-11 does not throw on post-comma invalid pseudos
						div.querySelectorAll("*,:x");
						rbuggyQSA.push(",.*:");
					});
				}

				if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

					assert(function (div) {
						// Check to see if it's possible to do matchesSelector
						// on a disconnected node (IE 9)
						support.disconnectedMatch = matches.call(div, "div");

						// This should fail with an exception
						// Gecko does not error, returns false instead
						matches.call(div, "[s!='']:x");
						rbuggyMatches.push("!=", pseudos);
					});
				}

				rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
				rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

				/* Contains
	   ---------------------------------------------------------------------- */
				hasCompare = rnative.test(docElem.compareDocumentPosition);

				// Element contains another
				// Purposefully does not implement inclusive descendent
				// As in, an element does not contain itself
				contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
					var adown = a.nodeType === 9 ? a.documentElement : a,
					    bup = b && b.parentNode;
					return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
				} : function (a, b) {
					if (b) {
						while (b = b.parentNode) {
							if (b === a) {
								return true;
							}
						}
					}
					return false;
				};

				/* Sorting
	   ---------------------------------------------------------------------- */

				// Document order sorting
				sortOrder = hasCompare ? function (a, b) {

					// Flag for duplicate removal
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					// Sort on method existence if only one input has compareDocumentPosition
					var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
					if (compare) {
						return compare;
					}

					// Calculate position if both inputs belong to the same document
					compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

					// Otherwise we know they are disconnected
					1;

					// Disconnected nodes
					if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

						// Choose the first element that is related to our preferred document
						if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
							return -1;
						}
						if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
							return 1;
						}

						// Maintain original order
						return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
					}

					return compare & 4 ? -1 : 1;
				} : function (a, b) {
					// Exit early if the nodes are identical
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					var cur,
					    i = 0,
					    aup = a.parentNode,
					    bup = b.parentNode,
					    ap = [a],
					    bp = [b];

					// Parentless nodes are either documents or disconnected
					if (!aup || !bup) {
						return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

						// If the nodes are siblings, we can do a quick check
					} else if (aup === bup) {
							return siblingCheck(a, b);
						}

					// Otherwise we need full lists of their ancestors for comparison
					cur = a;
					while (cur = cur.parentNode) {
						ap.unshift(cur);
					}
					cur = b;
					while (cur = cur.parentNode) {
						bp.unshift(cur);
					}

					// Walk down the tree looking for a discrepancy
					while (ap[i] === bp[i]) {
						i++;
					}

					return i ?
					// Do a sibling check if the nodes have a common ancestor
					siblingCheck(ap[i], bp[i]) :

					// Otherwise nodes in our document sort first
					ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
				};

				return doc;
			};

			Sizzle.matches = function (expr, elements) {
				return Sizzle(expr, null, null, elements);
			};

			Sizzle.matchesSelector = function (elem, expr) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				// Make sure that attribute selectors are quoted
				expr = expr.replace(rattributeQuotes, "='$1']");

				if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

					try {
						var ret = matches.call(elem, expr);

						// IE 9's matchesSelector returns false on disconnected nodes
						if (ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11) {
							return ret;
						}
					} catch (e) {}
				}

				return Sizzle(expr, document, null, [elem]).length > 0;
			};

			Sizzle.contains = function (context, elem) {
				// Set document vars if needed
				if ((context.ownerDocument || context) !== document) {
					setDocument(context);
				}
				return contains(context, elem);
			};

			Sizzle.attr = function (elem, name) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				var fn = Expr.attrHandle[name.toLowerCase()],
				   
				// Don't get fooled by Object.prototype properties (jQuery #13807)
				val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

				return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
			};

			Sizzle.error = function (msg) {
				throw new Error("Syntax error, unrecognized expression: " + msg);
			};

			/**
	   * Document sorting and removing duplicates
	   * @param {ArrayLike} results
	   */
			Sizzle.uniqueSort = function (results) {
				var elem,
				    duplicates = [],
				    j = 0,
				    i = 0;

				// Unless we *know* we can detect duplicates, assume their presence
				hasDuplicate = !support.detectDuplicates;
				sortInput = !support.sortStable && results.slice(0);
				results.sort(sortOrder);

				if (hasDuplicate) {
					while (elem = results[i++]) {
						if (elem === results[i]) {
							j = duplicates.push(i);
						}
					}
					while (j--) {
						results.splice(duplicates[j], 1);
					}
				}

				// Clear input after sorting to release objects
				// See https://github.com/jquery/sizzle/pull/225
				sortInput = null;

				return results;
			};

			/**
	   * Utility function for retrieving the text value of an array of DOM nodes
	   * @param {Array|Element} elem
	   */
			getText = Sizzle.getText = function (elem) {
				var node,
				    ret = "",
				    i = 0,
				    nodeType = elem.nodeType;

				if (!nodeType) {
					// If no nodeType, this is expected to be an array
					while (node = elem[i++]) {
						// Do not traverse comment nodes
						ret += getText(node);
					}
				} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					// Use textContent for elements
					// innerText usage removed for consistency of new lines (jQuery #11153)
					if (typeof elem.textContent === "string") {
						return elem.textContent;
					} else {
						// Traverse its children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem);
						}
					}
				} else if (nodeType === 3 || nodeType === 4) {
					return elem.nodeValue;
				}
				// Do not include comment or processing instruction nodes

				return ret;
			};

			Expr = Sizzle.selectors = {

				// Can be adjusted by the user
				cacheLength: 50,

				createPseudo: markFunction,

				match: matchExpr,

				attrHandle: {},

				find: {},

				relative: {
					">": { dir: "parentNode", first: true },
					" ": { dir: "parentNode" },
					"+": { dir: "previousSibling", first: true },
					"~": { dir: "previousSibling" }
				},

				preFilter: {
					"ATTR": function ATTR(match) {
						match[1] = match[1].replace(runescape, funescape);

						// Move the given value to match[3] whether quoted or unquoted
						match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

						if (match[2] === "~=") {
							match[3] = " " + match[3] + " ";
						}

						return match.slice(0, 4);
					},

					"CHILD": function CHILD(match) {
						/* matches from matchExpr["CHILD"]
	     	1 type (only|nth|...)
	     	2 what (child|of-type)
	     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
	     	4 xn-component of xn+y argument ([+-]?\d*n|)
	     	5 sign of xn-component
	     	6 x of xn-component
	     	7 sign of y-component
	     	8 y of y-component
	     */
						match[1] = match[1].toLowerCase();

						if (match[1].slice(0, 3) === "nth") {
							// nth-* requires argument
							if (!match[3]) {
								Sizzle.error(match[0]);
							}

							// numeric x and y parameters for Expr.filter.CHILD
							// remember that false/true cast respectively to 0/1
							match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
							match[5] = +(match[7] + match[8] || match[3] === "odd");

							// other types prohibit arguments
						} else if (match[3]) {
								Sizzle.error(match[0]);
							}

						return match;
					},

					"PSEUDO": function PSEUDO(match) {
						var excess,
						    unquoted = !match[6] && match[2];

						if (matchExpr["CHILD"].test(match[0])) {
							return null;
						}

						// Accept quoted arguments as-is
						if (match[3]) {
							match[2] = match[4] || match[5] || "";

							// Strip excess characters from unquoted arguments
						} else if (unquoted && rpseudo.test(unquoted) && (
							// Get excess from tokenize (recursively)
							excess = tokenize(unquoted, true)) && (
							// advance to the next closing parenthesis
							excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

								// excess is a negative index
								match[0] = match[0].slice(0, excess);
								match[2] = unquoted.slice(0, excess);
							}

						// Return only captures needed by the pseudo filter method (type and argument)
						return match.slice(0, 3);
					}
				},

				filter: {

					"TAG": function TAG(nodeNameSelector) {
						var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
						return nodeNameSelector === "*" ? function () {
							return true;
						} : function (elem) {
							return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
						};
					},

					"CLASS": function CLASS(className) {
						var pattern = classCache[className + " "];

						return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
							return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
						});
					},

					"ATTR": function ATTR(name, operator, check) {
						return function (elem) {
							var result = Sizzle.attr(elem, name);

							if (result == null) {
								return operator === "!=";
							}
							if (!operator) {
								return true;
							}

							result += "";

							return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
						};
					},

					"CHILD": function CHILD(type, what, argument, first, last) {
						var simple = type.slice(0, 3) !== "nth",
						    forward = type.slice(-4) !== "last",
						    ofType = what === "of-type";

						return first === 1 && last === 0 ?

						// Shortcut for :nth-*(n)
						function (elem) {
							return !!elem.parentNode;
						} : function (elem, context, xml) {
							var cache,
							    outerCache,
							    node,
							    diff,
							    nodeIndex,
							    start,
							    dir = simple !== forward ? "nextSibling" : "previousSibling",
							    parent = elem.parentNode,
							    name = ofType && elem.nodeName.toLowerCase(),
							    useCache = !xml && !ofType;

							if (parent) {

								// :(first|last|only)-(child|of-type)
								if (simple) {
									while (dir) {
										node = elem;
										while (node = node[dir]) {
											if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
												return false;
											}
										}
										// Reverse direction for :only-* (if we haven't yet done so)
										start = dir = type === "only" && !start && "nextSibling";
									}
									return true;
								}

								start = [forward ? parent.firstChild : parent.lastChild];

								// non-xml :nth-child(...) stores cache data on `parent`
								if (forward && useCache) {
									// Seek `elem` from a previously-cached index
									outerCache = parent[expando] || (parent[expando] = {});
									cache = outerCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = cache[0] === dirruns && cache[2];
									node = nodeIndex && parent.childNodes[nodeIndex];

									while (node = ++nodeIndex && node && node[dir] || (

									// Fallback to seeking `elem` from the start
									diff = nodeIndex = 0) || start.pop()) {

										// When found, cache indexes on `parent` and break
										if (node.nodeType === 1 && ++diff && node === elem) {
											outerCache[type] = [dirruns, nodeIndex, diff];
											break;
										}
									}

									// Use previously-cached element index if available
								} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
										diff = cache[1];

										// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
									} else {
											// Use the same loop as above to seek `elem` from the start
											while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

												if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
													// Cache the index of each encountered element
													if (useCache) {
														(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
													}

													if (node === elem) {
														break;
													}
												}
											}
										}

								// Incorporate the offset, then check against cycle size
								diff -= last;
								return diff === first || diff % first === 0 && diff / first >= 0;
							}
						};
					},

					"PSEUDO": function PSEUDO(pseudo, argument) {
						// pseudo-class names are case-insensitive
						// http://www.w3.org/TR/selectors/#pseudo-classes
						// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
						// Remember that setFilters inherits from pseudos
						var args,
						    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

						// The user may use createPseudo to indicate that
						// arguments are needed to create the filter function
						// just as Sizzle does
						if (fn[expando]) {
							return fn(argument);
						}

						// But maintain support for old signatures
						if (fn.length > 1) {
							args = [pseudo, pseudo, "", argument];
							return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
								var idx,
								    matched = fn(seed, argument),
								    i = matched.length;
								while (i--) {
									idx = indexOf(seed, matched[i]);
									seed[idx] = !(matches[idx] = matched[i]);
								}
							}) : function (elem) {
								return fn(elem, 0, args);
							};
						}

						return fn;
					}
				},

				pseudos: {
					// Potentially complex pseudos
					"not": markFunction(function (selector) {
						// Trim the selector passed to compile
						// to avoid treating leading and trailing
						// spaces as combinators
						var input = [],
						    results = [],
						    matcher = compile(selector.replace(rtrim, "$1"));

						return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
							var elem,
							    unmatched = matcher(seed, null, xml, []),
							    i = seed.length;

							// Match elements unmatched by `matcher`
							while (i--) {
								if (elem = unmatched[i]) {
									seed[i] = !(matches[i] = elem);
								}
							}
						}) : function (elem, context, xml) {
							input[0] = elem;
							matcher(input, null, xml, results);
							// Don't keep the element (issue #299)
							input[0] = null;
							return !results.pop();
						};
					}),

					"has": markFunction(function (selector) {
						return function (elem) {
							return Sizzle(selector, elem).length > 0;
						};
					}),

					"contains": markFunction(function (text) {
						text = text.replace(runescape, funescape);
						return function (elem) {
							return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
						};
					}),

					// "Whether an element is represented by a :lang() selector
					// is based solely on the element's language value
					// being equal to the identifier C,
					// or beginning with the identifier C immediately followed by "-".
					// The matching of C against the element's language value is performed case-insensitively.
					// The identifier C does not have to be a valid language name."
					// http://www.w3.org/TR/selectors/#lang-pseudo
					"lang": markFunction(function (lang) {
						// lang value must be a valid identifier
						if (!ridentifier.test(lang || "")) {
							Sizzle.error("unsupported lang: " + lang);
						}
						lang = lang.replace(runescape, funescape).toLowerCase();
						return function (elem) {
							var elemLang;
							do {
								if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

									elemLang = elemLang.toLowerCase();
									return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
								}
							} while ((elem = elem.parentNode) && elem.nodeType === 1);
							return false;
						};
					}),

					// Miscellaneous
					"target": function target(elem) {
						var hash = window.location && window.location.hash;
						return hash && hash.slice(1) === elem.id;
					},

					"root": function root(elem) {
						return elem === docElem;
					},

					"focus": function focus(elem) {
						return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
					},

					// Boolean properties
					"enabled": function enabled(elem) {
						return elem.disabled === false;
					},

					"disabled": function disabled(elem) {
						return elem.disabled === true;
					},

					"checked": function checked(elem) {
						// In CSS3, :checked should return both checked and selected elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						var nodeName = elem.nodeName.toLowerCase();
						return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
					},

					"selected": function selected(elem) {
						// Accessing this property makes selected-by-default
						// options in Safari work properly
						if (elem.parentNode) {
							elem.parentNode.selectedIndex;
						}

						return elem.selected === true;
					},

					// Contents
					"empty": function empty(elem) {
						// http://www.w3.org/TR/selectors/#empty-pseudo
						// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
						//   but not by others (comment: 8; processing instruction: 7; etc.)
						// nodeType < 6 works because attributes (2) do not appear as children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							if (elem.nodeType < 6) {
								return false;
							}
						}
						return true;
					},

					"parent": function parent(elem) {
						return !Expr.pseudos["empty"](elem);
					},

					// Element/input types
					"header": function header(elem) {
						return rheader.test(elem.nodeName);
					},

					"input": function input(elem) {
						return rinputs.test(elem.nodeName);
					},

					"button": function button(elem) {
						var name = elem.nodeName.toLowerCase();
						return name === "input" && elem.type === "button" || name === "button";
					},

					"text": function text(elem) {
						var attr;
						return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

						// Support: IE<8
						// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
						(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
					},

					// Position-in-collection
					"first": createPositionalPseudo(function () {
						return [0];
					}),

					"last": createPositionalPseudo(function (matchIndexes, length) {
						return [length - 1];
					}),

					"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
						return [argument < 0 ? argument + length : argument];
					}),

					"even": createPositionalPseudo(function (matchIndexes, length) {
						var i = 0;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"odd": createPositionalPseudo(function (matchIndexes, length) {
						var i = 1;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; --i >= 0;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; ++i < length;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					})
				}
			};

			Expr.pseudos["nth"] = Expr.pseudos["eq"];

			// Add button/input type pseudos
			for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
				Expr.pseudos[i] = createInputPseudo(i);
			}
			for (i in { submit: true, reset: true }) {
				Expr.pseudos[i] = createButtonPseudo(i);
			}

			// Easy API for creating new setFilters
			function setFilters() {}
			setFilters.prototype = Expr.filters = Expr.pseudos;
			Expr.setFilters = new setFilters();

			tokenize = Sizzle.tokenize = function (selector, parseOnly) {
				var matched,
				    match,
				    tokens,
				    type,
				    soFar,
				    groups,
				    preFilters,
				    cached = tokenCache[selector + " "];

				if (cached) {
					return parseOnly ? 0 : cached.slice(0);
				}

				soFar = selector;
				groups = [];
				preFilters = Expr.preFilter;

				while (soFar) {

					// Comma and first run
					if (!matched || (match = rcomma.exec(soFar))) {
						if (match) {
							// Don't consume trailing commas as valid
							soFar = soFar.slice(match[0].length) || soFar;
						}
						groups.push(tokens = []);
					}

					matched = false;

					// Combinators
					if (match = rcombinators.exec(soFar)) {
						matched = match.shift();
						tokens.push({
							value: matched,
							// Cast descendant combinators to space
							type: match[0].replace(rtrim, " ")
						});
						soFar = soFar.slice(matched.length);
					}

					// Filters
					for (type in Expr.filter) {
						if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
							matched = match.shift();
							tokens.push({
								value: matched,
								type: type,
								matches: match
							});
							soFar = soFar.slice(matched.length);
						}
					}

					if (!matched) {
						break;
					}
				}

				// Return the length of the invalid excess
				// if we're just parsing
				// Otherwise, throw an error or return tokens
				return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
				// Cache the tokens
				tokenCache(selector, groups).slice(0);
			};

			function toSelector(tokens) {
				var i = 0,
				    len = tokens.length,
				    selector = "";
				for (; i < len; i++) {
					selector += tokens[i].value;
				}
				return selector;
			}

			function addCombinator(matcher, combinator, base) {
				var dir = combinator.dir,
				    checkNonElements = base && dir === "parentNode",
				    doneName = done++;

				return combinator.first ?
				// Check against closest ancestor/preceding element
				function (elem, context, xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							return matcher(elem, context, xml);
						}
					}
				} :

				// Check against all ancestor/preceding elements
				function (elem, context, xml) {
					var oldCache,
					    outerCache,
					    newCache = [dirruns, doneName];

					// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
					if (xml) {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								if (matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					} else {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								outerCache = elem[expando] || (elem[expando] = {});
								if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

									// Assign to newCache so results back-propagate to previous elements
									return newCache[2] = oldCache[2];
								} else {
									// Reuse newcache so results back-propagate to previous elements
									outerCache[dir] = newCache;

									// A match means we're done; a fail means we have to keep checking
									if (newCache[2] = matcher(elem, context, xml)) {
										return true;
									}
								}
							}
						}
					}
				};
			}

			function elementMatcher(matchers) {
				return matchers.length > 1 ? function (elem, context, xml) {
					var i = matchers.length;
					while (i--) {
						if (!matchers[i](elem, context, xml)) {
							return false;
						}
					}
					return true;
				} : matchers[0];
			}

			function multipleContexts(selector, contexts, results) {
				var i = 0,
				    len = contexts.length;
				for (; i < len; i++) {
					Sizzle(selector, contexts[i], results);
				}
				return results;
			}

			function condense(unmatched, map, filter, context, xml) {
				var elem,
				    newUnmatched = [],
				    i = 0,
				    len = unmatched.length,
				    mapped = map != null;

				for (; i < len; i++) {
					if (elem = unmatched[i]) {
						if (!filter || filter(elem, context, xml)) {
							newUnmatched.push(elem);
							if (mapped) {
								map.push(i);
							}
						}
					}
				}

				return newUnmatched;
			}

			function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
				if (postFilter && !postFilter[expando]) {
					postFilter = setMatcher(postFilter);
				}
				if (postFinder && !postFinder[expando]) {
					postFinder = setMatcher(postFinder, postSelector);
				}
				return markFunction(function (seed, results, context, xml) {
					var temp,
					    i,
					    elem,
					    preMap = [],
					    postMap = [],
					    preexisting = results.length,
					   

					// Get initial elements from seed or context
					elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
					   

					// Prefilter to get matcher input, preserving a map for seed-results synchronization
					matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
					    matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || (seed ? preFilter : preexisting || postFilter) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results : matcherIn;

					// Find primary matches
					if (matcher) {
						matcher(matcherIn, matcherOut, context, xml);
					}

					// Apply postFilter
					if (postFilter) {
						temp = condense(matcherOut, postMap);
						postFilter(temp, [], context, xml);

						// Un-match failing elements by moving them back to matcherIn
						i = temp.length;
						while (i--) {
							if (elem = temp[i]) {
								matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
							}
						}
					}

					if (seed) {
						if (postFinder || preFilter) {
							if (postFinder) {
								// Get the final matcherOut by condensing this intermediate into postFinder contexts
								temp = [];
								i = matcherOut.length;
								while (i--) {
									if (elem = matcherOut[i]) {
										// Restore matcherIn since elem is not yet a final match
										temp.push(matcherIn[i] = elem);
									}
								}
								postFinder(null, matcherOut = [], temp, xml);
							}

							// Move matched elements from seed to results to keep them synchronized
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

									seed[temp] = !(results[temp] = elem);
								}
							}
						}

						// Add elements to results, through postFinder if defined
					} else {
							matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
							if (postFinder) {
								postFinder(null, results, matcherOut, xml);
							} else {
								push.apply(results, matcherOut);
							}
						}
				});
			}

			function matcherFromTokens(tokens) {
				var checkContext,
				    matcher,
				    j,
				    len = tokens.length,
				    leadingRelative = Expr.relative[tokens[0].type],
				    implicitRelative = leadingRelative || Expr.relative[" "],
				    i = leadingRelative ? 1 : 0,
				   

				// The foundational matcher ensures that elements are reachable from top-level context(s)
				matchContext = addCombinator(function (elem) {
					return elem === checkContext;
				}, implicitRelative, true),
				    matchAnyContext = addCombinator(function (elem) {
					return indexOf(checkContext, elem) > -1;
				}, implicitRelative, true),
				    matchers = [function (elem, context, xml) {
					var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
					// Avoid hanging onto element (issue #299)
					checkContext = null;
					return ret;
				}];

				for (; i < len; i++) {
					if (matcher = Expr.relative[tokens[i].type]) {
						matchers = [addCombinator(elementMatcher(matchers), matcher)];
					} else {
						matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

						// Return special upon seeing a positional matcher
						if (matcher[expando]) {
							// Find the next relative operator (if any) for proper handling
							j = ++i;
							for (; j < len; j++) {
								if (Expr.relative[tokens[j].type]) {
									break;
								}
							}
							return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
						}
						matchers.push(matcher);
					}
				}

				return elementMatcher(matchers);
			}

			function matcherFromGroupMatchers(elementMatchers, setMatchers) {
				var bySet = setMatchers.length > 0,
				    byElement = elementMatchers.length > 0,
				    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
					var elem,
					    j,
					    matcher,
					    matchedCount = 0,
					    i = "0",
					    unmatched = seed && [],
					    setMatched = [],
					    contextBackup = outermostContext,
					   
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]("*", outermost),
					   
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
					    len = elems.length;

					if (outermost) {
						outermostContext = context !== document && context;
					}

					// Add elements passing elementMatchers directly to results
					// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
					// Support: IE<9, Safari
					// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
					for (; i !== len && (elem = elems[i]) != null; i++) {
						if (byElement && elem) {
							j = 0;
							while (matcher = elementMatchers[j++]) {
								if (matcher(elem, context, xml)) {
									results.push(elem);
									break;
								}
							}
							if (outermost) {
								dirruns = dirrunsUnique;
							}
						}

						// Track unmatched elements for set filters
						if (bySet) {
							// They will have gone through all possible matchers
							if (elem = !matcher && elem) {
								matchedCount--;
							}

							// Lengthen the array for every element, matched or not
							if (seed) {
								unmatched.push(elem);
							}
						}
					}

					// Apply set filters to unmatched elements
					matchedCount += i;
					if (bySet && i !== matchedCount) {
						j = 0;
						while (matcher = setMatchers[j++]) {
							matcher(unmatched, setMatched, context, xml);
						}

						if (seed) {
							// Reintegrate element matches to eliminate the need for sorting
							if (matchedCount > 0) {
								while (i--) {
									if (!(unmatched[i] || setMatched[i])) {
										setMatched[i] = pop.call(results);
									}
								}
							}

							// Discard index placeholder values to get only actual matches
							setMatched = condense(setMatched);
						}

						// Add matches to results
						push.apply(results, setMatched);

						// Seedless set matches succeeding multiple successful matchers stipulate sorting
						if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

							Sizzle.uniqueSort(results);
						}
					}

					// Override manipulation of globals by nested matchers
					if (outermost) {
						dirruns = dirrunsUnique;
						outermostContext = contextBackup;
					}

					return unmatched;
				};

				return bySet ? markFunction(superMatcher) : superMatcher;
			}

			compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
				var i,
				    setMatchers = [],
				    elementMatchers = [],
				    cached = compilerCache[selector + " "];

				if (!cached) {
					// Generate a function of recursive functions that can be used to check each element
					if (!match) {
						match = tokenize(selector);
					}
					i = match.length;
					while (i--) {
						cached = matcherFromTokens(match[i]);
						if (cached[expando]) {
							setMatchers.push(cached);
						} else {
							elementMatchers.push(cached);
						}
					}

					// Cache the compiled function
					cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

					// Save selector and tokenization
					cached.selector = selector;
				}
				return cached;
			};

			/**
	   * A low-level selection function that works with Sizzle's compiled
	   *  selector functions
	   * @param {String|Function} selector A selector or a pre-compiled
	   *  selector function built with Sizzle.compile
	   * @param {Element} context
	   * @param {Array} [results]
	   * @param {Array} [seed] A set of elements to match against
	   */
			select = Sizzle.select = function (selector, context, results, seed) {
				var i,
				    tokens,
				    token,
				    type,
				    find,
				    compiled = typeof selector === "function" && selector,
				    match = !seed && tokenize(selector = compiled.selector || selector);

				results = results || [];

				// Try to minimize operations if there is no seed and only one group
				if (match.length === 1) {

					// Take a shortcut and set the context if the root selector is an ID
					tokens = match[0] = match[0].slice(0);
					if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

						context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
						if (!context) {
							return results;

							// Precompiled matchers will still verify ancestry, so step up a level
						} else if (compiled) {
								context = context.parentNode;
							}

						selector = selector.slice(tokens.shift().value.length);
					}

					// Fetch a seed set for right-to-left matching
					i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
					while (i--) {
						token = tokens[i];

						// Abort if we hit a combinator
						if (Expr.relative[type = token.type]) {
							break;
						}
						if (find = Expr.find[type]) {
							// Search, expanding context for leading sibling combinators
							if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

								// If seed is empty or no tokens remain, we can return early
								tokens.splice(i, 1);
								selector = seed.length && toSelector(tokens);
								if (!selector) {
									push.apply(results, seed);
									return results;
								}

								break;
							}
						}
					}
				}

				// Compile and execute a filtering function if one is not provided
				// Provide `match` to avoid retokenization if we modified the selector above
				(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
				return results;
			};

			// One-time assignments

			// Sort stability
			support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

			// Support: Chrome 14-35+
			// Always assume duplicates if they aren't passed to the comparison function
			support.detectDuplicates = !!hasDuplicate;

			// Initialize against the default document
			setDocument();

			// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
			// Detached nodes confoundingly follow *each other*
			support.sortDetached = assert(function (div1) {
				// Should return 1, but returns 4 (following)
				return div1.compareDocumentPosition(document.createElement("div")) & 1;
			});

			// Support: IE<8
			// Prevent attribute/property "interpolation"
			// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
			if (!assert(function (div) {
				div.innerHTML = "<a href='#'></a>";
				return div.firstChild.getAttribute("href") === "#";
			})) {
				addHandle("type|href|height|width", function (elem, name, isXML) {
					if (!isXML) {
						return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
					}
				});
			}

			// Support: IE<9
			// Use defaultValue in place of getAttribute("value")
			if (!support.attributes || !assert(function (div) {
				div.innerHTML = "<input/>";
				div.firstChild.setAttribute("value", "");
				return div.firstChild.getAttribute("value") === "";
			})) {
				addHandle("value", function (elem, name, isXML) {
					if (!isXML && elem.nodeName.toLowerCase() === "input") {
						return elem.defaultValue;
					}
				});
			}

			// Support: IE<9
			// Use getAttributeNode to fetch booleans when getAttribute lies
			if (!assert(function (div) {
				return div.getAttribute("disabled") == null;
			})) {
				addHandle(booleans, function (elem, name, isXML) {
					var val;
					if (!isXML) {
						return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
					}
				});
			}

			return Sizzle;
		})(window);

		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;

		var rneedsContext = jQuery.expr.match.needsContext;

		var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;

		var risSimple = /^.[^:#\[\.,]*$/;

		// Implement the identical functionality for filter and not
		function winnow(elements, qualifier, not) {
			if (jQuery.isFunction(qualifier)) {
				return jQuery.grep(elements, function (elem, i) {
					/* jshint -W018 */
					return !!qualifier.call(elem, i, elem) !== not;
				});
			}

			if (qualifier.nodeType) {
				return jQuery.grep(elements, function (elem) {
					return elem === qualifier !== not;
				});
			}

			if (typeof qualifier === "string") {
				if (risSimple.test(qualifier)) {
					return jQuery.filter(qualifier, elements, not);
				}

				qualifier = jQuery.filter(qualifier, elements);
			}

			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) >= 0 !== not;
			});
		}

		jQuery.filter = function (expr, elems, not) {
			var elem = elems[0];

			if (not) {
				expr = ":not(" + expr + ")";
			}

			return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
				return elem.nodeType === 1;
			}));
		};

		jQuery.fn.extend({
			find: function find(selector) {
				var i,
				    len = this.length,
				    ret = [],
				    self = this;

				if (typeof selector !== "string") {
					return this.pushStack(jQuery(selector).filter(function () {
						for (i = 0; i < len; i++) {
							if (jQuery.contains(self[i], this)) {
								return true;
							}
						}
					}));
				}

				for (i = 0; i < len; i++) {
					jQuery.find(selector, self[i], ret);
				}

				// Needed because $( selector, context ) becomes $( context ).find( selector )
				ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
				ret.selector = this.selector ? this.selector + " " + selector : selector;
				return ret;
			},
			filter: function filter(selector) {
				return this.pushStack(winnow(this, selector || [], false));
			},
			not: function not(selector) {
				return this.pushStack(winnow(this, selector || [], true));
			},
			is: function is(selector) {
				return !!winnow(this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
			}
		});

		// Initialize a jQuery object

		// A central reference to the root jQuery(document)
		var rootjQuery,
		   

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
		    init = jQuery.fn.init = function (selector, context) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if (!selector) {
				return this;
			}

			// Handle HTML strings
			if (typeof selector === "string") {
				if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [null, selector, null];
				} else {
					match = rquickExpr.exec(selector);
				}

				// Match html or make sure no context is specified for #id
				if (match && (match[1] || !context)) {

					// HANDLE: $(html) -> $(array)
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

						// HANDLE: $(html, props)
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							for (match in context) {
								// Properties of context are called as methods if possible
								if (jQuery.isFunction(this[match])) {
									this[match](context[match]);

									// ...and otherwise set as attributes
								} else {
										this.attr(match, context[match]);
									}
							}
						}

						return this;

						// HANDLE: $(#id)
					} else {
							elem = document.getElementById(match[2]);

							// Support: Blackberry 4.6
							// gEBID returns nodes no longer in the document (#6963)
							if (elem && elem.parentNode) {
								// Inject the element directly into the jQuery object
								this.length = 1;
								this[0] = elem;
							}

							this.context = document;
							this.selector = selector;
							return this;
						}

					// HANDLE: $(expr, $(...))
				} else if (!context || context.jquery) {
						return (context || rootjQuery).find(selector);

						// HANDLE: $(expr, context)
						// (which is just equivalent to: $(context).find(expr)
					} else {
							return this.constructor(context).find(selector);
						}

				// HANDLE: $(DOMElement)
			} else if (selector.nodeType) {
					this.context = this[0] = selector;
					this.length = 1;
					return this;

					// HANDLE: $(function)
					// Shortcut for document ready
				} else if (jQuery.isFunction(selector)) {
						return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) :
						// Execute immediately if ready is not present
						selector(jQuery);
					}

			if (selector.selector !== undefined) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray(selector, this);
		};

		// Give the init function the jQuery prototype for later instantiation
		init.prototype = jQuery.fn;

		// Initialize central reference
		rootjQuery = jQuery(document);

		var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		   
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

		jQuery.extend({
			dir: function dir(elem, _dir, until) {
				var matched = [],
				    truncate = until !== undefined;

				while ((elem = elem[_dir]) && elem.nodeType !== 9) {
					if (elem.nodeType === 1) {
						if (truncate && jQuery(elem).is(until)) {
							break;
						}
						matched.push(elem);
					}
				}
				return matched;
			},

			sibling: function sibling(n, elem) {
				var matched = [];

				for (; n; n = n.nextSibling) {
					if (n.nodeType === 1 && n !== elem) {
						matched.push(n);
					}
				}

				return matched;
			}
		});

		jQuery.fn.extend({
			has: function has(target) {
				var targets = jQuery(target, this),
				    l = targets.length;

				return this.filter(function () {
					var i = 0;
					for (; i < l; i++) {
						if (jQuery.contains(this, targets[i])) {
							return true;
						}
					}
				});
			},

			closest: function closest(selectors, context) {
				var cur,
				    i = 0,
				    l = this.length,
				    matched = [],
				    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
						// Always skip document fragments
						if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}

				return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
			},

			// Determine the position of an element within the set
			index: function index(elem) {

				// No argument, return index in parent
				if (!elem) {
					return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
				}

				// Index in selector
				if (typeof elem === "string") {
					return indexOf.call(jQuery(elem), this[0]);
				}

				// Locate the position of the desired element
				return indexOf.call(this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem);
			},

			add: function add(selector, context) {
				return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
			},

			addBack: function addBack(selector) {
				return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
			}
		});

		function sibling(cur, dir) {
			while ((cur = cur[dir]) && cur.nodeType !== 1) {}
			return cur;
		}

		jQuery.each({
			parent: function parent(elem) {
				var parent = elem.parentNode;
				return parent && parent.nodeType !== 11 ? parent : null;
			},
			parents: function parents(elem) {
				return jQuery.dir(elem, "parentNode");
			},
			parentsUntil: function parentsUntil(elem, i, until) {
				return jQuery.dir(elem, "parentNode", until);
			},
			next: function next(elem) {
				return sibling(elem, "nextSibling");
			},
			prev: function prev(elem) {
				return sibling(elem, "previousSibling");
			},
			nextAll: function nextAll(elem) {
				return jQuery.dir(elem, "nextSibling");
			},
			prevAll: function prevAll(elem) {
				return jQuery.dir(elem, "previousSibling");
			},
			nextUntil: function nextUntil(elem, i, until) {
				return jQuery.dir(elem, "nextSibling", until);
			},
			prevUntil: function prevUntil(elem, i, until) {
				return jQuery.dir(elem, "previousSibling", until);
			},
			siblings: function siblings(elem) {
				return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
			},
			children: function children(elem) {
				return jQuery.sibling(elem.firstChild);
			},
			contents: function contents(elem) {
				return elem.contentDocument || jQuery.merge([], elem.childNodes);
			}
		}, function (name, fn) {
			jQuery.fn[name] = function (until, selector) {
				var matched = jQuery.map(this, fn, until);

				if (name.slice(-5) !== "Until") {
					selector = until;
				}

				if (selector && typeof selector === "string") {
					matched = jQuery.filter(selector, matched);
				}

				if (this.length > 1) {
					// Remove duplicates
					if (!guaranteedUnique[name]) {
						jQuery.unique(matched);
					}

					// Reverse order for parents* and prev-derivatives
					if (rparentsprev.test(name)) {
						matched.reverse();
					}
				}

				return this.pushStack(matched);
			};
		});
		var rnotwhite = /\S+/g;

		// String to Object options format cache
		var optionsCache = {};

		// Convert String-formatted options into Object-formatted ones and store in cache
		function createOptions(options) {
			var object = optionsCache[options] = {};
			jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
				object[flag] = true;
			});
			return object;
		}

		/*
	  * Create a callback list using the following parameters:
	  *
	  *	options: an optional list of space-separated options that will change how
	  *			the callback list behaves or a more traditional option object
	  *
	  * By default a callback list will act like an event callback list and can be
	  * "fired" multiple times.
	  *
	  * Possible options:
	  *
	  *	once:			will ensure the callback list can only be fired once (like a Deferred)
	  *
	  *	memory:			will keep track of previous values and will call any callback added
	  *					after the list has been fired right away with the latest "memorized"
	  *					values (like a Deferred)
	  *
	  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	  *
	  *	stopOnFalse:	interrupt callings when a callback returns false
	  *
	  */
		jQuery.Callbacks = function (options) {

			// Convert options from String-formatted to Object-formatted if needed
			// (we check in cache first)
			options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);

			var // Last fire value (for non-forgettable lists)
			memory,
			   
			// Flag to know if list was already fired
			_fired,
			   
			// Flag to know if list is currently firing
			firing,
			   
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			   
			// End of the loop when firing
			firingLength,
			   
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			   
			// Actual callback list
			list = [],
			   
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			   
			// Fire callbacks
			fire = function fire(data) {
				memory = options.memory && data;
				_fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for (; list && firingIndex < firingLength; firingIndex++) {
					if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if (list) {
					if (stack) {
						if (stack.length) {
							fire(stack.shift());
						}
					} else if (memory) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			   
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function add() {
					if (list) {
						// First, we save the current length
						var start = list.length;
						(function add(args) {
							jQuery.each(args, function (_, arg) {
								var type = jQuery.type(arg);
								if (type === "function") {
									if (!options.unique || !self.has(arg)) {
										list.push(arg);
									}
								} else if (arg && arg.length && type !== "string") {
									// Inspect recursively
									add(arg);
								}
							});
						})(arguments);
						// Do we need to add the callbacks to the
						// current firing batch?
						if (firing) {
							firingLength = list.length;
							// With memory, if we're not firing then
							// we should call right away
						} else if (memory) {
								firingStart = start;
								fire(memory);
							}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function remove() {
					if (list) {
						jQuery.each(arguments, function (_, arg) {
							var index;
							while ((index = jQuery.inArray(arg, list, index)) > -1) {
								list.splice(index, 1);
								// Handle firing indexes
								if (firing) {
									if (index <= firingLength) {
										firingLength--;
									}
									if (index <= firingIndex) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function has(fn) {
					return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
				},
				// Remove all callbacks from the list
				empty: function empty() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function disable() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function disabled() {
					return !list;
				},
				// Lock the list in its current state
				lock: function lock() {
					stack = undefined;
					if (!memory) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function locked() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function fireWith(context, args) {
					if (list && (!_fired || stack)) {
						args = args || [];
						args = [context, args.slice ? args.slice() : args];
						if (firing) {
							stack.push(args);
						} else {
							fire(args);
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function fire() {
					self.fireWith(this, arguments);
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function fired() {
					return !!_fired;
				}
			};

			return self;
		};

		jQuery.extend({

			Deferred: function Deferred(func) {
				var tuples = [
				// action, add listener, listener list, final state
				["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
				    _state = "pending",
				    _promise = {
					state: function state() {
						return _state;
					},
					always: function always() {
						deferred.done(arguments).fail(arguments);
						return this;
					},
					then: function then() /* fnDone, fnFail, fnProgress */{
						var fns = arguments;
						return jQuery.Deferred(function (newDefer) {
							jQuery.each(tuples, function (i, tuple) {
								var fn = jQuery.isFunction(fns[i]) && fns[i];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[tuple[1]](function () {
									var returned = fn && fn.apply(this, arguments);
									if (returned && jQuery.isFunction(returned.promise)) {
										returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
									} else {
										newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function promise(obj) {
						return obj != null ? jQuery.extend(obj, _promise) : _promise;
					}
				},
				    deferred = {};

				// Keep pipe for back-compat
				_promise.pipe = _promise.then;

				// Add list-specific methods
				jQuery.each(tuples, function (i, tuple) {
					var list = tuple[2],
					    stateString = tuple[3];

					// promise[ done | fail | progress ] = list.add
					_promise[tuple[1]] = list.add;

					// Handle state
					if (stateString) {
						list.add(function () {
							// state = [ resolved | rejected ]
							_state = stateString;

							// [ reject_list | resolve_list ].disable; progress_list.lock
						}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
					}

					// deferred[ resolve | reject | notify ]
					deferred[tuple[0]] = function () {
						deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
						return this;
					};
					deferred[tuple[0] + "With"] = list.fireWith;
				});

				// Make the deferred a promise
				_promise.promise(deferred);

				// Call given func if any
				if (func) {
					func.call(deferred, deferred);
				}

				// All done!
				return deferred;
			},

			// Deferred helper
			when: function when(subordinate /* , ..., subordinateN */) {
				var i = 0,
				    resolveValues = _slice.call(arguments),
				    length = resolveValues.length,
				   

				// the count of uncompleted subordinates
				remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
				   

				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
				   

				// Update function for both resolve and progress values
				updateFunc = function updateFunc(i, contexts, values) {
					return function (value) {
						contexts[i] = this;
						values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
						if (values === progressValues) {
							deferred.notifyWith(contexts, values);
						} else if (! --remaining) {
							deferred.resolveWith(contexts, values);
						}
					};
				},
				    progressValues,
				    progressContexts,
				    resolveContexts;

				// Add listeners to Deferred subordinates; treat others as resolved
				if (length > 1) {
					progressValues = new Array(length);
					progressContexts = new Array(length);
					resolveContexts = new Array(length);
					for (; i < length; i++) {
						if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
							resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
						} else {
							--remaining;
						}
					}
				}

				// If we're not waiting on anything, resolve the master
				if (!remaining) {
					deferred.resolveWith(resolveContexts, resolveValues);
				}

				return deferred.promise();
			}
		});

		// The deferred used on DOM ready
		var readyList;

		jQuery.fn.ready = function (fn) {
			// Add the callback
			jQuery.ready.promise().done(fn);

			return this;
		};

		jQuery.extend({
			// Is the DOM ready to be used? Set to true once it occurs.
			isReady: false,

			// A counter to track how many items to wait for before
			// the ready event fires. See #6781
			readyWait: 1,

			// Hold (or release) the ready event
			holdReady: function holdReady(hold) {
				if (hold) {
					jQuery.readyWait++;
				} else {
					jQuery.ready(true);
				}
			},

			// Handle when the DOM is ready
			ready: function ready(wait) {

				// Abort if there are pending holds or we're already ready
				if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
					return;
				}

				// Remember that the DOM is ready
				jQuery.isReady = true;

				// If a normal DOM Ready event fired, decrement, and wait if need be
				if (wait !== true && --jQuery.readyWait > 0) {
					return;
				}

				// If there are functions bound, to execute
				readyList.resolveWith(document, [jQuery]);

				// Trigger any bound ready events
				if (jQuery.fn.triggerHandler) {
					jQuery(document).triggerHandler("ready");
					jQuery(document).off("ready");
				}
			}
		});

		/**
	  * The ready event handler and self cleanup method
	  */
		function completed() {
			document.removeEventListener("DOMContentLoaded", completed, false);
			window.removeEventListener("load", completed, false);
			jQuery.ready();
		}

		jQuery.ready.promise = function (obj) {
			if (!readyList) {

				readyList = jQuery.Deferred();

				// Catch cases where $(document).ready() is called after the browser event has already occurred.
				// We once tried to use readyState "interactive" here, but it caused issues like the one
				// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
				if (document.readyState === "complete") {
					// Handle it asynchronously to allow scripts the opportunity to delay ready
					setTimeout(jQuery.ready);
				} else {

					// Use the handy event callback
					document.addEventListener("DOMContentLoaded", completed, false);

					// A fallback to window.onload, that will always work
					window.addEventListener("load", completed, false);
				}
			}
			return readyList.promise(obj);
		};

		// Kick off the DOM ready check even if the user does not
		jQuery.ready.promise();

		// Multifunctional method to get and set values of a collection
		// The value/s can optionally be executed if it's a function
		var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
			var i = 0,
			    len = elems.length,
			    bulk = key == null;

			// Sets many values
			if (jQuery.type(key) === "object") {
				chainable = true;
				for (i in key) {
					jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
				}

				// Sets one value
			} else if (value !== undefined) {
					chainable = true;

					if (!jQuery.isFunction(value)) {
						raw = true;
					}

					if (bulk) {
						// Bulk operations run against the entire set
						if (raw) {
							fn.call(elems, value);
							fn = null;

							// ...except when executing function values
						} else {
								bulk = fn;
								fn = function (elem, key, value) {
									return bulk.call(jQuery(elem), value);
								};
							}
					}

					if (fn) {
						for (; i < len; i++) {
							fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
						}
					}
				}

			return chainable ? elems :

			// Gets
			bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
		};

		/**
	  * Determines whether an object can have data
	  */
		jQuery.acceptData = function (owner) {
			// Accepts only:
			//  - Node
			//    - Node.ELEMENT_NODE
			//    - Node.DOCUMENT_NODE
			//  - Object
			//    - Any
			/* jshint -W018 */
			return owner.nodeType === 1 || owner.nodeType === 9 || ! +owner.nodeType;
		};

		function Data() {
			// Support: Android<4,
			// Old WebKit does not have Object.preventExtensions/freeze method,
			// return new empty object instead with no [[set]] accessor
			Object.defineProperty(this.cache = {}, 0, {
				get: function get() {
					return {};
				}
			});

			this.expando = jQuery.expando + Data.uid++;
		}

		Data.uid = 1;
		Data.accepts = jQuery.acceptData;

		Data.prototype = {
			key: function key(owner) {
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return the key for a frozen object.
				if (!Data.accepts(owner)) {
					return 0;
				}

				var descriptor = {},
				   
				// Check if the owner object already has a cache key
				unlock = owner[this.expando];

				// If not, create one
				if (!unlock) {
					unlock = Data.uid++;

					// Secure it in a non-enumerable, non-writable property
					try {
						descriptor[this.expando] = { value: unlock };
						Object.defineProperties(owner, descriptor);

						// Support: Android<4
						// Fallback to a less secure definition
					} catch (e) {
						descriptor[this.expando] = unlock;
						jQuery.extend(owner, descriptor);
					}
				}

				// Ensure the cache object
				if (!this.cache[unlock]) {
					this.cache[unlock] = {};
				}

				return unlock;
			},
			set: function set(owner, data, value) {
				var prop,
				   
				// There may be an unlock assigned to this node,
				// if there is no entry for this "owner", create one inline
				// and set the unlock as though an owner entry had always existed
				unlock = this.key(owner),
				    cache = this.cache[unlock];

				// Handle: [ owner, key, value ] args
				if (typeof data === "string") {
					cache[data] = value;

					// Handle: [ owner, { properties } ] args
				} else {
						// Fresh assignments by object are shallow copied
						if (jQuery.isEmptyObject(cache)) {
							jQuery.extend(this.cache[unlock], data);
							// Otherwise, copy the properties one-by-one to the cache object
						} else {
								for (prop in data) {
									cache[prop] = data[prop];
								}
							}
					}
				return cache;
			},
			get: function get(owner, key) {
				// Either a valid cache is found, or will be created.
				// New caches will be created and the unlock returned,
				// allowing direct access to the newly created
				// empty data object. A valid owner object must be provided.
				var cache = this.cache[this.key(owner)];

				return key === undefined ? cache : cache[key];
			},
			access: function access(owner, key, value) {
				var stored;
				// In cases where either:
				//
				//   1. No key was specified
				//   2. A string key was specified, but no value provided
				//
				// Take the "read" path and allow the get method to determine
				// which value to return, respectively either:
				//
				//   1. The entire cache object
				//   2. The data stored at the key
				//
				if (key === undefined || key && typeof key === "string" && value === undefined) {

					stored = this.get(owner, key);

					return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
				}

				// [*]When the key is not a string, or both a key and value
				// are specified, set or extend (existing objects) with either:
				//
				//   1. An object of properties
				//   2. A key and value
				//
				this.set(owner, key, value);

				// Since the "set" path can have two possible entry points
				// return the expected data based on which path was taken[*]
				return value !== undefined ? value : key;
			},
			remove: function remove(owner, key) {
				var i,
				    name,
				    camel,
				    unlock = this.key(owner),
				    cache = this.cache[unlock];

				if (key === undefined) {
					this.cache[unlock] = {};
				} else {
					// Support array or space separated string of keys
					if (jQuery.isArray(key)) {
						// If "name" is an array of keys...
						// When data is initially created, via ("key", "val") signature,
						// keys will be converted to camelCase.
						// Since there is no way to tell _how_ a key was added, remove
						// both plain key and camelCase key. #12786
						// This will only penalize the array argument path.
						name = key.concat(key.map(jQuery.camelCase));
					} else {
						camel = jQuery.camelCase(key);
						// Try the string as a key before any manipulation
						if (key in cache) {
							name = [key, camel];
						} else {
							// If a key with the spaces exists, use it.
							// Otherwise, create an array by matching non-whitespace
							name = camel;
							name = name in cache ? [name] : name.match(rnotwhite) || [];
						}
					}

					i = name.length;
					while (i--) {
						delete cache[name[i]];
					}
				}
			},
			hasData: function hasData(owner) {
				return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
			},
			discard: function discard(owner) {
				if (owner[this.expando]) {
					delete this.cache[owner[this.expando]];
				}
			}
		};
		var data_priv = new Data();

		var data_user = new Data();

		//	Implementation Summary
		//
		//	1. Enforce API surface and semantic compatibility with 1.9.x branch
		//	2. Improve the module's maintainability by reducing the storage
		//		paths to a single mechanism.
		//	3. Use the same single mechanism to support "private" and "user" data.
		//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
		//	5. Avoid exposing implementation details on user objects (eg. expando properties)
		//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

		var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		    rmultiDash = /([A-Z])/g;

		function dataAttr(elem, key, data) {
			var name;

			// If nothing was found internally, try to fetch any
			// data from the HTML5 data-* attribute
			if (data === undefined && elem.nodeType === 1) {
				name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
				data = elem.getAttribute(name);

				if (typeof data === "string") {
					try {
						data = data === "true" ? true : data === "false" ? false : data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
					} catch (e) {}

					// Make sure we set the data so it isn't changed later
					data_user.set(elem, key, data);
				} else {
					data = undefined;
				}
			}
			return data;
		}

		jQuery.extend({
			hasData: function hasData(elem) {
				return data_user.hasData(elem) || data_priv.hasData(elem);
			},

			data: function data(elem, name, _data) {
				return data_user.access(elem, name, _data);
			},

			removeData: function removeData(elem, name) {
				data_user.remove(elem, name);
			},

			// TODO: Now that all calls to _data and _removeData have been replaced
			// with direct calls to data_priv methods, these can be deprecated.
			_data: function _data(elem, name, data) {
				return data_priv.access(elem, name, data);
			},

			_removeData: function _removeData(elem, name) {
				data_priv.remove(elem, name);
			}
		});

		jQuery.fn.extend({
			data: function data(key, value) {
				var i,
				    name,
				    data,
				    elem = this[0],
				    attrs = elem && elem.attributes;

				// Gets all values
				if (key === undefined) {
					if (this.length) {
						data = data_user.get(elem);

						if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
							i = attrs.length;
							while (i--) {

								// Support: IE11+
								// The attrs elements can be null (#14894)
								if (attrs[i]) {
									name = attrs[i].name;
									if (name.indexOf("data-") === 0) {
										name = jQuery.camelCase(name.slice(5));
										dataAttr(elem, name, data[name]);
									}
								}
							}
							data_priv.set(elem, "hasDataAttrs", true);
						}
					}

					return data;
				}

				// Sets multiple values
				if (typeof key === "object") {
					return this.each(function () {
						data_user.set(this, key);
					});
				}

				return access(this, function (value) {
					var data,
					    camelKey = jQuery.camelCase(key);

					// The calling jQuery object (element matches) is not empty
					// (and therefore has an element appears at this[ 0 ]) and the
					// `value` parameter was not undefined. An empty jQuery object
					// will result in `undefined` for elem = this[ 0 ] which will
					// throw an exception if an attempt to read a data cache is made.
					if (elem && value === undefined) {
						// Attempt to get data from the cache
						// with the key as-is
						data = data_user.get(elem, key);
						if (data !== undefined) {
							return data;
						}

						// Attempt to get data from the cache
						// with the key camelized
						data = data_user.get(elem, camelKey);
						if (data !== undefined) {
							return data;
						}

						// Attempt to "discover" the data in
						// HTML5 custom data-* attrs
						data = dataAttr(elem, camelKey, undefined);
						if (data !== undefined) {
							return data;
						}

						// We tried really hard, but the data doesn't exist.
						return;
					}

					// Set the data...
					this.each(function () {
						// First, attempt to store a copy or reference of any
						// data that might've been store with a camelCased key.
						var data = data_user.get(this, camelKey);

						// For HTML5 data-* attribute interop, we have to
						// store property names with dashes in a camelCase form.
						// This might not apply to all properties...*
						data_user.set(this, camelKey, value);

						// *... In the case of properties that might _actually_
						// have dashes, we need to also store a copy of that
						// unchanged property.
						if (key.indexOf("-") !== -1 && data !== undefined) {
							data_user.set(this, key, value);
						}
					});
				}, null, value, arguments.length > 1, null, true);
			},

			removeData: function removeData(key) {
				return this.each(function () {
					data_user.remove(this, key);
				});
			}
		});

		jQuery.extend({
			queue: function queue(elem, type, data) {
				var queue;

				if (elem) {
					type = (type || "fx") + "queue";
					queue = data_priv.get(elem, type);

					// Speed up dequeue by getting out quickly if this is just a lookup
					if (data) {
						if (!queue || jQuery.isArray(data)) {
							queue = data_priv.access(elem, type, jQuery.makeArray(data));
						} else {
							queue.push(data);
						}
					}
					return queue || [];
				}
			},

			dequeue: function dequeue(elem, type) {
				type = type || "fx";

				var queue = jQuery.queue(elem, type),
				    startLength = queue.length,
				    fn = queue.shift(),
				    hooks = jQuery._queueHooks(elem, type),
				    next = function next() {
					jQuery.dequeue(elem, type);
				};

				// If the fx queue is dequeued, always remove the progress sentinel
				if (fn === "inprogress") {
					fn = queue.shift();
					startLength--;
				}

				if (fn) {

					// Add a progress sentinel to prevent the fx queue from being
					// automatically dequeued
					if (type === "fx") {
						queue.unshift("inprogress");
					}

					// Clear up the last queue stop function
					delete hooks.stop;
					fn.call(elem, next, hooks);
				}

				if (!startLength && hooks) {
					hooks.empty.fire();
				}
			},

			// Not public - generate a queueHooks object, or return the current one
			_queueHooks: function _queueHooks(elem, type) {
				var key = type + "queueHooks";
				return data_priv.get(elem, key) || data_priv.access(elem, key, {
					empty: jQuery.Callbacks("once memory").add(function () {
						data_priv.remove(elem, [type + "queue", key]);
					})
				});
			}
		});

		jQuery.fn.extend({
			queue: function queue(type, data) {
				var setter = 2;

				if (typeof type !== "string") {
					data = type;
					type = "fx";
					setter--;
				}

				if (arguments.length < setter) {
					return jQuery.queue(this[0], type);
				}

				return data === undefined ? this : this.each(function () {
					var queue = jQuery.queue(this, type, data);

					// Ensure a hooks for this queue
					jQuery._queueHooks(this, type);

					if (type === "fx" && queue[0] !== "inprogress") {
						jQuery.dequeue(this, type);
					}
				});
			},
			dequeue: function dequeue(type) {
				return this.each(function () {
					jQuery.dequeue(this, type);
				});
			},
			clearQueue: function clearQueue(type) {
				return this.queue(type || "fx", []);
			},
			// Get a promise resolved when queues of a certain type
			// are emptied (fx is the type by default)
			promise: function promise(type, obj) {
				var tmp,
				    count = 1,
				    defer = jQuery.Deferred(),
				    elements = this,
				    i = this.length,
				    resolve = function resolve() {
					if (! --count) {
						defer.resolveWith(elements, [elements]);
					}
				};

				if (typeof type !== "string") {
					obj = type;
					type = undefined;
				}
				type = type || "fx";

				while (i--) {
					tmp = data_priv.get(elements[i], type + "queueHooks");
					if (tmp && tmp.empty) {
						count++;
						tmp.empty.add(resolve);
					}
				}
				resolve();
				return defer.promise(obj);
			}
		});
		var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

		var cssExpand = ["Top", "Right", "Bottom", "Left"];

		var isHidden = function isHidden(elem, el) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
		};

		var rcheckableType = /^(?:checkbox|radio)$/i;

		(function () {
			var fragment = document.createDocumentFragment(),
			    div = fragment.appendChild(document.createElement("div")),
			    input = document.createElement("input");

			// Support: Safari<=5.1
			// Check state lost if the name is set (#11217)
			// Support: Windows Web Apps (WWA)
			// `name` and `type` must use .setAttribute for WWA (#14901)
			input.setAttribute("type", "radio");
			input.setAttribute("checked", "checked");
			input.setAttribute("name", "t");

			div.appendChild(input);

			// Support: Safari<=5.1, Android<4.2
			// Older WebKit doesn't clone checked state correctly in fragments
			support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

			// Support: IE<=11+
			// Make sure textarea (and checkbox) defaultValue is properly cloned
			div.innerHTML = "<textarea>x</textarea>";
			support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
		})();
		var strundefined = typeof undefined;

		support.focusinBubbles = "onfocusin" in window;

		var rkeyEvent = /^key/,
		    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
		    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

		function returnTrue() {
			return true;
		}

		function returnFalse() {
			return false;
		}

		function safeActiveElement() {
			try {
				return document.activeElement;
			} catch (err) {}
		}

		/*
	  * Helper functions for managing events -- not part of the public interface.
	  * Props to Dean Edwards' addEvent library for many of the ideas.
	  */
		jQuery.event = {

			global: {},

			add: function add(elem, types, handler, data, selector) {

				var handleObjIn,
				    eventHandle,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = data_priv.get(elem);

				// Don't attach events to noData or text/comment nodes (but allow plain objects)
				if (!elemData) {
					return;
				}

				// Caller can pass in an object of custom data in lieu of the handler
				if (handler.handler) {
					handleObjIn = handler;
					handler = handleObjIn.handler;
					selector = handleObjIn.selector;
				}

				// Make sure that the handler has a unique ID, used to find/remove it later
				if (!handler.guid) {
					handler.guid = jQuery.guid++;
				}

				// Init the element's event structure and main handler, if this is the first
				if (!(events = elemData.events)) {
					events = elemData.events = {};
				}
				if (!(eventHandle = elemData.handle)) {
					eventHandle = elemData.handle = function (e) {
						// Discard the second event of a jQuery.event.trigger() and
						// when an event is called after a page has unloaded
						return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
					};
				}

				// Handle multiple events separated by a space
				types = (types || "").match(rnotwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// There *must* be a type, no attaching namespace-only handlers
					if (!type) {
						continue;
					}

					// If event changes its type, use the special event handlers for the changed type
					special = jQuery.event.special[type] || {};

					// If selector defined, determine special event api type, otherwise given type
					type = (selector ? special.delegateType : special.bindType) || type;

					// Update special based on newly reset type
					special = jQuery.event.special[type] || {};

					// handleObj is passed to all event handlers
					handleObj = jQuery.extend({
						type: type,
						origType: origType,
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
						namespace: namespaces.join(".")
					}, handleObjIn);

					// Init the event handler queue if we're the first
					if (!(handlers = events[type])) {
						handlers = events[type] = [];
						handlers.delegateCount = 0;

						// Only use addEventListener if the special events handler returns false
						if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
							if (elem.addEventListener) {
								elem.addEventListener(type, eventHandle, false);
							}
						}
					}

					if (special.add) {
						special.add.call(elem, handleObj);

						if (!handleObj.handler.guid) {
							handleObj.handler.guid = handler.guid;
						}
					}

					// Add to the element's handler list, delegates in front
					if (selector) {
						handlers.splice(handlers.delegateCount++, 0, handleObj);
					} else {
						handlers.push(handleObj);
					}

					// Keep track of which events have ever been used, for event optimization
					jQuery.event.global[type] = true;
				}
			},

			// Detach an event or set of events from an element
			remove: function remove(elem, types, handler, selector, mappedTypes) {

				var j,
				    origCount,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = data_priv.hasData(elem) && data_priv.get(elem);

				if (!elemData || !(events = elemData.events)) {
					return;
				}

				// Once for each type.namespace in types; type may be omitted
				types = (types || "").match(rnotwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// Unbind all events (on this namespace, if provided) for the element
					if (!type) {
						for (type in events) {
							jQuery.event.remove(elem, type + types[t], handler, selector, true);
						}
						continue;
					}

					special = jQuery.event.special[type] || {};
					type = (selector ? special.delegateType : special.bindType) || type;
					handlers = events[type] || [];
					tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

					// Remove matching events
					origCount = j = handlers.length;
					while (j--) {
						handleObj = handlers[j];

						if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
							handlers.splice(j, 1);

							if (handleObj.selector) {
								handlers.delegateCount--;
							}
							if (special.remove) {
								special.remove.call(elem, handleObj);
							}
						}
					}

					// Remove generic event handler if we removed something and no more handlers exist
					// (avoids potential for endless recursion during removal of special event handlers)
					if (origCount && !handlers.length) {
						if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
							jQuery.removeEvent(elem, type, elemData.handle);
						}

						delete events[type];
					}
				}

				// Remove the expando if it's no longer used
				if (jQuery.isEmptyObject(events)) {
					delete elemData.handle;
					data_priv.remove(elem, "events");
				}
			},

			trigger: function trigger(event, data, elem, onlyHandlers) {

				var i,
				    cur,
				    tmp,
				    bubbleType,
				    ontype,
				    handle,
				    special,
				    eventPath = [elem || document],
				    type = hasOwn.call(event, "type") ? event.type : event,
				    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

				cur = tmp = elem = elem || document;

				// Don't do events on text and comment nodes
				if (elem.nodeType === 3 || elem.nodeType === 8) {
					return;
				}

				// focus/blur morphs to focusin/out; ensure we're not firing them right now
				if (rfocusMorph.test(type + jQuery.event.triggered)) {
					return;
				}

				if (type.indexOf(".") >= 0) {
					// Namespaced trigger; create a regexp to match event type in handle()
					namespaces = type.split(".");
					type = namespaces.shift();
					namespaces.sort();
				}
				ontype = type.indexOf(":") < 0 && "on" + type;

				// Caller can pass in a jQuery.Event object, Object, or just an event type string
				event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);

				// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
				event.isTrigger = onlyHandlers ? 2 : 3;
				event.namespace = namespaces.join(".");
				event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

				// Clean up the event in case it is being reused
				event.result = undefined;
				if (!event.target) {
					event.target = elem;
				}

				// Clone any incoming data and prepend the event, creating the handler arg list
				data = data == null ? [event] : jQuery.makeArray(data, [event]);

				// Allow special events to draw outside the lines
				special = jQuery.event.special[type] || {};
				if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
					return;
				}

				// Determine event propagation path in advance, per W3C events spec (#9951)
				// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
				if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

					bubbleType = special.delegateType || type;
					if (!rfocusMorph.test(bubbleType + type)) {
						cur = cur.parentNode;
					}
					for (; cur; cur = cur.parentNode) {
						eventPath.push(cur);
						tmp = cur;
					}

					// Only add window if we got to document (e.g., not plain obj or detached DOM)
					if (tmp === (elem.ownerDocument || document)) {
						eventPath.push(tmp.defaultView || tmp.parentWindow || window);
					}
				}

				// Fire handlers on the event path
				i = 0;
				while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

					event.type = i > 1 ? bubbleType : special.bindType || type;

					// jQuery handler
					handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
					if (handle) {
						handle.apply(cur, data);
					}

					// Native handler
					handle = ontype && cur[ontype];
					if (handle && handle.apply && jQuery.acceptData(cur)) {
						event.result = handle.apply(cur, data);
						if (event.result === false) {
							event.preventDefault();
						}
					}
				}
				event.type = type;

				// If nobody prevented the default action, do it now
				if (!onlyHandlers && !event.isDefaultPrevented()) {

					if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {

						// Call a native DOM method on the target with the same name name as the event.
						// Don't do default actions on window, that's where global variables be (#6170)
						if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

							// Don't re-trigger an onFOO event when we call its FOO() method
							tmp = elem[ontype];

							if (tmp) {
								elem[ontype] = null;
							}

							// Prevent re-triggering of the same event, since we already bubbled it above
							jQuery.event.triggered = type;
							elem[type]();
							jQuery.event.triggered = undefined;

							if (tmp) {
								elem[ontype] = tmp;
							}
						}
					}
				}

				return event.result;
			},

			dispatch: function dispatch(event) {

				// Make a writable jQuery.Event from the native event object
				event = jQuery.event.fix(event);

				var i,
				    j,
				    ret,
				    matched,
				    handleObj,
				    handlerQueue = [],
				    args = _slice.call(arguments),
				    handlers = (data_priv.get(this, "events") || {})[event.type] || [],
				    special = jQuery.event.special[event.type] || {};

				// Use the fix-ed jQuery.Event rather than the (read-only) native event
				args[0] = event;
				event.delegateTarget = this;

				// Call the preDispatch hook for the mapped type, and let it bail if desired
				if (special.preDispatch && special.preDispatch.call(this, event) === false) {
					return;
				}

				// Determine handlers
				handlerQueue = jQuery.event.handlers.call(this, event, handlers);

				// Run delegates first; they may want to stop propagation beneath us
				i = 0;
				while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
					event.currentTarget = matched.elem;

					j = 0;
					while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

						// Triggered event must either 1) have no namespace, or 2) have namespace(s)
						// a subset or equal to those in the bound event (both can have no namespace).
						if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

							event.handleObj = handleObj;
							event.data = handleObj.data;

							ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

							if (ret !== undefined) {
								if ((event.result = ret) === false) {
									event.preventDefault();
									event.stopPropagation();
								}
							}
						}
					}
				}

				// Call the postDispatch hook for the mapped type
				if (special.postDispatch) {
					special.postDispatch.call(this, event);
				}

				return event.result;
			},

			handlers: function handlers(event, _handlers) {
				var i,
				    matches,
				    sel,
				    handleObj,
				    handlerQueue = [],
				    delegateCount = _handlers.delegateCount,
				    cur = event.target;

				// Find delegate handlers
				// Black-hole SVG <use> instance trees (#13180)
				// Avoid non-left-click bubbling in Firefox (#3861)
				if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

					for (; cur !== this; cur = cur.parentNode || this) {

						// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
						if (cur.disabled !== true || event.type !== "click") {
							matches = [];
							for (i = 0; i < delegateCount; i++) {
								handleObj = _handlers[i];

								// Don't conflict with Object.prototype properties (#13203)
								sel = handleObj.selector + " ";

								if (matches[sel] === undefined) {
									matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
								}
								if (matches[sel]) {
									matches.push(handleObj);
								}
							}
							if (matches.length) {
								handlerQueue.push({ elem: cur, handlers: matches });
							}
						}
					}
				}

				// Add the remaining (directly-bound) handlers
				if (delegateCount < _handlers.length) {
					handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
				}

				return handlerQueue;
			},

			// Includes some event props shared by KeyEvent and MouseEvent
			props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

			fixHooks: {},

			keyHooks: {
				props: "char charCode key keyCode".split(" "),
				filter: function filter(event, original) {

					// Add which for key events
					if (event.which == null) {
						event.which = original.charCode != null ? original.charCode : original.keyCode;
					}

					return event;
				}
			},

			mouseHooks: {
				props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
				filter: function filter(event, original) {
					var eventDoc,
					    doc,
					    body,
					    button = original.button;

					// Calculate pageX/Y if missing and clientX/Y available
					if (event.pageX == null && original.clientX != null) {
						eventDoc = event.target.ownerDocument || document;
						doc = eventDoc.documentElement;
						body = eventDoc.body;

						event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
						event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
					}

					// Add which for click: 1 === left; 2 === middle; 3 === right
					// Note: button is not normalized, so don't use it
					if (!event.which && button !== undefined) {
						event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
					}

					return event;
				}
			},

			fix: function fix(event) {
				if (event[jQuery.expando]) {
					return event;
				}

				// Create a writable copy of the event object and normalize some properties
				var i,
				    prop,
				    copy,
				    type = event.type,
				    originalEvent = event,
				    fixHook = this.fixHooks[type];

				if (!fixHook) {
					this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
				}
				copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

				event = new jQuery.Event(originalEvent);

				i = copy.length;
				while (i--) {
					prop = copy[i];
					event[prop] = originalEvent[prop];
				}

				// Support: Cordova 2.5 (WebKit) (#13255)
				// All events should have a target; Cordova deviceready doesn't
				if (!event.target) {
					event.target = document;
				}

				// Support: Safari 6.0+, Chrome<28
				// Target should not be a text node (#504, #13143)
				if (event.target.nodeType === 3) {
					event.target = event.target.parentNode;
				}

				return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
			},

			special: {
				load: {
					// Prevent triggered image.load events from bubbling to window.load
					noBubble: true
				},
				focus: {
					// Fire native event if possible so blur/focus sequence is correct
					trigger: function trigger() {
						if (this !== safeActiveElement() && this.focus) {
							this.focus();
							return false;
						}
					},
					delegateType: "focusin"
				},
				blur: {
					trigger: function trigger() {
						if (this === safeActiveElement() && this.blur) {
							this.blur();
							return false;
						}
					},
					delegateType: "focusout"
				},
				click: {
					// For checkbox, fire native event so checked state will be right
					trigger: function trigger() {
						if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
							this.click();
							return false;
						}
					},

					// For cross-browser consistency, don't fire native .click() on links
					_default: function _default(event) {
						return jQuery.nodeName(event.target, "a");
					}
				},

				beforeunload: {
					postDispatch: function postDispatch(event) {

						// Support: Firefox 20+
						// Firefox doesn't alert if the returnValue field is not set.
						if (event.result !== undefined && event.originalEvent) {
							event.originalEvent.returnValue = event.result;
						}
					}
				}
			},

			simulate: function simulate(type, elem, event, bubble) {
				// Piggyback on a donor event to simulate a different one.
				// Fake originalEvent to avoid donor's stopPropagation, but if the
				// simulated event prevents default then we do the same on the donor.
				var e = jQuery.extend(new jQuery.Event(), event, {
					type: type,
					isSimulated: true,
					originalEvent: {}
				});
				if (bubble) {
					jQuery.event.trigger(e, null, elem);
				} else {
					jQuery.event.dispatch.call(elem, e);
				}
				if (e.isDefaultPrevented()) {
					event.preventDefault();
				}
			}
		};

		jQuery.removeEvent = function (elem, type, handle) {
			if (elem.removeEventListener) {
				elem.removeEventListener(type, handle, false);
			}
		};

		jQuery.Event = function (src, props) {
			// Allow instantiation without the 'new' keyword
			if (!(this instanceof jQuery.Event)) {
				return new jQuery.Event(src, props);
			}

			// Event object
			if (src && src.type) {
				this.originalEvent = src;
				this.type = src.type;

				// Events bubbling up the document may have been marked as prevented
				// by a handler lower down the tree; reflect the correct value.
				this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ? returnTrue : returnFalse;

				// Event type
			} else {
					this.type = src;
				}

			// Put explicitly provided properties onto the event object
			if (props) {
				jQuery.extend(this, props);
			}

			// Create a timestamp if incoming event doesn't have one
			this.timeStamp = src && src.timeStamp || jQuery.now();

			// Mark it as fixed
			this[jQuery.expando] = true;
		};

		// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
		// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
		jQuery.Event.prototype = {
			isDefaultPrevented: returnFalse,
			isPropagationStopped: returnFalse,
			isImmediatePropagationStopped: returnFalse,

			preventDefault: function preventDefault() {
				var e = this.originalEvent;

				this.isDefaultPrevented = returnTrue;

				if (e && e.preventDefault) {
					e.preventDefault();
				}
			},
			stopPropagation: function stopPropagation() {
				var e = this.originalEvent;

				this.isPropagationStopped = returnTrue;

				if (e && e.stopPropagation) {
					e.stopPropagation();
				}
			},
			stopImmediatePropagation: function stopImmediatePropagation() {
				var e = this.originalEvent;

				this.isImmediatePropagationStopped = returnTrue;

				if (e && e.stopImmediatePropagation) {
					e.stopImmediatePropagation();
				}

				this.stopPropagation();
			}
		};

		// Create mouseenter/leave events using mouseover/out and event-time checks
		// Support: Chrome 15+
		jQuery.each({
			mouseenter: "mouseover",
			mouseleave: "mouseout",
			pointerenter: "pointerover",
			pointerleave: "pointerout"
		}, function (orig, fix) {
			jQuery.event.special[orig] = {
				delegateType: fix,
				bindType: fix,

				handle: function handle(event) {
					var ret,
					    target = this,
					    related = event.relatedTarget,
					    handleObj = event.handleObj;

					// For mousenter/leave call the handler if related is outside the target.
					// NB: No relatedTarget if the mouse left/entered the browser window
					if (!related || related !== target && !jQuery.contains(target, related)) {
						event.type = handleObj.origType;
						ret = handleObj.handler.apply(this, arguments);
						event.type = fix;
					}
					return ret;
				}
			};
		});

		// Support: Firefox, Chrome, Safari
		// Create "bubbling" focus and blur events
		if (!support.focusinBubbles) {
			jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

				// Attach a single capturing handler on the document while someone wants focusin/focusout
				var handler = function handler(event) {
					jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
				};

				jQuery.event.special[fix] = {
					setup: function setup() {
						var doc = this.ownerDocument || this,
						    attaches = data_priv.access(doc, fix);

						if (!attaches) {
							doc.addEventListener(orig, handler, true);
						}
						data_priv.access(doc, fix, (attaches || 0) + 1);
					},
					teardown: function teardown() {
						var doc = this.ownerDocument || this,
						    attaches = data_priv.access(doc, fix) - 1;

						if (!attaches) {
							doc.removeEventListener(orig, handler, true);
							data_priv.remove(doc, fix);
						} else {
							data_priv.access(doc, fix, attaches);
						}
					}
				};
			});
		}

		jQuery.fn.extend({

			on: function on(types, selector, data, fn, /*INTERNAL*/one) {
				var origFn, type;

				// Types can be a map of types/handlers
				if (typeof types === "object") {
					// ( types-Object, selector, data )
					if (typeof selector !== "string") {
						// ( types-Object, data )
						data = data || selector;
						selector = undefined;
					}
					for (type in types) {
						this.on(type, selector, data, types[type], one);
					}
					return this;
				}

				if (data == null && fn == null) {
					// ( types, fn )
					fn = selector;
					data = selector = undefined;
				} else if (fn == null) {
					if (typeof selector === "string") {
						// ( types, selector, fn )
						fn = data;
						data = undefined;
					} else {
						// ( types, data, fn )
						fn = data;
						data = selector;
						selector = undefined;
					}
				}
				if (fn === false) {
					fn = returnFalse;
				} else if (!fn) {
					return this;
				}

				if (one === 1) {
					origFn = fn;
					fn = function (event) {
						// Can use an empty set, since event contains the info
						jQuery().off(event);
						return origFn.apply(this, arguments);
					};
					// Use same guid so caller can remove using origFn
					fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
				}
				return this.each(function () {
					jQuery.event.add(this, types, fn, data, selector);
				});
			},
			one: function one(types, selector, data, fn) {
				return this.on(types, selector, data, fn, 1);
			},
			off: function off(types, selector, fn) {
				var handleObj, type;
				if (types && types.preventDefault && types.handleObj) {
					// ( event )  dispatched jQuery.Event
					handleObj = types.handleObj;
					jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
					return this;
				}
				if (typeof types === "object") {
					// ( types-object [, selector] )
					for (type in types) {
						this.off(type, selector, types[type]);
					}
					return this;
				}
				if (selector === false || typeof selector === "function") {
					// ( types [, fn] )
					fn = selector;
					selector = undefined;
				}
				if (fn === false) {
					fn = returnFalse;
				}
				return this.each(function () {
					jQuery.event.remove(this, types, fn, selector);
				});
			},

			trigger: function trigger(type, data) {
				return this.each(function () {
					jQuery.event.trigger(type, data, this);
				});
			},
			triggerHandler: function triggerHandler(type, data) {
				var elem = this[0];
				if (elem) {
					return jQuery.event.trigger(type, data, elem, true);
				}
			}
		});

		var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		    rtagName = /<([\w:]+)/,
		    rhtml = /<|&#?\w+;/,
		    rnoInnerhtml = /<(?:script|style|link)/i,
		   
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		    rscriptType = /^$|\/(?:java|ecma)script/i,
		    rscriptTypeMasked = /^true\/(.*)/,
		    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
		   

		// We have to close these tags to support XHTML (#13200)
		wrapMap = {

			// Support: IE9
			option: [1, "<select multiple='multiple'>", "</select>"],

			thead: [1, "<table>", "</table>"],
			col: [2, "<table><colgroup>", "</colgroup></table>"],
			tr: [2, "<table><tbody>", "</tbody></table>"],
			td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

			_default: [0, "", ""]
		};

		// Support: IE9
		wrapMap.optgroup = wrapMap.option;

		wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
		wrapMap.th = wrapMap.td;

		// Support: 1.x compatibility
		// Manipulating tables requires a tbody
		function manipulationTarget(elem, content) {
			return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
		}

		// Replace/restore the type attribute of script elements for safe DOM manipulation
		function disableScript(elem) {
			elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
			return elem;
		}
		function restoreScript(elem) {
			var match = rscriptTypeMasked.exec(elem.type);

			if (match) {
				elem.type = match[1];
			} else {
				elem.removeAttribute("type");
			}

			return elem;
		}

		// Mark scripts as having already been evaluated
		function setGlobalEval(elems, refElements) {
			var i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
			}
		}

		function cloneCopyEvent(src, dest) {
			var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

			if (dest.nodeType !== 1) {
				return;
			}

			// 1. Copy private data: events, handlers, etc.
			if (data_priv.hasData(src)) {
				pdataOld = data_priv.access(src);
				pdataCur = data_priv.set(dest, pdataOld);
				events = pdataOld.events;

				if (events) {
					delete pdataCur.handle;
					pdataCur.events = {};

					for (type in events) {
						for (i = 0, l = events[type].length; i < l; i++) {
							jQuery.event.add(dest, type, events[type][i]);
						}
					}
				}
			}

			// 2. Copy user data
			if (data_user.hasData(src)) {
				udataOld = data_user.access(src);
				udataCur = jQuery.extend({}, udataOld);

				data_user.set(dest, udataCur);
			}
		}

		function getAll(context, tag) {
			var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];

			return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
		}

		// Fix IE bugs, see support tests
		function fixInput(src, dest) {
			var nodeName = dest.nodeName.toLowerCase();

			// Fails to persist the checked state of a cloned checkbox or radio button.
			if (nodeName === "input" && rcheckableType.test(src.type)) {
				dest.checked = src.checked;

				// Fails to return the selected option to the default selected state when cloning options
			} else if (nodeName === "input" || nodeName === "textarea") {
					dest.defaultValue = src.defaultValue;
				}
		}

		jQuery.extend({
			clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
				var i,
				    l,
				    srcElements,
				    destElements,
				    clone = elem.cloneNode(true),
				    inPage = jQuery.contains(elem.ownerDocument, elem);

				// Fix IE cloning issues
				if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

					// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
					destElements = getAll(clone);
					srcElements = getAll(elem);

					for (i = 0, l = srcElements.length; i < l; i++) {
						fixInput(srcElements[i], destElements[i]);
					}
				}

				// Copy the events from the original to the clone
				if (dataAndEvents) {
					if (deepDataAndEvents) {
						srcElements = srcElements || getAll(elem);
						destElements = destElements || getAll(clone);

						for (i = 0, l = srcElements.length; i < l; i++) {
							cloneCopyEvent(srcElements[i], destElements[i]);
						}
					} else {
						cloneCopyEvent(elem, clone);
					}
				}

				// Preserve script evaluation history
				destElements = getAll(clone, "script");
				if (destElements.length > 0) {
					setGlobalEval(destElements, !inPage && getAll(elem, "script"));
				}

				// Return the cloned set
				return clone;
			},

			buildFragment: function buildFragment(elems, context, scripts, selection) {
				var elem,
				    tmp,
				    tag,
				    wrap,
				    contains,
				    j,
				    fragment = context.createDocumentFragment(),
				    nodes = [],
				    i = 0,
				    l = elems.length;

				for (; i < l; i++) {
					elem = elems[i];

					if (elem || elem === 0) {

						// Add nodes directly
						if (jQuery.type(elem) === "object") {
							// Support: QtWebKit, PhantomJS
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

							// Convert non-html into a text node
						} else if (!rhtml.test(elem)) {
								nodes.push(context.createTextNode(elem));

								// Convert html into DOM nodes
							} else {
									tmp = tmp || fragment.appendChild(context.createElement("div"));

									// Deserialize a standard representation
									tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
									wrap = wrapMap[tag] || wrapMap._default;
									tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

									// Descend through wrappers to the right content
									j = wrap[0];
									while (j--) {
										tmp = tmp.lastChild;
									}

									// Support: QtWebKit, PhantomJS
									// push.apply(_, arraylike) throws on ancient WebKit
									jQuery.merge(nodes, tmp.childNodes);

									// Remember the top-level container
									tmp = fragment.firstChild;

									// Ensure the created nodes are orphaned (#12392)
									tmp.textContent = "";
								}
					}
				}

				// Remove wrapper from fragment
				fragment.textContent = "";

				i = 0;
				while (elem = nodes[i++]) {

					// #4087 - If origin and destination elements are the same, and this is
					// that element, do not do anything
					if (selection && jQuery.inArray(elem, selection) !== -1) {
						continue;
					}

					contains = jQuery.contains(elem.ownerDocument, elem);

					// Append to fragment
					tmp = getAll(fragment.appendChild(elem), "script");

					// Preserve script evaluation history
					if (contains) {
						setGlobalEval(tmp);
					}

					// Capture executables
					if (scripts) {
						j = 0;
						while (elem = tmp[j++]) {
							if (rscriptType.test(elem.type || "")) {
								scripts.push(elem);
							}
						}
					}
				}

				return fragment;
			},

			cleanData: function cleanData(elems) {
				var data,
				    elem,
				    type,
				    key,
				    special = jQuery.event.special,
				    i = 0;

				for (; (elem = elems[i]) !== undefined; i++) {
					if (jQuery.acceptData(elem)) {
						key = elem[data_priv.expando];

						if (key && (data = data_priv.cache[key])) {
							if (data.events) {
								for (type in data.events) {
									if (special[type]) {
										jQuery.event.remove(elem, type);

										// This is a shortcut to avoid jQuery.event.remove's overhead
									} else {
											jQuery.removeEvent(elem, type, data.handle);
										}
								}
							}
							if (data_priv.cache[key]) {
								// Discard any remaining `private` data
								delete data_priv.cache[key];
							}
						}
					}
					// Discard any remaining `user` data
					delete data_user.cache[elem[data_user.expando]];
				}
			}
		});

		jQuery.fn.extend({
			text: function text(value) {
				return access(this, function (value) {
					return value === undefined ? jQuery.text(this) : this.empty().each(function () {
						if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
							this.textContent = value;
						}
					});
				}, null, value, arguments.length);
			},

			append: function append() {
				return this.domManip(arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.appendChild(elem);
					}
				});
			},

			prepend: function prepend() {
				return this.domManip(arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.insertBefore(elem, target.firstChild);
					}
				});
			},

			before: function before() {
				return this.domManip(arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this);
					}
				});
			},

			after: function after() {
				return this.domManip(arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this.nextSibling);
					}
				});
			},

			remove: function remove(selector, keepData /* Internal Use Only */) {
				var elem,
				    elems = selector ? jQuery.filter(selector, this) : this,
				    i = 0;

				for (; (elem = elems[i]) != null; i++) {
					if (!keepData && elem.nodeType === 1) {
						jQuery.cleanData(getAll(elem));
					}

					if (elem.parentNode) {
						if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
							setGlobalEval(getAll(elem, "script"));
						}
						elem.parentNode.removeChild(elem);
					}
				}

				return this;
			},

			empty: function empty() {
				var elem,
				    i = 0;

				for (; (elem = this[i]) != null; i++) {
					if (elem.nodeType === 1) {

						// Prevent memory leaks
						jQuery.cleanData(getAll(elem, false));

						// Remove any remaining nodes
						elem.textContent = "";
					}
				}

				return this;
			},

			clone: function clone(dataAndEvents, deepDataAndEvents) {
				dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
				deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

				return this.map(function () {
					return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
				});
			},

			html: function html(value) {
				return access(this, function (value) {
					var elem = this[0] || {},
					    i = 0,
					    l = this.length;

					if (value === undefined && elem.nodeType === 1) {
						return elem.innerHTML;
					}

					// See if we can take a shortcut and just use innerHTML
					if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

						value = value.replace(rxhtmlTag, "<$1></$2>");

						try {
							for (; i < l; i++) {
								elem = this[i] || {};

								// Remove element nodes and prevent memory leaks
								if (elem.nodeType === 1) {
									jQuery.cleanData(getAll(elem, false));
									elem.innerHTML = value;
								}
							}

							elem = 0;

							// If using innerHTML throws an exception, use the fallback method
						} catch (e) {}
					}

					if (elem) {
						this.empty().append(value);
					}
				}, null, value, arguments.length);
			},

			replaceWith: function replaceWith() {
				var arg = arguments[0];

				// Make the changes, replacing each context element with the new content
				this.domManip(arguments, function (elem) {
					arg = this.parentNode;

					jQuery.cleanData(getAll(this));

					if (arg) {
						arg.replaceChild(elem, this);
					}
				});

				// Force removal if there was no new content (e.g., from empty arguments)
				return arg && (arg.length || arg.nodeType) ? this : this.remove();
			},

			detach: function detach(selector) {
				return this.remove(selector, true);
			},

			domManip: function domManip(args, callback) {

				// Flatten any nested arrays
				args = concat.apply([], args);

				var fragment,
				    first,
				    scripts,
				    hasScripts,
				    node,
				    doc,
				    i = 0,
				    l = this.length,
				    set = this,
				    iNoClone = l - 1,
				    value = args[0],
				    isFunction = jQuery.isFunction(value);

				// We can't cloneNode fragments that contain checked, in WebKit
				if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
					return this.each(function (index) {
						var self = set.eq(index);
						if (isFunction) {
							args[0] = value.call(this, index, self.html());
						}
						self.domManip(args, callback);
					});
				}

				if (l) {
					fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
					first = fragment.firstChild;

					if (fragment.childNodes.length === 1) {
						fragment = first;
					}

					if (first) {
						scripts = jQuery.map(getAll(fragment, "script"), disableScript);
						hasScripts = scripts.length;

						// Use the original fragment for the last item instead of the first because it can end up
						// being emptied incorrectly in certain situations (#8070).
						for (; i < l; i++) {
							node = fragment;

							if (i !== iNoClone) {
								node = jQuery.clone(node, true, true);

								// Keep references to cloned scripts for later restoration
								if (hasScripts) {
									// Support: QtWebKit
									// jQuery.merge because push.apply(_, arraylike) throws
									jQuery.merge(scripts, getAll(node, "script"));
								}
							}

							callback.call(this[i], node, i);
						}

						if (hasScripts) {
							doc = scripts[scripts.length - 1].ownerDocument;

							// Reenable scripts
							jQuery.map(scripts, restoreScript);

							// Evaluate executable scripts on first document insertion
							for (i = 0; i < hasScripts; i++) {
								node = scripts[i];
								if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {

									if (node.src) {
										// Optional AJAX dependency, but won't run scripts if not present
										if (jQuery._evalUrl) {
											jQuery._evalUrl(node.src);
										}
									} else {
										jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
									}
								}
							}
						}
					}
				}

				return this;
			}
		});

		jQuery.each({
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith"
		}, function (name, original) {
			jQuery.fn[name] = function (selector) {
				var elems,
				    ret = [],
				    insert = jQuery(selector),
				    last = insert.length - 1,
				    i = 0;

				for (; i <= last; i++) {
					elems = i === last ? this : this.clone(true);
					jQuery(insert[i])[original](elems);

					// Support: QtWebKit
					// .get() because push.apply(_, arraylike) throws
					push.apply(ret, elems.get());
				}

				return this.pushStack(ret);
			};
		});

		var iframe,
		    elemdisplay = {};

		/**
	  * Retrieve the actual display of a element
	  * @param {String} name nodeName of the element
	  * @param {Object} doc Document object
	  */
		// Called only from within defaultDisplay
		function actualDisplay(name, doc) {
			var style,
			    elem = jQuery(doc.createElement(name)).appendTo(doc.body),
			   

			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css(elem[0], "display");

			// We don't have any data stored on the element,
			// so use "detach" method as fast way to get rid of the element
			elem.detach();

			return display;
		}

		/**
	  * Try to determine the default display value of an element
	  * @param {String} nodeName
	  */
		function defaultDisplay(nodeName) {
			var doc = document,
			    display = elemdisplay[nodeName];

			if (!display) {
				display = actualDisplay(nodeName, doc);

				// If the simple way fails, read from inside an iframe
				if (display === "none" || !display) {

					// Use the already-created iframe if possible
					iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

					// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
					doc = iframe[0].contentDocument;

					// Support: IE
					doc.write();
					doc.close();

					display = actualDisplay(nodeName, doc);
					iframe.detach();
				}

				// Store the correct default display
				elemdisplay[nodeName] = display;
			}

			return display;
		}
		var rmargin = /^margin/;

		var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

		var getStyles = function getStyles(elem) {
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			if (elem.ownerDocument.defaultView.opener) {
				return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
			}

			return window.getComputedStyle(elem, null);
		};

		function curCSS(elem, name, computed) {
			var width,
			    minWidth,
			    maxWidth,
			    ret,
			    style = elem.style;

			computed = computed || getStyles(elem);

			// Support: IE9
			// getPropertyValue is only needed for .css('filter') (#12537)
			if (computed) {
				ret = computed.getPropertyValue(name) || computed[name];
			}

			if (computed) {

				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name);
				}

				// Support: iOS < 6
				// A tribute to the "awesome hack by Dean Edwards"
				// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
				// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
				if (rnumnonpx.test(ret) && rmargin.test(name)) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			return ret !== undefined ?
			// Support: IE
			// IE returns zIndex value as an integer.
			ret + "" : ret;
		}

		function addGetHookIf(conditionFn, hookFn) {
			// Define the hook, we'll check on the first run if it's really needed.
			return {
				get: function get() {
					if (conditionFn()) {
						// Hook not needed (or it's not possible to use it due
						// to missing dependency), remove it.
						delete this.get;
						return;
					}

					// Hook needed; redefine it so that the support test is not executed again.
					return (this.get = hookFn).apply(this, arguments);
				}
			};
		}

		(function () {
			var pixelPositionVal,
			    boxSizingReliableVal,
			    docElem = document.documentElement,
			    container = document.createElement("div"),
			    div = document.createElement("div");

			if (!div.style) {
				return;
			}

			// Support: IE9-11+
			// Style of cloned element affects source element cloned (#8908)
			div.style.backgroundClip = "content-box";
			div.cloneNode(true).style.backgroundClip = "";
			support.clearCloneStyle = div.style.backgroundClip === "content-box";

			container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
			container.appendChild(div);

			// Executing both pixelPosition & boxSizingReliable tests require only one layout
			// so they're executed at the same time to save the second computation.
			function computePixelPositionAndBoxSizingReliable() {
				div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
				div.innerHTML = "";
				docElem.appendChild(container);

				var divStyle = window.getComputedStyle(div, null);
				pixelPositionVal = divStyle.top !== "1%";
				boxSizingReliableVal = divStyle.width === "4px";

				docElem.removeChild(container);
			}

			// Support: node.js jsdom
			// Don't assume that getComputedStyle is a property of the global object
			if (window.getComputedStyle) {
				jQuery.extend(support, {
					pixelPosition: function pixelPosition() {

						// This test is executed only once but we still do memoizing
						// since we can use the boxSizingReliable pre-computing.
						// No need to check if the test was already performed, though.
						computePixelPositionAndBoxSizingReliable();
						return pixelPositionVal;
					},
					boxSizingReliable: function boxSizingReliable() {
						if (boxSizingReliableVal == null) {
							computePixelPositionAndBoxSizingReliable();
						}
						return boxSizingReliableVal;
					},
					reliableMarginRight: function reliableMarginRight() {

						// Support: Android 2.3
						// Check if div with explicit width and no margin-right incorrectly
						// gets computed margin-right based on width of container. (#3333)
						// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
						// This support function is only executed once so no memoizing is needed.
						var ret,
						    marginDiv = div.appendChild(document.createElement("div"));

						// Reset CSS: box-sizing; display; margin; border; padding
						marginDiv.style.cssText = div.style.cssText =
						// Support: Firefox<29, Android 2.3
						// Vendor-prefix box-sizing
						"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
						marginDiv.style.marginRight = marginDiv.style.width = "0";
						div.style.width = "1px";
						docElem.appendChild(container);

						ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);

						docElem.removeChild(container);
						div.removeChild(marginDiv);

						return ret;
					}
				});
			}
		})();

		// A method for quickly swapping in/out CSS properties to get correct calculations.
		jQuery.swap = function (elem, options, callback, args) {
			var ret,
			    name,
			    old = {};

			// Remember the old values, and insert the new ones
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}

			ret = callback.apply(elem, args || []);

			// Revert the old values
			for (name in options) {
				elem.style[name] = old[name];
			}

			return ret;
		};

		var
		// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
		    rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
		    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		    cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
		    cssPrefixes = ["Webkit", "O", "Moz", "ms"];

		// Return a css property mapped to a potentially vendor prefixed property
		function vendorPropName(style, name) {

			// Shortcut for names that are not vendor prefixed
			if (name in style) {
				return name;
			}

			// Check for vendor prefixed names
			var capName = name[0].toUpperCase() + name.slice(1),
			    origName = name,
			    i = cssPrefixes.length;

			while (i--) {
				name = cssPrefixes[i] + capName;
				if (name in style) {
					return name;
				}
			}

			return origName;
		}

		function setPositiveNumber(elem, value, subtract) {
			var matches = rnumsplit.exec(value);
			return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
		}

		function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
			var i = extra === (isBorderBox ? "border" : "content") ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
			    val = 0;

			for (; i < 4; i += 2) {
				// Both box models exclude margin, so add it if we want it
				if (extra === "margin") {
					val += jQuery.css(elem, extra + cssExpand[i], true, styles);
				}

				if (isBorderBox) {
					// border-box includes padding, so remove it if we want content
					if (extra === "content") {
						val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
					}

					// At this point, extra isn't border nor margin, so remove border
					if (extra !== "margin") {
						val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				} else {
					// At this point, extra isn't content, so add padding
					val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

					// At this point, extra isn't content nor padding, so add border
					if (extra !== "padding") {
						val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				}
			}

			return val;
		}

		function getWidthOrHeight(elem, name, extra) {

			// Start with offset property, which is equivalent to the border-box value
			var valueIsBorderBox = true,
			    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			    styles = getStyles(elem),
			    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

			// Some non-html elements return undefined for offsetWidth, so check for null/undefined
			// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
			// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
			if (val <= 0 || val == null) {
				// Fall back to computed then uncomputed css if necessary
				val = curCSS(elem, name, styles);
				if (val < 0 || val == null) {
					val = elem.style[name];
				}

				// Computed unit is not pixels. Stop here and return.
				if (rnumnonpx.test(val)) {
					return val;
				}

				// Check for style in case a browser which returns unreliable values
				// for getComputedStyle silently falls back to the reliable elem.style
				valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

				// Normalize "", auto, and prepare for extra
				val = parseFloat(val) || 0;
			}

			// Use the active box-sizing model to add/subtract irrelevant styles
			return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
		}

		function showHide(elements, show) {
			var display,
			    elem,
			    hidden,
			    values = [],
			    index = 0,
			    length = elements.length;

			for (; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}

				values[index] = data_priv.get(elem, "olddisplay");
				display = elem.style.display;
				if (show) {
					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if (!values[index] && display === "none") {
						elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if (elem.style.display === "" && isHidden(elem)) {
						values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
					}
				} else {
					hidden = isHidden(elem);

					if (display !== "none" || !hidden) {
						data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for (index = 0; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}
				if (!show || elem.style.display === "none" || elem.style.display === "") {
					elem.style.display = show ? values[index] || "" : "none";
				}
			}

			return elements;
		}

		jQuery.extend({

			// Add in style property hooks for overriding the default
			// behavior of getting and setting a style property
			cssHooks: {
				opacity: {
					get: function get(elem, computed) {
						if (computed) {

							// We should always get a number back from opacity
							var ret = curCSS(elem, "opacity");
							return ret === "" ? "1" : ret;
						}
					}
				}
			},

			// Don't automatically add "px" to these possibly-unitless properties
			cssNumber: {
				"columnCount": true,
				"fillOpacity": true,
				"flexGrow": true,
				"flexShrink": true,
				"fontWeight": true,
				"lineHeight": true,
				"opacity": true,
				"order": true,
				"orphans": true,
				"widows": true,
				"zIndex": true,
				"zoom": true
			},

			// Add in properties whose names you wish to fix before
			// setting or getting the value
			cssProps: {
				"float": "cssFloat"
			},

			// Get and set the style property on a DOM Node
			style: function style(elem, name, value, extra) {

				// Don't set styles on text and comment nodes
				if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
					return;
				}

				// Make sure that we're working with the right name
				var ret,
				    type,
				    hooks,
				    origName = jQuery.camelCase(name),
				    style = elem.style;

				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

				// Gets hook for the prefixed version, then unprefixed version
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// Check if we're setting a value
				if (value !== undefined) {
					type = typeof value;

					// Convert "+=" or "-=" to relative numbers (#7345)
					if (type === "string" && (ret = rrelNum.exec(value))) {
						value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
						// Fixes bug #9237
						type = "number";
					}

					// Make sure that null and NaN values aren't set (#7116)
					if (value == null || value !== value) {
						return;
					}

					// If a number, add 'px' to the (except for certain CSS properties)
					if (type === "number" && !jQuery.cssNumber[origName]) {
						value += "px";
					}

					// Support: IE9-11+
					// background-* props affect original clone's values
					if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
						style[name] = "inherit";
					}

					// If a hook was provided, use that value, otherwise just set the specified value
					if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
						style[name] = value;
					}
				} else {
					// If a hook was provided get the non-computed value from there
					if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
						return ret;
					}

					// Otherwise just get the value from the style object
					return style[name];
				}
			},

			css: function css(elem, name, extra, styles) {
				var val,
				    num,
				    hooks,
				    origName = jQuery.camelCase(name);

				// Make sure that we're working with the right name
				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

				// Try prefixed name followed by the unprefixed name
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// If a hook was provided get the computed value from there
				if (hooks && "get" in hooks) {
					val = hooks.get(elem, true, extra);
				}

				// Otherwise, if a way to get the computed value exists, use that
				if (val === undefined) {
					val = curCSS(elem, name, styles);
				}

				// Convert "normal" to computed value
				if (val === "normal" && name in cssNormalTransform) {
					val = cssNormalTransform[name];
				}

				// Make numeric if forced or a qualifier was provided and val looks numeric
				if (extra === "" || extra) {
					num = parseFloat(val);
					return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
				}
				return val;
			}
		});

		jQuery.each(["height", "width"], function (i, name) {
			jQuery.cssHooks[name] = {
				get: function get(elem, computed, extra) {
					if (computed) {

						// Certain elements can have dimension info if we invisibly show them
						// but it must have a current display style that would benefit
						return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						}) : getWidthOrHeight(elem, name, extra);
					}
				},

				set: function set(elem, value, extra) {
					var styles = extra && getStyles(elem);
					return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
				}
			};
		});

		// Support: Android 2.3
		jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
			if (computed) {
				return jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
			}
		});

		// These hooks are used by animate to expand properties
		jQuery.each({
			margin: "",
			padding: "",
			border: "Width"
		}, function (prefix, suffix) {
			jQuery.cssHooks[prefix + suffix] = {
				expand: function expand(value) {
					var i = 0,
					    expanded = {},
					   

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [value];

					for (; i < 4; i++) {
						expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
					}

					return expanded;
				}
			};

			if (!rmargin.test(prefix)) {
				jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
			}
		});

		jQuery.fn.extend({
			css: function css(name, value) {
				return access(this, function (elem, name, value) {
					var styles,
					    len,
					    map = {},
					    i = 0;

					if (jQuery.isArray(name)) {
						styles = getStyles(elem);
						len = name.length;

						for (; i < len; i++) {
							map[name[i]] = jQuery.css(elem, name[i], false, styles);
						}

						return map;
					}

					return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
				}, name, value, arguments.length > 1);
			},
			show: function show() {
				return showHide(this, true);
			},
			hide: function hide() {
				return showHide(this);
			},
			toggle: function toggle(state) {
				if (typeof state === "boolean") {
					return state ? this.show() : this.hide();
				}

				return this.each(function () {
					if (isHidden(this)) {
						jQuery(this).show();
					} else {
						jQuery(this).hide();
					}
				});
			}
		});

		function Tween(elem, options, prop, end, easing) {
			return new Tween.prototype.init(elem, options, prop, end, easing);
		}
		jQuery.Tween = Tween;

		Tween.prototype = {
			constructor: Tween,
			init: function init(elem, options, prop, end, easing, unit) {
				this.elem = elem;
				this.prop = prop;
				this.easing = easing || "swing";
				this.options = options;
				this.start = this.now = this.cur();
				this.end = end;
				this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
			},
			cur: function cur() {
				var hooks = Tween.propHooks[this.prop];

				return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
			},
			run: function run(percent) {
				var eased,
				    hooks = Tween.propHooks[this.prop];

				if (this.options.duration) {
					this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
				} else {
					this.pos = eased = percent;
				}
				this.now = (this.end - this.start) * eased + this.start;

				if (this.options.step) {
					this.options.step.call(this.elem, this.now, this);
				}

				if (hooks && hooks.set) {
					hooks.set(this);
				} else {
					Tween.propHooks._default.set(this);
				}
				return this;
			}
		};

		Tween.prototype.init.prototype = Tween.prototype;

		Tween.propHooks = {
			_default: {
				get: function get(tween) {
					var result;

					if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
						return tween.elem[tween.prop];
					}

					// Passing an empty string as a 3rd parameter to .css will automatically
					// attempt a parseFloat and fallback to a string if the parse fails.
					// Simple values such as "10px" are parsed to Float;
					// complex values such as "rotate(1rad)" are returned as-is.
					result = jQuery.css(tween.elem, tween.prop, "");
					// Empty strings, null, undefined and "auto" are converted to 0.
					return !result || result === "auto" ? 0 : result;
				},
				set: function set(tween) {
					// Use step hook for back compat.
					// Use cssHook if its there.
					// Use .style if available and use plain properties where available.
					if (jQuery.fx.step[tween.prop]) {
						jQuery.fx.step[tween.prop](tween);
					} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
						jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
					} else {
						tween.elem[tween.prop] = tween.now;
					}
				}
			}
		};

		// Support: IE9
		// Panic based approach to setting things on disconnected nodes
		Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
			set: function set(tween) {
				if (tween.elem.nodeType && tween.elem.parentNode) {
					tween.elem[tween.prop] = tween.now;
				}
			}
		};

		jQuery.easing = {
			linear: function linear(p) {
				return p;
			},
			swing: function swing(p) {
				return 0.5 - Math.cos(p * Math.PI) / 2;
			}
		};

		jQuery.fx = Tween.prototype.init;

		// Back Compat <1.8 extension point
		jQuery.fx.step = {};

		var fxNow,
		    timerId,
		    rfxtypes = /^(?:toggle|show|hide)$/,
		    rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
		    rrun = /queueHooks$/,
		    animationPrefilters = [defaultPrefilter],
		    tweeners = {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value),
				    target = tween.cur(),
				    parts = rfxnum.exec(value),
				    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
				   

				// Starting value computation is required for potential unit mismatches
				start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
				    scale = 1,
				    maxIterations = 20;

				if (start && start[3] !== unit) {
					// Trust units reported by jQuery.css
					unit = unit || start[3];

					// Make sure we update the tween properties later on
					parts = parts || [];

					// Iteratively approximate from a nonzero starting point
					start = +target || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*.
						// Use string for doubling so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style(tween.elem, prop, start + unit);

						// Update scale, tolerating zero or NaN from tween.cur(),
						// break the loop if scale is unchanged or perfect, or if we've just had enough
					} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
				}

				// Update tween properties
				if (parts) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
				}

				return tween;
			}]
		};

		// Animations created synchronously will run synchronously
		function createFxNow() {
			setTimeout(function () {
				fxNow = undefined;
			});
			return fxNow = jQuery.now();
		}

		// Generate parameters to create a standard animation
		function genFx(type, includeWidth) {
			var which,
			    i = 0,
			    attrs = { height: type };

			// If we include width, step value is 1 to do all cssExpand values,
			// otherwise step value is 2 to skip over Left and Right
			includeWidth = includeWidth ? 1 : 0;
			for (; i < 4; i += 2 - includeWidth) {
				which = cssExpand[i];
				attrs["margin" + which] = attrs["padding" + which] = type;
			}

			if (includeWidth) {
				attrs.opacity = attrs.width = type;
			}

			return attrs;
		}

		function createTween(value, prop, animation) {
			var tween,
			    collection = (tweeners[prop] || []).concat(tweeners["*"]),
			    index = 0,
			    length = collection.length;
			for (; index < length; index++) {
				if (tween = collection[index].call(animation, prop, value)) {

					// We're done with this property
					return tween;
				}
			}
		}

		function defaultPrefilter(elem, props, opts) {
			/* jshint validthis: true */
			var prop,
			    value,
			    toggle,
			    tween,
			    hooks,
			    oldfire,
			    display,
			    checkDisplay,
			    anim = this,
			    orig = {},
			    style = elem.style,
			    hidden = elem.nodeType && isHidden(elem),
			    dataShow = data_priv.get(elem, "fxshow");

			// Handle queue: false promises
			if (!opts.queue) {
				hooks = jQuery._queueHooks(elem, "fx");
				if (hooks.unqueued == null) {
					hooks.unqueued = 0;
					oldfire = hooks.empty.fire;
					hooks.empty.fire = function () {
						if (!hooks.unqueued) {
							oldfire();
						}
					};
				}
				hooks.unqueued++;

				anim.always(function () {
					// Ensure the complete handler is called before this completes
					anim.always(function () {
						hooks.unqueued--;
						if (!jQuery.queue(elem, "fx").length) {
							hooks.empty.fire();
						}
					});
				});
			}

			// Height/width overflow pass
			if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
				// Make sure that nothing sneaks out
				// Record all 3 overflow attributes because IE9-10 do not
				// change the overflow attribute when overflowX and
				// overflowY are set to the same value
				opts.overflow = [style.overflow, style.overflowX, style.overflowY];

				// Set display property to inline-block for height/width
				// animations on inline elements that are having width/height animated
				display = jQuery.css(elem, "display");

				// Test default display if display is currently "none"
				checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

				if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
					style.display = "inline-block";
				}
			}

			if (opts.overflow) {
				style.overflow = "hidden";
				anim.always(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}

			// show/hide pass
			for (prop in props) {
				value = props[prop];
				if (rfxtypes.exec(value)) {
					delete props[prop];
					toggle = toggle || value === "toggle";
					if (value === (hidden ? "hide" : "show")) {

						// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
						if (value === "show" && dataShow && dataShow[prop] !== undefined) {
							hidden = true;
						} else {
							continue;
						}
					}
					orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

					// Any non-fx value stops us from restoring the original display value
				} else {
						display = undefined;
					}
			}

			if (!jQuery.isEmptyObject(orig)) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = data_priv.access(elem, "fxshow", {});
				}

				// Store state if its toggle - enables .stop().toggle() to "reverse"
				if (toggle) {
					dataShow.hidden = !hidden;
				}
				if (hidden) {
					jQuery(elem).show();
				} else {
					anim.done(function () {
						jQuery(elem).hide();
					});
				}
				anim.done(function () {
					var prop;

					data_priv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
				for (prop in orig) {
					tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

					if (!(prop in dataShow)) {
						dataShow[prop] = tween.start;
						if (hidden) {
							tween.end = tween.start;
							tween.start = prop === "width" || prop === "height" ? 1 : 0;
						}
					}
				}

				// If this is a noop like .hide().hide(), restore an overwritten display value
			} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
					style.display = display;
				}
		}

		function propFilter(props, specialEasing) {
			var index, name, easing, value, hooks;

			// camelCase, specialEasing and expand cssHook pass
			for (index in props) {
				name = jQuery.camelCase(index);
				easing = specialEasing[name];
				value = props[index];
				if (jQuery.isArray(value)) {
					easing = value[1];
					value = props[index] = value[0];
				}

				if (index !== name) {
					props[name] = value;
					delete props[index];
				}

				hooks = jQuery.cssHooks[name];
				if (hooks && "expand" in hooks) {
					value = hooks.expand(value);
					delete props[name];

					// Not quite $.extend, this won't overwrite existing keys.
					// Reusing 'index' because we have the correct "name"
					for (index in value) {
						if (!(index in props)) {
							props[index] = value[index];
							specialEasing[index] = easing;
						}
					}
				} else {
					specialEasing[name] = easing;
				}
			}
		}

		function Animation(elem, properties, options) {
			var result,
			    stopped,
			    index = 0,
			    length = animationPrefilters.length,
			    deferred = jQuery.Deferred().always(function () {
				// Don't match elem in the :animated selector
				delete tick.elem;
			}),
			    tick = function tick() {
				if (stopped) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
				    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
				   
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				    percent = 1 - temp,
				    index = 0,
				    length = animation.tweens.length;

				for (; index < length; index++) {
					animation.tweens[index].run(percent);
				}

				deferred.notifyWith(elem, [animation, percent, remaining]);

				if (percent < 1 && length) {
					return remaining;
				} else {
					deferred.resolveWith(elem, [animation]);
					return false;
				}
			},
			    animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, { specialEasing: {} }, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function createTween(prop, end) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function stop(gotoEnd) {
					var index = 0,
					   
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
					if (stopped) {
						return this;
					}
					stopped = true;
					for (; index < length; index++) {
						animation.tweens[index].run(1);
					}

					// Resolve when we played the last frame; otherwise, reject
					if (gotoEnd) {
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				}
			}),
			    props = animation.props;

			propFilter(props, animation.opts.specialEasing);

			for (; index < length; index++) {
				result = animationPrefilters[index].call(animation, elem, props, animation.opts);
				if (result) {
					return result;
				}
			}

			jQuery.map(props, createTween, animation);

			if (jQuery.isFunction(animation.opts.start)) {
				animation.opts.start.call(elem, animation);
			}

			jQuery.fx.timer(jQuery.extend(tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			}));

			// attach callbacks from options
			return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
		}

		jQuery.Animation = jQuery.extend(Animation, {

			tweener: function tweener(props, callback) {
				if (jQuery.isFunction(props)) {
					callback = props;
					props = ["*"];
				} else {
					props = props.split(" ");
				}

				var prop,
				    index = 0,
				    length = props.length;

				for (; index < length; index++) {
					prop = props[index];
					tweeners[prop] = tweeners[prop] || [];
					tweeners[prop].unshift(callback);
				}
			},

			prefilter: function prefilter(callback, prepend) {
				if (prepend) {
					animationPrefilters.unshift(callback);
				} else {
					animationPrefilters.push(callback);
				}
			}
		});

		jQuery.speed = function (speed, easing, fn) {
			var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
				complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
				duration: speed,
				easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
			};

			opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

			// Normalize opt.queue - true/undefined/null -> "fx"
			if (opt.queue == null || opt.queue === true) {
				opt.queue = "fx";
			}

			// Queueing
			opt.old = opt.complete;

			opt.complete = function () {
				if (jQuery.isFunction(opt.old)) {
					opt.old.call(this);
				}

				if (opt.queue) {
					jQuery.dequeue(this, opt.queue);
				}
			};

			return opt;
		};

		jQuery.fn.extend({
			fadeTo: function fadeTo(speed, to, easing, callback) {

				// Show any hidden elements after setting opacity to 0
				return this.filter(isHidden).css("opacity", 0).show()

				// Animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback);
			},
			animate: function animate(prop, speed, easing, callback) {
				var empty = jQuery.isEmptyObject(prop),
				    optall = jQuery.speed(speed, easing, callback),
				    doAnimation = function doAnimation() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation(this, jQuery.extend({}, prop), optall);

					// Empty animations, or finishing resolves immediately
					if (empty || data_priv.get(this, "finish")) {
						anim.stop(true);
					}
				};
				doAnimation.finish = doAnimation;

				return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
			},
			stop: function stop(type, clearQueue, gotoEnd) {
				var stopQueue = function stopQueue(hooks) {
					var stop = hooks.stop;
					delete hooks.stop;
					stop(gotoEnd);
				};

				if (typeof type !== "string") {
					gotoEnd = clearQueue;
					clearQueue = type;
					type = undefined;
				}
				if (clearQueue && type !== false) {
					this.queue(type || "fx", []);
				}

				return this.each(function () {
					var dequeue = true,
					    index = type != null && type + "queueHooks",
					    timers = jQuery.timers,
					    data = data_priv.get(this);

					if (index) {
						if (data[index] && data[index].stop) {
							stopQueue(data[index]);
						}
					} else {
						for (index in data) {
							if (data[index] && data[index].stop && rrun.test(index)) {
								stopQueue(data[index]);
							}
						}
					}

					for (index = timers.length; index--;) {
						if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
							timers[index].anim.stop(gotoEnd);
							dequeue = false;
							timers.splice(index, 1);
						}
					}

					// Start the next in the queue if the last step wasn't forced.
					// Timers currently will call their complete callbacks, which
					// will dequeue but only if they were gotoEnd.
					if (dequeue || !gotoEnd) {
						jQuery.dequeue(this, type);
					}
				});
			},
			finish: function finish(type) {
				if (type !== false) {
					type = type || "fx";
				}
				return this.each(function () {
					var index,
					    data = data_priv.get(this),
					    queue = data[type + "queue"],
					    hooks = data[type + "queueHooks"],
					    timers = jQuery.timers,
					    length = queue ? queue.length : 0;

					// Enable finishing flag on private data
					data.finish = true;

					// Empty the queue first
					jQuery.queue(this, type, []);

					if (hooks && hooks.stop) {
						hooks.stop.call(this, true);
					}

					// Look for any active animations, and finish them
					for (index = timers.length; index--;) {
						if (timers[index].elem === this && timers[index].queue === type) {
							timers[index].anim.stop(true);
							timers.splice(index, 1);
						}
					}

					// Look for any animations in the old queue and finish them
					for (index = 0; index < length; index++) {
						if (queue[index] && queue[index].finish) {
							queue[index].finish.call(this);
						}
					}

					// Turn off finishing flag
					delete data.finish;
				});
			}
		});

		jQuery.each(["toggle", "show", "hide"], function (i, name) {
			var cssFn = jQuery.fn[name];
			jQuery.fn[name] = function (speed, easing, callback) {
				return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
			};
		});

		// Generate shortcuts for custom animations
		jQuery.each({
			slideDown: genFx("show"),
			slideUp: genFx("hide"),
			slideToggle: genFx("toggle"),
			fadeIn: { opacity: "show" },
			fadeOut: { opacity: "hide" },
			fadeToggle: { opacity: "toggle" }
		}, function (name, props) {
			jQuery.fn[name] = function (speed, easing, callback) {
				return this.animate(props, speed, easing, callback);
			};
		});

		jQuery.timers = [];
		jQuery.fx.tick = function () {
			var timer,
			    i = 0,
			    timers = jQuery.timers;

			fxNow = jQuery.now();

			for (; i < timers.length; i++) {
				timer = timers[i];
				// Checks the timer has not already been removed
				if (!timer() && timers[i] === timer) {
					timers.splice(i--, 1);
				}
			}

			if (!timers.length) {
				jQuery.fx.stop();
			}
			fxNow = undefined;
		};

		jQuery.fx.timer = function (timer) {
			jQuery.timers.push(timer);
			if (timer()) {
				jQuery.fx.start();
			} else {
				jQuery.timers.pop();
			}
		};

		jQuery.fx.interval = 13;

		jQuery.fx.start = function () {
			if (!timerId) {
				timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
			}
		};

		jQuery.fx.stop = function () {
			clearInterval(timerId);
			timerId = null;
		};

		jQuery.fx.speeds = {
			slow: 600,
			fast: 200,
			// Default speed
			_default: 400
		};

		// Based off of the plugin by Clint Helfers, with permission.
		// http://blindsignals.com/index.php/2009/07/jquery-delay/
		jQuery.fn.delay = function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";

			return this.queue(type, function (next, hooks) {
				var timeout = setTimeout(next, time);
				hooks.stop = function () {
					clearTimeout(timeout);
				};
			});
		};

		(function () {
			var input = document.createElement("input"),
			    select = document.createElement("select"),
			    opt = select.appendChild(document.createElement("option"));

			input.type = "checkbox";

			// Support: iOS<=5.1, Android<=4.2+
			// Default value for a checkbox should be "on"
			support.checkOn = input.value !== "";

			// Support: IE<=11+
			// Must access selectedIndex to make default options select
			support.optSelected = opt.selected;

			// Support: Android<=2.3
			// Options inside disabled selects are incorrectly marked as disabled
			select.disabled = true;
			support.optDisabled = !opt.disabled;

			// Support: IE<=11+
			// An input loses its value after becoming a radio
			input = document.createElement("input");
			input.value = "t";
			input.type = "radio";
			support.radioValue = input.value === "t";
		})();

		var nodeHook,
		    boolHook,
		    attrHandle = jQuery.expr.attrHandle;

		jQuery.fn.extend({
			attr: function attr(name, value) {
				return access(this, jQuery.attr, name, value, arguments.length > 1);
			},

			removeAttr: function removeAttr(name) {
				return this.each(function () {
					jQuery.removeAttr(this, name);
				});
			}
		});

		jQuery.extend({
			attr: function attr(elem, name, value) {
				var hooks,
				    ret,
				    nType = elem.nodeType;

				// don't get/set attributes on text, comment and attribute nodes
				if (!elem || nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				// Fallback to prop when attributes are not supported
				if (typeof elem.getAttribute === strundefined) {
					return jQuery.prop(elem, name, value);
				}

				// All attributes are lowercase
				// Grab necessary hook if one is defined
				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
					name = name.toLowerCase();
					hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
				}

				if (value !== undefined) {

					if (value === null) {
						jQuery.removeAttr(elem, name);
					} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					} else {
						elem.setAttribute(name, value + "");
						return value;
					}
				} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				} else {
					ret = jQuery.find.attr(elem, name);

					// Non-existent attributes return null, we normalize to undefined
					return ret == null ? undefined : ret;
				}
			},

			removeAttr: function removeAttr(elem, value) {
				var name,
				    propName,
				    i = 0,
				    attrNames = value && value.match(rnotwhite);

				if (attrNames && elem.nodeType === 1) {
					while (name = attrNames[i++]) {
						propName = jQuery.propFix[name] || name;

						// Boolean attributes get special treatment (#10870)
						if (jQuery.expr.match.bool.test(name)) {
							// Set corresponding property to false
							elem[propName] = false;
						}

						elem.removeAttribute(name);
					}
				}
			},

			attrHooks: {
				type: {
					set: function set(elem, value) {
						if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
							var val = elem.value;
							elem.setAttribute("type", value);
							if (val) {
								elem.value = val;
							}
							return value;
						}
					}
				}
			}
		});

		// Hooks for boolean attributes
		boolHook = {
			set: function set(elem, value, name) {
				if (value === false) {
					// Remove boolean attributes when set to false
					jQuery.removeAttr(elem, name);
				} else {
					elem.setAttribute(name, name);
				}
				return name;
			}
		};
		jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
			var getter = attrHandle[name] || jQuery.find.attr;

			attrHandle[name] = function (elem, name, isXML) {
				var ret, handle;
				if (!isXML) {
					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[name];
					attrHandle[name] = ret;
					ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
					attrHandle[name] = handle;
				}
				return ret;
			};
		});

		var rfocusable = /^(?:input|select|textarea|button)$/i;

		jQuery.fn.extend({
			prop: function prop(name, value) {
				return access(this, jQuery.prop, name, value, arguments.length > 1);
			},

			removeProp: function removeProp(name) {
				return this.each(function () {
					delete this[jQuery.propFix[name] || name];
				});
			}
		});

		jQuery.extend({
			propFix: {
				"for": "htmlFor",
				"class": "className"
			},

			prop: function prop(elem, name, value) {
				var ret,
				    hooks,
				    notxml,
				    nType = elem.nodeType;

				// Don't get/set properties on text, comment and attribute nodes
				if (!elem || nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

				if (notxml) {
					// Fix name and attach hooks
					name = jQuery.propFix[name] || name;
					hooks = jQuery.propHooks[name];
				}

				if (value !== undefined) {
					return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
				} else {
					return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
				}
			},

			propHooks: {
				tabIndex: {
					get: function get(elem) {
						return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
					}
				}
			}
		});

		if (!support.optSelected) {
			jQuery.propHooks.selected = {
				get: function get(elem) {
					var parent = elem.parentNode;
					if (parent && parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
					return null;
				}
			};
		}

		jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
			jQuery.propFix[this.toLowerCase()] = this;
		});

		var rclass = /[\t\r\n\f]/g;

		jQuery.fn.extend({
			addClass: function addClass(value) {
				var classes,
				    elem,
				    cur,
				    clazz,
				    j,
				    finalValue,
				    proceed = typeof value === "string" && value,
				    i = 0,
				    len = this.length;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).addClass(value.call(this, j, this.className));
					});
				}

				if (proceed) {
					// The disjunction here is for better compressibility (see removeClass)
					classes = (value || "").match(rnotwhite) || [];

					for (; i < len; i++) {
						elem = this[i];
						cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {
								if (cur.indexOf(" " + clazz + " ") < 0) {
									cur += clazz + " ";
								}
							}

							// only assign if different to avoid unneeded rendering.
							finalValue = jQuery.trim(cur);
							if (elem.className !== finalValue) {
								elem.className = finalValue;
							}
						}
					}
				}

				return this;
			},

			removeClass: function removeClass(value) {
				var classes,
				    elem,
				    cur,
				    clazz,
				    j,
				    finalValue,
				    proceed = arguments.length === 0 || typeof value === "string" && value,
				    i = 0,
				    len = this.length;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).removeClass(value.call(this, j, this.className));
					});
				}
				if (proceed) {
					classes = (value || "").match(rnotwhite) || [];

					for (; i < len; i++) {
						elem = this[i];
						// This expression is here for better compressibility (see addClass)
						cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {
								// Remove *all* instances
								while (cur.indexOf(" " + clazz + " ") >= 0) {
									cur = cur.replace(" " + clazz + " ", " ");
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = value ? jQuery.trim(cur) : "";
							if (elem.className !== finalValue) {
								elem.className = finalValue;
							}
						}
					}
				}

				return this;
			},

			toggleClass: function toggleClass(value, stateVal) {
				var type = typeof value;

				if (typeof stateVal === "boolean" && type === "string") {
					return stateVal ? this.addClass(value) : this.removeClass(value);
				}

				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
					});
				}

				return this.each(function () {
					if (type === "string") {
						// Toggle individual class names
						var className,
						    i = 0,
						    self = jQuery(this),
						    classNames = value.match(rnotwhite) || [];

						while (className = classNames[i++]) {
							// Check each className given, space separated list
							if (self.hasClass(className)) {
								self.removeClass(className);
							} else {
								self.addClass(className);
							}
						}

						// Toggle whole class name
					} else if (type === strundefined || type === "boolean") {
							if (this.className) {
								// store className if set
								data_priv.set(this, "__className__", this.className);
							}

							// If the element has a class name or if we're passed `false`,
							// then remove the whole classname (if there was one, the above saved it).
							// Otherwise bring back whatever was previously saved (if anything),
							// falling back to the empty string if nothing was stored.
							this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
						}
				});
			},

			hasClass: function hasClass(selector) {
				var className = " " + selector + " ",
				    i = 0,
				    l = this.length;
				for (; i < l; i++) {
					if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
						return true;
					}
				}

				return false;
			}
		});

		var rreturn = /\r/g;

		jQuery.fn.extend({
			val: function val(value) {
				var hooks,
				    ret,
				    isFunction,
				    elem = this[0];

				if (!arguments.length) {
					if (elem) {
						hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

						if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
							return ret;
						}

						ret = elem.value;

						return typeof ret === "string" ?
						// Handle most common string cases
						ret.replace(rreturn, "") :
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
					}

					return;
				}

				isFunction = jQuery.isFunction(value);

				return this.each(function (i) {
					var val;

					if (this.nodeType !== 1) {
						return;
					}

					if (isFunction) {
						val = value.call(this, i, jQuery(this).val());
					} else {
						val = value;
					}

					// Treat null/undefined as ""; convert numbers to string
					if (val == null) {
						val = "";
					} else if (typeof val === "number") {
						val += "";
					} else if (jQuery.isArray(val)) {
						val = jQuery.map(val, function (value) {
							return value == null ? "" : value + "";
						});
					}

					hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

					// If set returns undefined, fall back to normal setting
					if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
						this.value = val;
					}
				});
			}
		});

		jQuery.extend({
			valHooks: {
				option: {
					get: function get(elem) {
						var val = jQuery.find.attr(elem, "value");
						return val != null ? val :
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim(jQuery.text(elem));
					}
				},
				select: {
					get: function get(elem) {
						var value,
						    option,
						    options = elem.options,
						    index = elem.selectedIndex,
						    one = elem.type === "select-one" || index < 0,
						    values = one ? null : [],
						    max = one ? index + 1 : options.length,
						    i = index < 0 ? max : one ? index : 0;

						// Loop through all the selected options
						for (; i < max; i++) {
							option = options[i];

							// IE6-9 doesn't update selected after form reset (#2551)
							if ((option.selected || i === index) && (
							// Don't return options that are disabled or in a disabled optgroup
							support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

								// Get the specific value for the option
								value = jQuery(option).val();

								// We don't need an array for one selects
								if (one) {
									return value;
								}

								// Multi-Selects return an array
								values.push(value);
							}
						}

						return values;
					},

					set: function set(elem, value) {
						var optionSet,
						    option,
						    options = elem.options,
						    values = jQuery.makeArray(value),
						    i = options.length;

						while (i--) {
							option = options[i];
							if (option.selected = jQuery.inArray(option.value, values) >= 0) {
								optionSet = true;
							}
						}

						// Force browsers to behave consistently when non-matching value is set
						if (!optionSet) {
							elem.selectedIndex = -1;
						}
						return values;
					}
				}
			}
		});

		// Radios and checkboxes getter/setter
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				set: function set(elem, value) {
					if (jQuery.isArray(value)) {
						return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
					}
				}
			};
			if (!support.checkOn) {
				jQuery.valHooks[this].get = function (elem) {
					return elem.getAttribute("value") === null ? "on" : elem.value;
				};
			}
		});

		// Return jQuery for attributes-only inclusion

		jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

			// Handle event binding
			jQuery.fn[name] = function (data, fn) {
				return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
			};
		});

		jQuery.fn.extend({
			hover: function hover(fnOver, fnOut) {
				return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
			},

			bind: function bind(types, data, fn) {
				return this.on(types, null, data, fn);
			},
			unbind: function unbind(types, fn) {
				return this.off(types, null, fn);
			},

			delegate: function delegate(selector, types, data, fn) {
				return this.on(types, selector, data, fn);
			},
			undelegate: function undelegate(selector, types, fn) {
				// ( namespace ) or ( selector, types [, fn] )
				return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
			}
		});

		var nonce = jQuery.now();

		var rquery = /\?/;

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		jQuery.parseJSON = function (data) {
			return JSON.parse(data + "");
		};

		// Cross-browser xml parsing
		jQuery.parseXML = function (data) {
			var xml, tmp;
			if (!data || typeof data !== "string") {
				return null;
			}

			// Support: IE9
			try {
				tmp = new DOMParser();
				xml = tmp.parseFromString(data, "text/xml");
			} catch (e) {
				xml = undefined;
			}

			if (!xml || xml.getElementsByTagName("parsererror").length) {
				jQuery.error("Invalid XML: " + data);
			}
			return xml;
		};

		var rhash = /#.*$/,
		    rts = /([?&])_=[^&]*/,
		    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
		   
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		    rnoContent = /^(?:GET|HEAD)$/,
		    rprotocol = /^\/\//,
		    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
		   

		/* Prefilters
	  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	  * 2) These are called:
	  *    - BEFORE asking for a transport
	  *    - AFTER param serialization (s.data is a string if s.processData is true)
	  * 3) key is the dataType
	  * 4) the catchall symbol "*" can be used
	  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	  */
		prefilters = {},
		   

		/* Transports bindings
	  * 1) key is the dataType
	  * 2) the catchall symbol "*" can be used
	  * 3) selection will start with transport dataType and THEN go to "*" if needed
	  */
		transports = {},
		   

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*"),
		   

		// Document location
		ajaxLocation = window.location.href,
		   

		// Segment location into parts
		ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

		// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
		function addToPrefiltersOrTransports(structure) {

			// dataTypeExpression is optional and defaults to "*"
			return function (dataTypeExpression, func) {

				if (typeof dataTypeExpression !== "string") {
					func = dataTypeExpression;
					dataTypeExpression = "*";
				}

				var dataType,
				    i = 0,
				    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

				if (jQuery.isFunction(func)) {
					// For each dataType in the dataTypeExpression
					while (dataType = dataTypes[i++]) {
						// Prepend if requested
						if (dataType[0] === "+") {
							dataType = dataType.slice(1) || "*";
							(structure[dataType] = structure[dataType] || []).unshift(func);

							// Otherwise append
						} else {
								(structure[dataType] = structure[dataType] || []).push(func);
							}
					}
				}
			};
		}

		// Base inspection function for prefilters and transports
		function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

			var inspected = {},
			    seekingTransport = structure === transports;

			function inspect(dataType) {
				var selected;
				inspected[dataType] = true;
				jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
					var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
					if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
						options.dataTypes.unshift(dataTypeOrTransport);
						inspect(dataTypeOrTransport);
						return false;
					} else if (seekingTransport) {
						return !(selected = dataTypeOrTransport);
					}
				});
				return selected;
			}

			return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
		}

		// A special extend for ajax options
		// that takes "flat" options (not to be deep extended)
		// Fixes #9887
		function ajaxExtend(target, src) {
			var key,
			    deep,
			    flatOptions = jQuery.ajaxSettings.flatOptions || {};

			for (key in src) {
				if (src[key] !== undefined) {
					(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
				}
			}
			if (deep) {
				jQuery.extend(true, target, deep);
			}

			return target;
		}

		/* Handles responses to an ajax request:
	  * - finds the right dataType (mediates between content-type and expected dataType)
	  * - returns the corresponding response
	  */
		function ajaxHandleResponses(s, jqXHR, responses) {

			var ct,
			    type,
			    finalDataType,
			    firstDataType,
			    contents = s.contents,
			    dataTypes = s.dataTypes;

			// Remove auto dataType and get content-type in the process
			while (dataTypes[0] === "*") {
				dataTypes.shift();
				if (ct === undefined) {
					ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
				}
			}

			// Check if we're dealing with a known content-type
			if (ct) {
				for (type in contents) {
					if (contents[type] && contents[type].test(ct)) {
						dataTypes.unshift(type);
						break;
					}
				}
			}

			// Check to see if we have a response for the expected dataType
			if (dataTypes[0] in responses) {
				finalDataType = dataTypes[0];
			} else {
				// Try convertible dataTypes
				for (type in responses) {
					if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
						finalDataType = type;
						break;
					}
					if (!firstDataType) {
						firstDataType = type;
					}
				}
				// Or just use first one
				finalDataType = finalDataType || firstDataType;
			}

			// If we found a dataType
			// We add the dataType to the list if needed
			// and return the corresponding response
			if (finalDataType) {
				if (finalDataType !== dataTypes[0]) {
					dataTypes.unshift(finalDataType);
				}
				return responses[finalDataType];
			}
		}

		/* Chain conversions given the request and the original response
	  * Also sets the responseXXX fields on the jqXHR instance
	  */
		function ajaxConvert(s, response, jqXHR, isSuccess) {
			var conv2,
			    current,
			    conv,
			    tmp,
			    prev,
			    converters = {},
			   
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

			// Create converters map with lowercased keys
			if (dataTypes[1]) {
				for (conv in s.converters) {
					converters[conv.toLowerCase()] = s.converters[conv];
				}
			}

			current = dataTypes.shift();

			// Convert to each sequential dataType
			while (current) {

				if (s.responseFields[current]) {
					jqXHR[s.responseFields[current]] = response;
				}

				// Apply the dataFilter if provided
				if (!prev && isSuccess && s.dataFilter) {
					response = s.dataFilter(response, s.dataType);
				}

				prev = current;
				current = dataTypes.shift();

				if (current) {

					// There's only work to do if current dataType is non-auto
					if (current === "*") {

						current = prev;

						// Convert response if prev dataType is non-auto and differs from current
					} else if (prev !== "*" && prev !== current) {

							// Seek a direct converter
							conv = converters[prev + " " + current] || converters["* " + current];

							// If none found, seek a pair
							if (!conv) {
								for (conv2 in converters) {

									// If conv2 outputs current
									tmp = conv2.split(" ");
									if (tmp[1] === current) {

										// If prev can be converted to accepted input
										conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
										if (conv) {
											// Condense equivalence converters
											if (conv === true) {
												conv = converters[conv2];

												// Otherwise, insert the intermediate dataType
											} else if (converters[conv2] !== true) {
													current = tmp[0];
													dataTypes.unshift(tmp[1]);
												}
											break;
										}
									}
								}
							}

							// Apply converter (if not an equivalence)
							if (conv !== true) {

								// Unless errors are allowed to bubble, catch and return them
								if (conv && s["throws"]) {
									response = conv(response);
								} else {
									try {
										response = conv(response);
									} catch (e) {
										return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
									}
								}
							}
						}
				}
			}

			return { state: "success", data: response };
		}

		jQuery.extend({

			// Counter for holding the number of active queries
			active: 0,

			// Last-Modified header cache for next request
			lastModified: {},
			etag: {},

			ajaxSettings: {
				url: ajaxLocation,
				type: "GET",
				isLocal: rlocalProtocol.test(ajaxLocParts[1]),
				global: true,
				processData: true,
				async: true,
				contentType: "application/x-www-form-urlencoded; charset=UTF-8",
				/*
	   timeout: 0,
	   data: null,
	   dataType: null,
	   username: null,
	   password: null,
	   cache: null,
	   throws: false,
	   traditional: false,
	   headers: {},
	   */

				accepts: {
					"*": allTypes,
					text: "text/plain",
					html: "text/html",
					xml: "application/xml, text/xml",
					json: "application/json, text/javascript"
				},

				contents: {
					xml: /xml/,
					html: /html/,
					json: /json/
				},

				responseFields: {
					xml: "responseXML",
					text: "responseText",
					json: "responseJSON"
				},

				// Data converters
				// Keys separate source (or catchall "*") and destination types with a single space
				converters: {

					// Convert anything to text
					"* text": String,

					// Text to html (true = no transformation)
					"text html": true,

					// Evaluate text as a json expression
					"text json": jQuery.parseJSON,

					// Parse text as xml
					"text xml": jQuery.parseXML
				},

				// For options that shouldn't be deep extended:
				// you can add your own custom options here if
				// and when you create one that shouldn't be
				// deep extended (see ajaxExtend)
				flatOptions: {
					url: true,
					context: true
				}
			},

			// Creates a full fledged settings object into target
			// with both ajaxSettings and settings fields.
			// If target is omitted, writes into ajaxSettings.
			ajaxSetup: function ajaxSetup(target, settings) {
				return settings ?

				// Building a settings object
				ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

				// Extending ajaxSettings
				ajaxExtend(jQuery.ajaxSettings, target);
			},

			ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
			ajaxTransport: addToPrefiltersOrTransports(transports),

			// Main method
			ajax: function ajax(url, options) {

				// If url is an object, simulate pre-1.5 signature
				if (typeof url === "object") {
					options = url;
					url = undefined;
				}

				// Force options to be an object
				options = options || {};

				var transport,
				   
				// URL without anti-cache param
				cacheURL,
				   
				// Response headers
				responseHeadersString,
				    responseHeaders,
				   
				// timeout handle
				timeoutTimer,
				   
				// Cross-domain detection vars
				parts,
				   
				// To know if global events are to be dispatched
				fireGlobals,
				   
				// Loop variable
				i,
				   
				// Create the final options object
				s = jQuery.ajaxSetup({}, options),
				   
				// Callbacks context
				callbackContext = s.context || s,
				   
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
				   
				// Deferreds
				deferred = jQuery.Deferred(),
				    completeDeferred = jQuery.Callbacks("once memory"),
				   
				// Status-dependent callbacks
				_statusCode = s.statusCode || {},
				   
				// Headers (they are sent all at once)
				requestHeaders = {},
				    requestHeadersNames = {},
				   
				// The jqXHR state
				state = 0,
				   
				// Default abort message
				strAbort = "canceled",
				   
				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function getResponseHeader(key) {
						var match;
						if (state === 2) {
							if (!responseHeaders) {
								responseHeaders = {};
								while (match = rheaders.exec(responseHeadersString)) {
									responseHeaders[match[1].toLowerCase()] = match[2];
								}
							}
							match = responseHeaders[key.toLowerCase()];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function getAllResponseHeaders() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function setRequestHeader(name, value) {
						var lname = name.toLowerCase();
						if (!state) {
							name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
							requestHeaders[name] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function overrideMimeType(type) {
						if (!state) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function statusCode(map) {
						var code;
						if (map) {
							if (state < 2) {
								for (code in map) {
									// Lazy-add the new callback in a way that preserves old ones
									_statusCode[code] = [_statusCode[code], map[code]];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always(map[jqXHR.status]);
							}
						}
						return this;
					},

					// Cancel the request
					abort: function abort(statusText) {
						var finalText = statusText || strAbort;
						if (transport) {
							transport.abort(finalText);
						}
						done(0, finalText);
						return this;
					}
				};

				// Attach deferreds
				deferred.promise(jqXHR).complete = completeDeferred.add;
				jqXHR.success = jqXHR.done;
				jqXHR.error = jqXHR.fail;

				// Remove hash character (#7531: and string promotion)
				// Add protocol if not provided (prefilters might expect it)
				// Handle falsy url in the settings object (#10093: consistency with old signature)
				// We also use the url parameter if available
				s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

				// Alias method option to type as per ticket #12004
				s.type = options.method || options.type || s.method || s.type;

				// Extract dataTypes list
				s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

				// A cross-domain request is in order when we have a protocol:host:port mismatch
				if (s.crossDomain == null) {
					parts = rurl.exec(s.url.toLowerCase());
					s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
				}

				// Convert data if not already a string
				if (s.data && s.processData && typeof s.data !== "string") {
					s.data = jQuery.param(s.data, s.traditional);
				}

				// Apply prefilters
				inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

				// If request was aborted inside a prefilter, stop there
				if (state === 2) {
					return jqXHR;
				}

				// We can fire global events as of now if asked to
				// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
				fireGlobals = jQuery.event && s.global;

				// Watch for a new set of requests
				if (fireGlobals && jQuery.active++ === 0) {
					jQuery.event.trigger("ajaxStart");
				}

				// Uppercase the type
				s.type = s.type.toUpperCase();

				// Determine if request has content
				s.hasContent = !rnoContent.test(s.type);

				// Save the URL in case we're toying with the If-Modified-Since
				// and/or If-None-Match header later on
				cacheURL = s.url;

				// More options handling for requests with no content
				if (!s.hasContent) {

					// If data is available, append data to url
					if (s.data) {
						cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
						// #9682: remove data so that it's not used in an eventual retry
						delete s.data;
					}

					// Add anti-cache in url if needed
					if (s.cache === false) {
						s.url = rts.test(cacheURL) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace(rts, "$1_=" + nonce++) :

						// Otherwise add one to the end
						cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
					}
				}

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if (s.ifModified) {
					if (jQuery.lastModified[cacheURL]) {
						jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
					}
					if (jQuery.etag[cacheURL]) {
						jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
					}
				}

				// Set the correct header, if data is being sent
				if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
					jqXHR.setRequestHeader("Content-Type", s.contentType);
				}

				// Set the Accepts header for the server, depending on the dataType
				jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

				// Check for headers option
				for (i in s.headers) {
					jqXHR.setRequestHeader(i, s.headers[i]);
				}

				// Allow custom headers/mimetypes and early abort
				if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
					// Abort if not done already and return
					return jqXHR.abort();
				}

				// Aborting is no longer a cancellation
				strAbort = "abort";

				// Install callbacks on deferreds
				for (i in { success: 1, error: 1, complete: 1 }) {
					jqXHR[i](s[i]);
				}

				// Get transport
				transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

				// If no transport, we auto-abort
				if (!transport) {
					done(-1, "No Transport");
				} else {
					jqXHR.readyState = 1;

					// Send global event
					if (fireGlobals) {
						globalEventContext.trigger("ajaxSend", [jqXHR, s]);
					}
					// Timeout
					if (s.async && s.timeout > 0) {
						timeoutTimer = setTimeout(function () {
							jqXHR.abort("timeout");
						}, s.timeout);
					}

					try {
						state = 1;
						transport.send(requestHeaders, done);
					} catch (e) {
						// Propagate exception as error if not done
						if (state < 2) {
							done(-1, e);
							// Simply rethrow otherwise
						} else {
								throw e;
							}
					}
				}

				// Callback for when everything is done
				function done(status, nativeStatusText, responses, headers) {
					var isSuccess,
					    success,
					    error,
					    response,
					    modified,
					    statusText = nativeStatusText;

					// Called once
					if (state === 2) {
						return;
					}

					// State is "done" now
					state = 2;

					// Clear timeout if it exists
					if (timeoutTimer) {
						clearTimeout(timeoutTimer);
					}

					// Dereference transport for early garbage collection
					// (no matter how long the jqXHR object will be used)
					transport = undefined;

					// Cache response headers
					responseHeadersString = headers || "";

					// Set readyState
					jqXHR.readyState = status > 0 ? 4 : 0;

					// Determine if successful
					isSuccess = status >= 200 && status < 300 || status === 304;

					// Get response data
					if (responses) {
						response = ajaxHandleResponses(s, jqXHR, responses);
					}

					// Convert no matter what (that way responseXXX fields are always set)
					response = ajaxConvert(s, response, jqXHR, isSuccess);

					// If successful, handle type chaining
					if (isSuccess) {

						// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
						if (s.ifModified) {
							modified = jqXHR.getResponseHeader("Last-Modified");
							if (modified) {
								jQuery.lastModified[cacheURL] = modified;
							}
							modified = jqXHR.getResponseHeader("etag");
							if (modified) {
								jQuery.etag[cacheURL] = modified;
							}
						}

						// if no content
						if (status === 204 || s.type === "HEAD") {
							statusText = "nocontent";

							// if not modified
						} else if (status === 304) {
								statusText = "notmodified";

								// If we have data, let's convert it
							} else {
									statusText = response.state;
									success = response.data;
									error = response.error;
									isSuccess = !error;
								}
					} else {
						// Extract error from statusText and normalize for non-aborts
						error = statusText;
						if (status || !statusText) {
							statusText = "error";
							if (status < 0) {
								status = 0;
							}
						}
					}

					// Set data for the fake xhr object
					jqXHR.status = status;
					jqXHR.statusText = (nativeStatusText || statusText) + "";

					// Success/Error
					if (isSuccess) {
						deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
					} else {
						deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
					}

					// Status-dependent callbacks
					jqXHR.statusCode(_statusCode);
					_statusCode = undefined;

					if (fireGlobals) {
						globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
					}

					// Complete
					completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

					if (fireGlobals) {
						globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
						// Handle the global AJAX counter
						if (! --jQuery.active) {
							jQuery.event.trigger("ajaxStop");
						}
					}
				}

				return jqXHR;
			},

			getJSON: function getJSON(url, data, callback) {
				return jQuery.get(url, data, callback, "json");
			},

			getScript: function getScript(url, callback) {
				return jQuery.get(url, undefined, callback, "script");
			}
		});

		jQuery.each(["get", "post"], function (i, method) {
			jQuery[method] = function (url, data, callback, type) {
				// Shift arguments if data argument was omitted
				if (jQuery.isFunction(data)) {
					type = type || callback;
					callback = data;
					data = undefined;
				}

				return jQuery.ajax({
					url: url,
					type: method,
					dataType: type,
					data: data,
					success: callback
				});
			};
		});

		jQuery._evalUrl = function (url) {
			return jQuery.ajax({
				url: url,
				type: "GET",
				dataType: "script",
				async: false,
				global: false,
				"throws": true
			});
		};

		jQuery.fn.extend({
			wrapAll: function wrapAll(html) {
				var wrap;

				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapAll(html.call(this, i));
					});
				}

				if (this[0]) {

					// The elements to wrap the target around
					wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

					if (this[0].parentNode) {
						wrap.insertBefore(this[0]);
					}

					wrap.map(function () {
						var elem = this;

						while (elem.firstElementChild) {
							elem = elem.firstElementChild;
						}

						return elem;
					}).append(this);
				}

				return this;
			},

			wrapInner: function wrapInner(html) {
				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapInner(html.call(this, i));
					});
				}

				return this.each(function () {
					var self = jQuery(this),
					    contents = self.contents();

					if (contents.length) {
						contents.wrapAll(html);
					} else {
						self.append(html);
					}
				});
			},

			wrap: function wrap(html) {
				var isFunction = jQuery.isFunction(html);

				return this.each(function (i) {
					jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
				});
			},

			unwrap: function unwrap() {
				return this.parent().each(function () {
					if (!jQuery.nodeName(this, "body")) {
						jQuery(this).replaceWith(this.childNodes);
					}
				}).end();
			}
		});

		jQuery.expr.filters.hidden = function (elem) {
			// Support: Opera <= 12.12
			// Opera reports offsetWidths and offsetHeights less than zero on some elements
			return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
		};
		jQuery.expr.filters.visible = function (elem) {
			return !jQuery.expr.filters.hidden(elem);
		};

		var r20 = /%20/g,
		    rbracket = /\[\]$/,
		    rCRLF = /\r?\n/g,
		    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		    rsubmittable = /^(?:input|select|textarea|keygen)/i;

		function buildParams(prefix, obj, traditional, add) {
			var name;

			if (jQuery.isArray(obj)) {
				// Serialize array item.
				jQuery.each(obj, function (i, v) {
					if (traditional || rbracket.test(prefix)) {
						// Treat each array item as a scalar.
						add(prefix, v);
					} else {
						// Item is non-scalar (array or object), encode its numeric index.
						buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
					}
				});
			} else if (!traditional && jQuery.type(obj) === "object") {
				// Serialize object item.
				for (name in obj) {
					buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
				}
			} else {
				// Serialize scalar item.
				add(prefix, obj);
			}
		}

		// Serialize an array of form elements or a set of
		// key/values into a query string
		jQuery.param = function (a, traditional) {
			var prefix,
			    s = [],
			    add = function add(key, value) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
			};

			// Set traditional to true for jQuery <= 1.3.2 behavior.
			if (traditional === undefined) {
				traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
			}

			// If an array was passed in, assume that it is an array of form elements.
			if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
				// Serialize the form elements
				jQuery.each(a, function () {
					add(this.name, this.value);
				});
			} else {
				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for (prefix in a) {
					buildParams(prefix, a[prefix], traditional, add);
				}
			}

			// Return the resulting serialization
			return s.join("&").replace(r20, "+");
		};

		jQuery.fn.extend({
			serialize: function serialize() {
				return jQuery.param(this.serializeArray());
			},
			serializeArray: function serializeArray() {
				return this.map(function () {
					// Can add propHook for "elements" to filter or add form elements
					var elements = jQuery.prop(this, "elements");
					return elements ? jQuery.makeArray(elements) : this;
				}).filter(function () {
					var type = this.type;

					// Use .is( ":disabled" ) so that fieldset[disabled] works
					return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
				}).map(function (i, elem) {
					var val = jQuery(this).val();

					return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}).get();
			}
		});

		jQuery.ajaxSettings.xhr = function () {
			try {
				return new XMLHttpRequest();
			} catch (e) {}
		};

		var xhrId = 0,
		    xhrCallbacks = {},
		    xhrSuccessStatus = {
			// file protocol always yields status code 0, assume 200
			0: 200,
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		    xhrSupported = jQuery.ajaxSettings.xhr();

		// Support: IE9
		// Open requests must be manually aborted on unload (#5280)
		// See https://support.microsoft.com/kb/2856746 for more info
		if (window.attachEvent) {
			window.attachEvent("onunload", function () {
				for (var key in xhrCallbacks) {
					xhrCallbacks[key]();
				}
			});
		}

		support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
		support.ajax = xhrSupported = !!xhrSupported;

		jQuery.ajaxTransport(function (options) {
			var callback;

			// Cross domain only allowed if supported through XMLHttpRequest
			if (support.cors || xhrSupported && !options.crossDomain) {
				return {
					send: function send(headers, complete) {
						var i,
						    xhr = options.xhr(),
						    id = ++xhrId;

						xhr.open(options.type, options.url, options.async, options.username, options.password);

						// Apply custom fields if provided
						if (options.xhrFields) {
							for (i in options.xhrFields) {
								xhr[i] = options.xhrFields[i];
							}
						}

						// Override mime type if needed
						if (options.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(options.mimeType);
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if (!options.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Set headers
						for (i in headers) {
							xhr.setRequestHeader(i, headers[i]);
						}

						// Callback
						callback = function (type) {
							return function () {
								if (callback) {
									delete xhrCallbacks[id];
									callback = xhr.onload = xhr.onerror = null;

									if (type === "abort") {
										xhr.abort();
									} else if (type === "error") {
										complete(
										// file: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									} else {
										complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,
										// Support: IE9
										// Accessing binary-data responseText throws an exception
										// (#11426)
										typeof xhr.responseText === "string" ? {
											text: xhr.responseText
										} : undefined, xhr.getAllResponseHeaders());
									}
								}
							};
						};

						// Listen to events
						xhr.onload = callback();
						xhr.onerror = callback("error");

						// Create the abort callback
						callback = xhrCallbacks[id] = callback("abort");

						try {
							// Do send the request (this may raise an exception)
							xhr.send(options.hasContent && options.data || null);
						} catch (e) {
							// #14683: Only rethrow if this hasn't been notified as an error yet
							if (callback) {
								throw e;
							}
						}
					},

					abort: function abort() {
						if (callback) {
							callback();
						}
					}
				};
			}
		});

		// Install script dataType
		jQuery.ajaxSetup({
			accepts: {
				script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
			},
			contents: {
				script: /(?:java|ecma)script/
			},
			converters: {
				"text script": function textScript(text) {
					jQuery.globalEval(text);
					return text;
				}
			}
		});

		// Handle cache's special case and crossDomain
		jQuery.ajaxPrefilter("script", function (s) {
			if (s.cache === undefined) {
				s.cache = false;
			}
			if (s.crossDomain) {
				s.type = "GET";
			}
		});

		// Bind script tag hack transport
		jQuery.ajaxTransport("script", function (s) {
			// This transport only deals with cross domain requests
			if (s.crossDomain) {
				var script, callback;
				return {
					send: function send(_, complete) {
						script = jQuery("<script>").prop({
							async: true,
							charset: s.scriptCharset,
							src: s.url
						}).on("load error", callback = function (evt) {
							script.remove();
							callback = null;
							if (evt) {
								complete(evt.type === "error" ? 404 : 200, evt.type);
							}
						});
						document.head.appendChild(script[0]);
					},
					abort: function abort() {
						if (callback) {
							callback();
						}
					}
				};
			}
		});

		var oldCallbacks = [],
		    rjsonp = /(=)\?(?=&|$)|\?\?/;

		// Default jsonp settings
		jQuery.ajaxSetup({
			jsonp: "callback",
			jsonpCallback: function jsonpCallback() {
				var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
				this[callback] = true;
				return callback;
			}
		});

		// Detect, normalize options and install callbacks for jsonp requests
		jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

			var callbackName,
			    overwritten,
			    responseContainer,
			    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");

			// Handle iff the expected data type is "jsonp" or we have a parameter to set
			if (jsonProp || s.dataTypes[0] === "jsonp") {

				// Get callback name, remembering preexisting value associated with it
				callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

				// Insert callback into url or form data
				if (jsonProp) {
					s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
				} else if (s.jsonp !== false) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
				}

				// Use data converter to retrieve json after script execution
				s.converters["script json"] = function () {
					if (!responseContainer) {
						jQuery.error(callbackName + " was not called");
					}
					return responseContainer[0];
				};

				// force json dataType
				s.dataTypes[0] = "json";

				// Install callback
				overwritten = window[callbackName];
				window[callbackName] = function () {
					responseContainer = arguments;
				};

				// Clean-up function (fires after converters)
				jqXHR.always(function () {
					// Restore preexisting value
					window[callbackName] = overwritten;

					// Save back as free
					if (s[callbackName]) {
						// make sure that re-using the options doesn't screw things around
						s.jsonpCallback = originalSettings.jsonpCallback;

						// save the callback name for future use
						oldCallbacks.push(callbackName);
					}

					// Call if it was a function and we have a response
					if (responseContainer && jQuery.isFunction(overwritten)) {
						overwritten(responseContainer[0]);
					}

					responseContainer = overwritten = undefined;
				});

				// Delegate to script
				return "script";
			}
		});

		// data: string of html
		// context (optional): If specified, the fragment will be created in this context, defaults to document
		// keepScripts (optional): If true, will include scripts passed in the html string
		jQuery.parseHTML = function (data, context, keepScripts) {
			if (!data || typeof data !== "string") {
				return null;
			}
			if (typeof context === "boolean") {
				keepScripts = context;
				context = false;
			}
			context = context || document;

			var parsed = rsingleTag.exec(data),
			    scripts = !keepScripts && [];

			// Single tag
			if (parsed) {
				return [context.createElement(parsed[1])];
			}

			parsed = jQuery.buildFragment([data], context, scripts);

			if (scripts && scripts.length) {
				jQuery(scripts).remove();
			}

			return jQuery.merge([], parsed.childNodes);
		};

		// Keep a copy of the old load method
		var _load = jQuery.fn.load;

		/**
	  * Load a url into a page
	  */
		jQuery.fn.load = function (url, params, callback) {
			if (typeof url !== "string" && _load) {
				return _load.apply(this, arguments);
			}

			var selector,
			    type,
			    response,
			    self = this,
			    off = url.indexOf(" ");

			if (off >= 0) {
				selector = jQuery.trim(url.slice(off));
				url = url.slice(0, off);
			}

			// If it's a function
			if (jQuery.isFunction(params)) {

				// We assume that it's the callback
				callback = params;
				params = undefined;

				// Otherwise, build a param string
			} else if (params && typeof params === "object") {
					type = "POST";
				}

			// If we have elements to modify, make the request
			if (self.length > 0) {
				jQuery.ajax({
					url: url,

					// if "type" variable is undefined, then "GET" method will be used
					type: type,
					dataType: "html",
					data: params
				}).done(function (responseText) {

					// Save response for use in complete callback
					response = arguments;

					self.html(selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

					// Otherwise use the full result
					responseText);
				}).complete(callback && function (jqXHR, status) {
					self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
				});
			}

			return this;
		};

		// Attach a bunch of functions for handling common AJAX events
		jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
			jQuery.fn[type] = function (fn) {
				return this.on(type, fn);
			};
		});

		jQuery.expr.filters.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};

		var docElem = window.document.documentElement;

		/**
	  * Gets a window from an element
	  */
		function getWindow(elem) {
			return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
		}

		jQuery.offset = {
			setOffset: function setOffset(elem, options, i) {
				var curPosition,
				    curLeft,
				    curCSSTop,
				    curTop,
				    curOffset,
				    curCSSLeft,
				    calculatePosition,
				    position = jQuery.css(elem, "position"),
				    curElem = jQuery(elem),
				    props = {};

				// Set position first, in-case top/left are set even on static elem
				if (position === "static") {
					elem.style.position = "relative";
				}

				curOffset = curElem.offset();
				curCSSTop = jQuery.css(elem, "top");
				curCSSLeft = jQuery.css(elem, "left");
				calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

				// Need to be able to calculate position if either
				// top or left is auto and position is either absolute or fixed
				if (calculatePosition) {
					curPosition = curElem.position();
					curTop = curPosition.top;
					curLeft = curPosition.left;
				} else {
					curTop = parseFloat(curCSSTop) || 0;
					curLeft = parseFloat(curCSSLeft) || 0;
				}

				if (jQuery.isFunction(options)) {
					options = options.call(elem, i, curOffset);
				}

				if (options.top != null) {
					props.top = options.top - curOffset.top + curTop;
				}
				if (options.left != null) {
					props.left = options.left - curOffset.left + curLeft;
				}

				if ("using" in options) {
					options.using.call(elem, props);
				} else {
					curElem.css(props);
				}
			}
		};

		jQuery.fn.extend({
			offset: function offset(options) {
				if (arguments.length) {
					return options === undefined ? this : this.each(function (i) {
						jQuery.offset.setOffset(this, options, i);
					});
				}

				var docElem,
				    win,
				    elem = this[0],
				    box = { top: 0, left: 0 },
				    doc = elem && elem.ownerDocument;

				if (!doc) {
					return;
				}

				docElem = doc.documentElement;

				// Make sure it's not a disconnected DOM node
				if (!jQuery.contains(docElem, elem)) {
					return box;
				}

				// Support: BlackBerry 5, iOS 3 (original iPhone)
				// If we don't have gBCR, just use 0,0 rather than error
				if (typeof elem.getBoundingClientRect !== strundefined) {
					box = elem.getBoundingClientRect();
				}
				win = getWindow(doc);
				return {
					top: box.top + win.pageYOffset - docElem.clientTop,
					left: box.left + win.pageXOffset - docElem.clientLeft
				};
			},

			position: function position() {
				if (!this[0]) {
					return;
				}

				var offsetParent,
				    offset,
				    elem = this[0],
				    parentOffset = { top: 0, left: 0 };

				// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
				if (jQuery.css(elem, "position") === "fixed") {
					// Assume getBoundingClientRect is there when computed position is fixed
					offset = elem.getBoundingClientRect();
				} else {
					// Get *real* offsetParent
					offsetParent = this.offsetParent();

					// Get correct offsets
					offset = this.offset();
					if (!jQuery.nodeName(offsetParent[0], "html")) {
						parentOffset = offsetParent.offset();
					}

					// Add offsetParent borders
					parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
					parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
				}

				// Subtract parent offsets and element margins
				return {
					top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
					left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
				};
			},

			offsetParent: function offsetParent() {
				return this.map(function () {
					var offsetParent = this.offsetParent || docElem;

					while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
						offsetParent = offsetParent.offsetParent;
					}

					return offsetParent || docElem;
				});
			}
		});

		// Create scrollLeft and scrollTop methods
		jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
			var top = "pageYOffset" === prop;

			jQuery.fn[method] = function (val) {
				return access(this, function (elem, method, val) {
					var win = getWindow(elem);

					if (val === undefined) {
						return win ? win[prop] : elem[method];
					}

					if (win) {
						win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
					} else {
						elem[method] = val;
					}
				}, method, val, arguments.length, null);
			};
		});

		// Support: Safari<7+, Chrome<37+
		// Add the top/left cssHooks using jQuery.fn.position
		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
		// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
		// getComputedStyle returns percent when specified for top/left/bottom/right;
		// rather than make the css module depend on the offset module, just check for it here
		jQuery.each(["top", "left"], function (i, prop) {
			jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
				if (computed) {
					computed = curCSS(elem, prop);
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
				}
			});
		});

		// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
		jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
			jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
				// Margin is only for outerHeight, outerWidth
				jQuery.fn[funcName] = function (margin, value) {
					var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
					    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

					return access(this, function (elem, type, value) {
						var doc;

						if (jQuery.isWindow(elem)) {
							// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
							// isn't a whole lot we can do. See pull request at this URL for discussion:
							// https://github.com/jquery/jquery/pull/764
							return elem.document.documentElement["client" + name];
						}

						// Get document width or height
						if (elem.nodeType === 9) {
							doc = elem.documentElement;

							// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
							// whichever is greatest
							return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
						}

						return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css(elem, type, extra) :

						// Set width or height on the element
						jQuery.style(elem, type, value, extra);
					}, type, chainable ? margin : undefined, chainable, null);
				};
			});
		});

		// The number of elements contained in the matched element set
		jQuery.fn.size = function () {
			return this.length;
		};

		jQuery.fn.andSelf = jQuery.fn.addBack;

		// Register as a named AMD module, since jQuery can be concatenated with other
		// files that may use define, but not via a proper concatenation script that
		// understands anonymous AMD modules. A named AMD is safest and most robust
		// way to register. Lowercase jquery is used because AMD module names are
		// derived from file names, and jQuery is normally delivered in a lowercase
		// file name. Do this after creating the global so that if an AMD module wants
		// to call noConflict to hide this version of jQuery, it will work.

		// Note that for maximum portability, libraries that are not jQuery should
		// declare themselves as anonymous modules, and avoid setting a global if an
		// AMD loader is present. jQuery is a special case. For more information, see
		// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return jQuery;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}

		var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
		   

		// Map over the $ in case of overwrite
		_$ = window.$;

		jQuery.noConflict = function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$;
			}

			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery;
			}

			return jQuery;
		};

		// Expose jQuery and $ identifiers, even in AMD
		// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
		// and CommonJS for browser emulators (#13566)
		if (typeof noGlobal === strundefined) {
			window.jQuery = window.$ = jQuery;
		}

		return jQuery;
	});
	// Otherwise append directly

/***/ },

/***/ 113:
/***/ function(module, exports, __webpack_require__) {

	// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.
	'use strict';

	__webpack_require__(114);
	__webpack_require__(115);
	__webpack_require__(116);
	__webpack_require__(117);
	__webpack_require__(118);
	__webpack_require__(119);
	__webpack_require__(120);
	__webpack_require__(121);
	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);

/***/ },

/***/ 114:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: transition.js v3.3.5
	 * http://getbootstrap.com/javascript/#transitions
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
	  // ============================================================

	  function transitionEnd() {
	    var el = document.createElement('bootstrap');

	    var transEndEventNames = {
	      WebkitTransition: 'webkitTransitionEnd',
	      MozTransition: 'transitionend',
	      OTransition: 'oTransitionEnd otransitionend',
	      transition: 'transitionend'
	    };

	    for (var name in transEndEventNames) {
	      if (el.style[name] !== undefined) {
	        return { end: transEndEventNames[name] };
	      }
	    }

	    return false; // explicit for ie8 (  ._.)
	  }

	  // http://blog.alexmaccaw.com/css-transitions
	  $.fn.emulateTransitionEnd = function (duration) {
	    var called = false;
	    var $el = this;
	    $(this).one('bsTransitionEnd', function () {
	      called = true;
	    });
	    var callback = function callback() {
	      if (!called) $($el).trigger($.support.transition.end);
	    };
	    setTimeout(callback, duration);
	    return this;
	  };

	  $(function () {
	    $.support.transition = transitionEnd();

	    if (!$.support.transition) return;

	    $.event.special.bsTransitionEnd = {
	      bindType: $.support.transition.end,
	      delegateType: $.support.transition.end,
	      handle: function handle(e) {
	        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
	      }
	    };
	  });
	})(jQuery);

/***/ },

/***/ 115:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: alert.js v3.3.5
	 * http://getbootstrap.com/javascript/#alerts
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // ALERT CLASS DEFINITION
	  // ======================

	  var dismiss = '[data-dismiss="alert"]';
	  var Alert = function Alert(el) {
	    $(el).on('click', dismiss, this.close);
	  };

	  Alert.VERSION = '3.3.5';

	  Alert.TRANSITION_DURATION = 150;

	  Alert.prototype.close = function (e) {
	    var $this = $(this);
	    var selector = $this.attr('data-target');

	    if (!selector) {
	      selector = $this.attr('href');
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
	    }

	    var $parent = $(selector);

	    if (e) e.preventDefault();

	    if (!$parent.length) {
	      $parent = $this.closest('.alert');
	    }

	    $parent.trigger(e = $.Event('close.bs.alert'));

	    if (e.isDefaultPrevented()) return;

	    $parent.removeClass('in');

	    function removeElement() {
	      // detach from parent, fire event then clean up data
	      $parent.detach().trigger('closed.bs.alert').remove();
	    }

	    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
	  };

	  // ALERT PLUGIN DEFINITION
	  // =======================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.alert');

	      if (!data) $this.data('bs.alert', data = new Alert(this));
	      if (typeof option == 'string') data[option].call($this);
	    });
	  }

	  var old = $.fn.alert;

	  $.fn.alert = Plugin;
	  $.fn.alert.Constructor = Alert;

	  // ALERT NO CONFLICT
	  // =================

	  $.fn.alert.noConflict = function () {
	    $.fn.alert = old;
	    return this;
	  };

	  // ALERT DATA-API
	  // ==============

	  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
	})(jQuery);

/***/ },

/***/ 116:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: button.js v3.3.5
	 * http://getbootstrap.com/javascript/#buttons
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // BUTTON PUBLIC CLASS DEFINITION
	  // ==============================

	  var Button = function Button(element, options) {
	    this.$element = $(element);
	    this.options = $.extend({}, Button.DEFAULTS, options);
	    this.isLoading = false;
	  };

	  Button.VERSION = '3.3.5';

	  Button.DEFAULTS = {
	    loadingText: 'loading...'
	  };

	  Button.prototype.setState = function (state) {
	    var d = 'disabled';
	    var $el = this.$element;
	    var val = $el.is('input') ? 'val' : 'html';
	    var data = $el.data();

	    state += 'Text';

	    if (data.resetText == null) $el.data('resetText', $el[val]());

	    // push to event loop to allow forms to submit
	    setTimeout($.proxy(function () {
	      $el[val](data[state] == null ? this.options[state] : data[state]);

	      if (state == 'loadingText') {
	        this.isLoading = true;
	        $el.addClass(d).attr(d, d);
	      } else if (this.isLoading) {
	        this.isLoading = false;
	        $el.removeClass(d).removeAttr(d);
	      }
	    }, this), 0);
	  };

	  Button.prototype.toggle = function () {
	    var changed = true;
	    var $parent = this.$element.closest('[data-toggle="buttons"]');

	    if ($parent.length) {
	      var $input = this.$element.find('input');
	      if ($input.prop('type') == 'radio') {
	        if ($input.prop('checked')) changed = false;
	        $parent.find('.active').removeClass('active');
	        this.$element.addClass('active');
	      } else if ($input.prop('type') == 'checkbox') {
	        if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;
	        this.$element.toggleClass('active');
	      }
	      $input.prop('checked', this.$element.hasClass('active'));
	      if (changed) $input.trigger('change');
	    } else {
	      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
	      this.$element.toggleClass('active');
	    }
	  };

	  // BUTTON PLUGIN DEFINITION
	  // ========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.button');
	      var options = typeof option == 'object' && option;

	      if (!data) $this.data('bs.button', data = new Button(this, options));

	      if (option == 'toggle') data.toggle();else if (option) data.setState(option);
	    });
	  }

	  var old = $.fn.button;

	  $.fn.button = Plugin;
	  $.fn.button.Constructor = Button;

	  // BUTTON NO CONFLICT
	  // ==================

	  $.fn.button.noConflict = function () {
	    $.fn.button = old;
	    return this;
	  };

	  // BUTTON DATA-API
	  // ===============

	  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	    var $btn = $(e.target);
	    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn');
	    Plugin.call($btn, 'toggle');
	    if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault();
	  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
	  });
	})(jQuery);

/***/ },

/***/ 117:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: carousel.js v3.3.5
	 * http://getbootstrap.com/javascript/#carousel
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // CAROUSEL CLASS DEFINITION
	  // =========================

	  var Carousel = function Carousel(element, options) {
	    this.$element = $(element);
	    this.$indicators = this.$element.find('.carousel-indicators');
	    this.options = options;
	    this.paused = null;
	    this.sliding = null;
	    this.interval = null;
	    this.$active = null;
	    this.$items = null;

	    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));

	    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
	  };

	  Carousel.VERSION = '3.3.5';

	  Carousel.TRANSITION_DURATION = 600;

	  Carousel.DEFAULTS = {
	    interval: 5000,
	    pause: 'hover',
	    wrap: true,
	    keyboard: true
	  };

	  Carousel.prototype.keydown = function (e) {
	    if (/input|textarea/i.test(e.target.tagName)) return;
	    switch (e.which) {
	      case 37:
	        this.prev();break;
	      case 39:
	        this.next();break;
	      default:
	        return;
	    }

	    e.preventDefault();
	  };

	  Carousel.prototype.cycle = function (e) {
	    e || (this.paused = false);

	    this.interval && clearInterval(this.interval);

	    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));

	    return this;
	  };

	  Carousel.prototype.getItemIndex = function (item) {
	    this.$items = item.parent().children('.item');
	    return this.$items.index(item || this.$active);
	  };

	  Carousel.prototype.getItemForDirection = function (direction, active) {
	    var activeIndex = this.getItemIndex(active);
	    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;
	    if (willWrap && !this.options.wrap) return active;
	    var delta = direction == 'prev' ? -1 : 1;
	    var itemIndex = (activeIndex + delta) % this.$items.length;
	    return this.$items.eq(itemIndex);
	  };

	  Carousel.prototype.to = function (pos) {
	    var that = this;
	    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));

	    if (pos > this.$items.length - 1 || pos < 0) return;

	    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {
	      that.to(pos);
	    }); // yes, "slid"
	    if (activeIndex == pos) return this.pause().cycle();

	    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
	  };

	  Carousel.prototype.pause = function (e) {
	    e || (this.paused = true);

	    if (this.$element.find('.next, .prev').length && $.support.transition) {
	      this.$element.trigger($.support.transition.end);
	      this.cycle(true);
	    }

	    this.interval = clearInterval(this.interval);

	    return this;
	  };

	  Carousel.prototype.next = function () {
	    if (this.sliding) return;
	    return this.slide('next');
	  };

	  Carousel.prototype.prev = function () {
	    if (this.sliding) return;
	    return this.slide('prev');
	  };

	  Carousel.prototype.slide = function (type, next) {
	    var $active = this.$element.find('.item.active');
	    var $next = next || this.getItemForDirection(type, $active);
	    var isCycling = this.interval;
	    var direction = type == 'next' ? 'left' : 'right';
	    var that = this;

	    if ($next.hasClass('active')) return this.sliding = false;

	    var relatedTarget = $next[0];
	    var slideEvent = $.Event('slide.bs.carousel', {
	      relatedTarget: relatedTarget,
	      direction: direction
	    });
	    this.$element.trigger(slideEvent);
	    if (slideEvent.isDefaultPrevented()) return;

	    this.sliding = true;

	    isCycling && this.pause();

	    if (this.$indicators.length) {
	      this.$indicators.find('.active').removeClass('active');
	      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
	      $nextIndicator && $nextIndicator.addClass('active');
	    }

	    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }); // yes, "slid"
	    if ($.support.transition && this.$element.hasClass('slide')) {
	      $next.addClass(type);
	      $next[0].offsetWidth; // force reflow
	      $active.addClass(direction);
	      $next.addClass(direction);
	      $active.one('bsTransitionEnd', function () {
	        $next.removeClass([type, direction].join(' ')).addClass('active');
	        $active.removeClass(['active', direction].join(' '));
	        that.sliding = false;
	        setTimeout(function () {
	          that.$element.trigger(slidEvent);
	        }, 0);
	      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
	    } else {
	      $active.removeClass('active');
	      $next.addClass('active');
	      this.sliding = false;
	      this.$element.trigger(slidEvent);
	    }

	    isCycling && this.cycle();

	    return this;
	  };

	  // CAROUSEL PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.carousel');
	      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option);
	      var action = typeof option == 'string' ? option : options.slide;

	      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));
	      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();
	    });
	  }

	  var old = $.fn.carousel;

	  $.fn.carousel = Plugin;
	  $.fn.carousel.Constructor = Carousel;

	  // CAROUSEL NO CONFLICT
	  // ====================

	  $.fn.carousel.noConflict = function () {
	    $.fn.carousel = old;
	    return this;
	  };

	  // CAROUSEL DATA-API
	  // =================

	  var clickHandler = function clickHandler(e) {
	    var href;
	    var $this = $(this);
	    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
	    if (!$target.hasClass('carousel')) return;
	    var options = $.extend({}, $target.data(), $this.data());
	    var slideIndex = $this.attr('data-slide-to');
	    if (slideIndex) options.interval = false;

	    Plugin.call($target, options);

	    if (slideIndex) {
	      $target.data('bs.carousel').to(slideIndex);
	    }

	    e.preventDefault();
	  };

	  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);

	  $(window).on('load', function () {
	    $('[data-ride="carousel"]').each(function () {
	      var $carousel = $(this);
	      Plugin.call($carousel, $carousel.data());
	    });
	  });
	})(jQuery);

/***/ },

/***/ 118:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: collapse.js v3.3.5
	 * http://getbootstrap.com/javascript/#collapse
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // COLLAPSE PUBLIC CLASS DEFINITION
	  // ================================

	  var Collapse = function Collapse(element, options) {
	    this.$element = $(element);
	    this.options = $.extend({}, Collapse.DEFAULTS, options);
	    this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
	    this.transitioning = null;

	    if (this.options.parent) {
	      this.$parent = this.getParent();
	    } else {
	      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
	    }

	    if (this.options.toggle) this.toggle();
	  };

	  Collapse.VERSION = '3.3.5';

	  Collapse.TRANSITION_DURATION = 350;

	  Collapse.DEFAULTS = {
	    toggle: true
	  };

	  Collapse.prototype.dimension = function () {
	    var hasWidth = this.$element.hasClass('width');
	    return hasWidth ? 'width' : 'height';
	  };

	  Collapse.prototype.show = function () {
	    if (this.transitioning || this.$element.hasClass('in')) return;

	    var activesData;
	    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');

	    if (actives && actives.length) {
	      activesData = actives.data('bs.collapse');
	      if (activesData && activesData.transitioning) return;
	    }

	    var startEvent = $.Event('show.bs.collapse');
	    this.$element.trigger(startEvent);
	    if (startEvent.isDefaultPrevented()) return;

	    if (actives && actives.length) {
	      Plugin.call(actives, 'hide');
	      activesData || actives.data('bs.collapse', null);
	    }

	    var dimension = this.dimension();

	    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);

	    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);

	    this.transitioning = 1;

	    var complete = function complete() {
	      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
	      this.transitioning = 0;
	      this.$element.trigger('shown.bs.collapse');
	    };

	    if (!$.support.transition) return complete.call(this);

	    var scrollSize = $.camelCase(['scroll', dimension].join('-'));

	    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
	  };

	  Collapse.prototype.hide = function () {
	    if (this.transitioning || !this.$element.hasClass('in')) return;

	    var startEvent = $.Event('hide.bs.collapse');
	    this.$element.trigger(startEvent);
	    if (startEvent.isDefaultPrevented()) return;

	    var dimension = this.dimension();

	    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;

	    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);

	    this.$trigger.addClass('collapsed').attr('aria-expanded', false);

	    this.transitioning = 1;

	    var complete = function complete() {
	      this.transitioning = 0;
	      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
	    };

	    if (!$.support.transition) return complete.call(this);

	    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
	  };

	  Collapse.prototype.toggle = function () {
	    this[this.$element.hasClass('in') ? 'hide' : 'show']();
	  };

	  Collapse.prototype.getParent = function () {
	    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
	      var $element = $(element);
	      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
	    }, this)).end();
	  };

	  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
	    var isOpen = $element.hasClass('in');

	    $element.attr('aria-expanded', isOpen);
	    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
	  };

	  function getTargetFromTrigger($trigger) {
	    var href;
	    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7

	    return $(target);
	  }

	  // COLLAPSE PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.collapse');
	      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);

	      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;
	      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.collapse;

	  $.fn.collapse = Plugin;
	  $.fn.collapse.Constructor = Collapse;

	  // COLLAPSE NO CONFLICT
	  // ====================

	  $.fn.collapse.noConflict = function () {
	    $.fn.collapse = old;
	    return this;
	  };

	  // COLLAPSE DATA-API
	  // =================

	  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
	    var $this = $(this);

	    if (!$this.attr('data-target')) e.preventDefault();

	    var $target = getTargetFromTrigger($this);
	    var data = $target.data('bs.collapse');
	    var option = data ? 'toggle' : $this.data();

	    Plugin.call($target, option);
	  });
	})(jQuery);

/***/ },

/***/ 119:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: dropdown.js v3.3.5
	 * http://getbootstrap.com/javascript/#dropdowns
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // DROPDOWN CLASS DEFINITION
	  // =========================

	  var backdrop = '.dropdown-backdrop';
	  var toggle = '[data-toggle="dropdown"]';
	  var Dropdown = function Dropdown(element) {
	    $(element).on('click.bs.dropdown', this.toggle);
	  };

	  Dropdown.VERSION = '3.3.5';

	  function getParent($this) {
	    var selector = $this.attr('data-target');

	    if (!selector) {
	      selector = $this.attr('href');
	      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
	    }

	    var $parent = selector && $(selector);

	    return $parent && $parent.length ? $parent : $this.parent();
	  }

	  function clearMenus(e) {
	    if (e && e.which === 3) return;
	    $(backdrop).remove();
	    $(toggle).each(function () {
	      var $this = $(this);
	      var $parent = getParent($this);
	      var relatedTarget = { relatedTarget: this };

	      if (!$parent.hasClass('open')) return;

	      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;

	      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));

	      if (e.isDefaultPrevented()) return;

	      $this.attr('aria-expanded', 'false');
	      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget);
	    });
	  }

	  Dropdown.prototype.toggle = function (e) {
	    var $this = $(this);

	    if ($this.is('.disabled, :disabled')) return;

	    var $parent = getParent($this);
	    var isActive = $parent.hasClass('open');

	    clearMenus();

	    if (!isActive) {
	      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
	        // if mobile we use a backdrop because click events don't delegate
	        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);
	      }

	      var relatedTarget = { relatedTarget: this };
	      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));

	      if (e.isDefaultPrevented()) return;

	      $this.trigger('focus').attr('aria-expanded', 'true');

	      $parent.toggleClass('open').trigger('shown.bs.dropdown', relatedTarget);
	    }

	    return false;
	  };

	  Dropdown.prototype.keydown = function (e) {
	    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;

	    var $this = $(this);

	    e.preventDefault();
	    e.stopPropagation();

	    if ($this.is('.disabled, :disabled')) return;

	    var $parent = getParent($this);
	    var isActive = $parent.hasClass('open');

	    if (!isActive && e.which != 27 || isActive && e.which == 27) {
	      if (e.which == 27) $parent.find(toggle).trigger('focus');
	      return $this.trigger('click');
	    }

	    var desc = ' li:not(.disabled):visible a';
	    var $items = $parent.find('.dropdown-menu' + desc);

	    if (!$items.length) return;

	    var index = $items.index(e.target);

	    if (e.which == 38 && index > 0) index--; // up
	    if (e.which == 40 && index < $items.length - 1) index++; // down
	    if (! ~index) index = 0;

	    $items.eq(index).trigger('focus');
	  };

	  // DROPDOWN PLUGIN DEFINITION
	  // ==========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.dropdown');

	      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));
	      if (typeof option == 'string') data[option].call($this);
	    });
	  }

	  var old = $.fn.dropdown;

	  $.fn.dropdown = Plugin;
	  $.fn.dropdown.Constructor = Dropdown;

	  // DROPDOWN NO CONFLICT
	  // ====================

	  $.fn.dropdown.noConflict = function () {
	    $.fn.dropdown = old;
	    return this;
	  };

	  // APPLY TO STANDARD DROPDOWN ELEMENTS
	  // ===================================

	  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
	    e.stopPropagation();
	  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);
	})(jQuery);

/***/ },

/***/ 120:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: modal.js v3.3.5
	 * http://getbootstrap.com/javascript/#modals
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // MODAL CLASS DEFINITION
	  // ======================

	  var Modal = function Modal(element, options) {
	    this.options = options;
	    this.$body = $(document.body);
	    this.$element = $(element);
	    this.$dialog = this.$element.find('.modal-dialog');
	    this.$backdrop = null;
	    this.isShown = null;
	    this.originalBodyPad = null;
	    this.scrollbarWidth = 0;
	    this.ignoreBackdropClick = false;

	    if (this.options.remote) {
	      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
	        this.$element.trigger('loaded.bs.modal');
	      }, this));
	    }
	  };

	  Modal.VERSION = '3.3.5';

	  Modal.TRANSITION_DURATION = 300;
	  Modal.BACKDROP_TRANSITION_DURATION = 150;

	  Modal.DEFAULTS = {
	    backdrop: true,
	    keyboard: true,
	    show: true
	  };

	  Modal.prototype.toggle = function (_relatedTarget) {
	    return this.isShown ? this.hide() : this.show(_relatedTarget);
	  };

	  Modal.prototype.show = function (_relatedTarget) {
	    var that = this;
	    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });

	    this.$element.trigger(e);

	    if (this.isShown || e.isDefaultPrevented()) return;

	    this.isShown = true;

	    this.checkScrollbar();
	    this.setScrollbar();
	    this.$body.addClass('modal-open');

	    this.escape();
	    this.resize();

	    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));

	    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
	      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
	        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;
	      });
	    });

	    this.backdrop(function () {
	      var transition = $.support.transition && that.$element.hasClass('fade');

	      if (!that.$element.parent().length) {
	        that.$element.appendTo(that.$body); // don't move modals dom position
	      }

	      that.$element.show().scrollTop(0);

	      that.adjustDialog();

	      if (transition) {
	        that.$element[0].offsetWidth; // force reflow
	      }

	      that.$element.addClass('in');

	      that.enforceFocus();

	      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });

	      transition ? that.$dialog // wait for modal to slide in
	      .one('bsTransitionEnd', function () {
	        that.$element.trigger('focus').trigger(e);
	      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
	    });
	  };

	  Modal.prototype.hide = function (e) {
	    if (e) e.preventDefault();

	    e = $.Event('hide.bs.modal');

	    this.$element.trigger(e);

	    if (!this.isShown || e.isDefaultPrevented()) return;

	    this.isShown = false;

	    this.escape();
	    this.resize();

	    $(document).off('focusin.bs.modal');

	    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');

	    this.$dialog.off('mousedown.dismiss.bs.modal');

	    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
	  };

	  Modal.prototype.enforceFocus = function () {
	    $(document).off('focusin.bs.modal') // guard against infinite focus loop
	    .on('focusin.bs.modal', $.proxy(function (e) {
	      if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
	        this.$element.trigger('focus');
	      }
	    }, this));
	  };

	  Modal.prototype.escape = function () {
	    if (this.isShown && this.options.keyboard) {
	      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
	        e.which == 27 && this.hide();
	      }, this));
	    } else if (!this.isShown) {
	      this.$element.off('keydown.dismiss.bs.modal');
	    }
	  };

	  Modal.prototype.resize = function () {
	    if (this.isShown) {
	      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
	    } else {
	      $(window).off('resize.bs.modal');
	    }
	  };

	  Modal.prototype.hideModal = function () {
	    var that = this;
	    this.$element.hide();
	    this.backdrop(function () {
	      that.$body.removeClass('modal-open');
	      that.resetAdjustments();
	      that.resetScrollbar();
	      that.$element.trigger('hidden.bs.modal');
	    });
	  };

	  Modal.prototype.removeBackdrop = function () {
	    this.$backdrop && this.$backdrop.remove();
	    this.$backdrop = null;
	  };

	  Modal.prototype.backdrop = function (callback) {
	    var that = this;
	    var animate = this.$element.hasClass('fade') ? 'fade' : '';

	    if (this.isShown && this.options.backdrop) {
	      var doAnimate = $.support.transition && animate;

	      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);

	      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
	        if (this.ignoreBackdropClick) {
	          this.ignoreBackdropClick = false;
	          return;
	        }
	        if (e.target !== e.currentTarget) return;
	        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();
	      }, this));

	      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

	      this.$backdrop.addClass('in');

	      if (!callback) return;

	      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
	    } else if (!this.isShown && this.$backdrop) {
	      this.$backdrop.removeClass('in');

	      var callbackRemove = function callbackRemove() {
	        that.removeBackdrop();
	        callback && callback();
	      };
	      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
	    } else if (callback) {
	      callback();
	    }
	  };

	  // these following methods are used to handle overflowing modals

	  Modal.prototype.handleUpdate = function () {
	    this.adjustDialog();
	  };

	  Modal.prototype.adjustDialog = function () {
	    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;

	    this.$element.css({
	      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
	      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
	    });
	  };

	  Modal.prototype.resetAdjustments = function () {
	    this.$element.css({
	      paddingLeft: '',
	      paddingRight: ''
	    });
	  };

	  Modal.prototype.checkScrollbar = function () {
	    var fullWindowWidth = window.innerWidth;
	    if (!fullWindowWidth) {
	      // workaround for missing window.innerWidth in IE8
	      var documentElementRect = document.documentElement.getBoundingClientRect();
	      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	    }
	    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
	    this.scrollbarWidth = this.measureScrollbar();
	  };

	  Modal.prototype.setScrollbar = function () {
	    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
	    this.originalBodyPad = document.body.style.paddingRight || '';
	    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
	  };

	  Modal.prototype.resetScrollbar = function () {
	    this.$body.css('padding-right', this.originalBodyPad);
	  };

	  Modal.prototype.measureScrollbar = function () {
	    // thx walsh
	    var scrollDiv = document.createElement('div');
	    scrollDiv.className = 'modal-scrollbar-measure';
	    this.$body.append(scrollDiv);
	    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	    this.$body[0].removeChild(scrollDiv);
	    return scrollbarWidth;
	  };

	  // MODAL PLUGIN DEFINITION
	  // =======================

	  function Plugin(option, _relatedTarget) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.modal');
	      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);

	      if (!data) $this.data('bs.modal', data = new Modal(this, options));
	      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);
	    });
	  }

	  var old = $.fn.modal;

	  $.fn.modal = Plugin;
	  $.fn.modal.Constructor = Modal;

	  // MODAL NO CONFLICT
	  // =================

	  $.fn.modal.noConflict = function () {
	    $.fn.modal = old;
	    return this;
	  };

	  // MODAL DATA-API
	  // ==============

	  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
	    var $this = $(this);
	    var href = $this.attr('href');
	    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, '')); // strip for ie7
	    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());

	    if ($this.is('a')) e.preventDefault();

	    $target.one('show.bs.modal', function (showEvent) {
	      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown
	      $target.one('hidden.bs.modal', function () {
	        $this.is(':visible') && $this.trigger('focus');
	      });
	    });
	    Plugin.call($target, option, this);
	  });
	})(jQuery);

/***/ },

/***/ 121:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: tooltip.js v3.3.5
	 * http://getbootstrap.com/javascript/#tooltip
	 * Inspired by the original jQuery.tipsy by Jason Frame
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // TOOLTIP PUBLIC CLASS DEFINITION
	  // ===============================

	  var Tooltip = function Tooltip(element, options) {
	    this.type = null;
	    this.options = null;
	    this.enabled = null;
	    this.timeout = null;
	    this.hoverState = null;
	    this.$element = null;
	    this.inState = null;

	    this.init('tooltip', element, options);
	  };

	  Tooltip.VERSION = '3.3.5';

	  Tooltip.TRANSITION_DURATION = 150;

	  Tooltip.DEFAULTS = {
	    animation: true,
	    placement: 'top',
	    selector: false,
	    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	    trigger: 'hover focus',
	    title: '',
	    delay: 0,
	    html: false,
	    container: false,
	    viewport: {
	      selector: 'body',
	      padding: 0
	    }
	  };

	  Tooltip.prototype.init = function (type, element, options) {
	    this.enabled = true;
	    this.type = type;
	    this.$element = $(element);
	    this.options = this.getOptions(options);
	    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
	    this.inState = { click: false, hover: false, focus: false };

	    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
	      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');
	    }

	    var triggers = this.options.trigger.split(' ');

	    for (var i = triggers.length; i--;) {
	      var trigger = triggers[i];

	      if (trigger == 'click') {
	        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
	      } else if (trigger != 'manual') {
	        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
	        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';

	        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
	        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
	      }
	    }

	    this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();
	  };

	  Tooltip.prototype.getDefaults = function () {
	    return Tooltip.DEFAULTS;
	  };

	  Tooltip.prototype.getOptions = function (options) {
	    options = $.extend({}, this.getDefaults(), this.$element.data(), options);

	    if (options.delay && typeof options.delay == 'number') {
	      options.delay = {
	        show: options.delay,
	        hide: options.delay
	      };
	    }

	    return options;
	  };

	  Tooltip.prototype.getDelegateOptions = function () {
	    var options = {};
	    var defaults = this.getDefaults();

	    this._options && $.each(this._options, function (key, value) {
	      if (defaults[key] != value) options[key] = value;
	    });

	    return options;
	  };

	  Tooltip.prototype.enter = function (obj) {
	    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
	      $(obj.currentTarget).data('bs.' + this.type, self);
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;
	    }

	    if (self.tip().hasClass('in') || self.hoverState == 'in') {
	      self.hoverState = 'in';
	      return;
	    }

	    clearTimeout(self.timeout);

	    self.hoverState = 'in';

	    if (!self.options.delay || !self.options.delay.show) return self.show();

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'in') self.show();
	    }, self.options.delay.show);
	  };

	  Tooltip.prototype.isInStateTrue = function () {
	    for (var key in this.inState) {
	      if (this.inState[key]) return true;
	    }

	    return false;
	  };

	  Tooltip.prototype.leave = function (obj) {
	    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);

	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
	      $(obj.currentTarget).data('bs.' + this.type, self);
	    }

	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;
	    }

	    if (self.isInStateTrue()) return;

	    clearTimeout(self.timeout);

	    self.hoverState = 'out';

	    if (!self.options.delay || !self.options.delay.hide) return self.hide();

	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'out') self.hide();
	    }, self.options.delay.hide);
	  };

	  Tooltip.prototype.show = function () {
	    var e = $.Event('show.bs.' + this.type);

	    if (this.hasContent() && this.enabled) {
	      this.$element.trigger(e);

	      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
	      if (e.isDefaultPrevented() || !inDom) return;
	      var that = this;

	      var $tip = this.tip();

	      var tipId = this.getUID(this.type);

	      this.setContent();
	      $tip.attr('id', tipId);
	      this.$element.attr('aria-describedby', tipId);

	      if (this.options.animation) $tip.addClass('fade');

	      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;

	      var autoToken = /\s?auto?\s?/i;
	      var autoPlace = autoToken.test(placement);
	      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';

	      $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement).data('bs.' + this.type, this);

	      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
	      this.$element.trigger('inserted.bs.' + this.type);

	      var pos = this.getPosition();
	      var actualWidth = $tip[0].offsetWidth;
	      var actualHeight = $tip[0].offsetHeight;

	      if (autoPlace) {
	        var orgPlacement = placement;
	        var viewportDim = this.getPosition(this.$viewport);

	        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;

	        $tip.removeClass(orgPlacement).addClass(placement);
	      }

	      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);

	      this.applyPlacement(calculatedOffset, placement);

	      var complete = function complete() {
	        var prevHoverState = that.hoverState;
	        that.$element.trigger('shown.bs.' + that.type);
	        that.hoverState = null;

	        if (prevHoverState == 'out') that.leave(that);
	      };

	      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
	    }
	  };

	  Tooltip.prototype.applyPlacement = function (offset, placement) {
	    var $tip = this.tip();
	    var width = $tip[0].offsetWidth;
	    var height = $tip[0].offsetHeight;

	    // manually read margins because getBoundingClientRect includes difference
	    var marginTop = parseInt($tip.css('margin-top'), 10);
	    var marginLeft = parseInt($tip.css('margin-left'), 10);

	    // we must check for NaN for ie 8/9
	    if (isNaN(marginTop)) marginTop = 0;
	    if (isNaN(marginLeft)) marginLeft = 0;

	    offset.top += marginTop;
	    offset.left += marginLeft;

	    // $.fn.offset doesn't round pixel values
	    // so we use setOffset directly with our own function B-0
	    $.offset.setOffset($tip[0], $.extend({
	      using: function using(props) {
	        $tip.css({
	          top: Math.round(props.top),
	          left: Math.round(props.left)
	        });
	      }
	    }, offset), 0);

	    $tip.addClass('in');

	    // check to see if placing tip in new offset caused the tip to resize itself
	    var actualWidth = $tip[0].offsetWidth;
	    var actualHeight = $tip[0].offsetHeight;

	    if (placement == 'top' && actualHeight != height) {
	      offset.top = offset.top + height - actualHeight;
	    }

	    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);

	    if (delta.left) offset.left += delta.left;else offset.top += delta.top;

	    var isVertical = /top|bottom/.test(placement);
	    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
	    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';

	    $tip.offset(offset);
	    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
	  };

	  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
	    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');
	  };

	  Tooltip.prototype.setContent = function () {
	    var $tip = this.tip();
	    var title = this.getTitle();

	    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
	    $tip.removeClass('fade in top bottom left right');
	  };

	  Tooltip.prototype.hide = function (callback) {
	    var that = this;
	    var $tip = $(this.$tip);
	    var e = $.Event('hide.bs.' + this.type);

	    function complete() {
	      if (that.hoverState != 'in') $tip.detach();
	      that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
	      callback && callback();
	    }

	    this.$element.trigger(e);

	    if (e.isDefaultPrevented()) return;

	    $tip.removeClass('in');

	    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();

	    this.hoverState = null;

	    return this;
	  };

	  Tooltip.prototype.fixTitle = function () {
	    var $e = this.$element;
	    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
	      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
	    }
	  };

	  Tooltip.prototype.hasContent = function () {
	    return this.getTitle();
	  };

	  Tooltip.prototype.getPosition = function ($element) {
	    $element = $element || this.$element;

	    var el = $element[0];
	    var isBody = el.tagName == 'BODY';

	    var elRect = el.getBoundingClientRect();
	    if (elRect.width == null) {
	      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
	      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });
	    }
	    var elOffset = isBody ? { top: 0, left: 0 } : $element.offset();
	    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
	    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;

	    return $.extend({}, elRect, scroll, outerDims, elOffset);
	  };

	  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
	    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
	    /* placement == 'right' */{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
	  };

	  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
	    var delta = { top: 0, left: 0 };
	    if (!this.$viewport) return delta;

	    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
	    var viewportDimensions = this.getPosition(this.$viewport);

	    if (/right|left/.test(placement)) {
	      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
	      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
	      if (topEdgeOffset < viewportDimensions.top) {
	        // top overflow
	        delta.top = viewportDimensions.top - topEdgeOffset;
	      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
	        // bottom overflow
	        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
	      }
	    } else {
	      var leftEdgeOffset = pos.left - viewportPadding;
	      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
	      if (leftEdgeOffset < viewportDimensions.left) {
	        // left overflow
	        delta.left = viewportDimensions.left - leftEdgeOffset;
	      } else if (rightEdgeOffset > viewportDimensions.right) {
	        // right overflow
	        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
	      }
	    }

	    return delta;
	  };

	  Tooltip.prototype.getTitle = function () {
	    var title;
	    var $e = this.$element;
	    var o = this.options;

	    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

	    return title;
	  };

	  Tooltip.prototype.getUID = function (prefix) {
	    do prefix += ~ ~(Math.random() * 1000000); while (document.getElementById(prefix));
	    return prefix;
	  };

	  Tooltip.prototype.tip = function () {
	    if (!this.$tip) {
	      this.$tip = $(this.options.template);
	      if (this.$tip.length != 1) {
	        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');
	      }
	    }
	    return this.$tip;
	  };

	  Tooltip.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
	  };

	  Tooltip.prototype.enable = function () {
	    this.enabled = true;
	  };

	  Tooltip.prototype.disable = function () {
	    this.enabled = false;
	  };

	  Tooltip.prototype.toggleEnabled = function () {
	    this.enabled = !this.enabled;
	  };

	  Tooltip.prototype.toggle = function (e) {
	    var self = this;
	    if (e) {
	      self = $(e.currentTarget).data('bs.' + this.type);
	      if (!self) {
	        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
	        $(e.currentTarget).data('bs.' + this.type, self);
	      }
	    }

	    if (e) {
	      self.inState.click = !self.inState.click;
	      if (self.isInStateTrue()) self.enter(self);else self.leave(self);
	    } else {
	      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
	    }
	  };

	  Tooltip.prototype.destroy = function () {
	    var that = this;
	    clearTimeout(this.timeout);
	    this.hide(function () {
	      that.$element.off('.' + that.type).removeData('bs.' + that.type);
	      if (that.$tip) {
	        that.$tip.detach();
	      }
	      that.$tip = null;
	      that.$arrow = null;
	      that.$viewport = null;
	    });
	  };

	  // TOOLTIP PLUGIN DEFINITION
	  // =========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.tooltip');
	      var options = typeof option == 'object' && option;

	      if (!data && /destroy|hide/.test(option)) return;
	      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.tooltip;

	  $.fn.tooltip = Plugin;
	  $.fn.tooltip.Constructor = Tooltip;

	  // TOOLTIP NO CONFLICT
	  // ===================

	  $.fn.tooltip.noConflict = function () {
	    $.fn.tooltip = old;
	    return this;
	  };
	})(jQuery);

/***/ },

/***/ 122:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: popover.js v3.3.5
	 * http://getbootstrap.com/javascript/#popovers
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // POPOVER PUBLIC CLASS DEFINITION
	  // ===============================

	  var Popover = function Popover(element, options) {
	    this.init('popover', element, options);
	  };

	  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');

	  Popover.VERSION = '3.3.5';

	  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
	    placement: 'right',
	    trigger: 'click',
	    content: '',
	    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
	  });

	  // NOTE: POPOVER EXTENDS tooltip.js
	  // ================================

	  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);

	  Popover.prototype.constructor = Popover;

	  Popover.prototype.getDefaults = function () {
	    return Popover.DEFAULTS;
	  };

	  Popover.prototype.setContent = function () {
	    var $tip = this.tip();
	    var title = this.getTitle();
	    var content = this.getContent();

	    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
	    $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events
	    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);

	    $tip.removeClass('fade top bottom left right in');

	    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
	    // this manually by checking the contents.
	    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();
	  };

	  Popover.prototype.hasContent = function () {
	    return this.getTitle() || this.getContent();
	  };

	  Popover.prototype.getContent = function () {
	    var $e = this.$element;
	    var o = this.options;

	    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
	  };

	  Popover.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find('.arrow');
	  };

	  // POPOVER PLUGIN DEFINITION
	  // =========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.popover');
	      var options = typeof option == 'object' && option;

	      if (!data && /destroy|hide/.test(option)) return;
	      if (!data) $this.data('bs.popover', data = new Popover(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.popover;

	  $.fn.popover = Plugin;
	  $.fn.popover.Constructor = Popover;

	  // POPOVER NO CONFLICT
	  // ===================

	  $.fn.popover.noConflict = function () {
	    $.fn.popover = old;
	    return this;
	  };
	})(jQuery);

/***/ },

/***/ 123:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: scrollspy.js v3.3.5
	 * http://getbootstrap.com/javascript/#scrollspy
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // SCROLLSPY CLASS DEFINITION
	  // ==========================

	  function ScrollSpy(element, options) {
	    this.$body = $(document.body);
	    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
	    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
	    this.selector = (this.options.target || '') + ' .nav li > a';
	    this.offsets = [];
	    this.targets = [];
	    this.activeTarget = null;
	    this.scrollHeight = 0;

	    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));
	    this.refresh();
	    this.process();
	  }

	  ScrollSpy.VERSION = '3.3.5';

	  ScrollSpy.DEFAULTS = {
	    offset: 10
	  };

	  ScrollSpy.prototype.getScrollHeight = function () {
	    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
	  };

	  ScrollSpy.prototype.refresh = function () {
	    var that = this;
	    var offsetMethod = 'offset';
	    var offsetBase = 0;

	    this.offsets = [];
	    this.targets = [];
	    this.scrollHeight = this.getScrollHeight();

	    if (!$.isWindow(this.$scrollElement[0])) {
	      offsetMethod = 'position';
	      offsetBase = this.$scrollElement.scrollTop();
	    }

	    this.$body.find(this.selector).map(function () {
	      var $el = $(this);
	      var href = $el.data('target') || $el.attr('href');
	      var $href = /^#./.test(href) && $(href);

	      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;
	    }).sort(function (a, b) {
	      return a[0] - b[0];
	    }).each(function () {
	      that.offsets.push(this[0]);
	      that.targets.push(this[1]);
	    });
	  };

	  ScrollSpy.prototype.process = function () {
	    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
	    var scrollHeight = this.getScrollHeight();
	    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
	    var offsets = this.offsets;
	    var targets = this.targets;
	    var activeTarget = this.activeTarget;
	    var i;

	    if (this.scrollHeight != scrollHeight) {
	      this.refresh();
	    }

	    if (scrollTop >= maxScroll) {
	      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
	    }

	    if (activeTarget && scrollTop < offsets[0]) {
	      this.activeTarget = null;
	      return this.clear();
	    }

	    for (i = offsets.length; i--;) {
	      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
	    }
	  };

	  ScrollSpy.prototype.activate = function (target) {
	    this.activeTarget = target;

	    this.clear();

	    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

	    var active = $(selector).parents('li').addClass('active');

	    if (active.parent('.dropdown-menu').length) {
	      active = active.closest('li.dropdown').addClass('active');
	    }

	    active.trigger('activate.bs.scrollspy');
	  };

	  ScrollSpy.prototype.clear = function () {
	    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
	  };

	  // SCROLLSPY PLUGIN DEFINITION
	  // ===========================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.scrollspy');
	      var options = typeof option == 'object' && option;

	      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.scrollspy;

	  $.fn.scrollspy = Plugin;
	  $.fn.scrollspy.Constructor = ScrollSpy;

	  // SCROLLSPY NO CONFLICT
	  // =====================

	  $.fn.scrollspy.noConflict = function () {
	    $.fn.scrollspy = old;
	    return this;
	  };

	  // SCROLLSPY DATA-API
	  // ==================

	  $(window).on('load.bs.scrollspy.data-api', function () {
	    $('[data-spy="scroll"]').each(function () {
	      var $spy = $(this);
	      Plugin.call($spy, $spy.data());
	    });
	  });
	})(jQuery);

/***/ },

/***/ 124:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: tab.js v3.3.5
	 * http://getbootstrap.com/javascript/#tabs
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // TAB CLASS DEFINITION
	  // ====================

	  var Tab = function Tab(element) {
	    // jscs:disable requireDollarBeforejQueryAssignment
	    this.element = $(element);
	    // jscs:enable requireDollarBeforejQueryAssignment
	  };

	  Tab.VERSION = '3.3.5';

	  Tab.TRANSITION_DURATION = 150;

	  Tab.prototype.show = function () {
	    var $this = this.element;
	    var $ul = $this.closest('ul:not(.dropdown-menu)');
	    var selector = $this.data('target');

	    if (!selector) {
	      selector = $this.attr('href');
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
	    }

	    if ($this.parent('li').hasClass('active')) return;

	    var $previous = $ul.find('.active:last a');
	    var hideEvent = $.Event('hide.bs.tab', {
	      relatedTarget: $this[0]
	    });
	    var showEvent = $.Event('show.bs.tab', {
	      relatedTarget: $previous[0]
	    });

	    $previous.trigger(hideEvent);
	    $this.trigger(showEvent);

	    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;

	    var $target = $(selector);

	    this.activate($this.closest('li'), $ul);
	    this.activate($target, $target.parent(), function () {
	      $previous.trigger({
	        type: 'hidden.bs.tab',
	        relatedTarget: $this[0]
	      });
	      $this.trigger({
	        type: 'shown.bs.tab',
	        relatedTarget: $previous[0]
	      });
	    });
	  };

	  Tab.prototype.activate = function (element, container, callback) {
	    var $active = container.find('> .active');
	    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);

	    function next() {
	      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);

	      element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);

	      if (transition) {
	        element[0].offsetWidth; // reflow for transition
	        element.addClass('in');
	      } else {
	        element.removeClass('fade');
	      }

	      if (element.parent('.dropdown-menu').length) {
	        element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
	      }

	      callback && callback();
	    }

	    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();

	    $active.removeClass('in');
	  };

	  // TAB PLUGIN DEFINITION
	  // =====================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.tab');

	      if (!data) $this.data('bs.tab', data = new Tab(this));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.tab;

	  $.fn.tab = Plugin;
	  $.fn.tab.Constructor = Tab;

	  // TAB NO CONFLICT
	  // ===============

	  $.fn.tab.noConflict = function () {
	    $.fn.tab = old;
	    return this;
	  };

	  // TAB DATA-API
	  // ============

	  var clickHandler = function clickHandler(e) {
	    e.preventDefault();
	    Plugin.call($(this), 'show');
	  };

	  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
	})(jQuery);

/***/ },

/***/ 125:
/***/ function(module, exports) {

	/* ========================================================================
	 * Bootstrap: affix.js v3.3.5
	 * http://getbootstrap.com/javascript/#affix
	 * ========================================================================
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */

	'use strict';

	+(function ($) {
	  'use strict';

	  // AFFIX CLASS DEFINITION
	  // ======================

	  var Affix = function Affix(element, options) {
	    this.options = $.extend({}, Affix.DEFAULTS, options);

	    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));

	    this.$element = $(element);
	    this.affixed = null;
	    this.unpin = null;
	    this.pinnedOffset = null;

	    this.checkPosition();
	  };

	  Affix.VERSION = '3.3.5';

	  Affix.RESET = 'affix affix-top affix-bottom';

	  Affix.DEFAULTS = {
	    offset: 0,
	    target: window
	  };

	  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
	    var scrollTop = this.$target.scrollTop();
	    var position = this.$element.offset();
	    var targetHeight = this.$target.height();

	    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;

	    if (this.affixed == 'bottom') {
	      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';
	      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
	    }

	    var initializing = this.affixed == null;
	    var colliderTop = initializing ? scrollTop : position.top;
	    var colliderHeight = initializing ? targetHeight : height;

	    if (offsetTop != null && scrollTop <= offsetTop) return 'top';
	    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';

	    return false;
	  };

	  Affix.prototype.getPinnedOffset = function () {
	    if (this.pinnedOffset) return this.pinnedOffset;
	    this.$element.removeClass(Affix.RESET).addClass('affix');
	    var scrollTop = this.$target.scrollTop();
	    var position = this.$element.offset();
	    return this.pinnedOffset = position.top - scrollTop;
	  };

	  Affix.prototype.checkPositionWithEventLoop = function () {
	    setTimeout($.proxy(this.checkPosition, this), 1);
	  };

	  Affix.prototype.checkPosition = function () {
	    if (!this.$element.is(':visible')) return;

	    var height = this.$element.height();
	    var offset = this.options.offset;
	    var offsetTop = offset.top;
	    var offsetBottom = offset.bottom;
	    var scrollHeight = Math.max($(document).height(), $(document.body).height());

	    if (typeof offset != 'object') offsetBottom = offsetTop = offset;
	    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);
	    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);

	    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);

	    if (this.affixed != affix) {
	      if (this.unpin != null) this.$element.css('top', '');

	      var affixType = 'affix' + (affix ? '-' + affix : '');
	      var e = $.Event(affixType + '.bs.affix');

	      this.$element.trigger(e);

	      if (e.isDefaultPrevented()) return;

	      this.affixed = affix;
	      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;

	      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
	    }

	    if (affix == 'bottom') {
	      this.$element.offset({
	        top: scrollHeight - height - offsetBottom
	      });
	    }
	  };

	  // AFFIX PLUGIN DEFINITION
	  // =======================

	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this);
	      var data = $this.data('bs.affix');
	      var options = typeof option == 'object' && option;

	      if (!data) $this.data('bs.affix', data = new Affix(this, options));
	      if (typeof option == 'string') data[option]();
	    });
	  }

	  var old = $.fn.affix;

	  $.fn.affix = Plugin;
	  $.fn.affix.Constructor = Affix;

	  // AFFIX NO CONFLICT
	  // =================

	  $.fn.affix.noConflict = function () {
	    $.fn.affix = old;
	    return this;
	  };

	  // AFFIX DATA-API
	  // ==============

	  $(window).on('load', function () {
	    $('[data-spy="affix"]').each(function () {
	      var $spy = $(this);
	      var data = $spy.data();

	      data.offset = data.offset || {};

	      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;
	      if (data.offsetTop != null) data.offset.top = data.offsetTop;

	      Plugin.call($spy, data);
	    });
	  });
	})(jQuery);

/***/ },

/***/ 126:
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;

	/**
	* @version: 2.0.6
	* @author: Dan Grossman http://www.dangrossman.info/
	* @copyright: Copyright (c) 2012-2015 Dan Grossman. All rights reserved.
	* @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
	* @website: https://www.improvely.com/
	*/

	'use strict';

	(function (root, factory) {

	    if (typeof define === 'function' && define.amd) {
	        define(['moment', 'jquery', 'exports'], function (momentjs, $, exports) {
	            root.daterangepicker = factory(root, exports, momentjs, $);
	        });
	    } else if (true) {
	        var momentjs = __webpack_require__(127);
	        var jQuery = window.jQuery;
	        if (jQuery === undefined) {
	            try {
	                jQuery = __webpack_require__(129);
	            } catch (err) {
	                if (!jQuery) throw new Error('jQuery dependency not found');
	            }
	        }

	        factory(root, exports, momentjs, jQuery);

	        // Finally, as a browser global.
	    } else {
	            root.daterangepicker = factory(root, {}, root.moment || moment, root.jQuery || root.Zepto || root.ender || root.$);
	        }
	})(undefined, function (root, daterangepicker, moment, $) {

	    var DateRangePicker = function DateRangePicker(element, options, cb) {

	        //default settings for options
	        this.parentEl = 'body';
	        this.element = $(element);
	        this.startDate = moment().startOf('day');
	        this.endDate = moment().endOf('day');
	        this.timeZone = moment().utcOffset();
	        this.minDate = false;
	        this.maxDate = false;
	        this.dateLimit = false;
	        this.autoApply = false;
	        this.singleDatePicker = false;
	        this.showDropdowns = false;
	        this.showWeekNumbers = false;
	        this.timePicker = false;
	        this.timePicker24Hour = false;
	        this.timePickerIncrement = 1;
	        this.timePickerSeconds = false;
	        this.ranges = {};

	        this.opens = 'right';
	        if (this.element.hasClass('pull-right')) this.opens = 'left';

	        this.drops = 'down';
	        if (this.element.hasClass('dropup')) this.drops = 'up';

	        this.buttonClasses = 'btn btn-sm';
	        this.applyClass = 'btn-success';
	        this.cancelClass = 'btn-default';

	        this.locale = {
	            format: 'MM/DD/YYYY',
	            separator: ' - ',
	            applyLabel: 'Apply',
	            cancelLabel: 'Cancel',
	            weekLabel: 'W',
	            customRangeLabel: 'Custom Range',
	            daysOfWeek: moment.weekdaysMin(),
	            monthNames: moment.monthsShort(),
	            firstDay: moment.localeData().firstDayOfWeek()
	        };

	        this.callback = function () {};

	        //some state information
	        this.isShowing = false;
	        this.leftCalendar = {};
	        this.rightCalendar = {};

	        //custom options from user
	        if (typeof options !== 'object' || options === null) options = {};

	        //allow setting options with data attributes
	        //data-api options will be overwritten with custom javascript options
	        options = $.extend(this.element.data(), options);

	        //html template for the picker UI
	        if (typeof options.template !== 'string') options.template = '<div class="daterangepicker dropdown-menu">' + '<div class="calendar left">' + '<div class="daterangepicker_input">' + '<input class="input-mini" type="text" name="daterangepicker_start" value="" />' + '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' + '<div class="calendar-time">' + '<div></div>' + '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' + '</div>' + '</div>' + '<div class="calendar-table"></div>' + '</div>' + '<div class="calendar right">' + '<div class="daterangepicker_input">' + '<input class="input-mini" type="text" name="daterangepicker_end" value="" />' + '<i class="fa fa-calendar glyphicon glyphicon-calendar"></i>' + '<div class="calendar-time">' + '<div></div>' + '<i class="fa fa-clock-o glyphicon glyphicon-time"></i>' + '</div>' + '</div>' + '<div class="calendar-table"></div>' + '</div>' + '<div class="ranges">' + '<div class="range_inputs">' + '<button class="applyBtn" disabled="disabled" type="button"></button> ' + '<button class="cancelBtn" type="button"></button>' + '</div>' + '</div>' + '</div>';

	        this.parentEl = options.parentEl && $(options.parentEl).length ? $(options.parentEl) : $(this.parentEl);
	        this.container = $(options.template).appendTo(this.parentEl);

	        //
	        // handle all the possible options overriding defaults
	        //

	        if (typeof options.locale === 'object') {

	            if (typeof options.locale.format === 'string') this.locale.format = options.locale.format;

	            if (typeof options.locale.separator === 'string') this.locale.separator = options.locale.separator;

	            if (typeof options.locale.daysOfWeek === 'object') this.locale.daysOfWeek = options.locale.daysOfWeek.slice();

	            if (typeof options.locale.monthNames === 'object') this.locale.monthNames = options.locale.monthNames.slice();

	            if (typeof options.locale.firstDay === 'number') this.locale.firstDay = options.locale.firstDay;

	            if (typeof options.locale.applyLabel === 'string') this.locale.applyLabel = options.locale.applyLabel;

	            if (typeof options.locale.cancelLabel === 'string') this.locale.cancelLabel = options.locale.cancelLabel;

	            if (typeof options.locale.weekLabel === 'string') this.locale.weekLabel = options.locale.weekLabel;

	            if (typeof options.locale.customRangeLabel === 'string') this.locale.customRangeLabel = options.locale.customRangeLabel;
	        }

	        if (typeof options.startDate === 'string') this.startDate = moment(options.startDate, this.locale.format);

	        if (typeof options.endDate === 'string') this.endDate = moment(options.endDate, this.locale.format);

	        if (typeof options.minDate === 'string') this.minDate = moment(options.minDate, this.locale.format);

	        if (typeof options.maxDate === 'string') this.maxDate = moment(options.maxDate, this.locale.format);

	        if (typeof options.startDate === 'object') this.startDate = moment(options.startDate);

	        if (typeof options.endDate === 'object') this.endDate = moment(options.endDate);

	        if (typeof options.minDate === 'object') this.minDate = moment(options.minDate);

	        if (typeof options.maxDate === 'object') this.maxDate = moment(options.maxDate);

	        // sanity check for bad options
	        if (this.minDate && this.startDate.isBefore(this.minDate)) this.startDate = this.minDate.clone();

	        // sanity check for bad options
	        if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate.clone();

	        if (typeof options.applyClass === 'string') this.applyClass = options.applyClass;

	        if (typeof options.cancelClass === 'string') this.cancelClass = options.cancelClass;

	        if (typeof options.dateLimit === 'object') this.dateLimit = options.dateLimit;

	        if (typeof options.opens === 'string') this.opens = options.opens;

	        if (typeof options.drops === 'string') this.drops = options.drops;

	        if (typeof options.showWeekNumbers === 'boolean') this.showWeekNumbers = options.showWeekNumbers;

	        if (typeof options.buttonClasses === 'string') this.buttonClasses = options.buttonClasses;

	        if (typeof options.buttonClasses === 'object') this.buttonClasses = options.buttonClasses.join(' ');

	        if (typeof options.showDropdowns === 'boolean') this.showDropdowns = options.showDropdowns;

	        if (typeof options.singleDatePicker === 'boolean') {
	            this.singleDatePicker = options.singleDatePicker;
	            if (this.singleDatePicker) this.endDate = this.startDate.clone();
	        }

	        if (typeof options.timePicker === 'boolean') this.timePicker = options.timePicker;

	        if (typeof options.timePickerSeconds === 'boolean') this.timePickerSeconds = options.timePickerSeconds;

	        if (typeof options.timePickerIncrement === 'number') this.timePickerIncrement = options.timePickerIncrement;

	        if (typeof options.timePicker24Hour === 'boolean') this.timePicker24Hour = options.timePicker24Hour;

	        if (typeof options.autoApply === 'boolean') this.autoApply = options.autoApply;

	        // update day names order to firstDay
	        if (this.locale.firstDay != 0) {
	            var iterator = this.locale.firstDay;
	            while (iterator > 0) {
	                this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift());
	                iterator--;
	            }
	        }

	        var start, end, range;

	        //if no start/end dates set, check if an input element contains initial values
	        if (typeof options.startDate === 'undefined' && typeof options.endDate === 'undefined') {
	            if ($(this.element).is('input[type=text]')) {
	                var val = $(this.element).val(),
	                    split = val.split(this.locale.separator);

	                start = end = null;

	                if (split.length == 2) {
	                    start = moment(split[0], this.locale.format);
	                    end = moment(split[1], this.locale.format);
	                } else if (this.singleDatePicker && val !== "") {
	                    start = moment(val, this.locale.format);
	                    end = moment(val, this.locale.format);
	                }
	                if (start !== null && end !== null) {
	                    this.setStartDate(start);
	                    this.setEndDate(end);
	                }
	            }
	        }

	        // bind the time zone used to build the calendar to either the timeZone passed in through the options or the zone of the startDate (which will be the local time zone by default)
	        if (typeof options.timeZone === 'string' || typeof options.timeZone === 'number') {
	            if (typeof options.timeZone === 'string' && typeof moment.tz !== 'undefined') {
	                this.timeZone = moment.tz.zone(options.timeZone).parse(new Date()) * -1; // Offset is positive if the timezone is behind UTC and negative if it is ahead.
	            } else {
	                    this.timeZone = options.timeZone;
	                }
	            this.startDate.utcOffset(this.timeZone);
	            this.endDate.utcOffset(this.timeZone);
	        } else {
	            this.timeZone = moment(this.startDate).utcOffset();
	        }

	        if (typeof options.ranges === 'object') {
	            for (range in options.ranges) {

	                if (typeof options.ranges[range][0] === 'string') start = moment(options.ranges[range][0], this.locale.format);else start = moment(options.ranges[range][0]);

	                if (typeof options.ranges[range][1] === 'string') end = moment(options.ranges[range][1], this.locale.format);else end = moment(options.ranges[range][1]);

	                // If the start or end date exceed those allowed by the minDate or dateLimit
	                // options, shorten the range to the allowable period.
	                if (this.minDate && start.isBefore(this.minDate)) start = this.minDate.clone();

	                var maxDate = this.maxDate;
	                if (this.dateLimit && start.clone().add(this.dateLimit).isAfter(maxDate)) maxDate = start.clone().add(this.dateLimit);
	                if (maxDate && end.isAfter(maxDate)) end = maxDate.clone();

	                // If the end of the range is before the minimum or the start of the range is
	                // after the maximum, don't display this range option at all.
	                if (this.minDate && end.isBefore(this.minDate) || maxDate && start.isAfter(maxDate)) continue;

	                this.ranges[range] = [start, end];
	            }

	            var list = '<ul>';
	            for (range in this.ranges) {
	                list += '<li>' + range + '</li>';
	            }
	            list += '<li>' + this.locale.customRangeLabel + '</li>';
	            list += '</ul>';
	            this.container.find('.ranges ul').remove();
	            this.container.find('.ranges').prepend(list);
	        }

	        if (typeof cb === 'function') {
	            this.callback = cb;
	        }

	        if (!this.timePicker) {
	            this.startDate = this.startDate.startOf('day');
	            this.endDate = this.endDate.endOf('day');
	            this.container.find('.calendar-time').hide();
	        }

	        //can't be used together for now
	        if (this.timePicker && this.autoApply) this.autoApply = false;

	        if (this.autoApply && typeof options.ranges !== 'object') {
	            this.container.find('.ranges').hide();
	        } else if (this.autoApply) {
	            this.container.find('.applyBtn, .cancelBtn').addClass('hide');
	        }

	        if (this.singleDatePicker) {
	            this.container.addClass('single');
	            this.container.find('.calendar.left').addClass('single');
	            this.container.find('.calendar.left').show();
	            this.container.find('.calendar.right').hide();
	            this.container.find('.daterangepicker_input input, .daterangepicker_input i').hide();
	            if (!this.timePicker) {
	                this.container.find('.ranges').hide();
	            }
	        }

	        if (typeof options.ranges === 'undefined' && !this.singleDatePicker) {
	            this.container.addClass('show-calendar');
	        }

	        this.container.removeClass('opensleft opensright').addClass('opens' + this.opens);

	        //apply CSS classes and labels to buttons
	        this.container.find('.applyBtn, .cancelBtn').addClass(this.buttonClasses);
	        if (this.applyClass.length) this.container.find('.applyBtn').addClass(this.applyClass);
	        if (this.cancelClass.length) this.container.find('.cancelBtn').addClass(this.cancelClass);
	        this.container.find('.applyBtn').html(this.locale.applyLabel);
	        this.container.find('.cancelBtn').html(this.locale.cancelLabel);

	        //
	        // event listeners
	        //

	        this.container.find('.calendar').on('click.daterangepicker', '.prev', $.proxy(this.clickPrev, this)).on('click.daterangepicker', '.next', $.proxy(this.clickNext, this)).on('click.daterangepicker', 'td.available', $.proxy(this.clickDate, this)).on('mouseenter.daterangepicker', 'td.available', $.proxy(this.hoverDate, this)).on('mouseleave.daterangepicker', 'td.available', $.proxy(this.updateFormInputs, this)).on('change.daterangepicker', 'select.yearselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.monthselect', $.proxy(this.monthOrYearChanged, this)).on('change.daterangepicker', 'select.hourselect,select.minuteselect,select.secondselect,select.ampmselect', $.proxy(this.timeChanged, this)).on('click.daterangepicker', '.daterangepicker_input input', $.proxy(this.showCalendars, this)).on('keyup.daterangepicker', '.daterangepicker_input input', $.proxy(this.formInputsChanged, this)).on('change.daterangepicker', '.daterangepicker_input input', $.proxy(this.updateFormInputs, this));

	        this.container.find('.ranges').on('click.daterangepicker', 'button.applyBtn', $.proxy(this.clickApply, this)).on('click.daterangepicker', 'button.cancelBtn', $.proxy(this.clickCancel, this)).on('click.daterangepicker', 'li', $.proxy(this.clickRange, this)).on('mouseenter.daterangepicker', 'li', $.proxy(this.hoverRange, this)).on('mouseleave.daterangepicker', 'li', $.proxy(this.updateFormInputs, this));

	        if (this.element.is('input')) {
	            this.element.on({
	                'click.daterangepicker': $.proxy(this.show, this),
	                'focus.daterangepicker': $.proxy(this.show, this),
	                'keyup.daterangepicker': $.proxy(this.controlChanged, this),
	                'keydown.daterangepicker': $.proxy(this.keydown, this)
	            });
	        } else {
	            this.element.on('click.daterangepicker', $.proxy(this.toggle, this));
	        }

	        //
	        // if attached to a text input, set the initial value
	        //

	        if (this.element.is('input') && !this.singleDatePicker) {
	            this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
	            this.element.trigger('change');
	        } else if (this.element.is('input')) {
	            this.element.val(this.startDate.format(this.locale.format));
	            this.element.trigger('change');
	        }
	    };

	    DateRangePicker.prototype = {

	        constructor: DateRangePicker,

	        setStartDate: function setStartDate(startDate) {
	            if (typeof startDate === 'string') this.startDate = moment(startDate, this.locale.format).utcOffset(this.timeZone);

	            if (typeof startDate === 'object') this.startDate = moment(startDate);

	            if (!this.timePicker) this.startDate = this.startDate.startOf('day');

	            if (this.timePicker && this.timePickerIncrement) this.startDate.minute(Math.round(this.startDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);

	            if (this.minDate && this.startDate.isBefore(this.minDate)) this.startDate = this.minDate;

	            if (this.maxDate && this.startDate.isAfter(this.maxDate)) this.startDate = this.maxDate;

	            this.updateMonthsInView();
	        },

	        setEndDate: function setEndDate(endDate) {
	            if (typeof endDate === 'string') this.endDate = moment(endDate, this.locale.format).utcOffset(this.timeZone);

	            if (typeof endDate === 'object') this.endDate = moment(endDate);

	            if (!this.timePicker) this.endDate = this.endDate.endOf('day');

	            if (this.timePicker && this.timePickerIncrement) this.endDate.minute(Math.round(this.endDate.minute() / this.timePickerIncrement) * this.timePickerIncrement);

	            if (this.endDate.isBefore(this.startDate)) this.endDate = this.startDate.clone();

	            if (this.maxDate && this.endDate.isAfter(this.maxDate)) this.endDate = this.maxDate;

	            if (this.dateLimit && this.startDate.clone().add(this.dateLimit).isBefore(this.endDate)) this.endDate = this.startDate.clone().add(this.dateLimit);

	            this.updateMonthsInView();
	        },

	        updateView: function updateView() {
	            if (this.timePicker) {
	                this.renderTimePicker('left');
	                this.renderTimePicker('right');
	                if (!this.endDate) {
	                    this.container.find('.right .calendar-time select').attr('disabled', 'disabled').addClass('disabled');
	                } else {
	                    this.container.find('.right .calendar-time select').removeAttr('disabled').removeClass('disabled');
	                }
	            }
	            if (this.endDate) {
	                this.container.find('input[name="daterangepicker_end"]').removeClass('active');
	                this.container.find('input[name="daterangepicker_start"]').addClass('active');
	            } else {
	                this.container.find('input[name="daterangepicker_end"]').addClass('active');
	                this.container.find('input[name="daterangepicker_start"]').removeClass('active');
	            }
	            this.updateMonthsInView();
	            this.updateCalendars();
	            this.updateFormInputs();
	        },

	        updateMonthsInView: function updateMonthsInView() {
	            if (this.endDate) {
	                this.leftCalendar.month = this.startDate.clone().date(2);
	                if (this.endDate.month() != this.startDate.month() || this.endDate.year() != this.startDate.year()) {
	                    this.rightCalendar.month = this.endDate.clone().date(2);
	                } else {
	                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
	                }
	            } else {
	                if (this.leftCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM') && this.rightCalendar.month.format('YYYY-MM') != this.startDate.format('YYYY-MM')) {
	                    this.leftCalendar.month = this.startDate.clone().date(2);
	                    this.rightCalendar.month = this.startDate.clone().date(2).add(1, 'month');
	                }
	            }
	        },

	        updateCalendars: function updateCalendars() {

	            if (this.timePicker) {
	                var hour, minute, second;
	                if (this.endDate) {
	                    hour = parseInt(this.container.find('.left .hourselect').val(), 10);
	                    minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
	                    second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
	                    if (!this.timePicker24Hour) {
	                        var ampm = this.container.find('.left .ampmselect').val();
	                        if (ampm === 'PM' && hour < 12) hour += 12;
	                        if (ampm === 'AM' && hour === 12) hour = 0;
	                    }
	                } else {
	                    hour = parseInt(this.container.find('.right .hourselect').val(), 10);
	                    minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
	                    second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
	                    if (!this.timePicker24Hour) {
	                        var ampm = this.container.find('.left .ampmselect').val();
	                        if (ampm === 'PM' && hour < 12) hour += 12;
	                        if (ampm === 'AM' && hour === 12) hour = 0;
	                    }
	                }
	                this.leftCalendar.month.hour(hour).minute(minute).second(second);
	                this.rightCalendar.month.hour(hour).minute(minute).second(second);
	            }

	            this.renderCalendar('left');
	            this.renderCalendar('right');

	            //highlight any predefined range matching the current start and end dates
	            this.container.find('.ranges li').removeClass('active');
	            if (this.endDate == null) return;

	            var customRange = true;
	            var i = 0;
	            for (var range in this.ranges) {
	                if (this.timePicker) {
	                    if (this.startDate.isSame(this.ranges[range][0]) && this.endDate.isSame(this.ranges[range][1])) {
	                        customRange = false;
	                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
	                        break;
	                    }
	                } else {
	                    //ignore times when comparing dates if time picker is not enabled
	                    if (this.startDate.format('YYYY-MM-DD') == this.ranges[range][0].format('YYYY-MM-DD') && this.endDate.format('YYYY-MM-DD') == this.ranges[range][1].format('YYYY-MM-DD')) {
	                        customRange = false;
	                        this.chosenLabel = this.container.find('.ranges li:eq(' + i + ')').addClass('active').html();
	                        break;
	                    }
	                }
	                i++;
	            }
	            if (customRange) {
	                this.chosenLabel = this.container.find('.ranges li:last').addClass('active').html();
	                this.showCalendars();
	            }
	        },

	        renderCalendar: function renderCalendar(side) {

	            //
	            // Build the matrix of dates that will populate the calendar
	            //

	            var calendar = side == 'left' ? this.leftCalendar : this.rightCalendar;
	            var month = calendar.month.month();
	            var year = calendar.month.year();
	            var hour = calendar.month.hour();
	            var minute = calendar.month.minute();
	            var second = calendar.month.second();
	            var daysInMonth = moment([year, month]).daysInMonth();
	            var firstDay = moment([year, month, 1]);
	            var lastDay = moment([year, month, daysInMonth]);
	            var lastMonth = moment(firstDay).subtract(1, 'month').month();
	            var lastYear = moment(firstDay).subtract(1, 'month').year();
	            var daysInLastMonth = moment([lastYear, lastMonth]).daysInMonth();
	            var dayOfWeek = firstDay.day();

	            //initialize a 6 rows x 7 columns array for the calendar
	            var calendar = [];
	            calendar.firstDay = firstDay;
	            calendar.lastDay = lastDay;

	            for (var i = 0; i < 6; i++) {
	                calendar[i] = [];
	            }

	            //populate the calendar with date objects
	            var startDay = daysInLastMonth - dayOfWeek + this.locale.firstDay + 1;
	            if (startDay > daysInLastMonth) startDay -= 7;

	            if (dayOfWeek == this.locale.firstDay) startDay = daysInLastMonth - 6;

	            // Possible patch for issue #626 https://github.com/dangrossman/bootstrap-daterangepicker/issues/626
	            var curDate = moment([lastYear, lastMonth, startDay, 12, minute, second]); // .utcOffset(this.timeZone);

	            var col, row;
	            for (var i = 0, col = 0, row = 0; i < 42; i++, col++, curDate = moment(curDate).add(24, 'hour')) {
	                if (i > 0 && col % 7 === 0) {
	                    col = 0;
	                    row++;
	                }
	                calendar[row][col] = curDate.clone().hour(hour).minute(minute).second(second);
	                curDate.hour(12);

	                if (this.minDate && calendar[row][col].format('YYYY-MM-DD') == this.minDate.format('YYYY-MM-DD') && calendar[row][col].isBefore(this.minDate) && side == 'left') {
	                    calendar[row][col] = this.minDate.clone();
	                }

	                if (this.maxDate && calendar[row][col].format('YYYY-MM-DD') == this.maxDate.format('YYYY-MM-DD') && calendar[row][col].isAfter(this.maxDate) && side == 'right') {
	                    calendar[row][col] = this.maxDate.clone();
	                }
	            }

	            //make the calendar object available to hoverDate/clickDate
	            if (side == 'left') {
	                this.leftCalendar.calendar = calendar;
	            } else {
	                this.rightCalendar.calendar = calendar;
	            }

	            //
	            // Display the calendar
	            //

	            var minDate = side == 'left' ? this.minDate : this.startDate;
	            var maxDate = this.maxDate;
	            var selected = side == 'left' ? this.startDate : this.endDate;

	            var html = '<table class="table-condensed">';
	            html += '<thead>';
	            html += '<tr>';

	            // add empty cell for week number
	            if (this.showWeekNumbers) html += '<th></th>';

	            if (!minDate || minDate.isBefore(calendar.firstDay)) {
	                html += '<th class="prev available"><i class="fa fa-chevron-left glyphicon glyphicon-chevron-left"></i></th>';
	            } else {
	                html += '<th></th>';
	            }

	            var dateHtml = this.locale.monthNames[calendar[1][1].month()] + calendar[1][1].format(" YYYY");

	            if (this.showDropdowns) {
	                var currentMonth = calendar[1][1].month();
	                var currentYear = calendar[1][1].year();
	                var maxYear = maxDate && maxDate.year() || currentYear + 5;
	                var minYear = minDate && minDate.year() || currentYear - 50;
	                var inMinYear = currentYear == minYear;
	                var inMaxYear = currentYear == maxYear;

	                var monthHtml = '<select class="monthselect">';
	                for (var m = 0; m < 12; m++) {
	                    if ((!inMinYear || m >= minDate.month()) && (!inMaxYear || m <= maxDate.month())) {
	                        monthHtml += "<option value='" + m + "'" + (m === currentMonth ? " selected='selected'" : "") + ">" + this.locale.monthNames[m] + "</option>";
	                    }
	                }
	                monthHtml += "</select>";

	                var yearHtml = '<select class="yearselect">';
	                for (var y = minYear; y <= maxYear; y++) {
	                    yearHtml += '<option value="' + y + '"' + (y === currentYear ? ' selected="selected"' : '') + '>' + y + '</option>';
	                }
	                yearHtml += '</select>';

	                dateHtml = monthHtml + yearHtml;
	            }

	            html += '<th colspan="5" class="month">' + dateHtml + '</th>';
	            if (!maxDate || maxDate.isAfter(calendar.lastDay)) {
	                html += '<th class="next available"><i class="fa fa-chevron-right glyphicon glyphicon-chevron-right"></i></th>';
	            } else {
	                html += '<th></th>';
	            }

	            html += '</tr>';
	            html += '<tr>';

	            // add week number label
	            if (this.showWeekNumbers) html += '<th class="week">' + this.locale.weekLabel + '</th>';

	            $.each(this.locale.daysOfWeek, function (index, dayOfWeek) {
	                html += '<th>' + dayOfWeek + '</th>';
	            });

	            html += '</tr>';
	            html += '</thead>';
	            html += '<tbody>';

	            //adjust maxDate to reflect the dateLimit setting in order to
	            //grey out end dates beyond the dateLimit
	            if (this.endDate == null && this.dateLimit) {
	                var maxLimit = this.startDate.clone().add(this.dateLimit).endOf('day');
	                if (!maxDate || maxLimit.isBefore(maxDate)) {
	                    maxDate = maxLimit;
	                }
	            }

	            for (var row = 0; row < 6; row++) {
	                html += '<tr>';

	                // add week number
	                if (this.showWeekNumbers) html += '<td class="week">' + calendar[row][0].week() + '</td>';

	                for (var col = 0; col < 7; col++) {

	                    var classes = [];

	                    //highlight today's date
	                    if (calendar[row][col].isSame(new Date(), "day")) classes.push('today');

	                    //highlight weekends
	                    if (calendar[row][col].isoWeekday() > 5) classes.push('weekend');

	                    //grey out the dates in other months displayed at beginning and end of this calendar
	                    if (calendar[row][col].month() != calendar[1][1].month()) classes.push('off');

	                    //don't allow selection of dates before the minimum date
	                    if (this.minDate && calendar[row][col].isBefore(this.minDate, 'day')) classes.push('off', 'disabled');

	                    //don't allow selection of dates after the maximum date
	                    if (maxDate && calendar[row][col].isAfter(maxDate, 'day')) classes.push('off', 'disabled');

	                    //highlight the currently selected start date
	                    if (calendar[row][col].format('YYYY-MM-DD') == this.startDate.format('YYYY-MM-DD')) classes.push('active', 'start-date');

	                    //highlight the currently selected end date
	                    if (this.endDate != null && calendar[row][col].format('YYYY-MM-DD') == this.endDate.format('YYYY-MM-DD')) classes.push('active', 'end-date');

	                    //highlight dates in-between the selected dates
	                    if (this.endDate != null && calendar[row][col] > this.startDate && calendar[row][col] < this.endDate) classes.push('in-range');

	                    var cname = '',
	                        disabled = false;
	                    for (var i = 0; i < classes.length; i++) {
	                        cname += classes[i] + ' ';
	                        if (classes[i] == 'disabled') disabled = true;
	                    }
	                    if (!disabled) cname += 'available';

	                    html += '<td class="' + cname.replace(/^\s+|\s+$/g, '') + '" data-title="' + 'r' + row + 'c' + col + '">' + calendar[row][col].date() + '</td>';
	                }
	                html += '</tr>';
	            }

	            html += '</tbody>';
	            html += '</table>';

	            this.container.find('.calendar.' + side + ' .calendar-table').html(html);
	        },

	        renderTimePicker: function renderTimePicker(side) {

	            var selected,
	                minDate,
	                maxDate = this.maxDate;

	            if (this.dateLimit && (!this.maxDate || this.startDate.clone().add(this.dateLimit).isAfter(this.maxDate))) maxDate = this.startDate.clone().add(this.dateLimit);

	            if (side == 'left') {
	                selected = this.startDate.clone();
	                minDate = this.minDate;
	            } else if (side == 'right') {
	                selected = this.endDate ? this.endDate.clone() : this.startDate.clone();
	                minDate = this.startDate;
	            }

	            //
	            // hours
	            //

	            html = '<select class="hourselect">';

	            var start = this.timePicker24Hour ? 0 : 1;
	            var end = this.timePicker24Hour ? 23 : 12;

	            for (var i = start; i <= end; i++) {
	                var i_in_24 = i;
	                if (!this.timePicker24Hour) i_in_24 = selected.hour() >= 12 ? i == 12 ? 12 : i + 12 : i == 12 ? 0 : i;

	                var time = selected.clone().hour(i_in_24);
	                var disabled = false;
	                if (minDate && time.minute(59).isBefore(minDate)) disabled = true;
	                if (maxDate && time.minute(0).isAfter(maxDate)) disabled = true;

	                if (i_in_24 == selected.hour() && !disabled) {
	                    html += '<option value="' + i + '" selected="selected">' + i + '</option>';
	                } else if (disabled) {
	                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + i + '</option>';
	                } else {
	                    html += '<option value="' + i + '">' + i + '</option>';
	                }
	            }

	            html += '</select> ';

	            //
	            // minutes
	            //

	            html += ': <select class="minuteselect">';

	            for (var i = 0; i < 60; i += this.timePickerIncrement) {
	                var padded = i < 10 ? '0' + i : i;
	                var time = selected.clone().minute(i);

	                var disabled = false;
	                if (minDate && time.second(59).isBefore(minDate)) disabled = true;
	                if (maxDate && time.second(0).isAfter(maxDate)) disabled = true;

	                if (selected.minute() == i && !disabled) {
	                    html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
	                } else if (disabled) {
	                    html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
	                } else {
	                    html += '<option value="' + i + '">' + padded + '</option>';
	                }
	            }

	            html += '</select> ';

	            //
	            // seconds
	            //

	            if (this.timePickerSeconds) {
	                html += ': <select class="secondselect">';

	                for (var i = 0; i < 60; i++) {
	                    var padded = i < 10 ? '0' + i : i;
	                    var time = selected.clone().second(i);

	                    var disabled = false;
	                    if (minDate && time.isBefore(minDate)) disabled = true;
	                    if (maxDate && time.isAfter(maxDate)) disabled = true;

	                    if (selected.second() == i && !disabled) {
	                        html += '<option value="' + i + '" selected="selected">' + padded + '</option>';
	                    } else if (disabled) {
	                        html += '<option value="' + i + '" disabled="disabled" class="disabled">' + padded + '</option>';
	                    } else {
	                        html += '<option value="' + i + '">' + padded + '</option>';
	                    }
	                }

	                html += '</select> ';
	            }

	            //
	            // AM/PM
	            //

	            if (!this.timePicker24Hour) {
	                html += '<select class="ampmselect">';

	                var am_html = '';
	                var pm_html = '';

	                if (minDate && selected.clone().hour(12).minute(0).second(0).isBefore(minDate)) am_html = ' disabled="disabled" class="disabled"';

	                if (maxDate && selected.clone().hour(0).minute(0).second(0).isAfter(maxDate)) pm_html = ' disabled="disabled" class="disabled"';

	                if (selected.hour() >= 12) {
	                    html += '<option value="AM"' + am_html + '>AM</option><option value="PM" selected="selected"' + pm_html + '>PM</option>';
	                } else {
	                    html += '<option value="AM" selected="selected"' + am_html + '>AM</option><option value="PM"' + pm_html + '>PM</option>';
	                }

	                html += '</select>';
	            }

	            this.container.find('.calendar.' + side + ' .calendar-time div').html(html);
	        },

	        updateFormInputs: function updateFormInputs() {
	            this.container.find('input[name=daterangepicker_start]').val(this.startDate.format(this.locale.format));
	            if (this.endDate) this.container.find('input[name=daterangepicker_end]').val(this.endDate.format(this.locale.format));

	            if (this.singleDatePicker || this.endDate && (this.startDate.isBefore(this.endDate) || this.startDate.isSame(this.endDate))) {
	                this.container.find('button.applyBtn').removeAttr('disabled');
	            } else {
	                this.container.find('button.applyBtn').attr('disabled', 'disabled');
	            }
	        },

	        move: function move() {
	            var parentOffset = { top: 0, left: 0 },
	                containerTop;
	            var parentRightEdge = $(window).width();
	            if (!this.parentEl.is('body')) {
	                parentOffset = {
	                    top: this.parentEl.offset().top - this.parentEl.scrollTop(),
	                    left: this.parentEl.offset().left - this.parentEl.scrollLeft()
	                };
	                parentRightEdge = this.parentEl[0].clientWidth + this.parentEl.offset().left;
	            }

	            if (this.drops == 'up') containerTop = this.element.offset().top - this.container.outerHeight() - parentOffset.top;else containerTop = this.element.offset().top + this.element.outerHeight() - parentOffset.top;
	            this.container[this.drops == 'up' ? 'addClass' : 'removeClass']('dropup');

	            if (this.opens == 'left') {
	                this.container.css({
	                    top: containerTop,
	                    right: parentRightEdge - this.element.offset().left - this.element.outerWidth(),
	                    left: 'auto'
	                });
	                if (this.container.offset().left < 0) {
	                    this.container.css({
	                        right: 'auto',
	                        left: 9
	                    });
	                }
	            } else if (this.opens == 'center') {
	                this.container.css({
	                    top: containerTop,
	                    left: this.element.offset().left - parentOffset.left + this.element.outerWidth() / 2 - this.container.outerWidth() / 2,
	                    right: 'auto'
	                });
	                if (this.container.offset().left < 0) {
	                    this.container.css({
	                        right: 'auto',
	                        left: 9
	                    });
	                }
	            } else {
	                this.container.css({
	                    top: containerTop,
	                    left: this.element.offset().left - parentOffset.left,
	                    right: 'auto'
	                });
	                if (this.container.offset().left + this.container.outerWidth() > $(window).width()) {
	                    this.container.css({
	                        left: 'auto',
	                        right: 0
	                    });
	                }
	            }
	        },

	        show: function show(e) {
	            if (this.isShowing) return;

	            // Create a click proxy that is private to this instance of datepicker, for unbinding
	            this._outsideClickProxy = $.proxy(function (e) {
	                this.outsideClick(e);
	            }, this);
	            // Bind global datepicker mousedown for hiding and
	            $(document).on('mousedown.daterangepicker', this._outsideClickProxy)
	            // also support mobile devices
	            .on('touchend.daterangepicker', this._outsideClickProxy)
	            // also explicitly play nice with Bootstrap dropdowns, which stopPropagation when clicking them
	            .on('click.daterangepicker', '[data-toggle=dropdown]', this._outsideClickProxy)
	            // and also close when focus changes to outside the picker (eg. tabbing between controls)
	            .on('focusin.daterangepicker', this._outsideClickProxy);

	            this.oldStartDate = this.startDate.clone();
	            this.oldEndDate = this.endDate.clone();

	            this.updateView();
	            this.container.show();
	            this.move();
	            this.element.trigger('show.daterangepicker', this);
	            this.isShowing = true;
	        },

	        hide: function hide(e) {
	            if (!this.isShowing) return;

	            //incomplete date selection, revert to last values
	            if (!this.endDate) {
	                this.startDate = this.oldStartDate.clone();
	                this.endDate = this.oldEndDate.clone();
	            }

	            //if a new date range was selected, invoke the user callback function
	            if (!this.startDate.isSame(this.oldStartDate) || !this.endDate.isSame(this.oldEndDate)) this.callback(this.startDate, this.endDate, this.chosenLabel);

	            //if picker is attached to a text input, update it
	            if (this.element.is('input') && !this.singleDatePicker) {
	                this.element.val(this.startDate.format(this.locale.format) + this.locale.separator + this.endDate.format(this.locale.format));
	                this.element.trigger('change');
	            } else if (this.element.is('input')) {
	                this.element.val(this.startDate.format(this.locale.format));
	                this.element.trigger('change');
	            }

	            $(document).off('.daterangepicker');
	            this.container.hide();
	            this.element.trigger('hide.daterangepicker', this);
	            this.isShowing = false;
	        },

	        toggle: function toggle(e) {
	            if (this.isShowing) {
	                this.hide();
	            } else {
	                this.show();
	            }
	        },

	        outsideClick: function outsideClick(e) {
	            var target = $(e.target);
	            // if the page is clicked anywhere except within the daterangerpicker/button
	            // itself then call this.hide()
	            if (
	            // ie modal dialog fix
	            e.type == "focusin" || target.closest(this.element).length || target.closest(this.container).length || target.closest('.calendar-table').length) return;
	            this.hide();
	        },

	        showCalendars: function showCalendars() {
	            this.container.addClass('show-calendar');
	            this.move();
	            this.element.trigger('showCalendar.daterangepicker', this);
	        },

	        hideCalendars: function hideCalendars() {
	            this.container.removeClass('show-calendar');
	            this.element.trigger('hideCalendar.daterangepicker', this);
	        },

	        hoverRange: function hoverRange(e) {
	            var label = e.target.innerHTML;
	            if (label == this.locale.customRangeLabel) {
	                this.updateView();
	            } else {
	                var dates = this.ranges[label];
	                this.container.find('input[name=daterangepicker_start]').val(dates[0].format(this.locale.format));
	                this.container.find('input[name=daterangepicker_end]').val(dates[1].format(this.locale.format));
	            }
	        },

	        clickRange: function clickRange(e) {
	            var label = e.target.innerHTML;
	            this.chosenLabel = label;
	            if (label == this.locale.customRangeLabel) {
	                this.showCalendars();
	            } else {
	                var dates = this.ranges[label];
	                this.startDate = dates[0];
	                this.endDate = dates[1];

	                if (!this.timePicker) {
	                    this.startDate.startOf('day');
	                    this.endDate.endOf('day');
	                }

	                this.hideCalendars();
	                this.clickApply();
	            }
	        },

	        clickPrev: function clickPrev(e) {
	            var cal = $(e.target).parents('.calendar');
	            if (cal.hasClass('left')) {
	                this.leftCalendar.month.subtract(1, 'month');
	            } else {
	                this.rightCalendar.month.subtract(1, 'month');
	            }
	            this.updateCalendars();
	        },

	        clickNext: function clickNext(e) {
	            var cal = $(e.target).parents('.calendar');
	            if (cal.hasClass('left')) {
	                this.leftCalendar.month.add(1, 'month');
	            } else {
	                this.rightCalendar.month.add(1, 'month');
	            }
	            this.updateCalendars();
	        },

	        hoverDate: function hoverDate(e) {

	            //ignore dates that can't be selected
	            if (!$(e.target).hasClass('available')) return;

	            //have the text inputs above calendars reflect the date being hovered over
	            var title = $(e.target).attr('data-title');
	            var row = title.substr(1, 1);
	            var col = title.substr(3, 1);
	            var cal = $(e.target).parents('.calendar');
	            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];

	            if (this.endDate) {
	                this.container.find('input[name=daterangepicker_start]').val(date.format(this.locale.format));
	            } else {
	                this.container.find('input[name=daterangepicker_end]').val(date.format(this.locale.format));
	            }

	            //highlight the dates between the start date and the date being hovered as a potential end date
	            var leftCalendar = this.leftCalendar;
	            var rightCalendar = this.rightCalendar;
	            var startDate = this.startDate;
	            if (!this.endDate) {
	                this.container.find('.calendar td').each(function (index, el) {
	                    var title = $(el).attr('data-title');
	                    var row = title.substr(1, 1);
	                    var col = title.substr(3, 1);
	                    var cal = $(el).parents('.calendar');
	                    var dt = cal.hasClass('left') ? leftCalendar.calendar[row][col] : rightCalendar.calendar[row][col];
	                    if (dt.isAfter(startDate) && dt.isBefore(date)) {
	                        $(el).addClass('in-range');
	                    } else {
	                        $(el).removeClass('in-range');
	                    }
	                });
	            }
	        },

	        clickDate: function clickDate(e) {

	            if (!$(e.target).hasClass('available')) return;

	            var title = $(e.target).attr('data-title');
	            var row = title.substr(1, 1);
	            var col = title.substr(3, 1);
	            var cal = $(e.target).parents('.calendar');
	            var date = cal.hasClass('left') ? this.leftCalendar.calendar[row][col] : this.rightCalendar.calendar[row][col];

	            //
	            // this function needs to do a few things:
	            // * alternate between selecting a start and end date for the range,
	            // * if the time picker is enabled, apply the hour/minute/second from the select boxes to the clicked date
	            // * if autoapply is enabled, and an end date was chosen, apply the selection
	            // * if single date picker mode, and time picker isn't enabled, apply the selection immediately
	            //

	            if (this.endDate || date.isBefore(this.startDate)) {
	                if (this.timePicker) {
	                    var hour = parseInt(this.container.find('.left .hourselect').val(), 10);
	                    if (!this.timePicker24Hour) {
	                        var ampm = cal.find('.ampmselect').val();
	                        if (ampm === 'PM' && hour < 12) hour += 12;
	                        if (ampm === 'AM' && hour === 12) hour = 0;
	                    }
	                    var minute = parseInt(this.container.find('.left .minuteselect').val(), 10);
	                    var second = this.timePickerSeconds ? parseInt(this.container.find('.left .secondselect').val(), 10) : 0;
	                    date = date.clone().hour(hour).minute(minute).second(second);
	                }
	                this.endDate = null;
	                this.setStartDate(date.clone());
	            } else {
	                if (this.timePicker) {
	                    var hour = parseInt(this.container.find('.right .hourselect').val(), 10);
	                    if (!this.timePicker24Hour) {
	                        var ampm = this.container.find('.right .ampmselect').val();
	                        if (ampm === 'PM' && hour < 12) hour += 12;
	                        if (ampm === 'AM' && hour === 12) hour = 0;
	                    }
	                    var minute = parseInt(this.container.find('.right .minuteselect').val(), 10);
	                    var second = this.timePickerSeconds ? parseInt(this.container.find('.right .secondselect').val(), 10) : 0;
	                    date = date.clone().hour(hour).minute(minute).second(second);
	                }
	                this.setEndDate(date.clone());
	                if (this.autoApply) this.clickApply();
	            }

	            if (this.singleDatePicker) {
	                this.setEndDate(this.startDate);
	                if (!this.timePicker) this.clickApply();
	            }

	            this.updateView();
	        },

	        clickApply: function clickApply(e) {
	            this.hide();
	            this.element.trigger('apply.daterangepicker', this);
	        },

	        clickCancel: function clickCancel(e) {
	            this.startDate = this.oldStartDate;
	            this.endDate = this.oldEndDate;
	            this.hide();
	            this.element.trigger('cancel.daterangepicker', this);
	        },

	        monthOrYearChanged: function monthOrYearChanged(e) {
	            var isLeft = $(e.target).closest('.calendar').hasClass('left'),
	                leftOrRight = isLeft ? 'left' : 'right',
	                cal = this.container.find('.calendar.' + leftOrRight);

	            // Month must be Number for new moment versions
	            var month = parseInt(cal.find('.monthselect').val(), 10);
	            var year = cal.find('.yearselect').val();

	            if (!isLeft) {
	                if (year < this.startDate.year() || year == this.startDate.year() && month < this.startDate.month()) {
	                    month = this.startDate.month();
	                    year = this.startDate.year();
	                }
	            }

	            if (this.minDate) {
	                if (year < this.minDate.year() || year == this.minDate.year() && month < this.minDate.month()) {
	                    month = this.minDate.month();
	                    year = this.minDate.year();
	                }
	            }

	            if (this.maxDate) {
	                if (year > this.maxDate.year() || year == this.maxDate.year() && month > this.maxDate.month()) {
	                    month = this.maxDate.month();
	                    year = this.maxDate.year();
	                }
	            }

	            this[leftOrRight + 'Calendar'].month.month(month).year(year);
	            this.updateCalendars();
	        },

	        timeChanged: function timeChanged(e) {

	            var cal = $(e.target).closest('.calendar'),
	                isLeft = cal.hasClass('left');

	            var hour = parseInt(cal.find('.hourselect').val(), 10);
	            var minute = parseInt(cal.find('.minuteselect').val(), 10);
	            var second = this.timePickerSeconds ? parseInt(cal.find('.secondselect').val(), 10) : 0;

	            if (!this.timePicker24Hour) {
	                var ampm = cal.find('.ampmselect').val();
	                if (ampm === 'PM' && hour < 12) hour += 12;
	                if (ampm === 'AM' && hour === 12) hour = 0;
	            }

	            if (isLeft) {
	                var start = this.startDate.clone();
	                start.hour(hour);
	                start.minute(minute);
	                start.second(second);
	                this.setStartDate(start);
	                if (this.singleDatePicker) this.endDate = this.startDate.clone();
	            } else if (this.endDate) {
	                var end = this.endDate.clone();
	                end.hour(hour);
	                end.minute(minute);
	                end.second(second);
	                this.setEndDate(end);
	            }

	            //update the calendars so all clickable dates reflect the new time component
	            this.updateCalendars();

	            //update the form inputs above the calendars with the new time
	            this.updateFormInputs();

	            //re-render the time pickers because changing one selection can affect what's enabled in another
	            this.renderTimePicker('left');
	            this.renderTimePicker('right');
	        },

	        formInputsChanged: function formInputsChanged(e) {
	            var isRight = $(e.target).closest('.calendar').hasClass('right');
	            var start = moment(this.container.find('input[name="daterangepicker_start"]').val(), this.locale.format);
	            var end = moment(this.container.find('input[name="daterangepicker_end"]').val(), this.locale.format);

	            if (start.isValid() && end.isValid()) {

	                if (isRight && end.isBefore(start)) start = end.clone();

	                this.setStartDate(start);
	                this.setEndDate(end);

	                if (isRight) {
	                    this.container.find('input[name="daterangepicker_start"]').val(this.startDate.format(this.locale.format));
	                } else {
	                    this.container.find('input[name="daterangepicker_end"]').val(this.endDate.format(this.locale.format));
	                }
	            }

	            this.updateCalendars();
	            if (this.timePicker) {
	                this.renderTimePicker('left');
	                this.renderTimePicker('right');
	            }
	        },

	        controlChanged: function controlChanged() {
	            if (!this.element.is('input')) return;
	            if (!this.element.val().length) return;

	            var dateString = this.element.val().split(this.locale.separator),
	                start = null,
	                end = null;

	            if (dateString.length === 2) {
	                start = moment(dateString[0], this.locale.format).utcOffset(this.timeZone);
	                end = moment(dateString[1], this.locale.format).utcOffset(this.timeZone);
	            }

	            if (this.singleDatePicker || start === null || end === null) {
	                start = moment(this.element.val(), this.locale.format).utcOffset(this.timeZone);
	                end = start;
	            }

	            this.setStartDate(start);
	            this.setEndDate(end);
	            this.updateView();
	        },

	        keydown: function keydown(e) {
	            //hide on tab or enter
	            if (e.keyCode === 9 || e.keyCode === 13) {
	                this.hide();
	            }
	        },

	        remove: function remove() {
	            this.container.remove();
	            this.element.off('.daterangepicker');
	            this.element.removeData();
	        }

	    };

	    $.fn.daterangepicker = function (options, callback) {
	        this.each(function () {
	            var el = $(this);
	            if (el.data('daterangepicker')) el.data('daterangepicker').remove();
	            el.data('daterangepicker', new DateRangePicker(el, options, callback));
	        });
	        return this;
	    };
	});

/***/ },

/***/ 127:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.10.6
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	'use strict';

	(function (global, factory) {
	     true ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
	})(undefined, function () {
	    'use strict';

	    var hookCallback;

	    function utils_hooks__hooks() {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [],
	            i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function create_utc__createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;

	            if (m._strict) {
	                m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
	            }
	        }
	        return m._isValid;
	    }

	    function valid__createInvalid(flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    var momentProperties = utils_hooks__hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (typeof from._isAMomentObject !== 'undefined') {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (typeof from._i !== 'undefined') {
	            to._i = from._i;
	        }
	        if (typeof from._f !== 'undefined') {
	            to._f = from._f;
	        }
	        if (typeof from._l !== 'undefined') {
	            to._l = from._l;
	        }
	        if (typeof from._strict !== 'undefined') {
	            to._strict = from._strict;
	        }
	        if (typeof from._tzm !== 'undefined') {
	            to._tzm = from._tzm;
	        }
	        if (typeof from._isUTC !== 'undefined') {
	            to._isUTC = from._isUTC;
	        }
	        if (typeof from._offset !== 'undefined') {
	            to._offset = from._offset;
	        }
	        if (typeof from._pf !== 'undefined') {
	            to._pf = getParsingFlags(from);
	        }
	        if (typeof from._locale !== 'undefined') {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (typeof val !== 'undefined') {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment(obj) {
	        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
	    }

	    function absFloor(number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function Locale() {}

	    var locales = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                !(function webpackMissingModule() { var e = new Error("Cannot find module \"./locale\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) {}
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (typeof values === 'undefined') {
	                data = locale_locales__getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale(name, values) {
	        if (values !== null) {
	            values.abbr = name;
	            locales[name] = locales[name] || new Locale();
	            locales[name].set(values);

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    // returns locale data
	    function locale_locales__getLocale(key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    var aliases = {};

	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }

	    function get_set__get(mom, unit) {
	        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
	    }

	    function get_set__set(mom, unit, value) {
	        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }

	    // MOMENTS

	    function getSet(units, value) {
	        var unit;
	        if (typeof units === 'object') {
	            for (unit in units) {
	                this.set(unit, units[unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (typeof this[units] === 'function') {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '';
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1 = /\d/; //       0 - 9
	    var match2 = /\d\d/; //      00 - 99
	    var match3 = /\d{3}/; //     000 - 999
	    var match4 = /\d{4}/; //    0000 - 9999
	    var match6 = /[+-]?\d{6}/; // -999999 - 999999
	    var match1to2 = /\d\d?/; //       0 - 99
	    var match1to3 = /\d{1,3}/; //       0 - 999
	    var match1to4 = /\d{1,4}/; //       0 - 9999
	    var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

	    var matchUnsigned = /\d+/; //       0 - inf
	    var matchSigned = /[+-]?\d+/; //    -inf - inf

	    var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

	    var regexes = {};

	    function isFunction(sth) {
	        // https://github.com/moment/moment/issues/2325
	        return typeof sth === 'function' && Object.prototype.toString.call(sth) === '[object Function]';
	    }

	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
	            return isStrict && strictRegex ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken(token, callback) {
	        var i,
	            func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PARSING

	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', matchWord);
	    addRegexToken('MMMM', matchWord);

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths(m) {
	        return this._months[m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort(m) {
	        return this._monthsShort[m.month()];
	    }

	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth(mom, value) {
	        var dayOfMonth;

	        // TODO: Move this out of here!
	        if (typeof value === 'string') {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (typeof value !== 'number') {
	                return mom;
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }

	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }

	    function checkOverflow(m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (firstTime) {
	                warn(msg + '\n' + new Error().stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    utils_hooks__hooks.suppressDeprecationWarnings = false;

	    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/], ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/], ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/], ['GGGG-[W]WW', /\d{4}-W\d{2}/], ['YYYY-DDD', /\d{4}-\d{3}/]];

	    // iso time formats and regexes
	    var isoTimes = [['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/], ['HH:mm', /(T| )\d\d:\d\d/], ['HH', /(T| )\d\d/]];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = from_string__isoRegex.exec(string);

	        if (match) {
	            getParsingFlags(config).iso = true;
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(string)) {
	                    config._f = isoDates[i][0];
	                    break;
	                }
	            }
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(string)) {
	                    // match[6] should be 'T' or space
	                    config._f += (match[6] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (string.match(matchOffset)) {
	                config._f += 'Z';
	            }
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    });

	    function createDate(y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor doesn't accept years < 1970
	        if (y < 1970) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function createUTCDate(y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	        if (y < 1970) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PARSING

	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	    }

	    // HOOKS

	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', false);

	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PARSING

	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // firstDayOfWeek       0 = sun, 6 = sat
	    //                      the day of the week that starts the week
	    //                      (usually sunday or monday)
	    // firstDayOfWeekOfYear 0 = sun, 6 = sat
	    //                      the first week is the week that contains the first
	    //                      of this day of the week
	    //                      (eg. ISO weeks use thursday (4))
	    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
	        var end = firstDayOfWeekOfYear - firstDayOfWeek,
	            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
	            adjustedMoment;

	        if (daysToDayOfWeek > end) {
	            daysToDayOfWeek -= 7;
	        }

	        if (daysToDayOfWeek < end - 7) {
	            daysToDayOfWeek += 7;
	        }

	        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
	        return {
	            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
	            year: adjustedMoment.year()
	        };
	    }

	    // LOCALES

	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6 // The week that contains Jan 1st is the first week of the year.
	    };

	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PARSING

	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
	        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear,
	            janX = createUTCDate(year, 0, 1 + week1Jan),
	            d = janX.getUTCDay(),
	            dayOfYear;
	        if (d < firstDayOfWeek) {
	            d += 7;
	        }

	        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

	        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

	        return {
	            year: dayOfYear > 0 ? year : year - 1,
	            dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
	        };
	    }

	    // MOMENTS

	    function getSetDayOfYear(input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        var now = new Date();
	        if (config._useUTC) {
	            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
	        }
	        return [now.getFullYear(), now.getMonth(), now.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < dow) {
	                    ++week;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }

	    utils_hooks__hooks.ISO_8601 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }

	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }

	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    function configFromStringAndArray(config) {
	        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

	        configFromArray(config);
	    }

	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || locale_locales__getLocale(config._l);

	        if (input === null || format === undefined && input === '') {
	            return valid__createInvalid({ nullInput: true });
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else {
	            configFromInput(config);
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date();
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof input === 'object') {
	            configFromObject(config);
	        } else if (typeof input === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};

	        if (typeof locale === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function local__createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function () {
	        var other = local__createLocal.apply(null, arguments);
	        return other < this ? this : other;
	    });

	    var prototypeMax = deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function () {
	        var other = local__createLocal.apply(null, arguments);
	        return other > this ? this : other;
	    });

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;

	        this._data = {};

	        this._locale = locale_locales__getLocale();

	        this._bubble();
	    }

	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }

	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~ ~(offset / 60), 2) + separator + zeroFill(~ ~offset % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z', matchOffset);
	    addRegexToken('ZZ', matchOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(string) {
	        var matches = (string || '').match(matchOffset) || [];
	        var chunk = matches[matches.length - 1] || [];
	        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(+res._d + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }

	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(input);
	            }
	            if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset() {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            this.utcOffset(offsetFromString(this._i));
	        }
	        return this;
	    }

	    function hasAlignedHourOffset(input) {
	        input = input ? local__createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime() {
	        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
	    }

	    function isDaylightSavingTimeShifted() {
	        if (typeof this._isDSTShifted !== 'undefined') {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal() {
	        return !this._isUTC;
	    }

	    function isUtcOffset() {
	        return this._isUTC;
	    }

	    function isUtc() {
	        return this._isUTC && this._offset === 0;
	    }

	    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

	    function create__createDuration(input, key) {
	        var duration = input,

	        // matching against regexp is expensive, do it on demand
	        match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = create__isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                d: parseIso(match[4], sign),
	                h: parseIso(match[5], sign),
	                m: parseIso(match[6], sign),
	                s: parseIso(match[7], sign),
	                w: parseIso(match[8], sign)
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    create__createDuration.fn = Duration.prototype;

	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = { milliseconds: 0, months: 0 };

	        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +base.clone().add(res.months, 'M');

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
	                tmp = val;val = period;period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = duration._days,
	            months = duration._months;
	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add_subtract__add = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');

	    function moment_calendar__calendar(time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            diff = this.diff(sod, 'days', true),
	            format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
	        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
	    }

	    function clone() {
	        return new Moment(this);
	    }

	    function isAfter(input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this > +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return inputMs < +this.clone().startOf(units);
	        }
	    }

	    function isBefore(input, units) {
	        var inputMs;
	        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this < +input;
	        } else {
	            inputMs = isMoment(input) ? +input : +local__createLocal(input);
	            return +this.clone().endOf(units) < inputMs;
	        }
	    }

	    function isBetween(from, to, units) {
	        return this.isAfter(from, units) && this.isBefore(to, units);
	    }

	    function isSame(input, units) {
	        var inputMs;
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            input = isMoment(input) ? input : local__createLocal(input);
	            return +this === +input;
	        } else {
	            inputMs = +local__createLocal(input);
	            return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units);
	        }
	    }

	    function diff(input, units, asFloat) {
	        var that = cloneWithOffset(input, this),
	            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
	            delta,
	            output;

	        units = normalizeUnits(units);

	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	            units === 'minute' ? delta / 6e4 : // 1000 * 60
	            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	            delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff(a, b) {
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),

	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        return -(wholeMonthDiff + adjust);
	    }

	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function moment_format__toISOString() {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if ('function' === typeof Date.prototype.toISOString) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }

	    function format(inputString) {
	        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
	        return this.localeData().postformat(output);
	    }

	    function from(time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function fromNow(withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }

	    function to(time, withoutSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	        return create__createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
	    }

	    function toNow(withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }

	    function locale(key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    });

	    function localeData() {
	        return this._locale;
	    }

	    function startOf(units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	            case 'year':
	                this.month(0);
	            /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	            /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	                this.hours(0);
	            /* falls through */
	            case 'hour':
	                this.minutes(0);
	            /* falls through */
	            case 'minute':
	                this.seconds(0);
	            /* falls through */
	            case 'second':
	                this.milliseconds(0);
	        }

	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }

	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }

	        return this;
	    }

	    function endOf(units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }
	        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
	    }

	    function to_type__valueOf() {
	        return +this._d - (this._offset || 0) * 60000;
	    }

	    function unix() {
	        return Math.floor(+this / 1000);
	    }

	    function toDate() {
	        return this._offset ? new Date(+this) : this._d;
	    }

	    function toArray() {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function moment_valid__isValid() {
	        return valid__isValid(this);
	    }

	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PARSING

	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // HELPERS

	    function weeksInYear(year, dow, doy) {
	        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
	    }

	    // MOMENTS

	    function getSetWeekYear(input) {
	        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
	        return input == null ? year : this.add(input - year, 'y');
	    }

	    function getSetISOWeekYear(input) {
	        var year = weekOfYear(this, 1, 4).year;
	        return input == null ? year : this.add(input - year, 'y');
	    }

	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    addFormatToken('Q', 0, 0, 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter(input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PARSING

	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PARSING

	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', matchWord);
	    addRegexToken('ddd', matchWord);
	    addRegexToken('dddd', matchWord);

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
	        var weekday = config._locale.weekdaysParse(input);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    // LOCALES

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays(m) {
	        return this._weekdays[m.day()];
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort(m) {
	        return this._weekdaysShort[m.day()];
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin(m) {
	        return this._weekdaysMin[m.day()];
	    }

	    function localeWeekdaysParse(weekdayName) {
	        var i, mom, regex;

	        this._weekdaysParse = this._weekdaysParse || [];

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            if (!this._weekdaysParse[i]) {
	                mom = local__createLocal([2000, 1]).day(i);
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek(input) {
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek(input) {
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek(input) {
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, function () {
	        return this.hours() % 12 || 12;
	    });

	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PARSING

	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });

	    // LOCALES

	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }

	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PARSING

	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PARSING

	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    addFormatToken('S', 0, 0, function () {
	        return ~ ~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~ ~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });

	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PARSING

	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var momentPrototype__proto = Moment.prototype;

	    momentPrototype__proto.add = add_subtract__add;
	    momentPrototype__proto.calendar = moment_calendar__calendar;
	    momentPrototype__proto.clone = clone;
	    momentPrototype__proto.diff = diff;
	    momentPrototype__proto.endOf = endOf;
	    momentPrototype__proto.format = format;
	    momentPrototype__proto.from = from;
	    momentPrototype__proto.fromNow = fromNow;
	    momentPrototype__proto.to = to;
	    momentPrototype__proto.toNow = toNow;
	    momentPrototype__proto.get = getSet;
	    momentPrototype__proto.invalidAt = invalidAt;
	    momentPrototype__proto.isAfter = isAfter;
	    momentPrototype__proto.isBefore = isBefore;
	    momentPrototype__proto.isBetween = isBetween;
	    momentPrototype__proto.isSame = isSame;
	    momentPrototype__proto.isValid = moment_valid__isValid;
	    momentPrototype__proto.lang = lang;
	    momentPrototype__proto.locale = locale;
	    momentPrototype__proto.localeData = localeData;
	    momentPrototype__proto.max = prototypeMax;
	    momentPrototype__proto.min = prototypeMin;
	    momentPrototype__proto.parsingFlags = parsingFlags;
	    momentPrototype__proto.set = getSet;
	    momentPrototype__proto.startOf = startOf;
	    momentPrototype__proto.subtract = add_subtract__subtract;
	    momentPrototype__proto.toArray = toArray;
	    momentPrototype__proto.toObject = toObject;
	    momentPrototype__proto.toDate = toDate;
	    momentPrototype__proto.toISOString = moment_format__toISOString;
	    momentPrototype__proto.toJSON = moment_format__toISOString;
	    momentPrototype__proto.toString = toString;
	    momentPrototype__proto.unix = unix;
	    momentPrototype__proto.valueOf = to_type__valueOf;

	    // Year
	    momentPrototype__proto.year = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;

	    // Week Year
	    momentPrototype__proto.weekYear = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

	    // Month
	    momentPrototype__proto.month = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;

	    // Week
	    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
	    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
	    momentPrototype__proto.weeksInYear = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

	    // Day
	    momentPrototype__proto.date = getSetDayOfMonth;
	    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
	    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear = getSetDayOfYear;

	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

	    // Offset
	    momentPrototype__proto.utcOffset = getSetOffset;
	    momentPrototype__proto.utc = setOffsetToUTC;
	    momentPrototype__proto.local = setOffsetToLocal;
	    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST = isDaylightSavingTime;
	    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
	    momentPrototype__proto.isLocal = isLocal;
	    momentPrototype__proto.isUtcOffset = isUtcOffset;
	    momentPrototype__proto.isUtc = isUtc;
	    momentPrototype__proto.isUTC = isUtc;

	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;

	    // Deprecations
	    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

	    var momentPrototype = momentPrototype__proto;

	    function moment__createUnix(input) {
	        return local__createLocal(input * 1000);
	    }

	    function moment__createInZone() {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }

	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L'
	    };

	    function locale_calendar__calendar(key, mom, now) {
	        var output = this._calendar[key];
	        return typeof output === 'function' ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate() {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;

	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }

	    function preParsePostFormat(string) {
	        return string;
	    }

	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years'
	    };

	    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
	    }

	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
	    }

	    function locale_set__set(config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (typeof prop === 'function') {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
	    }

	    var prototype__proto = Locale.prototype;

	    prototype__proto._calendar = defaultCalendar;
	    prototype__proto.calendar = locale_calendar__calendar;
	    prototype__proto._longDateFormat = defaultLongDateFormat;
	    prototype__proto.longDateFormat = longDateFormat;
	    prototype__proto._invalidDate = defaultInvalidDate;
	    prototype__proto.invalidDate = invalidDate;
	    prototype__proto._ordinal = defaultOrdinal;
	    prototype__proto.ordinal = ordinal;
	    prototype__proto._ordinalParse = defaultOrdinalParse;
	    prototype__proto.preparse = preParsePostFormat;
	    prototype__proto.postformat = preParsePostFormat;
	    prototype__proto._relativeTime = defaultRelativeTime;
	    prototype__proto.relativeTime = relative__relativeTime;
	    prototype__proto.pastFuture = pastFuture;
	    prototype__proto.set = locale_set__set;

	    // Month
	    prototype__proto.months = localeMonths;
	    prototype__proto._months = defaultLocaleMonths;
	    prototype__proto.monthsShort = localeMonthsShort;
	    prototype__proto._monthsShort = defaultLocaleMonthsShort;
	    prototype__proto.monthsParse = localeMonthsParse;

	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto._week = defaultLocaleWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

	    // Day of Week
	    prototype__proto.weekdays = localeWeekdays;
	    prototype__proto._weekdays = defaultLocaleWeekdays;
	    prototype__proto.weekdaysMin = localeWeekdaysMin;
	    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
	    prototype__proto.weekdaysShort = localeWeekdaysShort;
	    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
	    prototype__proto.weekdaysParse = localeWeekdaysParse;

	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
	    prototype__proto.meridiem = localeMeridiem;

	    function lists__get(format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function list(format, index, field, count, setter) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return lists__get(format, index, field, setter);
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < count; i++) {
	            out[i] = lists__get(format, i, field, setter);
	        }
	        return out;
	    }

	    function lists__listMonths(format, index) {
	        return list(format, index, 'months', 12, 'month');
	    }

	    function lists__listMonthsShort(format, index) {
	        return list(format, index, 'monthsShort', 12, 'month');
	    }

	    function lists__listWeekdays(format, index) {
	        return list(format, index, 'weekdays', 7, 'day');
	    }

	    function lists__listWeekdaysShort(format, index) {
	        return list(format, index, 'weekdaysShort', 7, 'day');
	    }

	    function lists__listWeekdaysMin(format, index) {
	        return list(format, index, 'weekdaysMin', 7, 'day');
	    }

	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function ordinal(number) {
	            var b = number % 10,
	                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

	    var mathAbs = Math.abs;

	    function duration_abs__abs() {
	        var data = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);

	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);

	        return this;
	    }

	    function duration_add_subtract__addSubtract(duration, input, value, direction) {
	        var other = create__createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add(input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract(input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }

	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble() {
	        var milliseconds = this._milliseconds;
	        var days = this._days;
	        var months = this._months;
	        var data = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;

	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;

	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days = days;
	        data.months = months;
	        data.years = years;

	        return this;
	    }

	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as(units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf() {
	        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
	    }

	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds = makeAs('s');
	    var asMinutes = makeAs('m');
	    var asHours = makeAs('h');
	    var asDays = makeAs('d');
	    var asWeeks = makeAs('w');
	    var asMonths = makeAs('M');
	    var asYears = makeAs('y');

	    function duration_get__get(units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }

	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds = makeGetter('seconds');
	    var minutes = makeGetter('minutes');
	    var hours = makeGetter('hours');
	    var days = makeGetter('days');
	    var months = makeGetter('months');
	    var years = makeGetter('years');

	    function weeks() {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        s: 45, // seconds to minute
	        m: 45, // minutes to hour
	        h: 22, // hours to day
	        d: 26, // days to month
	        M: 11 // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds = round(duration.as('s'));
	        var minutes = round(duration.as('m'));
	        var hours = round(duration.as('h'));
	        var days = round(duration.as('d'));
	        var months = round(duration.as('M'));
	        var years = round(duration.as('y'));

	        var a = seconds < thresholds.s && ['s', seconds] || minutes === 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours === 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days === 1 && ['d'] || days < thresholds.d && ['dd', days] || months === 1 && ['M'] || months < thresholds.M && ['MM', months] || years === 1 && ['y'] || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }

	    function humanize(withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var iso_string__abs = Math.abs;

	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days = iso_string__abs(this._days);
	        var months = iso_string__abs(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
	    }

	    var duration_prototype__proto = Duration.prototype;

	    duration_prototype__proto.abs = duration_abs__abs;
	    duration_prototype__proto.add = duration_add_subtract__add;
	    duration_prototype__proto.subtract = duration_add_subtract__subtract;
	    duration_prototype__proto.as = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds = asSeconds;
	    duration_prototype__proto.asMinutes = asMinutes;
	    duration_prototype__proto.asHours = asHours;
	    duration_prototype__proto.asDays = asDays;
	    duration_prototype__proto.asWeeks = asWeeks;
	    duration_prototype__proto.asMonths = asMonths;
	    duration_prototype__proto.asYears = asYears;
	    duration_prototype__proto.valueOf = duration_as__valueOf;
	    duration_prototype__proto._bubble = bubble;
	    duration_prototype__proto.get = duration_get__get;
	    duration_prototype__proto.milliseconds = milliseconds;
	    duration_prototype__proto.seconds = seconds;
	    duration_prototype__proto.minutes = minutes;
	    duration_prototype__proto.hours = hours;
	    duration_prototype__proto.days = days;
	    duration_prototype__proto.weeks = weeks;
	    duration_prototype__proto.months = months;
	    duration_prototype__proto.years = years;
	    duration_prototype__proto.humanize = humanize;
	    duration_prototype__proto.toISOString = iso_string__toISOString;
	    duration_prototype__proto.toString = iso_string__toISOString;
	    duration_prototype__proto.toJSON = iso_string__toISOString;
	    duration_prototype__proto.locale = locale;
	    duration_prototype__proto.localeData = localeData;

	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;

	    // Side effect imports

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports

	    utils_hooks__hooks.version = '2.10.6';

	    setHookCallback(local__createLocal);

	    utils_hooks__hooks.fn = momentPrototype;
	    utils_hooks__hooks.min = min;
	    utils_hooks__hooks.max = max;
	    utils_hooks__hooks.utc = create_utc__createUTC;
	    utils_hooks__hooks.unix = moment__createUnix;
	    utils_hooks__hooks.months = lists__listMonths;
	    utils_hooks__hooks.isDate = isDate;
	    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid = valid__createInvalid;
	    utils_hooks__hooks.duration = create__createDuration;
	    utils_hooks__hooks.isMoment = isMoment;
	    utils_hooks__hooks.weekdays = lists__listWeekdays;
	    utils_hooks__hooks.parseZone = moment__createInZone;
	    utils_hooks__hooks.localeData = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration = isDuration;
	    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale = defineLocale;
	    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits = normalizeUnits;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

	    var _moment = utils_hooks__hooks;

	    return _moment;
	});
	//! momentjs.com
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(128)(module)))

/***/ },

/***/ 128:
/***/ function(module, exports) {

	"use strict";

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },

/***/ 129:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v1.11.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-04-28T16:19Z
	 */

	"use strict";

	(function (global, factory) {

		if (typeof module === "object" && typeof module.exports === "object") {
			// For CommonJS and CommonJS-like environments where a proper window is present,
			// execute the factory and get jQuery
			// For environments that do not inherently posses a window with a document
			// (such as Node.js), expose a jQuery-making factory as module.exports
			// This accentuates the need for the creation of a real window
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info
			module.exports = global.document ? factory(global, true) : function (w) {
				if (!w.document) {
					throw new Error("jQuery requires a window with a document");
				}
				return factory(w);
			};
		} else {
			factory(global);
		}

		// Pass this if window is not defined yet
	})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

		// Can't do this because several apps including ASP.NET trace
		// the stack via arguments.caller.callee and Firefox dies if
		// you try to trace through "use strict" call chains. (#13335)
		// Support: Firefox 18+
		//

		var deletedIds = [];

		var _slice = deletedIds.slice;

		var concat = deletedIds.concat;

		var push = deletedIds.push;

		var indexOf = deletedIds.indexOf;

		var class2type = {};

		var toString = class2type.toString;

		var hasOwn = class2type.hasOwnProperty;

		var support = {};

		var version = "1.11.3",
		   

		// Define a local copy of jQuery
		jQuery = function jQuery(selector, context) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init(selector, context);
		},
		   

		// Support: Android<4.1, IE<9
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
		   

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		    rdashAlpha = /-([\da-z])/gi,
		   

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function fcamelCase(all, letter) {
			return letter.toUpperCase();
		};

		jQuery.fn = jQuery.prototype = {
			// The current version of jQuery being used
			jquery: version,

			constructor: jQuery,

			// Start with an empty selector
			selector: "",

			// The default length of a jQuery object is 0
			length: 0,

			toArray: function toArray() {
				return _slice.call(this);
			},

			// Get the Nth element in the matched element set OR
			// Get the whole matched element set as a clean array
			get: function get(num) {
				return num != null ?

				// Return just the one element from the set
				num < 0 ? this[num + this.length] : this[num] :

				// Return all the elements in a clean array
				_slice.call(this);
			},

			// Take an array of elements and push it onto the stack
			// (returning the new matched element set)
			pushStack: function pushStack(elems) {

				// Build a new jQuery matched element set
				var ret = jQuery.merge(this.constructor(), elems);

				// Add the old object onto the stack (as a reference)
				ret.prevObject = this;
				ret.context = this.context;

				// Return the newly-formed element set
				return ret;
			},

			// Execute a callback for every element in the matched set.
			// (You can seed the arguments with an array of args, but this is
			// only used internally.)
			each: function each(callback, args) {
				return jQuery.each(this, callback, args);
			},

			map: function map(callback) {
				return this.pushStack(jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem);
				}));
			},

			slice: function slice() {
				return this.pushStack(_slice.apply(this, arguments));
			},

			first: function first() {
				return this.eq(0);
			},

			last: function last() {
				return this.eq(-1);
			},

			eq: function eq(i) {
				var len = this.length,
				    j = +i + (i < 0 ? len : 0);
				return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
			},

			end: function end() {
				return this.prevObject || this.constructor(null);
			},

			// For internal use only.
			// Behaves like an Array's method, not like a jQuery method.
			push: push,
			sort: deletedIds.sort,
			splice: deletedIds.splice
		};

		jQuery.extend = jQuery.fn.extend = function () {
			var src,
			    copyIsArray,
			    copy,
			    name,
			    options,
			    clone,
			    target = arguments[0] || {},
			    i = 1,
			    length = arguments.length,
			    deep = false;

			// Handle a deep copy situation
			if (typeof target === "boolean") {
				deep = target;

				// skip the boolean and the target
				target = arguments[i] || {};
				i++;
			}

			// Handle case when target is a string or something (possible in deep copy)
			if (typeof target !== "object" && !jQuery.isFunction(target)) {
				target = {};
			}

			// extend jQuery itself if only one argument is passed
			if (i === length) {
				target = this;
				i--;
			}

			for (; i < length; i++) {
				// Only deal with non-null/undefined values
				if ((options = arguments[i]) != null) {
					// Extend the base object
					for (name in options) {
						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && jQuery.isArray(src) ? src : [];
							} else {
								clone = src && jQuery.isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							target[name] = jQuery.extend(deep, clone, copy);

							// Don't bring in undefined values
						} else if (copy !== undefined) {
								target[name] = copy;
							}
					}
				}
			}

			// Return the modified object
			return target;
		};

		jQuery.extend({
			// Unique for each copy of jQuery on the page
			expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

			// Assume jQuery is ready without the ready module
			isReady: true,

			error: function error(msg) {
				throw new Error(msg);
			},

			noop: function noop() {},

			// See test/unit/core.js for details concerning isFunction.
			// Since version 1.3, DOM methods and functions like alert
			// aren't supported. They return false on IE (#2968).
			isFunction: function isFunction(obj) {
				return jQuery.type(obj) === "function";
			},

			isArray: Array.isArray || function (obj) {
				return jQuery.type(obj) === "array";
			},

			isWindow: function isWindow(obj) {
				/* jshint eqeqeq: false */
				return obj != null && obj == obj.window;
			},

			isNumeric: function isNumeric(obj) {
				// parseFloat NaNs numeric-cast false positives (null|true|false|"")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				// adding 1 corrects loss of precision from parseFloat (#15100)
				return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;
			},

			isEmptyObject: function isEmptyObject(obj) {
				var name;
				for (name in obj) {
					return false;
				}
				return true;
			},

			isPlainObject: function isPlainObject(obj) {
				var key;

				// Must be an Object.
				// Because of IE, we also have to check the presence of the constructor property.
				// Make sure that DOM nodes and window objects don't pass through, as well
				if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
					return false;
				}

				try {
					// Not own constructor property must be Object
					if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
						return false;
					}
				} catch (e) {
					// IE8,9 Will throw exceptions on certain host objects #9897
					return false;
				}

				// Support: IE<9
				// Handle iteration over inherited properties before own properties.
				if (support.ownLast) {
					for (key in obj) {
						return hasOwn.call(obj, key);
					}
				}

				// Own properties are enumerated firstly, so to speed up,
				// if last one is own, then all properties are own.
				for (key in obj) {}

				return key === undefined || hasOwn.call(obj, key);
			},

			type: function type(obj) {
				if (obj == null) {
					return obj + "";
				}
				return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
			},

			// Evaluates a script in a global context
			// Workarounds based on findings by Jim Driscoll
			// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
			globalEval: function globalEval(data) {
				if (data && jQuery.trim(data)) {
					// We use execScript on Internet Explorer
					// We use an anonymous function so that context is window
					// rather than jQuery in Firefox
					(window.execScript || function (data) {
						window["eval"].call(window, data);
					})(data);
				}
			},

			// Convert dashed to camelCase; used by the css and data modules
			// Microsoft forgot to hump their vendor prefix (#9572)
			camelCase: function camelCase(string) {
				return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
			},

			nodeName: function nodeName(elem, name) {
				return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
			},

			// args is for internal usage only
			each: function each(obj, callback, args) {
				var value,
				    i = 0,
				    length = obj.length,
				    isArray = isArraylike(obj);

				if (args) {
					if (isArray) {
						for (; i < length; i++) {
							value = callback.apply(obj[i], args);

							if (value === false) {
								break;
							}
						}
					} else {
						for (i in obj) {
							value = callback.apply(obj[i], args);

							if (value === false) {
								break;
							}
						}
					}

					// A special, fast, case for the most common use of each
				} else {
						if (isArray) {
							for (; i < length; i++) {
								value = callback.call(obj[i], i, obj[i]);

								if (value === false) {
									break;
								}
							}
						} else {
							for (i in obj) {
								value = callback.call(obj[i], i, obj[i]);

								if (value === false) {
									break;
								}
							}
						}
					}

				return obj;
			},

			// Support: Android<4.1, IE<9
			trim: function trim(text) {
				return text == null ? "" : (text + "").replace(rtrim, "");
			},

			// results is for internal usage only
			makeArray: function makeArray(arr, results) {
				var ret = results || [];

				if (arr != null) {
					if (isArraylike(Object(arr))) {
						jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
					} else {
						push.call(ret, arr);
					}
				}

				return ret;
			},

			inArray: function inArray(elem, arr, i) {
				var len;

				if (arr) {
					if (indexOf) {
						return indexOf.call(arr, elem, i);
					}

					len = arr.length;
					i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

					for (; i < len; i++) {
						// Skip accessing in sparse arrays
						if (i in arr && arr[i] === elem) {
							return i;
						}
					}
				}

				return -1;
			},

			merge: function merge(first, second) {
				var len = +second.length,
				    j = 0,
				    i = first.length;

				while (j < len) {
					first[i++] = second[j++];
				}

				// Support: IE<9
				// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
				if (len !== len) {
					while (second[j] !== undefined) {
						first[i++] = second[j++];
					}
				}

				first.length = i;

				return first;
			},

			grep: function grep(elems, callback, invert) {
				var callbackInverse,
				    matches = [],
				    i = 0,
				    length = elems.length,
				    callbackExpect = !invert;

				// Go through the array, only saving the items
				// that pass the validator function
				for (; i < length; i++) {
					callbackInverse = !callback(elems[i], i);
					if (callbackInverse !== callbackExpect) {
						matches.push(elems[i]);
					}
				}

				return matches;
			},

			// arg is for internal usage only
			map: function map(elems, callback, arg) {
				var value,
				    i = 0,
				    length = elems.length,
				    isArray = isArraylike(elems),
				    ret = [];

				// Go through the array, translating each of the items to their new values
				if (isArray) {
					for (; i < length; i++) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}

					// Go through every key on the object,
				} else {
						for (i in elems) {
							value = callback(elems[i], i, arg);

							if (value != null) {
								ret.push(value);
							}
						}
					}

				// Flatten any nested arrays
				return concat.apply([], ret);
			},

			// A global GUID counter for objects
			guid: 1,

			// Bind a function to a context, optionally partially applying any
			// arguments.
			proxy: function proxy(fn, context) {
				var args, proxy, tmp;

				if (typeof context === "string") {
					tmp = fn[context];
					context = fn;
					fn = tmp;
				}

				// Quick check to determine if target is callable, in the spec
				// this throws a TypeError, but we will just return undefined.
				if (!jQuery.isFunction(fn)) {
					return undefined;
				}

				// Simulated bind
				args = _slice.call(arguments, 2);
				proxy = function () {
					return fn.apply(context || this, args.concat(_slice.call(arguments)));
				};

				// Set the guid of unique handler to the same of original handler, so it can be removed
				proxy.guid = fn.guid = fn.guid || jQuery.guid++;

				return proxy;
			},

			now: function now() {
				return +new Date();
			},

			// jQuery.support is not used in Core but other projects attach their
			// properties to it so it needs to exist.
			support: support
		});

		// Populate the class2type map
		jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
			class2type["[object " + name + "]"] = name.toLowerCase();
		});

		function isArraylike(obj) {

			// Support: iOS 8.2 (not reproducible in simulator)
			// `in` check used to prevent JIT error (gh-2145)
			// hasOwn isn't used here due to false negatives
			// regarding Nodelist length in IE
			var length = "length" in obj && obj.length,
			    type = jQuery.type(obj);

			if (type === "function" || jQuery.isWindow(obj)) {
				return false;
			}

			if (obj.nodeType === 1 && length) {
				return true;
			}

			return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
		}
		var Sizzle =
		/*!
	  * Sizzle CSS Selector Engine v2.2.0-pre
	  * http://sizzlejs.com/
	  *
	  * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
	  * Released under the MIT license
	  * http://jquery.org/license
	  *
	  * Date: 2014-12-16
	  */
		(function (window) {

			var i,
			    support,
			    Expr,
			    getText,
			    isXML,
			    tokenize,
			    compile,
			    select,
			    outermostContext,
			    sortInput,
			    hasDuplicate,
			   

			// Local document vars
			setDocument,
			    document,
			    docElem,
			    documentIsHTML,
			    rbuggyQSA,
			    rbuggyMatches,
			    matches,
			    contains,
			   

			// Instance-specific data
			expando = "sizzle" + 1 * new Date(),
			    preferredDoc = window.document,
			    dirruns = 0,
			    done = 0,
			    classCache = createCache(),
			    tokenCache = createCache(),
			    compilerCache = createCache(),
			    sortOrder = function sortOrder(a, b) {
				if (a === b) {
					hasDuplicate = true;
				}
				return 0;
			},
			   

			// General-purpose constants
			MAX_NEGATIVE = 1 << 31,
			   

			// Instance methods
			hasOwn = ({}).hasOwnProperty,
			    arr = [],
			    pop = arr.pop,
			    push_native = arr.push,
			    push = arr.push,
			    slice = arr.slice,
			   
			// Use a stripped-down indexOf as it's faster than native
			// http://jsperf.com/thor-indexof-vs-for/5
			indexOf = function indexOf(list, elem) {
				var i = 0,
				    len = list.length;
				for (; i < len; i++) {
					if (list[i] === elem) {
						return i;
					}
				}
				return -1;
			},
			    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
			   

			// Regular expressions

			// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
			whitespace = "[\\x20\\t\\r\\n\\f]",
			   
			// http://www.w3.org/TR/css3-syntax/#characters
			characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
			   

			// Loosely modeled on CSS identifier characters
			// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
			// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
			identifier = characterEncoding.replace("w", "w#"),
			   

			// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
			attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
			    pseudos = ":(" + characterEncoding + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" + ")\\)|)",
			   

			// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
			rwhitespace = new RegExp(whitespace + "+", "g"),
			    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
			    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
			    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
			    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
			    rpseudo = new RegExp(pseudos),
			    ridentifier = new RegExp("^" + identifier + "$"),
			    matchExpr = {
				"ID": new RegExp("^#(" + characterEncoding + ")"),
				"CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
				"TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
				"ATTR": new RegExp("^" + attributes),
				"PSEUDO": new RegExp("^" + pseudos),
				"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
				"bool": new RegExp("^(?:" + booleans + ")$", "i"),
				// For use in libraries implementing .is()
				// We use this for POS matching in `select`
				"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
			},
			    rinputs = /^(?:input|select|textarea|button)$/i,
			    rheader = /^h\d$/i,
			    rnative = /^[^{]+\{\s*\[native \w/,
			   

			// Easily-parseable/retrievable ID or TAG or CLASS selectors
			rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
			    rsibling = /[+~]/,
			    rescape = /'|\\/g,
			   

			// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
			runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
			    funescape = function funescape(_, escaped, escapedWhitespace) {
				var high = "0x" + escaped - 0x10000;
				// NaN means non-codepoint
				// Support: Firefox<24
				// Workaround erroneous numeric interpretation of +"0x"
				return high !== high || escapedWhitespace ? escaped : high < 0 ?
				// BMP codepoint
				String.fromCharCode(high + 0x10000) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
			},
			   

			// Used for iframes
			// See setDocument()
			// Removing the function wrapper causes a "Permission Denied"
			// error in IE
			unloadHandler = function unloadHandler() {
				setDocument();
			};

			// Optimize for push.apply( _, NodeList )
			try {
				push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
				// Support: Android<4.0
				// Detect silently failing push.apply
				arr[preferredDoc.childNodes.length].nodeType;
			} catch (e) {
				push = { apply: arr.length ?

					// Leverage slice if possible
					function (target, els) {
						push_native.apply(target, slice.call(els));
					} :

					// Support: IE<9
					function (target, els) {
						var j = target.length,
						    i = 0;
						// Can't trust NodeList.length
						while (target[j++] = els[i++]) {}
						target.length = j - 1;
					}
				};
			}

			function Sizzle(selector, context, results, seed) {
				var match, elem, m, nodeType,
				// QSA vars
				i, groups, old, nid, newContext, newSelector;

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}

				context = context || document;
				results = results || [];
				nodeType = context.nodeType;

				if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

					return results;
				}

				if (!seed && documentIsHTML) {

					// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
						// Speed-up: Sizzle("#ID")
						if (m = match[1]) {
							if (nodeType === 9) {
								elem = context.getElementById(m);
								// Check parentNode to catch when Blackberry 4.6 returns
								// nodes that are no longer in the document (jQuery #6963)
								if (elem && elem.parentNode) {
									// Handle the case where IE, Opera, and Webkit return items
									// by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}
							} else {
								// Context is not a document
								if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
									results.push(elem);
									return results;
								}
							}

							// Speed-up: Sizzle("TAG")
						} else if (match[2]) {
								push.apply(results, context.getElementsByTagName(selector));
								return results;

								// Speed-up: Sizzle(".CLASS")
							} else if ((m = match[3]) && support.getElementsByClassName) {
									push.apply(results, context.getElementsByClassName(m));
									return results;
								}
					}

					// QSA path
					if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
						nid = old = expando;
						newContext = context;
						newSelector = nodeType !== 1 && selector;

						// qSA works strangely on Element-rooted queries
						// We can work around this by specifying an extra ID on the root
						// and working up from there (Thanks to Andrew Dupont for the technique)
						// IE 8 doesn't work on object elements
						if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
							groups = tokenize(selector);

							if (old = context.getAttribute("id")) {
								nid = old.replace(rescape, "\\$&");
							} else {
								context.setAttribute("id", nid);
							}
							nid = "[id='" + nid + "'] ";

							i = groups.length;
							while (i--) {
								groups[i] = nid + toSelector(groups[i]);
							}
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
							newSelector = groups.join(",");
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (!old) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}

				// All others
				return select(selector.replace(rtrim, "$1"), context, results, seed);
			}

			/**
	   * Create key-value caches of limited size
	   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	   *	deleting the oldest entry
	   */
			function createCache() {
				var keys = [];

				function cache(key, value) {
					// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
					if (keys.push(key + " ") > Expr.cacheLength) {
						// Only keep the most recent entries
						delete cache[keys.shift()];
					}
					return cache[key + " "] = value;
				}
				return cache;
			}

			/**
	   * Mark a function for special use by Sizzle
	   * @param {Function} fn The function to mark
	   */
			function markFunction(fn) {
				fn[expando] = true;
				return fn;
			}

			/**
	   * Support testing using an element
	   * @param {Function} fn Passed the created div and expects a boolean result
	   */
			function assert(fn) {
				var div = document.createElement("div");

				try {
					return !!fn(div);
				} catch (e) {
					return false;
				} finally {
					// Remove from its parent by default
					if (div.parentNode) {
						div.parentNode.removeChild(div);
					}
					// release memory in IE
					div = null;
				}
			}

			/**
	   * Adds the same handler for all of the specified attrs
	   * @param {String} attrs Pipe-separated list of attributes
	   * @param {Function} handler The method that will be applied
	   */
			function addHandle(attrs, handler) {
				var arr = attrs.split("|"),
				    i = attrs.length;

				while (i--) {
					Expr.attrHandle[arr[i]] = handler;
				}
			}

			/**
	   * Checks document order of two siblings
	   * @param {Element} a
	   * @param {Element} b
	   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	   */
			function siblingCheck(a, b) {
				var cur = b && a,
				    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

				// Use IE sourceIndex if available on both nodes
				if (diff) {
					return diff;
				}

				// Check if b follows a
				if (cur) {
					while (cur = cur.nextSibling) {
						if (cur === b) {
							return -1;
						}
					}
				}

				return a ? 1 : -1;
			}

			/**
	   * Returns a function to use in pseudos for input types
	   * @param {String} type
	   */
			function createInputPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for buttons
	   * @param {String} type
	   */
			function createButtonPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return (name === "input" || name === "button") && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for positionals
	   * @param {Function} fn
	   */
			function createPositionalPseudo(fn) {
				return markFunction(function (argument) {
					argument = +argument;
					return markFunction(function (seed, matches) {
						var j,
						    matchIndexes = fn([], seed.length, argument),
						    i = matchIndexes.length;

						// Match elements found at the specified indexes
						while (i--) {
							if (seed[j = matchIndexes[i]]) {
								seed[j] = !(matches[j] = seed[j]);
							}
						}
					});
				});
			}

			/**
	   * Checks a node for validity as a Sizzle context
	   * @param {Element|Object=} context
	   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	   */
			function testContext(context) {
				return context && typeof context.getElementsByTagName !== "undefined" && context;
			}

			// Expose support vars for convenience
			support = Sizzle.support = {};

			/**
	   * Detects XML nodes
	   * @param {Element|Object} elem An element or a document
	   * @returns {Boolean} True iff elem is a non-HTML XML node
	   */
			isXML = Sizzle.isXML = function (elem) {
				// documentElement is verified for cases where it doesn't yet exist
				// (such as loading iframes in IE - #4833)
				var documentElement = elem && (elem.ownerDocument || elem).documentElement;
				return documentElement ? documentElement.nodeName !== "HTML" : false;
			};

			/**
	   * Sets document-related variables once based on the current document
	   * @param {Element|Object} [doc] An element or document object to use to set the document
	   * @returns {Object} Returns the current document
	   */
			setDocument = Sizzle.setDocument = function (node) {
				var hasCompare,
				    parent,
				    doc = node ? node.ownerDocument || node : preferredDoc;

				// If no document and documentElement is available, return
				if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
					return document;
				}

				// Set our document
				document = doc;
				docElem = doc.documentElement;
				parent = doc.defaultView;

				// Support: IE>8
				// If iframe document is assigned to "document" variable and if iframe has been reloaded,
				// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
				// IE6-8 do not support the defaultView property so parent will be undefined
				if (parent && parent !== parent.top) {
					// IE11 does not have attachEvent, so all must suffer
					if (parent.addEventListener) {
						parent.addEventListener("unload", unloadHandler, false);
					} else if (parent.attachEvent) {
						parent.attachEvent("onunload", unloadHandler);
					}
				}

				/* Support tests
	   ---------------------------------------------------------------------- */
				documentIsHTML = !isXML(doc);

				/* Attributes
	   ---------------------------------------------------------------------- */

				// Support: IE<8
				// Verify that getAttribute really returns attributes and not properties
				// (excepting IE8 booleans)
				support.attributes = assert(function (div) {
					div.className = "i";
					return !div.getAttribute("className");
				});

				/* getElement(s)By*
	   ---------------------------------------------------------------------- */

				// Check if getElementsByTagName("*") returns only elements
				support.getElementsByTagName = assert(function (div) {
					div.appendChild(doc.createComment(""));
					return !div.getElementsByTagName("*").length;
				});

				// Support: IE<9
				support.getElementsByClassName = rnative.test(doc.getElementsByClassName);

				// Support: IE<10
				// Check if getElementById returns elements by name
				// The broken getElementById methods don't pick up programatically-set names,
				// so use a roundabout getElementsByName test
				support.getById = assert(function (div) {
					docElem.appendChild(div).id = expando;
					return !doc.getElementsByName || !doc.getElementsByName(expando).length;
				});

				// ID find and filter
				if (support.getById) {
					Expr.find["ID"] = function (id, context) {
						if (typeof context.getElementById !== "undefined" && documentIsHTML) {
							var m = context.getElementById(id);
							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document #6963
							return m && m.parentNode ? [m] : [];
						}
					};
					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							return elem.getAttribute("id") === attrId;
						};
					};
				} else {
					// Support: IE6/7
					// getElementById is not reliable as a find shortcut
					delete Expr.find["ID"];

					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
							return node && node.value === attrId;
						};
					};
				}

				// Tag
				Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
					if (typeof context.getElementsByTagName !== "undefined") {
						return context.getElementsByTagName(tag);

						// DocumentFragment nodes don't have gEBTN
					} else if (support.qsa) {
							return context.querySelectorAll(tag);
						}
				} : function (tag, context) {
					var elem,
					    tmp = [],
					    i = 0,
					   
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName(tag);

					// Filter out possible comments
					if (tag === "*") {
						while (elem = results[i++]) {
							if (elem.nodeType === 1) {
								tmp.push(elem);
							}
						}

						return tmp;
					}
					return results;
				};

				// Class
				Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
					if (documentIsHTML) {
						return context.getElementsByClassName(className);
					}
				};

				/* QSA/matchesSelector
	   ---------------------------------------------------------------------- */

				// QSA and matchesSelector support

				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				rbuggyMatches = [];

				// qSa(:focus) reports false when true (Chrome 21)
				// We allow this because of a bug in IE8/9 that throws an error
				// whenever `document.activeElement` is accessed on an iframe
				// So, we allow :focus to pass through QSA all the time to avoid the IE error
				// See http://bugs.jquery.com/ticket/13378
				rbuggyQSA = [];

				if (support.qsa = rnative.test(doc.querySelectorAll)) {
					// Build QSA regex
					// Regex strategy adopted from Diego Perini
					assert(function (div) {
						// Select is set to empty string on purpose
						// This is to test IE's treatment of not explicitly
						// setting a boolean content attribute,
						// since its presence should be enough
						// http://bugs.jquery.com/ticket/12359
						docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";

						// Support: IE8, Opera 11-12.16
						// Nothing should be selected when empty strings follow ^= or $= or *=
						// The test attribute must be unknown in Opera but "safe" for WinRT
						// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
						if (div.querySelectorAll("[msallowcapture^='']").length) {
							rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
						}

						// Support: IE8
						// Boolean attributes and "value" are not treated correctly
						if (!div.querySelectorAll("[selected]").length) {
							rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
						}

						// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
						if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
							rbuggyQSA.push("~=");
						}

						// Webkit/Opera - :checked should return selected option elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						// IE8 throws error here and will not see later tests
						if (!div.querySelectorAll(":checked").length) {
							rbuggyQSA.push(":checked");
						}

						// Support: Safari 8+, iOS 8+
						// https://bugs.webkit.org/show_bug.cgi?id=136851
						// In-page `selector#id sibing-combinator selector` fails
						if (!div.querySelectorAll("a#" + expando + "+*").length) {
							rbuggyQSA.push(".#.+[+~]");
						}
					});

					assert(function (div) {
						// Support: Windows 8 Native Apps
						// The type and name attributes are restricted during .innerHTML assignment
						var input = doc.createElement("input");
						input.setAttribute("type", "hidden");
						div.appendChild(input).setAttribute("name", "D");

						// Support: IE8
						// Enforce case-sensitivity of name attribute
						if (div.querySelectorAll("[name=d]").length) {
							rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
						}

						// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
						// IE8 throws error here and will not see later tests
						if (!div.querySelectorAll(":enabled").length) {
							rbuggyQSA.push(":enabled", ":disabled");
						}

						// Opera 10-11 does not throw on post-comma invalid pseudos
						div.querySelectorAll("*,:x");
						rbuggyQSA.push(",.*:");
					});
				}

				if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

					assert(function (div) {
						// Check to see if it's possible to do matchesSelector
						// on a disconnected node (IE 9)
						support.disconnectedMatch = matches.call(div, "div");

						// This should fail with an exception
						// Gecko does not error, returns false instead
						matches.call(div, "[s!='']:x");
						rbuggyMatches.push("!=", pseudos);
					});
				}

				rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
				rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

				/* Contains
	   ---------------------------------------------------------------------- */
				hasCompare = rnative.test(docElem.compareDocumentPosition);

				// Element contains another
				// Purposefully does not implement inclusive descendent
				// As in, an element does not contain itself
				contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
					var adown = a.nodeType === 9 ? a.documentElement : a,
					    bup = b && b.parentNode;
					return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
				} : function (a, b) {
					if (b) {
						while (b = b.parentNode) {
							if (b === a) {
								return true;
							}
						}
					}
					return false;
				};

				/* Sorting
	   ---------------------------------------------------------------------- */

				// Document order sorting
				sortOrder = hasCompare ? function (a, b) {

					// Flag for duplicate removal
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					// Sort on method existence if only one input has compareDocumentPosition
					var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
					if (compare) {
						return compare;
					}

					// Calculate position if both inputs belong to the same document
					compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

					// Otherwise we know they are disconnected
					1;

					// Disconnected nodes
					if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

						// Choose the first element that is related to our preferred document
						if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
							return -1;
						}
						if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
							return 1;
						}

						// Maintain original order
						return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
					}

					return compare & 4 ? -1 : 1;
				} : function (a, b) {
					// Exit early if the nodes are identical
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					var cur,
					    i = 0,
					    aup = a.parentNode,
					    bup = b.parentNode,
					    ap = [a],
					    bp = [b];

					// Parentless nodes are either documents or disconnected
					if (!aup || !bup) {
						return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

						// If the nodes are siblings, we can do a quick check
					} else if (aup === bup) {
							return siblingCheck(a, b);
						}

					// Otherwise we need full lists of their ancestors for comparison
					cur = a;
					while (cur = cur.parentNode) {
						ap.unshift(cur);
					}
					cur = b;
					while (cur = cur.parentNode) {
						bp.unshift(cur);
					}

					// Walk down the tree looking for a discrepancy
					while (ap[i] === bp[i]) {
						i++;
					}

					return i ?
					// Do a sibling check if the nodes have a common ancestor
					siblingCheck(ap[i], bp[i]) :

					// Otherwise nodes in our document sort first
					ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
				};

				return doc;
			};

			Sizzle.matches = function (expr, elements) {
				return Sizzle(expr, null, null, elements);
			};

			Sizzle.matchesSelector = function (elem, expr) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				// Make sure that attribute selectors are quoted
				expr = expr.replace(rattributeQuotes, "='$1']");

				if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

					try {
						var ret = matches.call(elem, expr);

						// IE 9's matchesSelector returns false on disconnected nodes
						if (ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11) {
							return ret;
						}
					} catch (e) {}
				}

				return Sizzle(expr, document, null, [elem]).length > 0;
			};

			Sizzle.contains = function (context, elem) {
				// Set document vars if needed
				if ((context.ownerDocument || context) !== document) {
					setDocument(context);
				}
				return contains(context, elem);
			};

			Sizzle.attr = function (elem, name) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				var fn = Expr.attrHandle[name.toLowerCase()],
				   
				// Don't get fooled by Object.prototype properties (jQuery #13807)
				val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

				return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
			};

			Sizzle.error = function (msg) {
				throw new Error("Syntax error, unrecognized expression: " + msg);
			};

			/**
	   * Document sorting and removing duplicates
	   * @param {ArrayLike} results
	   */
			Sizzle.uniqueSort = function (results) {
				var elem,
				    duplicates = [],
				    j = 0,
				    i = 0;

				// Unless we *know* we can detect duplicates, assume their presence
				hasDuplicate = !support.detectDuplicates;
				sortInput = !support.sortStable && results.slice(0);
				results.sort(sortOrder);

				if (hasDuplicate) {
					while (elem = results[i++]) {
						if (elem === results[i]) {
							j = duplicates.push(i);
						}
					}
					while (j--) {
						results.splice(duplicates[j], 1);
					}
				}

				// Clear input after sorting to release objects
				// See https://github.com/jquery/sizzle/pull/225
				sortInput = null;

				return results;
			};

			/**
	   * Utility function for retrieving the text value of an array of DOM nodes
	   * @param {Array|Element} elem
	   */
			getText = Sizzle.getText = function (elem) {
				var node,
				    ret = "",
				    i = 0,
				    nodeType = elem.nodeType;

				if (!nodeType) {
					// If no nodeType, this is expected to be an array
					while (node = elem[i++]) {
						// Do not traverse comment nodes
						ret += getText(node);
					}
				} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					// Use textContent for elements
					// innerText usage removed for consistency of new lines (jQuery #11153)
					if (typeof elem.textContent === "string") {
						return elem.textContent;
					} else {
						// Traverse its children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem);
						}
					}
				} else if (nodeType === 3 || nodeType === 4) {
					return elem.nodeValue;
				}
				// Do not include comment or processing instruction nodes

				return ret;
			};

			Expr = Sizzle.selectors = {

				// Can be adjusted by the user
				cacheLength: 50,

				createPseudo: markFunction,

				match: matchExpr,

				attrHandle: {},

				find: {},

				relative: {
					">": { dir: "parentNode", first: true },
					" ": { dir: "parentNode" },
					"+": { dir: "previousSibling", first: true },
					"~": { dir: "previousSibling" }
				},

				preFilter: {
					"ATTR": function ATTR(match) {
						match[1] = match[1].replace(runescape, funescape);

						// Move the given value to match[3] whether quoted or unquoted
						match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

						if (match[2] === "~=") {
							match[3] = " " + match[3] + " ";
						}

						return match.slice(0, 4);
					},

					"CHILD": function CHILD(match) {
						/* matches from matchExpr["CHILD"]
	     	1 type (only|nth|...)
	     	2 what (child|of-type)
	     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
	     	4 xn-component of xn+y argument ([+-]?\d*n|)
	     	5 sign of xn-component
	     	6 x of xn-component
	     	7 sign of y-component
	     	8 y of y-component
	     */
						match[1] = match[1].toLowerCase();

						if (match[1].slice(0, 3) === "nth") {
							// nth-* requires argument
							if (!match[3]) {
								Sizzle.error(match[0]);
							}

							// numeric x and y parameters for Expr.filter.CHILD
							// remember that false/true cast respectively to 0/1
							match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
							match[5] = +(match[7] + match[8] || match[3] === "odd");

							// other types prohibit arguments
						} else if (match[3]) {
								Sizzle.error(match[0]);
							}

						return match;
					},

					"PSEUDO": function PSEUDO(match) {
						var excess,
						    unquoted = !match[6] && match[2];

						if (matchExpr["CHILD"].test(match[0])) {
							return null;
						}

						// Accept quoted arguments as-is
						if (match[3]) {
							match[2] = match[4] || match[5] || "";

							// Strip excess characters from unquoted arguments
						} else if (unquoted && rpseudo.test(unquoted) && (
							// Get excess from tokenize (recursively)
							excess = tokenize(unquoted, true)) && (
							// advance to the next closing parenthesis
							excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

								// excess is a negative index
								match[0] = match[0].slice(0, excess);
								match[2] = unquoted.slice(0, excess);
							}

						// Return only captures needed by the pseudo filter method (type and argument)
						return match.slice(0, 3);
					}
				},

				filter: {

					"TAG": function TAG(nodeNameSelector) {
						var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
						return nodeNameSelector === "*" ? function () {
							return true;
						} : function (elem) {
							return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
						};
					},

					"CLASS": function CLASS(className) {
						var pattern = classCache[className + " "];

						return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
							return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
						});
					},

					"ATTR": function ATTR(name, operator, check) {
						return function (elem) {
							var result = Sizzle.attr(elem, name);

							if (result == null) {
								return operator === "!=";
							}
							if (!operator) {
								return true;
							}

							result += "";

							return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
						};
					},

					"CHILD": function CHILD(type, what, argument, first, last) {
						var simple = type.slice(0, 3) !== "nth",
						    forward = type.slice(-4) !== "last",
						    ofType = what === "of-type";

						return first === 1 && last === 0 ?

						// Shortcut for :nth-*(n)
						function (elem) {
							return !!elem.parentNode;
						} : function (elem, context, xml) {
							var cache,
							    outerCache,
							    node,
							    diff,
							    nodeIndex,
							    start,
							    dir = simple !== forward ? "nextSibling" : "previousSibling",
							    parent = elem.parentNode,
							    name = ofType && elem.nodeName.toLowerCase(),
							    useCache = !xml && !ofType;

							if (parent) {

								// :(first|last|only)-(child|of-type)
								if (simple) {
									while (dir) {
										node = elem;
										while (node = node[dir]) {
											if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
												return false;
											}
										}
										// Reverse direction for :only-* (if we haven't yet done so)
										start = dir = type === "only" && !start && "nextSibling";
									}
									return true;
								}

								start = [forward ? parent.firstChild : parent.lastChild];

								// non-xml :nth-child(...) stores cache data on `parent`
								if (forward && useCache) {
									// Seek `elem` from a previously-cached index
									outerCache = parent[expando] || (parent[expando] = {});
									cache = outerCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = cache[0] === dirruns && cache[2];
									node = nodeIndex && parent.childNodes[nodeIndex];

									while (node = ++nodeIndex && node && node[dir] || (

									// Fallback to seeking `elem` from the start
									diff = nodeIndex = 0) || start.pop()) {

										// When found, cache indexes on `parent` and break
										if (node.nodeType === 1 && ++diff && node === elem) {
											outerCache[type] = [dirruns, nodeIndex, diff];
											break;
										}
									}

									// Use previously-cached element index if available
								} else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
										diff = cache[1];

										// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
									} else {
											// Use the same loop as above to seek `elem` from the start
											while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

												if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
													// Cache the index of each encountered element
													if (useCache) {
														(node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
													}

													if (node === elem) {
														break;
													}
												}
											}
										}

								// Incorporate the offset, then check against cycle size
								diff -= last;
								return diff === first || diff % first === 0 && diff / first >= 0;
							}
						};
					},

					"PSEUDO": function PSEUDO(pseudo, argument) {
						// pseudo-class names are case-insensitive
						// http://www.w3.org/TR/selectors/#pseudo-classes
						// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
						// Remember that setFilters inherits from pseudos
						var args,
						    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

						// The user may use createPseudo to indicate that
						// arguments are needed to create the filter function
						// just as Sizzle does
						if (fn[expando]) {
							return fn(argument);
						}

						// But maintain support for old signatures
						if (fn.length > 1) {
							args = [pseudo, pseudo, "", argument];
							return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
								var idx,
								    matched = fn(seed, argument),
								    i = matched.length;
								while (i--) {
									idx = indexOf(seed, matched[i]);
									seed[idx] = !(matches[idx] = matched[i]);
								}
							}) : function (elem) {
								return fn(elem, 0, args);
							};
						}

						return fn;
					}
				},

				pseudos: {
					// Potentially complex pseudos
					"not": markFunction(function (selector) {
						// Trim the selector passed to compile
						// to avoid treating leading and trailing
						// spaces as combinators
						var input = [],
						    results = [],
						    matcher = compile(selector.replace(rtrim, "$1"));

						return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
							var elem,
							    unmatched = matcher(seed, null, xml, []),
							    i = seed.length;

							// Match elements unmatched by `matcher`
							while (i--) {
								if (elem = unmatched[i]) {
									seed[i] = !(matches[i] = elem);
								}
							}
						}) : function (elem, context, xml) {
							input[0] = elem;
							matcher(input, null, xml, results);
							// Don't keep the element (issue #299)
							input[0] = null;
							return !results.pop();
						};
					}),

					"has": markFunction(function (selector) {
						return function (elem) {
							return Sizzle(selector, elem).length > 0;
						};
					}),

					"contains": markFunction(function (text) {
						text = text.replace(runescape, funescape);
						return function (elem) {
							return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
						};
					}),

					// "Whether an element is represented by a :lang() selector
					// is based solely on the element's language value
					// being equal to the identifier C,
					// or beginning with the identifier C immediately followed by "-".
					// The matching of C against the element's language value is performed case-insensitively.
					// The identifier C does not have to be a valid language name."
					// http://www.w3.org/TR/selectors/#lang-pseudo
					"lang": markFunction(function (lang) {
						// lang value must be a valid identifier
						if (!ridentifier.test(lang || "")) {
							Sizzle.error("unsupported lang: " + lang);
						}
						lang = lang.replace(runescape, funescape).toLowerCase();
						return function (elem) {
							var elemLang;
							do {
								if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

									elemLang = elemLang.toLowerCase();
									return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
								}
							} while ((elem = elem.parentNode) && elem.nodeType === 1);
							return false;
						};
					}),

					// Miscellaneous
					"target": function target(elem) {
						var hash = window.location && window.location.hash;
						return hash && hash.slice(1) === elem.id;
					},

					"root": function root(elem) {
						return elem === docElem;
					},

					"focus": function focus(elem) {
						return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
					},

					// Boolean properties
					"enabled": function enabled(elem) {
						return elem.disabled === false;
					},

					"disabled": function disabled(elem) {
						return elem.disabled === true;
					},

					"checked": function checked(elem) {
						// In CSS3, :checked should return both checked and selected elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						var nodeName = elem.nodeName.toLowerCase();
						return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
					},

					"selected": function selected(elem) {
						// Accessing this property makes selected-by-default
						// options in Safari work properly
						if (elem.parentNode) {
							elem.parentNode.selectedIndex;
						}

						return elem.selected === true;
					},

					// Contents
					"empty": function empty(elem) {
						// http://www.w3.org/TR/selectors/#empty-pseudo
						// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
						//   but not by others (comment: 8; processing instruction: 7; etc.)
						// nodeType < 6 works because attributes (2) do not appear as children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							if (elem.nodeType < 6) {
								return false;
							}
						}
						return true;
					},

					"parent": function parent(elem) {
						return !Expr.pseudos["empty"](elem);
					},

					// Element/input types
					"header": function header(elem) {
						return rheader.test(elem.nodeName);
					},

					"input": function input(elem) {
						return rinputs.test(elem.nodeName);
					},

					"button": function button(elem) {
						var name = elem.nodeName.toLowerCase();
						return name === "input" && elem.type === "button" || name === "button";
					},

					"text": function text(elem) {
						var attr;
						return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

						// Support: IE<8
						// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
						(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
					},

					// Position-in-collection
					"first": createPositionalPseudo(function () {
						return [0];
					}),

					"last": createPositionalPseudo(function (matchIndexes, length) {
						return [length - 1];
					}),

					"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
						return [argument < 0 ? argument + length : argument];
					}),

					"even": createPositionalPseudo(function (matchIndexes, length) {
						var i = 0;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"odd": createPositionalPseudo(function (matchIndexes, length) {
						var i = 1;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; --i >= 0;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; ++i < length;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					})
				}
			};

			Expr.pseudos["nth"] = Expr.pseudos["eq"];

			// Add button/input type pseudos
			for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
				Expr.pseudos[i] = createInputPseudo(i);
			}
			for (i in { submit: true, reset: true }) {
				Expr.pseudos[i] = createButtonPseudo(i);
			}

			// Easy API for creating new setFilters
			function setFilters() {}
			setFilters.prototype = Expr.filters = Expr.pseudos;
			Expr.setFilters = new setFilters();

			tokenize = Sizzle.tokenize = function (selector, parseOnly) {
				var matched,
				    match,
				    tokens,
				    type,
				    soFar,
				    groups,
				    preFilters,
				    cached = tokenCache[selector + " "];

				if (cached) {
					return parseOnly ? 0 : cached.slice(0);
				}

				soFar = selector;
				groups = [];
				preFilters = Expr.preFilter;

				while (soFar) {

					// Comma and first run
					if (!matched || (match = rcomma.exec(soFar))) {
						if (match) {
							// Don't consume trailing commas as valid
							soFar = soFar.slice(match[0].length) || soFar;
						}
						groups.push(tokens = []);
					}

					matched = false;

					// Combinators
					if (match = rcombinators.exec(soFar)) {
						matched = match.shift();
						tokens.push({
							value: matched,
							// Cast descendant combinators to space
							type: match[0].replace(rtrim, " ")
						});
						soFar = soFar.slice(matched.length);
					}

					// Filters
					for (type in Expr.filter) {
						if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
							matched = match.shift();
							tokens.push({
								value: matched,
								type: type,
								matches: match
							});
							soFar = soFar.slice(matched.length);
						}
					}

					if (!matched) {
						break;
					}
				}

				// Return the length of the invalid excess
				// if we're just parsing
				// Otherwise, throw an error or return tokens
				return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
				// Cache the tokens
				tokenCache(selector, groups).slice(0);
			};

			function toSelector(tokens) {
				var i = 0,
				    len = tokens.length,
				    selector = "";
				for (; i < len; i++) {
					selector += tokens[i].value;
				}
				return selector;
			}

			function addCombinator(matcher, combinator, base) {
				var dir = combinator.dir,
				    checkNonElements = base && dir === "parentNode",
				    doneName = done++;

				return combinator.first ?
				// Check against closest ancestor/preceding element
				function (elem, context, xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							return matcher(elem, context, xml);
						}
					}
				} :

				// Check against all ancestor/preceding elements
				function (elem, context, xml) {
					var oldCache,
					    outerCache,
					    newCache = [dirruns, doneName];

					// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
					if (xml) {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								if (matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					} else {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								outerCache = elem[expando] || (elem[expando] = {});
								if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

									// Assign to newCache so results back-propagate to previous elements
									return newCache[2] = oldCache[2];
								} else {
									// Reuse newcache so results back-propagate to previous elements
									outerCache[dir] = newCache;

									// A match means we're done; a fail means we have to keep checking
									if (newCache[2] = matcher(elem, context, xml)) {
										return true;
									}
								}
							}
						}
					}
				};
			}

			function elementMatcher(matchers) {
				return matchers.length > 1 ? function (elem, context, xml) {
					var i = matchers.length;
					while (i--) {
						if (!matchers[i](elem, context, xml)) {
							return false;
						}
					}
					return true;
				} : matchers[0];
			}

			function multipleContexts(selector, contexts, results) {
				var i = 0,
				    len = contexts.length;
				for (; i < len; i++) {
					Sizzle(selector, contexts[i], results);
				}
				return results;
			}

			function condense(unmatched, map, filter, context, xml) {
				var elem,
				    newUnmatched = [],
				    i = 0,
				    len = unmatched.length,
				    mapped = map != null;

				for (; i < len; i++) {
					if (elem = unmatched[i]) {
						if (!filter || filter(elem, context, xml)) {
							newUnmatched.push(elem);
							if (mapped) {
								map.push(i);
							}
						}
					}
				}

				return newUnmatched;
			}

			function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
				if (postFilter && !postFilter[expando]) {
					postFilter = setMatcher(postFilter);
				}
				if (postFinder && !postFinder[expando]) {
					postFinder = setMatcher(postFinder, postSelector);
				}
				return markFunction(function (seed, results, context, xml) {
					var temp,
					    i,
					    elem,
					    preMap = [],
					    postMap = [],
					    preexisting = results.length,
					   

					// Get initial elements from seed or context
					elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
					   

					// Prefilter to get matcher input, preserving a map for seed-results synchronization
					matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
					    matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || (seed ? preFilter : preexisting || postFilter) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results : matcherIn;

					// Find primary matches
					if (matcher) {
						matcher(matcherIn, matcherOut, context, xml);
					}

					// Apply postFilter
					if (postFilter) {
						temp = condense(matcherOut, postMap);
						postFilter(temp, [], context, xml);

						// Un-match failing elements by moving them back to matcherIn
						i = temp.length;
						while (i--) {
							if (elem = temp[i]) {
								matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
							}
						}
					}

					if (seed) {
						if (postFinder || preFilter) {
							if (postFinder) {
								// Get the final matcherOut by condensing this intermediate into postFinder contexts
								temp = [];
								i = matcherOut.length;
								while (i--) {
									if (elem = matcherOut[i]) {
										// Restore matcherIn since elem is not yet a final match
										temp.push(matcherIn[i] = elem);
									}
								}
								postFinder(null, matcherOut = [], temp, xml);
							}

							// Move matched elements from seed to results to keep them synchronized
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

									seed[temp] = !(results[temp] = elem);
								}
							}
						}

						// Add elements to results, through postFinder if defined
					} else {
							matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
							if (postFinder) {
								postFinder(null, results, matcherOut, xml);
							} else {
								push.apply(results, matcherOut);
							}
						}
				});
			}

			function matcherFromTokens(tokens) {
				var checkContext,
				    matcher,
				    j,
				    len = tokens.length,
				    leadingRelative = Expr.relative[tokens[0].type],
				    implicitRelative = leadingRelative || Expr.relative[" "],
				    i = leadingRelative ? 1 : 0,
				   

				// The foundational matcher ensures that elements are reachable from top-level context(s)
				matchContext = addCombinator(function (elem) {
					return elem === checkContext;
				}, implicitRelative, true),
				    matchAnyContext = addCombinator(function (elem) {
					return indexOf(checkContext, elem) > -1;
				}, implicitRelative, true),
				    matchers = [function (elem, context, xml) {
					var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
					// Avoid hanging onto element (issue #299)
					checkContext = null;
					return ret;
				}];

				for (; i < len; i++) {
					if (matcher = Expr.relative[tokens[i].type]) {
						matchers = [addCombinator(elementMatcher(matchers), matcher)];
					} else {
						matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

						// Return special upon seeing a positional matcher
						if (matcher[expando]) {
							// Find the next relative operator (if any) for proper handling
							j = ++i;
							for (; j < len; j++) {
								if (Expr.relative[tokens[j].type]) {
									break;
								}
							}
							return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
						}
						matchers.push(matcher);
					}
				}

				return elementMatcher(matchers);
			}

			function matcherFromGroupMatchers(elementMatchers, setMatchers) {
				var bySet = setMatchers.length > 0,
				    byElement = elementMatchers.length > 0,
				    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
					var elem,
					    j,
					    matcher,
					    matchedCount = 0,
					    i = "0",
					    unmatched = seed && [],
					    setMatched = [],
					    contextBackup = outermostContext,
					   
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]("*", outermost),
					   
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
					    len = elems.length;

					if (outermost) {
						outermostContext = context !== document && context;
					}

					// Add elements passing elementMatchers directly to results
					// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
					// Support: IE<9, Safari
					// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
					for (; i !== len && (elem = elems[i]) != null; i++) {
						if (byElement && elem) {
							j = 0;
							while (matcher = elementMatchers[j++]) {
								if (matcher(elem, context, xml)) {
									results.push(elem);
									break;
								}
							}
							if (outermost) {
								dirruns = dirrunsUnique;
							}
						}

						// Track unmatched elements for set filters
						if (bySet) {
							// They will have gone through all possible matchers
							if (elem = !matcher && elem) {
								matchedCount--;
							}

							// Lengthen the array for every element, matched or not
							if (seed) {
								unmatched.push(elem);
							}
						}
					}

					// Apply set filters to unmatched elements
					matchedCount += i;
					if (bySet && i !== matchedCount) {
						j = 0;
						while (matcher = setMatchers[j++]) {
							matcher(unmatched, setMatched, context, xml);
						}

						if (seed) {
							// Reintegrate element matches to eliminate the need for sorting
							if (matchedCount > 0) {
								while (i--) {
									if (!(unmatched[i] || setMatched[i])) {
										setMatched[i] = pop.call(results);
									}
								}
							}

							// Discard index placeholder values to get only actual matches
							setMatched = condense(setMatched);
						}

						// Add matches to results
						push.apply(results, setMatched);

						// Seedless set matches succeeding multiple successful matchers stipulate sorting
						if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

							Sizzle.uniqueSort(results);
						}
					}

					// Override manipulation of globals by nested matchers
					if (outermost) {
						dirruns = dirrunsUnique;
						outermostContext = contextBackup;
					}

					return unmatched;
				};

				return bySet ? markFunction(superMatcher) : superMatcher;
			}

			compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
				var i,
				    setMatchers = [],
				    elementMatchers = [],
				    cached = compilerCache[selector + " "];

				if (!cached) {
					// Generate a function of recursive functions that can be used to check each element
					if (!match) {
						match = tokenize(selector);
					}
					i = match.length;
					while (i--) {
						cached = matcherFromTokens(match[i]);
						if (cached[expando]) {
							setMatchers.push(cached);
						} else {
							elementMatchers.push(cached);
						}
					}

					// Cache the compiled function
					cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

					// Save selector and tokenization
					cached.selector = selector;
				}
				return cached;
			};

			/**
	   * A low-level selection function that works with Sizzle's compiled
	   *  selector functions
	   * @param {String|Function} selector A selector or a pre-compiled
	   *  selector function built with Sizzle.compile
	   * @param {Element} context
	   * @param {Array} [results]
	   * @param {Array} [seed] A set of elements to match against
	   */
			select = Sizzle.select = function (selector, context, results, seed) {
				var i,
				    tokens,
				    token,
				    type,
				    find,
				    compiled = typeof selector === "function" && selector,
				    match = !seed && tokenize(selector = compiled.selector || selector);

				results = results || [];

				// Try to minimize operations if there is no seed and only one group
				if (match.length === 1) {

					// Take a shortcut and set the context if the root selector is an ID
					tokens = match[0] = match[0].slice(0);
					if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

						context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
						if (!context) {
							return results;

							// Precompiled matchers will still verify ancestry, so step up a level
						} else if (compiled) {
								context = context.parentNode;
							}

						selector = selector.slice(tokens.shift().value.length);
					}

					// Fetch a seed set for right-to-left matching
					i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
					while (i--) {
						token = tokens[i];

						// Abort if we hit a combinator
						if (Expr.relative[type = token.type]) {
							break;
						}
						if (find = Expr.find[type]) {
							// Search, expanding context for leading sibling combinators
							if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

								// If seed is empty or no tokens remain, we can return early
								tokens.splice(i, 1);
								selector = seed.length && toSelector(tokens);
								if (!selector) {
									push.apply(results, seed);
									return results;
								}

								break;
							}
						}
					}
				}

				// Compile and execute a filtering function if one is not provided
				// Provide `match` to avoid retokenization if we modified the selector above
				(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
				return results;
			};

			// One-time assignments

			// Sort stability
			support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

			// Support: Chrome 14-35+
			// Always assume duplicates if they aren't passed to the comparison function
			support.detectDuplicates = !!hasDuplicate;

			// Initialize against the default document
			setDocument();

			// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
			// Detached nodes confoundingly follow *each other*
			support.sortDetached = assert(function (div1) {
				// Should return 1, but returns 4 (following)
				return div1.compareDocumentPosition(document.createElement("div")) & 1;
			});

			// Support: IE<8
			// Prevent attribute/property "interpolation"
			// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
			if (!assert(function (div) {
				div.innerHTML = "<a href='#'></a>";
				return div.firstChild.getAttribute("href") === "#";
			})) {
				addHandle("type|href|height|width", function (elem, name, isXML) {
					if (!isXML) {
						return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
					}
				});
			}

			// Support: IE<9
			// Use defaultValue in place of getAttribute("value")
			if (!support.attributes || !assert(function (div) {
				div.innerHTML = "<input/>";
				div.firstChild.setAttribute("value", "");
				return div.firstChild.getAttribute("value") === "";
			})) {
				addHandle("value", function (elem, name, isXML) {
					if (!isXML && elem.nodeName.toLowerCase() === "input") {
						return elem.defaultValue;
					}
				});
			}

			// Support: IE<9
			// Use getAttributeNode to fetch booleans when getAttribute lies
			if (!assert(function (div) {
				return div.getAttribute("disabled") == null;
			})) {
				addHandle(booleans, function (elem, name, isXML) {
					var val;
					if (!isXML) {
						return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
					}
				});
			}

			return Sizzle;
		})(window);

		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;

		var rneedsContext = jQuery.expr.match.needsContext;

		var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;

		var risSimple = /^.[^:#\[\.,]*$/;

		// Implement the identical functionality for filter and not
		function winnow(elements, qualifier, not) {
			if (jQuery.isFunction(qualifier)) {
				return jQuery.grep(elements, function (elem, i) {
					/* jshint -W018 */
					return !!qualifier.call(elem, i, elem) !== not;
				});
			}

			if (qualifier.nodeType) {
				return jQuery.grep(elements, function (elem) {
					return elem === qualifier !== not;
				});
			}

			if (typeof qualifier === "string") {
				if (risSimple.test(qualifier)) {
					return jQuery.filter(qualifier, elements, not);
				}

				qualifier = jQuery.filter(qualifier, elements);
			}

			return jQuery.grep(elements, function (elem) {
				return jQuery.inArray(elem, qualifier) >= 0 !== not;
			});
		}

		jQuery.filter = function (expr, elems, not) {
			var elem = elems[0];

			if (not) {
				expr = ":not(" + expr + ")";
			}

			return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
				return elem.nodeType === 1;
			}));
		};

		jQuery.fn.extend({
			find: function find(selector) {
				var i,
				    ret = [],
				    self = this,
				    len = self.length;

				if (typeof selector !== "string") {
					return this.pushStack(jQuery(selector).filter(function () {
						for (i = 0; i < len; i++) {
							if (jQuery.contains(self[i], this)) {
								return true;
							}
						}
					}));
				}

				for (i = 0; i < len; i++) {
					jQuery.find(selector, self[i], ret);
				}

				// Needed because $( selector, context ) becomes $( context ).find( selector )
				ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
				ret.selector = this.selector ? this.selector + " " + selector : selector;
				return ret;
			},
			filter: function filter(selector) {
				return this.pushStack(winnow(this, selector || [], false));
			},
			not: function not(selector) {
				return this.pushStack(winnow(this, selector || [], true));
			},
			is: function is(selector) {
				return !!winnow(this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
			}
		});

		// Initialize a jQuery object

		// A central reference to the root jQuery(document)
		var rootjQuery,
		   

		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,
		   

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
		    init = jQuery.fn.init = function (selector, context) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if (!selector) {
				return this;
			}

			// Handle HTML strings
			if (typeof selector === "string") {
				if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [null, selector, null];
				} else {
					match = rquickExpr.exec(selector);
				}

				// Match html or make sure no context is specified for #id
				if (match && (match[1] || !context)) {

					// HANDLE: $(html) -> $(array)
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;

						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

						// HANDLE: $(html, props)
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							for (match in context) {
								// Properties of context are called as methods if possible
								if (jQuery.isFunction(this[match])) {
									this[match](context[match]);

									// ...and otherwise set as attributes
								} else {
										this.attr(match, context[match]);
									}
							}
						}

						return this;

						// HANDLE: $(#id)
					} else {
							elem = document.getElementById(match[2]);

							// Check parentNode to catch when Blackberry 4.6 returns
							// nodes that are no longer in the document #6963
							if (elem && elem.parentNode) {
								// Handle the case where IE and Opera return items
								// by name instead of ID
								if (elem.id !== match[2]) {
									return rootjQuery.find(selector);
								}

								// Otherwise, we inject the element directly into the jQuery object
								this.length = 1;
								this[0] = elem;
							}

							this.context = document;
							this.selector = selector;
							return this;
						}

					// HANDLE: $(expr, $(...))
				} else if (!context || context.jquery) {
						return (context || rootjQuery).find(selector);

						// HANDLE: $(expr, context)
						// (which is just equivalent to: $(context).find(expr)
					} else {
							return this.constructor(context).find(selector);
						}

				// HANDLE: $(DOMElement)
			} else if (selector.nodeType) {
					this.context = this[0] = selector;
					this.length = 1;
					return this;

					// HANDLE: $(function)
					// Shortcut for document ready
				} else if (jQuery.isFunction(selector)) {
						return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) :
						// Execute immediately if ready is not present
						selector(jQuery);
					}

			if (selector.selector !== undefined) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray(selector, this);
		};

		// Give the init function the jQuery prototype for later instantiation
		init.prototype = jQuery.fn;

		// Initialize central reference
		rootjQuery = jQuery(document);

		var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		   
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

		jQuery.extend({
			dir: function dir(elem, _dir, until) {
				var matched = [],
				    cur = elem[_dir];

				while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
					if (cur.nodeType === 1) {
						matched.push(cur);
					}
					cur = cur[_dir];
				}
				return matched;
			},

			sibling: function sibling(n, elem) {
				var r = [];

				for (; n; n = n.nextSibling) {
					if (n.nodeType === 1 && n !== elem) {
						r.push(n);
					}
				}

				return r;
			}
		});

		jQuery.fn.extend({
			has: function has(target) {
				var i,
				    targets = jQuery(target, this),
				    len = targets.length;

				return this.filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(this, targets[i])) {
							return true;
						}
					}
				});
			},

			closest: function closest(selectors, context) {
				var cur,
				    i = 0,
				    l = this.length,
				    matched = [],
				    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
						// Always skip document fragments
						if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}

				return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
			},

			// Determine the position of an element within
			// the matched set of elements
			index: function index(elem) {

				// No argument, return index in parent
				if (!elem) {
					return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
				}

				// index in selector
				if (typeof elem === "string") {
					return jQuery.inArray(this[0], jQuery(elem));
				}

				// Locate the position of the desired element
				return jQuery.inArray(
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem, this);
			},

			add: function add(selector, context) {
				return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
			},

			addBack: function addBack(selector) {
				return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
			}
		});

		function sibling(cur, dir) {
			do {
				cur = cur[dir];
			} while (cur && cur.nodeType !== 1);

			return cur;
		}

		jQuery.each({
			parent: function parent(elem) {
				var parent = elem.parentNode;
				return parent && parent.nodeType !== 11 ? parent : null;
			},
			parents: function parents(elem) {
				return jQuery.dir(elem, "parentNode");
			},
			parentsUntil: function parentsUntil(elem, i, until) {
				return jQuery.dir(elem, "parentNode", until);
			},
			next: function next(elem) {
				return sibling(elem, "nextSibling");
			},
			prev: function prev(elem) {
				return sibling(elem, "previousSibling");
			},
			nextAll: function nextAll(elem) {
				return jQuery.dir(elem, "nextSibling");
			},
			prevAll: function prevAll(elem) {
				return jQuery.dir(elem, "previousSibling");
			},
			nextUntil: function nextUntil(elem, i, until) {
				return jQuery.dir(elem, "nextSibling", until);
			},
			prevUntil: function prevUntil(elem, i, until) {
				return jQuery.dir(elem, "previousSibling", until);
			},
			siblings: function siblings(elem) {
				return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
			},
			children: function children(elem) {
				return jQuery.sibling(elem.firstChild);
			},
			contents: function contents(elem) {
				return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
			}
		}, function (name, fn) {
			jQuery.fn[name] = function (until, selector) {
				var ret = jQuery.map(this, fn, until);

				if (name.slice(-5) !== "Until") {
					selector = until;
				}

				if (selector && typeof selector === "string") {
					ret = jQuery.filter(selector, ret);
				}

				if (this.length > 1) {
					// Remove duplicates
					if (!guaranteedUnique[name]) {
						ret = jQuery.unique(ret);
					}

					// Reverse order for parents* and prev-derivatives
					if (rparentsprev.test(name)) {
						ret = ret.reverse();
					}
				}

				return this.pushStack(ret);
			};
		});
		var rnotwhite = /\S+/g;

		// String to Object options format cache
		var optionsCache = {};

		// Convert String-formatted options into Object-formatted ones and store in cache
		function createOptions(options) {
			var object = optionsCache[options] = {};
			jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
				object[flag] = true;
			});
			return object;
		}

		/*
	  * Create a callback list using the following parameters:
	  *
	  *	options: an optional list of space-separated options that will change how
	  *			the callback list behaves or a more traditional option object
	  *
	  * By default a callback list will act like an event callback list and can be
	  * "fired" multiple times.
	  *
	  * Possible options:
	  *
	  *	once:			will ensure the callback list can only be fired once (like a Deferred)
	  *
	  *	memory:			will keep track of previous values and will call any callback added
	  *					after the list has been fired right away with the latest "memorized"
	  *					values (like a Deferred)
	  *
	  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	  *
	  *	stopOnFalse:	interrupt callings when a callback returns false
	  *
	  */
		jQuery.Callbacks = function (options) {

			// Convert options from String-formatted to Object-formatted if needed
			// (we check in cache first)
			options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);

			var // Flag to know if list is currently firing
			firing,
			   
			// Last fire value (for non-forgettable lists)
			memory,
			   
			// Flag to know if list was already fired
			_fired,
			   
			// End of the loop when firing
			firingLength,
			   
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			   
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			   
			// Actual callback list
			list = [],
			   
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			   
			// Fire callbacks
			fire = function fire(data) {
				memory = options.memory && data;
				_fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for (; list && firingIndex < firingLength; firingIndex++) {
					if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if (list) {
					if (stack) {
						if (stack.length) {
							fire(stack.shift());
						}
					} else if (memory) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			   
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function add() {
					if (list) {
						// First, we save the current length
						var start = list.length;
						(function add(args) {
							jQuery.each(args, function (_, arg) {
								var type = jQuery.type(arg);
								if (type === "function") {
									if (!options.unique || !self.has(arg)) {
										list.push(arg);
									}
								} else if (arg && arg.length && type !== "string") {
									// Inspect recursively
									add(arg);
								}
							});
						})(arguments);
						// Do we need to add the callbacks to the
						// current firing batch?
						if (firing) {
							firingLength = list.length;
							// With memory, if we're not firing then
							// we should call right away
						} else if (memory) {
								firingStart = start;
								fire(memory);
							}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function remove() {
					if (list) {
						jQuery.each(arguments, function (_, arg) {
							var index;
							while ((index = jQuery.inArray(arg, list, index)) > -1) {
								list.splice(index, 1);
								// Handle firing indexes
								if (firing) {
									if (index <= firingLength) {
										firingLength--;
									}
									if (index <= firingIndex) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function has(fn) {
					return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
				},
				// Remove all callbacks from the list
				empty: function empty() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function disable() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function disabled() {
					return !list;
				},
				// Lock the list in its current state
				lock: function lock() {
					stack = undefined;
					if (!memory) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function locked() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function fireWith(context, args) {
					if (list && (!_fired || stack)) {
						args = args || [];
						args = [context, args.slice ? args.slice() : args];
						if (firing) {
							stack.push(args);
						} else {
							fire(args);
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function fire() {
					self.fireWith(this, arguments);
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function fired() {
					return !!_fired;
				}
			};

			return self;
		};

		jQuery.extend({

			Deferred: function Deferred(func) {
				var tuples = [
				// action, add listener, listener list, final state
				["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
				    _state = "pending",
				    _promise = {
					state: function state() {
						return _state;
					},
					always: function always() {
						deferred.done(arguments).fail(arguments);
						return this;
					},
					then: function then() /* fnDone, fnFail, fnProgress */{
						var fns = arguments;
						return jQuery.Deferred(function (newDefer) {
							jQuery.each(tuples, function (i, tuple) {
								var fn = jQuery.isFunction(fns[i]) && fns[i];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[tuple[1]](function () {
									var returned = fn && fn.apply(this, arguments);
									if (returned && jQuery.isFunction(returned.promise)) {
										returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
									} else {
										newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function promise(obj) {
						return obj != null ? jQuery.extend(obj, _promise) : _promise;
					}
				},
				    deferred = {};

				// Keep pipe for back-compat
				_promise.pipe = _promise.then;

				// Add list-specific methods
				jQuery.each(tuples, function (i, tuple) {
					var list = tuple[2],
					    stateString = tuple[3];

					// promise[ done | fail | progress ] = list.add
					_promise[tuple[1]] = list.add;

					// Handle state
					if (stateString) {
						list.add(function () {
							// state = [ resolved | rejected ]
							_state = stateString;

							// [ reject_list | resolve_list ].disable; progress_list.lock
						}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
					}

					// deferred[ resolve | reject | notify ]
					deferred[tuple[0]] = function () {
						deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
						return this;
					};
					deferred[tuple[0] + "With"] = list.fireWith;
				});

				// Make the deferred a promise
				_promise.promise(deferred);

				// Call given func if any
				if (func) {
					func.call(deferred, deferred);
				}

				// All done!
				return deferred;
			},

			// Deferred helper
			when: function when(subordinate /* , ..., subordinateN */) {
				var i = 0,
				    resolveValues = _slice.call(arguments),
				    length = resolveValues.length,
				   

				// the count of uncompleted subordinates
				remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
				   

				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
				   

				// Update function for both resolve and progress values
				updateFunc = function updateFunc(i, contexts, values) {
					return function (value) {
						contexts[i] = this;
						values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
						if (values === progressValues) {
							deferred.notifyWith(contexts, values);
						} else if (! --remaining) {
							deferred.resolveWith(contexts, values);
						}
					};
				},
				    progressValues,
				    progressContexts,
				    resolveContexts;

				// add listeners to Deferred subordinates; treat others as resolved
				if (length > 1) {
					progressValues = new Array(length);
					progressContexts = new Array(length);
					resolveContexts = new Array(length);
					for (; i < length; i++) {
						if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
							resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
						} else {
							--remaining;
						}
					}
				}

				// if we're not waiting on anything, resolve the master
				if (!remaining) {
					deferred.resolveWith(resolveContexts, resolveValues);
				}

				return deferred.promise();
			}
		});

		// The deferred used on DOM ready
		var readyList;

		jQuery.fn.ready = function (fn) {
			// Add the callback
			jQuery.ready.promise().done(fn);

			return this;
		};

		jQuery.extend({
			// Is the DOM ready to be used? Set to true once it occurs.
			isReady: false,

			// A counter to track how many items to wait for before
			// the ready event fires. See #6781
			readyWait: 1,

			// Hold (or release) the ready event
			holdReady: function holdReady(hold) {
				if (hold) {
					jQuery.readyWait++;
				} else {
					jQuery.ready(true);
				}
			},

			// Handle when the DOM is ready
			ready: function ready(wait) {

				// Abort if there are pending holds or we're already ready
				if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
					return;
				}

				// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
				if (!document.body) {
					return setTimeout(jQuery.ready);
				}

				// Remember that the DOM is ready
				jQuery.isReady = true;

				// If a normal DOM Ready event fired, decrement, and wait if need be
				if (wait !== true && --jQuery.readyWait > 0) {
					return;
				}

				// If there are functions bound, to execute
				readyList.resolveWith(document, [jQuery]);

				// Trigger any bound ready events
				if (jQuery.fn.triggerHandler) {
					jQuery(document).triggerHandler("ready");
					jQuery(document).off("ready");
				}
			}
		});

		/**
	  * Clean-up method for dom ready events
	  */
		function detach() {
			if (document.addEventListener) {
				document.removeEventListener("DOMContentLoaded", completed, false);
				window.removeEventListener("load", completed, false);
			} else {
				document.detachEvent("onreadystatechange", completed);
				window.detachEvent("onload", completed);
			}
		}

		/**
	  * The ready event handler and self cleanup method
	  */
		function completed() {
			// readyState === "complete" is good enough for us to call the dom ready in oldIE
			if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
				detach();
				jQuery.ready();
			}
		}

		jQuery.ready.promise = function (obj) {
			if (!readyList) {

				readyList = jQuery.Deferred();

				// Catch cases where $(document).ready() is called after the browser event has already occurred.
				// we once tried to use readyState "interactive" here, but it caused issues like the one
				// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
				if (document.readyState === "complete") {
					// Handle it asynchronously to allow scripts the opportunity to delay ready
					setTimeout(jQuery.ready);

					// Standards-based browsers support DOMContentLoaded
				} else if (document.addEventListener) {
						// Use the handy event callback
						document.addEventListener("DOMContentLoaded", completed, false);

						// A fallback to window.onload, that will always work
						window.addEventListener("load", completed, false);

						// If IE event model is used
					} else {
							// Ensure firing before onload, maybe late but safe also for iframes
							document.attachEvent("onreadystatechange", completed);

							// A fallback to window.onload, that will always work
							window.attachEvent("onload", completed);

							// If IE and not a frame
							// continually check to see if the document is ready
							var top = false;

							try {
								top = window.frameElement == null && document.documentElement;
							} catch (e) {}

							if (top && top.doScroll) {
								(function doScrollCheck() {
									if (!jQuery.isReady) {

										try {
											// Use the trick by Diego Perini
											// http://javascript.nwbox.com/IEContentLoaded/
											top.doScroll("left");
										} catch (e) {
											return setTimeout(doScrollCheck, 50);
										}

										// detach all dom ready events
										detach();

										// and execute any waiting functions
										jQuery.ready();
									}
								})();
							}
						}
			}
			return readyList.promise(obj);
		};

		var strundefined = typeof undefined;

		// Support: IE<9
		// Iteration over object's inherited properties before its own
		var i;
		for (i in jQuery(support)) {
			break;
		}
		support.ownLast = i !== "0";

		// Note: most support tests are defined in their respective modules.
		// false until the test is run
		support.inlineBlockNeedsLayout = false;

		// Execute ASAP in case we need to set body.style.zoom
		jQuery(function () {
			// Minified: var a,b,c,d
			var val, div, body, container;

			body = document.getElementsByTagName("body")[0];
			if (!body || !body.style) {
				// Return for frameset docs that don't have a body
				return;
			}

			// Setup
			div = document.createElement("div");
			container = document.createElement("div");
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild(container).appendChild(div);

			if (typeof div.style.zoom !== strundefined) {
				// Support: IE<8
				// Check if natively block-level elements act like inline-block
				// elements when setting their display to 'inline' and giving
				// them layout
				div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

				support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
				if (val) {
					// Prevent IE 6 from affecting layout for positioned elements #11048
					// Prevent IE from shrinking the body in IE 7 mode #12869
					// Support: IE<8
					body.style.zoom = 1;
				}
			}

			body.removeChild(container);
		});

		(function () {
			var div = document.createElement("div");

			// Execute the test only if not already executed in another module.
			if (support.deleteExpando == null) {
				// Support: IE<9
				support.deleteExpando = true;
				try {
					delete div.test;
				} catch (e) {
					support.deleteExpando = false;
				}
			}

			// Null elements to avoid leaks in IE.
			div = null;
		})();

		/**
	  * Determines whether an object can have data
	  */
		jQuery.acceptData = function (elem) {
			var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()],
			    nodeType = +elem.nodeType || 1;

			// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
			return nodeType !== 1 && nodeType !== 9 ? false :

			// Nodes accept data unless otherwise specified; rejection can be conditional
			!noData || noData !== true && elem.getAttribute("classid") === noData;
		};

		var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		    rmultiDash = /([A-Z])/g;

		function dataAttr(elem, key, data) {
			// If nothing was found internally, try to fetch any
			// data from the HTML5 data-* attribute
			if (data === undefined && elem.nodeType === 1) {

				var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();

				data = elem.getAttribute(name);

				if (typeof data === "string") {
					try {
						data = data === "true" ? true : data === "false" ? false : data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
					} catch (e) {}

					// Make sure we set the data so it isn't changed later
					jQuery.data(elem, key, data);
				} else {
					data = undefined;
				}
			}

			return data;
		}

		// checks a cache object for emptiness
		function isEmptyDataObject(obj) {
			var name;
			for (name in obj) {

				// if the public data object is empty, the private is still empty
				if (name === "data" && jQuery.isEmptyObject(obj[name])) {
					continue;
				}
				if (name !== "toJSON") {
					return false;
				}
			}

			return true;
		}

		function internalData(elem, name, data, pvt /* Internal Use Only */) {
			if (!jQuery.acceptData(elem)) {
				return;
			}

			var ret,
			    thisCache,
			    internalKey = jQuery.expando,
			   

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,
			   

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,
			   

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

			// Avoid doing any more work than we need to when trying to get data on an
			// object that has no data at all
			if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
				return;
			}

			if (!id) {
				// Only DOM nodes need a new unique ID for each element since their data
				// ends up in the global cache
				if (isNode) {
					id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;
				} else {
					id = internalKey;
				}
			}

			if (!cache[id]) {
				// Avoid exposing jQuery metadata on plain JS objects when the object
				// is serialized using JSON.stringify
				cache[id] = isNode ? {} : { toJSON: jQuery.noop };
			}

			// An object can be passed to jQuery.data instead of a key/value pair; this gets
			// shallow copied over onto the existing cache
			if (typeof name === "object" || typeof name === "function") {
				if (pvt) {
					cache[id] = jQuery.extend(cache[id], name);
				} else {
					cache[id].data = jQuery.extend(cache[id].data, name);
				}
			}

			thisCache = cache[id];

			// jQuery data() is stored in a separate object inside the object's internal data
			// cache in order to avoid key collisions between internal data and user-defined
			// data.
			if (!pvt) {
				if (!thisCache.data) {
					thisCache.data = {};
				}

				thisCache = thisCache.data;
			}

			if (data !== undefined) {
				thisCache[jQuery.camelCase(name)] = data;
			}

			// Check for both converted-to-camel and non-converted data property names
			// If a data property was specified
			if (typeof name === "string") {

				// First Try to find as-is property data
				ret = thisCache[name];

				// Test for null|undefined property data
				if (ret == null) {

					// Try to find the camelCased property
					ret = thisCache[jQuery.camelCase(name)];
				}
			} else {
				ret = thisCache;
			}

			return ret;
		}

		function internalRemoveData(elem, name, pvt) {
			if (!jQuery.acceptData(elem)) {
				return;
			}

			var thisCache,
			    i,
			    isNode = elem.nodeType,
			   

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			    id = isNode ? elem[jQuery.expando] : jQuery.expando;

			// If there is already no cache entry for this object, there is no
			// purpose in continuing
			if (!cache[id]) {
				return;
			}

			if (name) {

				thisCache = pvt ? cache[id] : cache[id].data;

				if (thisCache) {

					// Support array or space separated string names for data keys
					if (!jQuery.isArray(name)) {

						// try the string as a key before any manipulation
						if (name in thisCache) {
							name = [name];
						} else {

							// split the camel cased version by spaces unless a key with the spaces exists
							name = jQuery.camelCase(name);
							if (name in thisCache) {
								name = [name];
							} else {
								name = name.split(" ");
							}
						}
					} else {
						// If "name" is an array of keys...
						// When data is initially created, via ("key", "val") signature,
						// keys will be converted to camelCase.
						// Since there is no way to tell _how_ a key was added, remove
						// both plain key and camelCase key. #12786
						// This will only penalize the array argument path.
						name = name.concat(jQuery.map(name, jQuery.camelCase));
					}

					i = name.length;
					while (i--) {
						delete thisCache[name[i]];
					}

					// If there is no data left in the cache, we want to continue
					// and let the cache object itself get destroyed
					if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
						return;
					}
				}
			}

			// See jQuery.data for more information
			if (!pvt) {
				delete cache[id].data;

				// Don't destroy the parent cache unless the internal data object
				// had been the only thing left in it
				if (!isEmptyDataObject(cache[id])) {
					return;
				}
			}

			// Destroy the cache
			if (isNode) {
				jQuery.cleanData([elem], true);

				// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
				/* jshint eqeqeq: false */
			} else if (support.deleteExpando || cache != cache.window) {
					/* jshint eqeqeq: true */
					delete cache[id];

					// When all else fails, null
				} else {
						cache[id] = null;
					}
		}

		jQuery.extend({
			cache: {},

			// The following elements (space-suffixed to avoid Object.prototype collisions)
			// throw uncatchable exceptions if you attempt to set expando properties
			noData: {
				"applet ": true,
				"embed ": true,
				// ...but Flash objects (which have this classid) *can* handle expandos
				"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
			},

			hasData: function hasData(elem) {
				elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
				return !!elem && !isEmptyDataObject(elem);
			},

			data: function data(elem, name, _data) {
				return internalData(elem, name, _data);
			},

			removeData: function removeData(elem, name) {
				return internalRemoveData(elem, name);
			},

			// For internal use only.
			_data: function _data(elem, name, data) {
				return internalData(elem, name, data, true);
			},

			_removeData: function _removeData(elem, name) {
				return internalRemoveData(elem, name, true);
			}
		});

		jQuery.fn.extend({
			data: function data(key, value) {
				var i,
				    name,
				    data,
				    elem = this[0],
				    attrs = elem && elem.attributes;

				// Special expections of .data basically thwart jQuery.access,
				// so implement the relevant behavior ourselves

				// Gets all values
				if (key === undefined) {
					if (this.length) {
						data = jQuery.data(elem);

						if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
							i = attrs.length;
							while (i--) {

								// Support: IE11+
								// The attrs elements can be null (#14894)
								if (attrs[i]) {
									name = attrs[i].name;
									if (name.indexOf("data-") === 0) {
										name = jQuery.camelCase(name.slice(5));
										dataAttr(elem, name, data[name]);
									}
								}
							}
							jQuery._data(elem, "parsedAttrs", true);
						}
					}

					return data;
				}

				// Sets multiple values
				if (typeof key === "object") {
					return this.each(function () {
						jQuery.data(this, key);
					});
				}

				return arguments.length > 1 ?

				// Sets one value
				this.each(function () {
					jQuery.data(this, key, value);
				}) :

				// Gets one value
				// Try to fetch any internally stored data first
				elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
			},

			removeData: function removeData(key) {
				return this.each(function () {
					jQuery.removeData(this, key);
				});
			}
		});

		jQuery.extend({
			queue: function queue(elem, type, data) {
				var queue;

				if (elem) {
					type = (type || "fx") + "queue";
					queue = jQuery._data(elem, type);

					// Speed up dequeue by getting out quickly if this is just a lookup
					if (data) {
						if (!queue || jQuery.isArray(data)) {
							queue = jQuery._data(elem, type, jQuery.makeArray(data));
						} else {
							queue.push(data);
						}
					}
					return queue || [];
				}
			},

			dequeue: function dequeue(elem, type) {
				type = type || "fx";

				var queue = jQuery.queue(elem, type),
				    startLength = queue.length,
				    fn = queue.shift(),
				    hooks = jQuery._queueHooks(elem, type),
				    next = function next() {
					jQuery.dequeue(elem, type);
				};

				// If the fx queue is dequeued, always remove the progress sentinel
				if (fn === "inprogress") {
					fn = queue.shift();
					startLength--;
				}

				if (fn) {

					// Add a progress sentinel to prevent the fx queue from being
					// automatically dequeued
					if (type === "fx") {
						queue.unshift("inprogress");
					}

					// clear up the last queue stop function
					delete hooks.stop;
					fn.call(elem, next, hooks);
				}

				if (!startLength && hooks) {
					hooks.empty.fire();
				}
			},

			// not intended for public consumption - generates a queueHooks object, or returns the current one
			_queueHooks: function _queueHooks(elem, type) {
				var key = type + "queueHooks";
				return jQuery._data(elem, key) || jQuery._data(elem, key, {
					empty: jQuery.Callbacks("once memory").add(function () {
						jQuery._removeData(elem, type + "queue");
						jQuery._removeData(elem, key);
					})
				});
			}
		});

		jQuery.fn.extend({
			queue: function queue(type, data) {
				var setter = 2;

				if (typeof type !== "string") {
					data = type;
					type = "fx";
					setter--;
				}

				if (arguments.length < setter) {
					return jQuery.queue(this[0], type);
				}

				return data === undefined ? this : this.each(function () {
					var queue = jQuery.queue(this, type, data);

					// ensure a hooks for this queue
					jQuery._queueHooks(this, type);

					if (type === "fx" && queue[0] !== "inprogress") {
						jQuery.dequeue(this, type);
					}
				});
			},
			dequeue: function dequeue(type) {
				return this.each(function () {
					jQuery.dequeue(this, type);
				});
			},
			clearQueue: function clearQueue(type) {
				return this.queue(type || "fx", []);
			},
			// Get a promise resolved when queues of a certain type
			// are emptied (fx is the type by default)
			promise: function promise(type, obj) {
				var tmp,
				    count = 1,
				    defer = jQuery.Deferred(),
				    elements = this,
				    i = this.length,
				    resolve = function resolve() {
					if (! --count) {
						defer.resolveWith(elements, [elements]);
					}
				};

				if (typeof type !== "string") {
					obj = type;
					type = undefined;
				}
				type = type || "fx";

				while (i--) {
					tmp = jQuery._data(elements[i], type + "queueHooks");
					if (tmp && tmp.empty) {
						count++;
						tmp.empty.add(resolve);
					}
				}
				resolve();
				return defer.promise(obj);
			}
		});
		var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

		var cssExpand = ["Top", "Right", "Bottom", "Left"];

		var isHidden = function isHidden(elem, el) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
		};

		// Multifunctional method to get and set values of a collection
		// The value/s can optionally be executed if it's a function
		var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
			var i = 0,
			    length = elems.length,
			    bulk = key == null;

			// Sets many values
			if (jQuery.type(key) === "object") {
				chainable = true;
				for (i in key) {
					jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
				}

				// Sets one value
			} else if (value !== undefined) {
					chainable = true;

					if (!jQuery.isFunction(value)) {
						raw = true;
					}

					if (bulk) {
						// Bulk operations run against the entire set
						if (raw) {
							fn.call(elems, value);
							fn = null;

							// ...except when executing function values
						} else {
								bulk = fn;
								fn = function (elem, key, value) {
									return bulk.call(jQuery(elem), value);
								};
							}
					}

					if (fn) {
						for (; i < length; i++) {
							fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
						}
					}
				}

			return chainable ? elems :

			// Gets
			bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
		};
		var rcheckableType = /^(?:checkbox|radio)$/i;

		(function () {
			// Minified: var a,b,c
			var input = document.createElement("input"),
			    div = document.createElement("div"),
			    fragment = document.createDocumentFragment();

			// Setup
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

			// IE strips leading whitespace when .innerHTML is used
			support.leadingWhitespace = div.firstChild.nodeType === 3;

			// Make sure that tbody elements aren't automatically inserted
			// IE will insert them into empty tables
			support.tbody = !div.getElementsByTagName("tbody").length;

			// Make sure that link elements get serialized correctly by innerHTML
			// This requires a wrapper element in IE
			support.htmlSerialize = !!div.getElementsByTagName("link").length;

			// Makes sure cloning an html5 element does not cause problems
			// Where outerHTML is undefined, this still works
			support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";

			// Check if a disconnected checkbox will retain its checked
			// value of true after appended to the DOM (IE6/7)
			input.type = "checkbox";
			input.checked = true;
			fragment.appendChild(input);
			support.appendChecked = input.checked;

			// Make sure textarea (and checkbox) defaultValue is properly cloned
			// Support: IE6-IE11+
			div.innerHTML = "<textarea>x</textarea>";
			support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

			// #11217 - WebKit loses check when the name is after the checked attribute
			fragment.appendChild(div);
			div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

			// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
			// old WebKit doesn't clone checked state correctly in fragments
			support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

			// Support: IE<9
			// Opera does not clone events (and typeof div.attachEvent === undefined).
			// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
			support.noCloneEvent = true;
			if (div.attachEvent) {
				div.attachEvent("onclick", function () {
					support.noCloneEvent = false;
				});

				div.cloneNode(true).click();
			}

			// Execute the test only if not already executed in another module.
			if (support.deleteExpando == null) {
				// Support: IE<9
				support.deleteExpando = true;
				try {
					delete div.test;
				} catch (e) {
					support.deleteExpando = false;
				}
			}
		})();

		(function () {
			var i,
			    eventName,
			    div = document.createElement("div");

			// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
			for (i in { submit: true, change: true, focusin: true }) {
				eventName = "on" + i;

				if (!(support[i + "Bubbles"] = eventName in window)) {
					// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
					div.setAttribute(eventName, "t");
					support[i + "Bubbles"] = div.attributes[eventName].expando === false;
				}
			}

			// Null elements to avoid leaks in IE.
			div = null;
		})();

		var rformElems = /^(?:input|select|textarea)$/i,
		    rkeyEvent = /^key/,
		    rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
		    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		    rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

		function returnTrue() {
			return true;
		}

		function returnFalse() {
			return false;
		}

		function safeActiveElement() {
			try {
				return document.activeElement;
			} catch (err) {}
		}

		/*
	  * Helper functions for managing events -- not part of the public interface.
	  * Props to Dean Edwards' addEvent library for many of the ideas.
	  */
		jQuery.event = {

			global: {},

			add: function add(elem, types, handler, data, selector) {
				var tmp,
				    events,
				    t,
				    handleObjIn,
				    special,
				    eventHandle,
				    handleObj,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = jQuery._data(elem);

				// Don't attach events to noData or text/comment nodes (but allow plain objects)
				if (!elemData) {
					return;
				}

				// Caller can pass in an object of custom data in lieu of the handler
				if (handler.handler) {
					handleObjIn = handler;
					handler = handleObjIn.handler;
					selector = handleObjIn.selector;
				}

				// Make sure that the handler has a unique ID, used to find/remove it later
				if (!handler.guid) {
					handler.guid = jQuery.guid++;
				}

				// Init the element's event structure and main handler, if this is the first
				if (!(events = elemData.events)) {
					events = elemData.events = {};
				}
				if (!(eventHandle = elemData.handle)) {
					eventHandle = elemData.handle = function (e) {
						// Discard the second event of a jQuery.event.trigger() and
						// when an event is called after a page has unloaded
						return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
					};
					// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
					eventHandle.elem = elem;
				}

				// Handle multiple events separated by a space
				types = (types || "").match(rnotwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// There *must* be a type, no attaching namespace-only handlers
					if (!type) {
						continue;
					}

					// If event changes its type, use the special event handlers for the changed type
					special = jQuery.event.special[type] || {};

					// If selector defined, determine special event api type, otherwise given type
					type = (selector ? special.delegateType : special.bindType) || type;

					// Update special based on newly reset type
					special = jQuery.event.special[type] || {};

					// handleObj is passed to all event handlers
					handleObj = jQuery.extend({
						type: type,
						origType: origType,
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
						namespace: namespaces.join(".")
					}, handleObjIn);

					// Init the event handler queue if we're the first
					if (!(handlers = events[type])) {
						handlers = events[type] = [];
						handlers.delegateCount = 0;

						// Only use addEventListener/attachEvent if the special events handler returns false
						if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
							// Bind the global event handler to the element
							if (elem.addEventListener) {
								elem.addEventListener(type, eventHandle, false);
							} else if (elem.attachEvent) {
								elem.attachEvent("on" + type, eventHandle);
							}
						}
					}

					if (special.add) {
						special.add.call(elem, handleObj);

						if (!handleObj.handler.guid) {
							handleObj.handler.guid = handler.guid;
						}
					}

					// Add to the element's handler list, delegates in front
					if (selector) {
						handlers.splice(handlers.delegateCount++, 0, handleObj);
					} else {
						handlers.push(handleObj);
					}

					// Keep track of which events have ever been used, for event optimization
					jQuery.event.global[type] = true;
				}

				// Nullify elem to prevent memory leaks in IE
				elem = null;
			},

			// Detach an event or set of events from an element
			remove: function remove(elem, types, handler, selector, mappedTypes) {
				var j,
				    handleObj,
				    tmp,
				    origCount,
				    t,
				    events,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = jQuery.hasData(elem) && jQuery._data(elem);

				if (!elemData || !(events = elemData.events)) {
					return;
				}

				// Once for each type.namespace in types; type may be omitted
				types = (types || "").match(rnotwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// Unbind all events (on this namespace, if provided) for the element
					if (!type) {
						for (type in events) {
							jQuery.event.remove(elem, type + types[t], handler, selector, true);
						}
						continue;
					}

					special = jQuery.event.special[type] || {};
					type = (selector ? special.delegateType : special.bindType) || type;
					handlers = events[type] || [];
					tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

					// Remove matching events
					origCount = j = handlers.length;
					while (j--) {
						handleObj = handlers[j];

						if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
							handlers.splice(j, 1);

							if (handleObj.selector) {
								handlers.delegateCount--;
							}
							if (special.remove) {
								special.remove.call(elem, handleObj);
							}
						}
					}

					// Remove generic event handler if we removed something and no more handlers exist
					// (avoids potential for endless recursion during removal of special event handlers)
					if (origCount && !handlers.length) {
						if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
							jQuery.removeEvent(elem, type, elemData.handle);
						}

						delete events[type];
					}
				}

				// Remove the expando if it's no longer used
				if (jQuery.isEmptyObject(events)) {
					delete elemData.handle;

					// removeData also checks for emptiness and clears the expando if empty
					// so use it instead of delete
					jQuery._removeData(elem, "events");
				}
			},

			trigger: function trigger(event, data, elem, onlyHandlers) {
				var handle,
				    ontype,
				    cur,
				    bubbleType,
				    special,
				    tmp,
				    i,
				    eventPath = [elem || document],
				    type = hasOwn.call(event, "type") ? event.type : event,
				    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

				cur = tmp = elem = elem || document;

				// Don't do events on text and comment nodes
				if (elem.nodeType === 3 || elem.nodeType === 8) {
					return;
				}

				// focus/blur morphs to focusin/out; ensure we're not firing them right now
				if (rfocusMorph.test(type + jQuery.event.triggered)) {
					return;
				}

				if (type.indexOf(".") >= 0) {
					// Namespaced trigger; create a regexp to match event type in handle()
					namespaces = type.split(".");
					type = namespaces.shift();
					namespaces.sort();
				}
				ontype = type.indexOf(":") < 0 && "on" + type;

				// Caller can pass in a jQuery.Event object, Object, or just an event type string
				event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);

				// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
				event.isTrigger = onlyHandlers ? 2 : 3;
				event.namespace = namespaces.join(".");
				event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

				// Clean up the event in case it is being reused
				event.result = undefined;
				if (!event.target) {
					event.target = elem;
				}

				// Clone any incoming data and prepend the event, creating the handler arg list
				data = data == null ? [event] : jQuery.makeArray(data, [event]);

				// Allow special events to draw outside the lines
				special = jQuery.event.special[type] || {};
				if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
					return;
				}

				// Determine event propagation path in advance, per W3C events spec (#9951)
				// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
				if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

					bubbleType = special.delegateType || type;
					if (!rfocusMorph.test(bubbleType + type)) {
						cur = cur.parentNode;
					}
					for (; cur; cur = cur.parentNode) {
						eventPath.push(cur);
						tmp = cur;
					}

					// Only add window if we got to document (e.g., not plain obj or detached DOM)
					if (tmp === (elem.ownerDocument || document)) {
						eventPath.push(tmp.defaultView || tmp.parentWindow || window);
					}
				}

				// Fire handlers on the event path
				i = 0;
				while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

					event.type = i > 1 ? bubbleType : special.bindType || type;

					// jQuery handler
					handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
					if (handle) {
						handle.apply(cur, data);
					}

					// Native handler
					handle = ontype && cur[ontype];
					if (handle && handle.apply && jQuery.acceptData(cur)) {
						event.result = handle.apply(cur, data);
						if (event.result === false) {
							event.preventDefault();
						}
					}
				}
				event.type = type;

				// If nobody prevented the default action, do it now
				if (!onlyHandlers && !event.isDefaultPrevented()) {

					if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {

						// Call a native DOM method on the target with the same name name as the event.
						// Can't use an .isFunction() check here because IE6/7 fails that test.
						// Don't do default actions on window, that's where global variables be (#6170)
						if (ontype && elem[type] && !jQuery.isWindow(elem)) {

							// Don't re-trigger an onFOO event when we call its FOO() method
							tmp = elem[ontype];

							if (tmp) {
								elem[ontype] = null;
							}

							// Prevent re-triggering of the same event, since we already bubbled it above
							jQuery.event.triggered = type;
							try {
								elem[type]();
							} catch (e) {
								// IE<9 dies on focus/blur to hidden element (#1486,#12518)
								// only reproducible on winXP IE8 native, not IE9 in IE8 mode
							}
							jQuery.event.triggered = undefined;

							if (tmp) {
								elem[ontype] = tmp;
							}
						}
					}
				}

				return event.result;
			},

			dispatch: function dispatch(event) {

				// Make a writable jQuery.Event from the native event object
				event = jQuery.event.fix(event);

				var i,
				    ret,
				    handleObj,
				    matched,
				    j,
				    handlerQueue = [],
				    args = _slice.call(arguments),
				    handlers = (jQuery._data(this, "events") || {})[event.type] || [],
				    special = jQuery.event.special[event.type] || {};

				// Use the fix-ed jQuery.Event rather than the (read-only) native event
				args[0] = event;
				event.delegateTarget = this;

				// Call the preDispatch hook for the mapped type, and let it bail if desired
				if (special.preDispatch && special.preDispatch.call(this, event) === false) {
					return;
				}

				// Determine handlers
				handlerQueue = jQuery.event.handlers.call(this, event, handlers);

				// Run delegates first; they may want to stop propagation beneath us
				i = 0;
				while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
					event.currentTarget = matched.elem;

					j = 0;
					while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

						// Triggered event must either 1) have no namespace, or
						// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
						if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

							event.handleObj = handleObj;
							event.data = handleObj.data;

							ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

							if (ret !== undefined) {
								if ((event.result = ret) === false) {
									event.preventDefault();
									event.stopPropagation();
								}
							}
						}
					}
				}

				// Call the postDispatch hook for the mapped type
				if (special.postDispatch) {
					special.postDispatch.call(this, event);
				}

				return event.result;
			},

			handlers: function handlers(event, _handlers) {
				var sel,
				    handleObj,
				    matches,
				    i,
				    handlerQueue = [],
				    delegateCount = _handlers.delegateCount,
				    cur = event.target;

				// Find delegate handlers
				// Black-hole SVG <use> instance trees (#13180)
				// Avoid non-left-click bubbling in Firefox (#3861)
				if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {

					/* jshint eqeqeq: false */
					for (; cur != this; cur = cur.parentNode || this) {
						/* jshint eqeqeq: true */

						// Don't check non-elements (#13208)
						// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
						if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
							matches = [];
							for (i = 0; i < delegateCount; i++) {
								handleObj = _handlers[i];

								// Don't conflict with Object.prototype properties (#13203)
								sel = handleObj.selector + " ";

								if (matches[sel] === undefined) {
									matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
								}
								if (matches[sel]) {
									matches.push(handleObj);
								}
							}
							if (matches.length) {
								handlerQueue.push({ elem: cur, handlers: matches });
							}
						}
					}
				}

				// Add the remaining (directly-bound) handlers
				if (delegateCount < _handlers.length) {
					handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });
				}

				return handlerQueue;
			},

			fix: function fix(event) {
				if (event[jQuery.expando]) {
					return event;
				}

				// Create a writable copy of the event object and normalize some properties
				var i,
				    prop,
				    copy,
				    type = event.type,
				    originalEvent = event,
				    fixHook = this.fixHooks[type];

				if (!fixHook) {
					this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
				}
				copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

				event = new jQuery.Event(originalEvent);

				i = copy.length;
				while (i--) {
					prop = copy[i];
					event[prop] = originalEvent[prop];
				}

				// Support: IE<9
				// Fix target property (#1925)
				if (!event.target) {
					event.target = originalEvent.srcElement || document;
				}

				// Support: Chrome 23+, Safari?
				// Target should not be a text node (#504, #13143)
				if (event.target.nodeType === 3) {
					event.target = event.target.parentNode;
				}

				// Support: IE<9
				// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
				event.metaKey = !!event.metaKey;

				return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
			},

			// Includes some event props shared by KeyEvent and MouseEvent
			props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

			fixHooks: {},

			keyHooks: {
				props: "char charCode key keyCode".split(" "),
				filter: function filter(event, original) {

					// Add which for key events
					if (event.which == null) {
						event.which = original.charCode != null ? original.charCode : original.keyCode;
					}

					return event;
				}
			},

			mouseHooks: {
				props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
				filter: function filter(event, original) {
					var body,
					    eventDoc,
					    doc,
					    button = original.button,
					    fromElement = original.fromElement;

					// Calculate pageX/Y if missing and clientX/Y available
					if (event.pageX == null && original.clientX != null) {
						eventDoc = event.target.ownerDocument || document;
						doc = eventDoc.documentElement;
						body = eventDoc.body;

						event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
						event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
					}

					// Add relatedTarget, if necessary
					if (!event.relatedTarget && fromElement) {
						event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
					}

					// Add which for click: 1 === left; 2 === middle; 3 === right
					// Note: button is not normalized, so don't use it
					if (!event.which && button !== undefined) {
						event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
					}

					return event;
				}
			},

			special: {
				load: {
					// Prevent triggered image.load events from bubbling to window.load
					noBubble: true
				},
				focus: {
					// Fire native event if possible so blur/focus sequence is correct
					trigger: function trigger() {
						if (this !== safeActiveElement() && this.focus) {
							try {
								this.focus();
								return false;
							} catch (e) {
								// Support: IE<9
								// If we error on focus to hidden element (#1486, #12518),
								// let .trigger() run the handlers
							}
						}
					},
					delegateType: "focusin"
				},
				blur: {
					trigger: function trigger() {
						if (this === safeActiveElement() && this.blur) {
							this.blur();
							return false;
						}
					},
					delegateType: "focusout"
				},
				click: {
					// For checkbox, fire native event so checked state will be right
					trigger: function trigger() {
						if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
							this.click();
							return false;
						}
					},

					// For cross-browser consistency, don't fire native .click() on links
					_default: function _default(event) {
						return jQuery.nodeName(event.target, "a");
					}
				},

				beforeunload: {
					postDispatch: function postDispatch(event) {

						// Support: Firefox 20+
						// Firefox doesn't alert if the returnValue field is not set.
						if (event.result !== undefined && event.originalEvent) {
							event.originalEvent.returnValue = event.result;
						}
					}
				}
			},

			simulate: function simulate(type, elem, event, bubble) {
				// Piggyback on a donor event to simulate a different one.
				// Fake originalEvent to avoid donor's stopPropagation, but if the
				// simulated event prevents default then we do the same on the donor.
				var e = jQuery.extend(new jQuery.Event(), event, {
					type: type,
					isSimulated: true,
					originalEvent: {}
				});
				if (bubble) {
					jQuery.event.trigger(e, null, elem);
				} else {
					jQuery.event.dispatch.call(elem, e);
				}
				if (e.isDefaultPrevented()) {
					event.preventDefault();
				}
			}
		};

		jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
			if (elem.removeEventListener) {
				elem.removeEventListener(type, handle, false);
			}
		} : function (elem, type, handle) {
			var name = "on" + type;

			if (elem.detachEvent) {

				// #8545, #7054, preventing memory leaks for custom events in IE6-8
				// detachEvent needed property on element, by name of that event, to properly expose it to GC
				if (typeof elem[name] === strundefined) {
					elem[name] = null;
				}

				elem.detachEvent(name, handle);
			}
		};

		jQuery.Event = function (src, props) {
			// Allow instantiation without the 'new' keyword
			if (!(this instanceof jQuery.Event)) {
				return new jQuery.Event(src, props);
			}

			// Event object
			if (src && src.type) {
				this.originalEvent = src;
				this.type = src.type;

				// Events bubbling up the document may have been marked as prevented
				// by a handler lower down the tree; reflect the correct value.
				this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ? returnTrue : returnFalse;

				// Event type
			} else {
					this.type = src;
				}

			// Put explicitly provided properties onto the event object
			if (props) {
				jQuery.extend(this, props);
			}

			// Create a timestamp if incoming event doesn't have one
			this.timeStamp = src && src.timeStamp || jQuery.now();

			// Mark it as fixed
			this[jQuery.expando] = true;
		};

		// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
		// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
		jQuery.Event.prototype = {
			isDefaultPrevented: returnFalse,
			isPropagationStopped: returnFalse,
			isImmediatePropagationStopped: returnFalse,

			preventDefault: function preventDefault() {
				var e = this.originalEvent;

				this.isDefaultPrevented = returnTrue;
				if (!e) {
					return;
				}

				// If preventDefault exists, run it on the original event
				if (e.preventDefault) {
					e.preventDefault();

					// Support: IE
					// Otherwise set the returnValue property of the original event to false
				} else {
						e.returnValue = false;
					}
			},
			stopPropagation: function stopPropagation() {
				var e = this.originalEvent;

				this.isPropagationStopped = returnTrue;
				if (!e) {
					return;
				}
				// If stopPropagation exists, run it on the original event
				if (e.stopPropagation) {
					e.stopPropagation();
				}

				// Support: IE
				// Set the cancelBubble property of the original event to true
				e.cancelBubble = true;
			},
			stopImmediatePropagation: function stopImmediatePropagation() {
				var e = this.originalEvent;

				this.isImmediatePropagationStopped = returnTrue;

				if (e && e.stopImmediatePropagation) {
					e.stopImmediatePropagation();
				}

				this.stopPropagation();
			}
		};

		// Create mouseenter/leave events using mouseover/out and event-time checks
		jQuery.each({
			mouseenter: "mouseover",
			mouseleave: "mouseout",
			pointerenter: "pointerover",
			pointerleave: "pointerout"
		}, function (orig, fix) {
			jQuery.event.special[orig] = {
				delegateType: fix,
				bindType: fix,

				handle: function handle(event) {
					var ret,
					    target = this,
					    related = event.relatedTarget,
					    handleObj = event.handleObj;

					// For mousenter/leave call the handler if related is outside the target.
					// NB: No relatedTarget if the mouse left/entered the browser window
					if (!related || related !== target && !jQuery.contains(target, related)) {
						event.type = handleObj.origType;
						ret = handleObj.handler.apply(this, arguments);
						event.type = fix;
					}
					return ret;
				}
			};
		});

		// IE submit delegation
		if (!support.submitBubbles) {

			jQuery.event.special.submit = {
				setup: function setup() {
					// Only need this for delegated form submit events
					if (jQuery.nodeName(this, "form")) {
						return false;
					}

					// Lazy-add a submit handler when a descendant form may potentially be submitted
					jQuery.event.add(this, "click._submit keypress._submit", function (e) {
						// Node name check avoids a VML-related crash in IE (#9807)
						var elem = e.target,
						    form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
						if (form && !jQuery._data(form, "submitBubbles")) {
							jQuery.event.add(form, "submit._submit", function (event) {
								event._submit_bubble = true;
							});
							jQuery._data(form, "submitBubbles", true);
						}
					});
					// return undefined since we don't need an event listener
				},

				postDispatch: function postDispatch(event) {
					// If form was submitted by the user, bubble the event up the tree
					if (event._submit_bubble) {
						delete event._submit_bubble;
						if (this.parentNode && !event.isTrigger) {
							jQuery.event.simulate("submit", this.parentNode, event, true);
						}
					}
				},

				teardown: function teardown() {
					// Only need this for delegated form submit events
					if (jQuery.nodeName(this, "form")) {
						return false;
					}

					// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
					jQuery.event.remove(this, "._submit");
				}
			};
		}

		// IE change delegation and checkbox/radio fix
		if (!support.changeBubbles) {

			jQuery.event.special.change = {

				setup: function setup() {

					if (rformElems.test(this.nodeName)) {
						// IE doesn't fire change on a check/radio until blur; trigger it on click
						// after a propertychange. Eat the blur-change in special.change.handle.
						// This still fires onchange a second time for check/radio after blur.
						if (this.type === "checkbox" || this.type === "radio") {
							jQuery.event.add(this, "propertychange._change", function (event) {
								if (event.originalEvent.propertyName === "checked") {
									this._just_changed = true;
								}
							});
							jQuery.event.add(this, "click._change", function (event) {
								if (this._just_changed && !event.isTrigger) {
									this._just_changed = false;
								}
								// Allow triggered, simulated change events (#11500)
								jQuery.event.simulate("change", this, event, true);
							});
						}
						return false;
					}
					// Delegated event; lazy-add a change handler on descendant inputs
					jQuery.event.add(this, "beforeactivate._change", function (e) {
						var elem = e.target;

						if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
							jQuery.event.add(elem, "change._change", function (event) {
								if (this.parentNode && !event.isSimulated && !event.isTrigger) {
									jQuery.event.simulate("change", this.parentNode, event, true);
								}
							});
							jQuery._data(elem, "changeBubbles", true);
						}
					});
				},

				handle: function handle(event) {
					var elem = event.target;

					// Swallow native change events from checkbox/radio, we already triggered them above
					if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
						return event.handleObj.handler.apply(this, arguments);
					}
				},

				teardown: function teardown() {
					jQuery.event.remove(this, "._change");

					return !rformElems.test(this.nodeName);
				}
			};
		}

		// Create "bubbling" focus and blur events
		if (!support.focusinBubbles) {
			jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

				// Attach a single capturing handler on the document while someone wants focusin/focusout
				var handler = function handler(event) {
					jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
				};

				jQuery.event.special[fix] = {
					setup: function setup() {
						var doc = this.ownerDocument || this,
						    attaches = jQuery._data(doc, fix);

						if (!attaches) {
							doc.addEventListener(orig, handler, true);
						}
						jQuery._data(doc, fix, (attaches || 0) + 1);
					},
					teardown: function teardown() {
						var doc = this.ownerDocument || this,
						    attaches = jQuery._data(doc, fix) - 1;

						if (!attaches) {
							doc.removeEventListener(orig, handler, true);
							jQuery._removeData(doc, fix);
						} else {
							jQuery._data(doc, fix, attaches);
						}
					}
				};
			});
		}

		jQuery.fn.extend({

			on: function on(types, selector, data, fn, /*INTERNAL*/one) {
				var type, origFn;

				// Types can be a map of types/handlers
				if (typeof types === "object") {
					// ( types-Object, selector, data )
					if (typeof selector !== "string") {
						// ( types-Object, data )
						data = data || selector;
						selector = undefined;
					}
					for (type in types) {
						this.on(type, selector, data, types[type], one);
					}
					return this;
				}

				if (data == null && fn == null) {
					// ( types, fn )
					fn = selector;
					data = selector = undefined;
				} else if (fn == null) {
					if (typeof selector === "string") {
						// ( types, selector, fn )
						fn = data;
						data = undefined;
					} else {
						// ( types, data, fn )
						fn = data;
						data = selector;
						selector = undefined;
					}
				}
				if (fn === false) {
					fn = returnFalse;
				} else if (!fn) {
					return this;
				}

				if (one === 1) {
					origFn = fn;
					fn = function (event) {
						// Can use an empty set, since event contains the info
						jQuery().off(event);
						return origFn.apply(this, arguments);
					};
					// Use same guid so caller can remove using origFn
					fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
				}
				return this.each(function () {
					jQuery.event.add(this, types, fn, data, selector);
				});
			},
			one: function one(types, selector, data, fn) {
				return this.on(types, selector, data, fn, 1);
			},
			off: function off(types, selector, fn) {
				var handleObj, type;
				if (types && types.preventDefault && types.handleObj) {
					// ( event )  dispatched jQuery.Event
					handleObj = types.handleObj;
					jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
					return this;
				}
				if (typeof types === "object") {
					// ( types-object [, selector] )
					for (type in types) {
						this.off(type, selector, types[type]);
					}
					return this;
				}
				if (selector === false || typeof selector === "function") {
					// ( types [, fn] )
					fn = selector;
					selector = undefined;
				}
				if (fn === false) {
					fn = returnFalse;
				}
				return this.each(function () {
					jQuery.event.remove(this, types, fn, selector);
				});
			},

			trigger: function trigger(type, data) {
				return this.each(function () {
					jQuery.event.trigger(type, data, this);
				});
			},
			triggerHandler: function triggerHandler(type, data) {
				var elem = this[0];
				if (elem) {
					return jQuery.event.trigger(type, data, elem, true);
				}
			}
		});

		function createSafeFragment(document) {
			var list = nodeNames.split("|"),
			    safeFrag = document.createDocumentFragment();

			if (safeFrag.createElement) {
				while (list.length) {
					safeFrag.createElement(list.pop());
				}
			}
			return safeFrag;
		}

		var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
		    rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
		    rleadingWhitespace = /^\s+/,
		    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		    rtagName = /<([\w:]+)/,
		    rtbody = /<tbody/i,
		    rhtml = /<|&#?\w+;/,
		    rnoInnerhtml = /<(?:script|style|link)/i,
		   
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		    rscriptType = /^$|\/(?:java|ecma)script/i,
		    rscriptTypeMasked = /^true\/(.*)/,
		    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
		   

		// We have to close these tags to support XHTML (#13200)
		wrapMap = {
			option: [1, "<select multiple='multiple'>", "</select>"],
			legend: [1, "<fieldset>", "</fieldset>"],
			area: [1, "<map>", "</map>"],
			param: [1, "<object>", "</object>"],
			thead: [1, "<table>", "</table>"],
			tr: [2, "<table><tbody>", "</tbody></table>"],
			col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
			td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

			// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
			// unless wrapped in a div with non-breaking characters in front of it.
			_default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
		},
		    safeFragment = createSafeFragment(document),
		    fragmentDiv = safeFragment.appendChild(document.createElement("div"));

		wrapMap.optgroup = wrapMap.option;
		wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
		wrapMap.th = wrapMap.td;

		function getAll(context, tag) {
			var elems,
			    elem,
			    i = 0,
			    found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== strundefined ? context.querySelectorAll(tag || "*") : undefined;

			if (!found) {
				for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
					if (!tag || jQuery.nodeName(elem, tag)) {
						found.push(elem);
					} else {
						jQuery.merge(found, getAll(elem, tag));
					}
				}
			}

			return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;
		}

		// Used in buildFragment, fixes the defaultChecked property
		function fixDefaultChecked(elem) {
			if (rcheckableType.test(elem.type)) {
				elem.defaultChecked = elem.checked;
			}
		}

		// Support: IE<8
		// Manipulating tables requires a tbody
		function manipulationTarget(elem, content) {
			return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
		}

		// Replace/restore the type attribute of script elements for safe DOM manipulation
		function disableScript(elem) {
			elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
			return elem;
		}
		function restoreScript(elem) {
			var match = rscriptTypeMasked.exec(elem.type);
			if (match) {
				elem.type = match[1];
			} else {
				elem.removeAttribute("type");
			}
			return elem;
		}

		// Mark scripts as having already been evaluated
		function setGlobalEval(elems, refElements) {
			var elem,
			    i = 0;
			for (; (elem = elems[i]) != null; i++) {
				jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
			}
		}

		function cloneCopyEvent(src, dest) {

			if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
				return;
			}

			var type,
			    i,
			    l,
			    oldData = jQuery._data(src),
			    curData = jQuery._data(dest, oldData),
			    events = oldData.events;

			if (events) {
				delete curData.handle;
				curData.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}

			// make the cloned public data object a copy from the original
			if (curData.data) {
				curData.data = jQuery.extend({}, curData.data);
			}
		}

		function fixCloneNodeIssues(src, dest) {
			var nodeName, e, data;

			// We do not need to do anything for non-Elements
			if (dest.nodeType !== 1) {
				return;
			}

			nodeName = dest.nodeName.toLowerCase();

			// IE6-8 copies events bound via attachEvent when using cloneNode.
			if (!support.noCloneEvent && dest[jQuery.expando]) {
				data = jQuery._data(dest);

				for (e in data.events) {
					jQuery.removeEvent(dest, e, data.handle);
				}

				// Event data gets referenced instead of copied if the expando gets copied too
				dest.removeAttribute(jQuery.expando);
			}

			// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
			if (nodeName === "script" && dest.text !== src.text) {
				disableScript(dest).text = src.text;
				restoreScript(dest);

				// IE6-10 improperly clones children of object elements using classid.
				// IE10 throws NoModificationAllowedError if parent is null, #12132.
			} else if (nodeName === "object") {
					if (dest.parentNode) {
						dest.outerHTML = src.outerHTML;
					}

					// This path appears unavoidable for IE9. When cloning an object
					// element in IE9, the outerHTML strategy above is not sufficient.
					// If the src has innerHTML and the destination does not,
					// copy the src.innerHTML into the dest.innerHTML. #10324
					if (support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
						dest.innerHTML = src.innerHTML;
					}
				} else if (nodeName === "input" && rcheckableType.test(src.type)) {
					// IE6-8 fails to persist the checked state of a cloned checkbox
					// or radio button. Worse, IE6-7 fail to give the cloned element
					// a checked appearance if the defaultChecked value isn't also set

					dest.defaultChecked = dest.checked = src.checked;

					// IE6-7 get confused and end up setting the value of a cloned
					// checkbox/radio button to an empty string instead of "on"
					if (dest.value !== src.value) {
						dest.value = src.value;
					}

					// IE6-8 fails to return the selected option to the default selected
					// state when cloning options
				} else if (nodeName === "option") {
						dest.defaultSelected = dest.selected = src.defaultSelected;

						// IE6-8 fails to set the defaultValue to the correct value when
						// cloning other types of input fields
					} else if (nodeName === "input" || nodeName === "textarea") {
							dest.defaultValue = src.defaultValue;
						}
		}

		jQuery.extend({
			clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
				var destElements,
				    node,
				    clone,
				    i,
				    srcElements,
				    inPage = jQuery.contains(elem.ownerDocument, elem);

				if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
					clone = elem.cloneNode(true);

					// IE<=8 does not properly clone detached, unknown element nodes
				} else {
						fragmentDiv.innerHTML = elem.outerHTML;
						fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
					}

				if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

					// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
					destElements = getAll(clone);
					srcElements = getAll(elem);

					// Fix all IE cloning issues
					for (i = 0; (node = srcElements[i]) != null; ++i) {
						// Ensure that the destination node is not null; Fixes #9587
						if (destElements[i]) {
							fixCloneNodeIssues(node, destElements[i]);
						}
					}
				}

				// Copy the events from the original to the clone
				if (dataAndEvents) {
					if (deepDataAndEvents) {
						srcElements = srcElements || getAll(elem);
						destElements = destElements || getAll(clone);

						for (i = 0; (node = srcElements[i]) != null; i++) {
							cloneCopyEvent(node, destElements[i]);
						}
					} else {
						cloneCopyEvent(elem, clone);
					}
				}

				// Preserve script evaluation history
				destElements = getAll(clone, "script");
				if (destElements.length > 0) {
					setGlobalEval(destElements, !inPage && getAll(elem, "script"));
				}

				destElements = srcElements = node = null;

				// Return the cloned set
				return clone;
			},

			buildFragment: function buildFragment(elems, context, scripts, selection) {
				var j,
				    elem,
				    contains,
				    tmp,
				    tag,
				    tbody,
				    wrap,
				    l = elems.length,
				   

				// Ensure a safe fragment
				safe = createSafeFragment(context),
				    nodes = [],
				    i = 0;

				for (; i < l; i++) {
					elem = elems[i];

					if (elem || elem === 0) {

						// Add nodes directly
						if (jQuery.type(elem) === "object") {
							jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

							// Convert non-html into a text node
						} else if (!rhtml.test(elem)) {
								nodes.push(context.createTextNode(elem));

								// Convert html into DOM nodes
							} else {
									tmp = tmp || safe.appendChild(context.createElement("div"));

									// Deserialize a standard representation
									tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
									wrap = wrapMap[tag] || wrapMap._default;

									tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];

									// Descend through wrappers to the right content
									j = wrap[0];
									while (j--) {
										tmp = tmp.lastChild;
									}

									// Manually add leading whitespace removed by IE
									if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
										nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
									}

									// Remove IE's autoinserted <tbody> from table fragments
									if (!support.tbody) {

										// String was a <table>, *may* have spurious <tbody>
										elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild :

										// String was a bare <thead> or <tfoot>
										wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;

										j = elem && elem.childNodes.length;
										while (j--) {
											if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {
												elem.removeChild(tbody);
											}
										}
									}

									jQuery.merge(nodes, tmp.childNodes);

									// Fix #12392 for WebKit and IE > 9
									tmp.textContent = "";

									// Fix #12392 for oldIE
									while (tmp.firstChild) {
										tmp.removeChild(tmp.firstChild);
									}

									// Remember the top-level container for proper cleanup
									tmp = safe.lastChild;
								}
					}
				}

				// Fix #11356: Clear elements from fragment
				if (tmp) {
					safe.removeChild(tmp);
				}

				// Reset defaultChecked for any radios and checkboxes
				// about to be appended to the DOM in IE 6/7 (#8060)
				if (!support.appendChecked) {
					jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
				}

				i = 0;
				while (elem = nodes[i++]) {

					// #4087 - If origin and destination elements are the same, and this is
					// that element, do not do anything
					if (selection && jQuery.inArray(elem, selection) !== -1) {
						continue;
					}

					contains = jQuery.contains(elem.ownerDocument, elem);

					// Append to fragment
					tmp = getAll(safe.appendChild(elem), "script");

					// Preserve script evaluation history
					if (contains) {
						setGlobalEval(tmp);
					}

					// Capture executables
					if (scripts) {
						j = 0;
						while (elem = tmp[j++]) {
							if (rscriptType.test(elem.type || "")) {
								scripts.push(elem);
							}
						}
					}
				}

				tmp = null;

				return safe;
			},

			cleanData: function cleanData(elems, /* internal */acceptData) {
				var elem,
				    type,
				    id,
				    data,
				    i = 0,
				    internalKey = jQuery.expando,
				    cache = jQuery.cache,
				    deleteExpando = support.deleteExpando,
				    special = jQuery.event.special;

				for (; (elem = elems[i]) != null; i++) {
					if (acceptData || jQuery.acceptData(elem)) {

						id = elem[internalKey];
						data = id && cache[id];

						if (data) {
							if (data.events) {
								for (type in data.events) {
									if (special[type]) {
										jQuery.event.remove(elem, type);

										// This is a shortcut to avoid jQuery.event.remove's overhead
									} else {
											jQuery.removeEvent(elem, type, data.handle);
										}
								}
							}

							// Remove cache only if it was not already removed by jQuery.event.remove
							if (cache[id]) {

								delete cache[id];

								// IE does not allow us to delete expando properties from nodes,
								// nor does it have a removeAttribute function on Document nodes;
								// we must handle all of these cases
								if (deleteExpando) {
									delete elem[internalKey];
								} else if (typeof elem.removeAttribute !== strundefined) {
									elem.removeAttribute(internalKey);
								} else {
									elem[internalKey] = null;
								}

								deletedIds.push(id);
							}
						}
					}
				}
			}
		});

		jQuery.fn.extend({
			text: function text(value) {
				return access(this, function (value) {
					return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
				}, null, value, arguments.length);
			},

			append: function append() {
				return this.domManip(arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.appendChild(elem);
					}
				});
			},

			prepend: function prepend() {
				return this.domManip(arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.insertBefore(elem, target.firstChild);
					}
				});
			},

			before: function before() {
				return this.domManip(arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this);
					}
				});
			},

			after: function after() {
				return this.domManip(arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this.nextSibling);
					}
				});
			},

			remove: function remove(selector, keepData /* Internal Use Only */) {
				var elem,
				    elems = selector ? jQuery.filter(selector, this) : this,
				    i = 0;

				for (; (elem = elems[i]) != null; i++) {

					if (!keepData && elem.nodeType === 1) {
						jQuery.cleanData(getAll(elem));
					}

					if (elem.parentNode) {
						if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
							setGlobalEval(getAll(elem, "script"));
						}
						elem.parentNode.removeChild(elem);
					}
				}

				return this;
			},

			empty: function empty() {
				var elem,
				    i = 0;

				for (; (elem = this[i]) != null; i++) {
					// Remove element nodes and prevent memory leaks
					if (elem.nodeType === 1) {
						jQuery.cleanData(getAll(elem, false));
					}

					// Remove any remaining nodes
					while (elem.firstChild) {
						elem.removeChild(elem.firstChild);
					}

					// If this is a select, ensure that it displays empty (#12336)
					// Support: IE<9
					if (elem.options && jQuery.nodeName(elem, "select")) {
						elem.options.length = 0;
					}
				}

				return this;
			},

			clone: function clone(dataAndEvents, deepDataAndEvents) {
				dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
				deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

				return this.map(function () {
					return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
				});
			},

			html: function html(value) {
				return access(this, function (value) {
					var elem = this[0] || {},
					    i = 0,
					    l = this.length;

					if (value === undefined) {
						return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
					}

					// See if we can take a shortcut and just use innerHTML
					if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

						value = value.replace(rxhtmlTag, "<$1></$2>");

						try {
							for (; i < l; i++) {
								// Remove element nodes and prevent memory leaks
								elem = this[i] || {};
								if (elem.nodeType === 1) {
									jQuery.cleanData(getAll(elem, false));
									elem.innerHTML = value;
								}
							}

							elem = 0;

							// If using innerHTML throws an exception, use the fallback method
						} catch (e) {}
					}

					if (elem) {
						this.empty().append(value);
					}
				}, null, value, arguments.length);
			},

			replaceWith: function replaceWith() {
				var arg = arguments[0];

				// Make the changes, replacing each context element with the new content
				this.domManip(arguments, function (elem) {
					arg = this.parentNode;

					jQuery.cleanData(getAll(this));

					if (arg) {
						arg.replaceChild(elem, this);
					}
				});

				// Force removal if there was no new content (e.g., from empty arguments)
				return arg && (arg.length || arg.nodeType) ? this : this.remove();
			},

			detach: function detach(selector) {
				return this.remove(selector, true);
			},

			domManip: function domManip(args, callback) {

				// Flatten any nested arrays
				args = concat.apply([], args);

				var first,
				    node,
				    hasScripts,
				    scripts,
				    doc,
				    fragment,
				    i = 0,
				    l = this.length,
				    set = this,
				    iNoClone = l - 1,
				    value = args[0],
				    isFunction = jQuery.isFunction(value);

				// We can't cloneNode fragments that contain checked, in WebKit
				if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
					return this.each(function (index) {
						var self = set.eq(index);
						if (isFunction) {
							args[0] = value.call(this, index, self.html());
						}
						self.domManip(args, callback);
					});
				}

				if (l) {
					fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
					first = fragment.firstChild;

					if (fragment.childNodes.length === 1) {
						fragment = first;
					}

					if (first) {
						scripts = jQuery.map(getAll(fragment, "script"), disableScript);
						hasScripts = scripts.length;

						// Use the original fragment for the last item instead of the first because it can end up
						// being emptied incorrectly in certain situations (#8070).
						for (; i < l; i++) {
							node = fragment;

							if (i !== iNoClone) {
								node = jQuery.clone(node, true, true);

								// Keep references to cloned scripts for later restoration
								if (hasScripts) {
									jQuery.merge(scripts, getAll(node, "script"));
								}
							}

							callback.call(this[i], node, i);
						}

						if (hasScripts) {
							doc = scripts[scripts.length - 1].ownerDocument;

							// Reenable scripts
							jQuery.map(scripts, restoreScript);

							// Evaluate executable scripts on first document insertion
							for (i = 0; i < hasScripts; i++) {
								node = scripts[i];
								if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {

									if (node.src) {
										// Optional AJAX dependency, but won't run scripts if not present
										if (jQuery._evalUrl) {
											jQuery._evalUrl(node.src);
										}
									} else {
										jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
									}
								}
							}
						}

						// Fix #11809: Avoid leaking memory
						fragment = first = null;
					}
				}

				return this;
			}
		});

		jQuery.each({
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith"
		}, function (name, original) {
			jQuery.fn[name] = function (selector) {
				var elems,
				    i = 0,
				    ret = [],
				    insert = jQuery(selector),
				    last = insert.length - 1;

				for (; i <= last; i++) {
					elems = i === last ? this : this.clone(true);
					jQuery(insert[i])[original](elems);

					// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
					push.apply(ret, elems.get());
				}

				return this.pushStack(ret);
			};
		});

		var iframe,
		    elemdisplay = {};

		/**
	  * Retrieve the actual display of a element
	  * @param {String} name nodeName of the element
	  * @param {Object} doc Document object
	  */
		// Called only from within defaultDisplay
		function actualDisplay(name, doc) {
			var style,
			    elem = jQuery(doc.createElement(name)).appendTo(doc.body),
			   

			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css(elem[0], "display");

			// We don't have any data stored on the element,
			// so use "detach" method as fast way to get rid of the element
			elem.detach();

			return display;
		}

		/**
	  * Try to determine the default display value of an element
	  * @param {String} nodeName
	  */
		function defaultDisplay(nodeName) {
			var doc = document,
			    display = elemdisplay[nodeName];

			if (!display) {
				display = actualDisplay(nodeName, doc);

				// If the simple way fails, read from inside an iframe
				if (display === "none" || !display) {

					// Use the already-created iframe if possible
					iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

					// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
					doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;

					// Support: IE
					doc.write();
					doc.close();

					display = actualDisplay(nodeName, doc);
					iframe.detach();
				}

				// Store the correct default display
				elemdisplay[nodeName] = display;
			}

			return display;
		}

		(function () {
			var shrinkWrapBlocksVal;

			support.shrinkWrapBlocks = function () {
				if (shrinkWrapBlocksVal != null) {
					return shrinkWrapBlocksVal;
				}

				// Will be changed later if needed.
				shrinkWrapBlocksVal = false;

				// Minified: var b,c,d
				var div, body, container;

				body = document.getElementsByTagName("body")[0];
				if (!body || !body.style) {
					// Test fired too early or in an unsupported environment, exit.
					return;
				}

				// Setup
				div = document.createElement("div");
				container = document.createElement("div");
				container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
				body.appendChild(container).appendChild(div);

				// Support: IE6
				// Check if elements with layout shrink-wrap their children
				if (typeof div.style.zoom !== strundefined) {
					// Reset CSS: box-sizing; display; margin; border
					div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";
					div.appendChild(document.createElement("div")).style.width = "5px";
					shrinkWrapBlocksVal = div.offsetWidth !== 3;
				}

				body.removeChild(container);

				return shrinkWrapBlocksVal;
			};
		})();
		var rmargin = /^margin/;

		var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

		var getStyles,
		    curCSS,
		    rposition = /^(top|right|bottom|left)$/;

		if (window.getComputedStyle) {
			getStyles = function (elem) {
				// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
				// IE throws on elements created in popups
				// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
				if (elem.ownerDocument.defaultView.opener) {
					return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
				}

				return window.getComputedStyle(elem, null);
			};

			curCSS = function (elem, name, computed) {
				var width,
				    minWidth,
				    maxWidth,
				    ret,
				    style = elem.style;

				computed = computed || getStyles(elem);

				// getPropertyValue is only needed for .css('filter') in IE9, see #12537
				ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

				if (computed) {

					if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
						ret = jQuery.style(elem, name);
					}

					// A tribute to the "awesome hack by Dean Edwards"
					// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
					// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
					// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
					if (rnumnonpx.test(ret) && rmargin.test(name)) {

						// Remember the original values
						width = style.width;
						minWidth = style.minWidth;
						maxWidth = style.maxWidth;

						// Put in the new values to get a computed value out
						style.minWidth = style.maxWidth = style.width = ret;
						ret = computed.width;

						// Revert the changed values
						style.width = width;
						style.minWidth = minWidth;
						style.maxWidth = maxWidth;
					}
				}

				// Support: IE
				// IE returns zIndex value as an integer.
				return ret === undefined ? ret : ret + "";
			};
		} else if (document.documentElement.currentStyle) {
			getStyles = function (elem) {
				return elem.currentStyle;
			};

			curCSS = function (elem, name, computed) {
				var left,
				    rs,
				    rsLeft,
				    ret,
				    style = elem.style;

				computed = computed || getStyles(elem);
				ret = computed ? computed[name] : undefined;

				// Avoid setting ret to empty string here
				// so we don't default to auto
				if (ret == null && style && style[name]) {
					ret = style[name];
				}

				// From the awesome hack by Dean Edwards
				// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

				// If we're not dealing with a regular pixel number
				// but a number that has a weird ending, we need to convert it to pixels
				// but not position css attributes, as those are proportional to the parent element instead
				// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
				if (rnumnonpx.test(ret) && !rposition.test(name)) {

					// Remember the original values
					left = style.left;
					rs = elem.runtimeStyle;
					rsLeft = rs && rs.left;

					// Put in the new values to get a computed value out
					if (rsLeft) {
						rs.left = elem.currentStyle.left;
					}
					style.left = name === "fontSize" ? "1em" : ret;
					ret = style.pixelLeft + "px";

					// Revert the changed values
					style.left = left;
					if (rsLeft) {
						rs.left = rsLeft;
					}
				}

				// Support: IE
				// IE returns zIndex value as an integer.
				return ret === undefined ? ret : ret + "" || "auto";
			};
		}

		function addGetHookIf(conditionFn, hookFn) {
			// Define the hook, we'll check on the first run if it's really needed.
			return {
				get: function get() {
					var condition = conditionFn();

					if (condition == null) {
						// The test was not ready at this point; screw the hook this time
						// but check again when needed next time.
						return;
					}

					if (condition) {
						// Hook not needed (or it's not possible to use it due to missing dependency),
						// remove it.
						// Since there are no other hooks for marginRight, remove the whole object.
						delete this.get;
						return;
					}

					// Hook needed; redefine it so that the support test is not executed again.

					return (this.get = hookFn).apply(this, arguments);
				}
			};
		}

		(function () {
			// Minified: var b,c,d,e,f,g, h,i
			var div, style, a, pixelPositionVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal;

			// Setup
			div = document.createElement("div");
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
			a = div.getElementsByTagName("a")[0];
			style = a && a.style;

			// Finish early in limited (non-browser) environments
			if (!style) {
				return;
			}

			style.cssText = "float:left;opacity:.5";

			// Support: IE<9
			// Make sure that element opacity exists (as opposed to filter)
			support.opacity = style.opacity === "0.5";

			// Verify style float existence
			// (IE uses styleFloat instead of cssFloat)
			support.cssFloat = !!style.cssFloat;

			div.style.backgroundClip = "content-box";
			div.cloneNode(true).style.backgroundClip = "";
			support.clearCloneStyle = div.style.backgroundClip === "content-box";

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" || style.WebkitBoxSizing === "";

			jQuery.extend(support, {
				reliableHiddenOffsets: function reliableHiddenOffsets() {
					if (reliableHiddenOffsetsVal == null) {
						computeStyleTests();
					}
					return reliableHiddenOffsetsVal;
				},

				boxSizingReliable: function boxSizingReliable() {
					if (boxSizingReliableVal == null) {
						computeStyleTests();
					}
					return boxSizingReliableVal;
				},

				pixelPosition: function pixelPosition() {
					if (pixelPositionVal == null) {
						computeStyleTests();
					}
					return pixelPositionVal;
				},

				// Support: Android 2.3
				reliableMarginRight: function reliableMarginRight() {
					if (reliableMarginRightVal == null) {
						computeStyleTests();
					}
					return reliableMarginRightVal;
				}
			});

			function computeStyleTests() {
				// Minified: var b,c,d,j
				var div, body, container, contents;

				body = document.getElementsByTagName("body")[0];
				if (!body || !body.style) {
					// Test fired too early or in an unsupported environment, exit.
					return;
				}

				// Setup
				div = document.createElement("div");
				container = document.createElement("div");
				container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
				body.appendChild(container).appendChild(div);

				div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";

				// Support: IE<9
				// Assume reasonable values in the absence of getComputedStyle
				pixelPositionVal = boxSizingReliableVal = false;
				reliableMarginRightVal = true;

				// Check for getComputedStyle so that this code is not run in IE<9.
				if (window.getComputedStyle) {
					pixelPositionVal = (window.getComputedStyle(div, null) || {}).top !== "1%";
					boxSizingReliableVal = (window.getComputedStyle(div, null) || { width: "4px" }).width === "4px";

					// Support: Android 2.3
					// Div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					contents = div.appendChild(document.createElement("div"));

					// Reset CSS: box-sizing; display; margin; border; padding
					contents.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
					contents.style.marginRight = contents.style.width = "0";
					div.style.width = "1px";

					reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents, null) || {}).marginRight);

					div.removeChild(contents);
				}

				// Support: IE8
				// Check if table cells still have offsetWidth/Height when they are set
				// to display:none and there are still other visible table cells in a
				// table row; if so, offsetWidth/Height are not reliable for use when
				// determining if an element has been hidden directly using
				// display:none (it is still safe to use offsets if a parent element is
				// hidden; don safety goggles and see bug #4512 for more information).
				div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
				contents = div.getElementsByTagName("td");
				contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
				reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
				if (reliableHiddenOffsetsVal) {
					contents[0].style.display = "";
					contents[1].style.display = "none";
					reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
				}

				body.removeChild(container);
			}
		})();

		// A method for quickly swapping in/out CSS properties to get correct calculations.
		jQuery.swap = function (elem, options, callback, args) {
			var ret,
			    name,
			    old = {};

			// Remember the old values, and insert the new ones
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}

			ret = callback.apply(elem, args || []);

			// Revert the old values
			for (name in options) {
				elem.style[name] = old[name];
			}

			return ret;
		};

		var ralpha = /alpha\([^)]*\)/i,
		    ropacity = /opacity\s*=\s*([^)]*)/,
		   

		// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
		    rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
		    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		    cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
		    cssPrefixes = ["Webkit", "O", "Moz", "ms"];

		// return a css property mapped to a potentially vendor prefixed property
		function vendorPropName(style, name) {

			// shortcut for names that are not vendor prefixed
			if (name in style) {
				return name;
			}

			// check for vendor prefixed names
			var capName = name.charAt(0).toUpperCase() + name.slice(1),
			    origName = name,
			    i = cssPrefixes.length;

			while (i--) {
				name = cssPrefixes[i] + capName;
				if (name in style) {
					return name;
				}
			}

			return origName;
		}

		function showHide(elements, show) {
			var display,
			    elem,
			    hidden,
			    values = [],
			    index = 0,
			    length = elements.length;

			for (; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}

				values[index] = jQuery._data(elem, "olddisplay");
				display = elem.style.display;
				if (show) {
					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if (!values[index] && display === "none") {
						elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if (elem.style.display === "" && isHidden(elem)) {
						values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
					}
				} else {
					hidden = isHidden(elem);

					if (display && display !== "none" || !hidden) {
						jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for (index = 0; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}
				if (!show || elem.style.display === "none" || elem.style.display === "") {
					elem.style.display = show ? values[index] || "" : "none";
				}
			}

			return elements;
		}

		function setPositiveNumber(elem, value, subtract) {
			var matches = rnumsplit.exec(value);
			return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
		}

		function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
			var i = extra === (isBorderBox ? "border" : "content") ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
			    val = 0;

			for (; i < 4; i += 2) {
				// both box models exclude margin, so add it if we want it
				if (extra === "margin") {
					val += jQuery.css(elem, extra + cssExpand[i], true, styles);
				}

				if (isBorderBox) {
					// border-box includes padding, so remove it if we want content
					if (extra === "content") {
						val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
					}

					// at this point, extra isn't border nor margin, so remove border
					if (extra !== "margin") {
						val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				} else {
					// at this point, extra isn't content, so add padding
					val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

					// at this point, extra isn't content nor padding, so add border
					if (extra !== "padding") {
						val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				}
			}

			return val;
		}

		function getWidthOrHeight(elem, name, extra) {

			// Start with offset property, which is equivalent to the border-box value
			var valueIsBorderBox = true,
			    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			    styles = getStyles(elem),
			    isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";

			// some non-html elements return undefined for offsetWidth, so check for null/undefined
			// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
			// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
			if (val <= 0 || val == null) {
				// Fall back to computed then uncomputed css if necessary
				val = curCSS(elem, name, styles);
				if (val < 0 || val == null) {
					val = elem.style[name];
				}

				// Computed unit is not pixels. Stop here and return.
				if (rnumnonpx.test(val)) {
					return val;
				}

				// we need the check for style in case a browser which returns unreliable values
				// for getComputedStyle silently falls back to the reliable elem.style
				valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

				// Normalize "", auto, and prepare for extra
				val = parseFloat(val) || 0;
			}

			// use the active box-sizing model to add/subtract irrelevant styles
			return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
		}

		jQuery.extend({
			// Add in style property hooks for overriding the default
			// behavior of getting and setting a style property
			cssHooks: {
				opacity: {
					get: function get(elem, computed) {
						if (computed) {
							// We should always get a number back from opacity
							var ret = curCSS(elem, "opacity");
							return ret === "" ? "1" : ret;
						}
					}
				}
			},

			// Don't automatically add "px" to these possibly-unitless properties
			cssNumber: {
				"columnCount": true,
				"fillOpacity": true,
				"flexGrow": true,
				"flexShrink": true,
				"fontWeight": true,
				"lineHeight": true,
				"opacity": true,
				"order": true,
				"orphans": true,
				"widows": true,
				"zIndex": true,
				"zoom": true
			},

			// Add in properties whose names you wish to fix before
			// setting or getting the value
			cssProps: {
				// normalize float css property
				"float": support.cssFloat ? "cssFloat" : "styleFloat"
			},

			// Get and set the style property on a DOM Node
			style: function style(elem, name, value, extra) {
				// Don't set styles on text and comment nodes
				if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
					return;
				}

				// Make sure that we're working with the right name
				var ret,
				    type,
				    hooks,
				    origName = jQuery.camelCase(name),
				    style = elem.style;

				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));

				// gets hook for the prefixed version
				// followed by the unprefixed version
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// Check if we're setting a value
				if (value !== undefined) {
					type = typeof value;

					// convert relative number strings (+= or -=) to relative numbers. #7345
					if (type === "string" && (ret = rrelNum.exec(value))) {
						value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
						// Fixes bug #9237
						type = "number";
					}

					// Make sure that null and NaN values aren't set. See: #7116
					if (value == null || value !== value) {
						return;
					}

					// If a number was passed in, add 'px' to the (except for certain CSS properties)
					if (type === "number" && !jQuery.cssNumber[origName]) {
						value += "px";
					}

					// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
					// but it would mean to define eight (for every problematic property) identical functions
					if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
						style[name] = "inherit";
					}

					// If a hook was provided, use that value, otherwise just set the specified value
					if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

						// Support: IE
						// Swallow errors from 'invalid' CSS values (#5509)
						try {
							style[name] = value;
						} catch (e) {}
					}
				} else {
					// If a hook was provided get the non-computed value from there
					if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
						return ret;
					}

					// Otherwise just get the value from the style object
					return style[name];
				}
			},

			css: function css(elem, name, extra, styles) {
				var num,
				    val,
				    hooks,
				    origName = jQuery.camelCase(name);

				// Make sure that we're working with the right name
				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));

				// gets hook for the prefixed version
				// followed by the unprefixed version
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// If a hook was provided get the computed value from there
				if (hooks && "get" in hooks) {
					val = hooks.get(elem, true, extra);
				}

				// Otherwise, if a way to get the computed value exists, use that
				if (val === undefined) {
					val = curCSS(elem, name, styles);
				}

				//convert "normal" to computed value
				if (val === "normal" && name in cssNormalTransform) {
					val = cssNormalTransform[name];
				}

				// Return, converting to number if forced or a qualifier was provided and val looks numeric
				if (extra === "" || extra) {
					num = parseFloat(val);
					return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
				}
				return val;
			}
		});

		jQuery.each(["height", "width"], function (i, name) {
			jQuery.cssHooks[name] = {
				get: function get(elem, computed, extra) {
					if (computed) {
						// certain elements can have dimension info if we invisibly show them
						// however, it must have a current display style that would benefit from this
						return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						}) : getWidthOrHeight(elem, name, extra);
					}
				},

				set: function set(elem, value, extra) {
					var styles = extra && getStyles(elem);
					return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
				}
			};
		});

		if (!support.opacity) {
			jQuery.cssHooks.opacity = {
				get: function get(elem, computed) {
					// IE uses filters for opacity
					return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
				},

				set: function set(elem, value) {
					var style = elem.style,
					    currentStyle = elem.currentStyle,
					    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
					    filter = currentStyle && currentStyle.filter || style.filter || "";

					// IE has trouble with opacity if it does not have layout
					// Force it by setting the zoom level
					style.zoom = 1;

					// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
					// if value === "", then remove inline opacity #12685
					if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {

						// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
						// if "filter:" is present at all, clearType is disabled, we want to avoid this
						// style.removeAttribute is IE Only, but so apparently is this code path...
						style.removeAttribute("filter");

						// if there is no filter style applied in a css rule or unset inline opacity, we are done
						if (value === "" || currentStyle && !currentStyle.filter) {
							return;
						}
					}

					// otherwise, set new filter values
					style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
				}
			};
		}

		jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
			if (computed) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
			}
		});

		// These hooks are used by animate to expand properties
		jQuery.each({
			margin: "",
			padding: "",
			border: "Width"
		}, function (prefix, suffix) {
			jQuery.cssHooks[prefix + suffix] = {
				expand: function expand(value) {
					var i = 0,
					    expanded = {},
					   

					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [value];

					for (; i < 4; i++) {
						expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
					}

					return expanded;
				}
			};

			if (!rmargin.test(prefix)) {
				jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
			}
		});

		jQuery.fn.extend({
			css: function css(name, value) {
				return access(this, function (elem, name, value) {
					var styles,
					    len,
					    map = {},
					    i = 0;

					if (jQuery.isArray(name)) {
						styles = getStyles(elem);
						len = name.length;

						for (; i < len; i++) {
							map[name[i]] = jQuery.css(elem, name[i], false, styles);
						}

						return map;
					}

					return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
				}, name, value, arguments.length > 1);
			},
			show: function show() {
				return showHide(this, true);
			},
			hide: function hide() {
				return showHide(this);
			},
			toggle: function toggle(state) {
				if (typeof state === "boolean") {
					return state ? this.show() : this.hide();
				}

				return this.each(function () {
					if (isHidden(this)) {
						jQuery(this).show();
					} else {
						jQuery(this).hide();
					}
				});
			}
		});

		function Tween(elem, options, prop, end, easing) {
			return new Tween.prototype.init(elem, options, prop, end, easing);
		}
		jQuery.Tween = Tween;

		Tween.prototype = {
			constructor: Tween,
			init: function init(elem, options, prop, end, easing, unit) {
				this.elem = elem;
				this.prop = prop;
				this.easing = easing || "swing";
				this.options = options;
				this.start = this.now = this.cur();
				this.end = end;
				this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
			},
			cur: function cur() {
				var hooks = Tween.propHooks[this.prop];

				return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
			},
			run: function run(percent) {
				var eased,
				    hooks = Tween.propHooks[this.prop];

				if (this.options.duration) {
					this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
				} else {
					this.pos = eased = percent;
				}
				this.now = (this.end - this.start) * eased + this.start;

				if (this.options.step) {
					this.options.step.call(this.elem, this.now, this);
				}

				if (hooks && hooks.set) {
					hooks.set(this);
				} else {
					Tween.propHooks._default.set(this);
				}
				return this;
			}
		};

		Tween.prototype.init.prototype = Tween.prototype;

		Tween.propHooks = {
			_default: {
				get: function get(tween) {
					var result;

					if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
						return tween.elem[tween.prop];
					}

					// passing an empty string as a 3rd parameter to .css will automatically
					// attempt a parseFloat and fallback to a string if the parse fails
					// so, simple values such as "10px" are parsed to Float.
					// complex values such as "rotate(1rad)" are returned as is.
					result = jQuery.css(tween.elem, tween.prop, "");
					// Empty strings, null, undefined and "auto" are converted to 0.
					return !result || result === "auto" ? 0 : result;
				},
				set: function set(tween) {
					// use step hook for back compat - use cssHook if its there - use .style if its
					// available and use plain properties where available
					if (jQuery.fx.step[tween.prop]) {
						jQuery.fx.step[tween.prop](tween);
					} else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
						jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
					} else {
						tween.elem[tween.prop] = tween.now;
					}
				}
			}
		};

		// Support: IE <=9
		// Panic based approach to setting things on disconnected nodes

		Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
			set: function set(tween) {
				if (tween.elem.nodeType && tween.elem.parentNode) {
					tween.elem[tween.prop] = tween.now;
				}
			}
		};

		jQuery.easing = {
			linear: function linear(p) {
				return p;
			},
			swing: function swing(p) {
				return 0.5 - Math.cos(p * Math.PI) / 2;
			}
		};

		jQuery.fx = Tween.prototype.init;

		// Back Compat <1.8 extension point
		jQuery.fx.step = {};

		var fxNow,
		    timerId,
		    rfxtypes = /^(?:toggle|show|hide)$/,
		    rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
		    rrun = /queueHooks$/,
		    animationPrefilters = [defaultPrefilter],
		    tweeners = {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value),
				    target = tween.cur(),
				    parts = rfxnum.exec(value),
				    unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
				   

				// Starting value computation is required for potential unit mismatches
				start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
				    scale = 1,
				    maxIterations = 20;

				if (start && start[3] !== unit) {
					// Trust units reported by jQuery.css
					unit = unit || start[3];

					// Make sure we update the tween properties later on
					parts = parts || [];

					// Iteratively approximate from a nonzero starting point
					start = +target || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style(tween.elem, prop, start + unit);

						// Update scale, tolerating zero or NaN from tween.cur()
						// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
				}

				// Update tween properties
				if (parts) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
				}

				return tween;
			}]
		};

		// Animations created synchronously will run synchronously
		function createFxNow() {
			setTimeout(function () {
				fxNow = undefined;
			});
			return fxNow = jQuery.now();
		}

		// Generate parameters to create a standard animation
		function genFx(type, includeWidth) {
			var which,
			    attrs = { height: type },
			    i = 0;

			// if we include width, step value is 1 to do all cssExpand values,
			// if we don't include width, step value is 2 to skip over Left and Right
			includeWidth = includeWidth ? 1 : 0;
			for (; i < 4; i += 2 - includeWidth) {
				which = cssExpand[i];
				attrs["margin" + which] = attrs["padding" + which] = type;
			}

			if (includeWidth) {
				attrs.opacity = attrs.width = type;
			}

			return attrs;
		}

		function createTween(value, prop, animation) {
			var tween,
			    collection = (tweeners[prop] || []).concat(tweeners["*"]),
			    index = 0,
			    length = collection.length;
			for (; index < length; index++) {
				if (tween = collection[index].call(animation, prop, value)) {

					// we're done with this property
					return tween;
				}
			}
		}

		function defaultPrefilter(elem, props, opts) {
			/* jshint validthis: true */
			var prop,
			    value,
			    toggle,
			    tween,
			    hooks,
			    oldfire,
			    display,
			    checkDisplay,
			    anim = this,
			    orig = {},
			    style = elem.style,
			    hidden = elem.nodeType && isHidden(elem),
			    dataShow = jQuery._data(elem, "fxshow");

			// handle queue: false promises
			if (!opts.queue) {
				hooks = jQuery._queueHooks(elem, "fx");
				if (hooks.unqueued == null) {
					hooks.unqueued = 0;
					oldfire = hooks.empty.fire;
					hooks.empty.fire = function () {
						if (!hooks.unqueued) {
							oldfire();
						}
					};
				}
				hooks.unqueued++;

				anim.always(function () {
					// doing this makes sure that the complete handler will be called
					// before this completes
					anim.always(function () {
						hooks.unqueued--;
						if (!jQuery.queue(elem, "fx").length) {
							hooks.empty.fire();
						}
					});
				});
			}

			// height/width overflow pass
			if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
				// Make sure that nothing sneaks out
				// Record all 3 overflow attributes because IE does not
				// change the overflow attribute when overflowX and
				// overflowY are set to the same value
				opts.overflow = [style.overflow, style.overflowX, style.overflowY];

				// Set display property to inline-block for height/width
				// animations on inline elements that are having width/height animated
				display = jQuery.css(elem, "display");

				// Test default display if display is currently "none"
				checkDisplay = display === "none" ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

				if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {

					// inline-level elements accept inline-block;
					// block-level elements need to be inline with layout
					if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
						style.display = "inline-block";
					} else {
						style.zoom = 1;
					}
				}
			}

			if (opts.overflow) {
				style.overflow = "hidden";
				if (!support.shrinkWrapBlocks()) {
					anim.always(function () {
						style.overflow = opts.overflow[0];
						style.overflowX = opts.overflow[1];
						style.overflowY = opts.overflow[2];
					});
				}
			}

			// show/hide pass
			for (prop in props) {
				value = props[prop];
				if (rfxtypes.exec(value)) {
					delete props[prop];
					toggle = toggle || value === "toggle";
					if (value === (hidden ? "hide" : "show")) {

						// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
						if (value === "show" && dataShow && dataShow[prop] !== undefined) {
							hidden = true;
						} else {
							continue;
						}
					}
					orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

					// Any non-fx value stops us from restoring the original display value
				} else {
						display = undefined;
					}
			}

			if (!jQuery.isEmptyObject(orig)) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = jQuery._data(elem, "fxshow", {});
				}

				// store state if its toggle - enables .stop().toggle() to "reverse"
				if (toggle) {
					dataShow.hidden = !hidden;
				}
				if (hidden) {
					jQuery(elem).show();
				} else {
					anim.done(function () {
						jQuery(elem).hide();
					});
				}
				anim.done(function () {
					var prop;
					jQuery._removeData(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
				for (prop in orig) {
					tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

					if (!(prop in dataShow)) {
						dataShow[prop] = tween.start;
						if (hidden) {
							tween.end = tween.start;
							tween.start = prop === "width" || prop === "height" ? 1 : 0;
						}
					}
				}

				// If this is a noop like .hide().hide(), restore an overwritten display value
			} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
					style.display = display;
				}
		}

		function propFilter(props, specialEasing) {
			var index, name, easing, value, hooks;

			// camelCase, specialEasing and expand cssHook pass
			for (index in props) {
				name = jQuery.camelCase(index);
				easing = specialEasing[name];
				value = props[index];
				if (jQuery.isArray(value)) {
					easing = value[1];
					value = props[index] = value[0];
				}

				if (index !== name) {
					props[name] = value;
					delete props[index];
				}

				hooks = jQuery.cssHooks[name];
				if (hooks && "expand" in hooks) {
					value = hooks.expand(value);
					delete props[name];

					// not quite $.extend, this wont overwrite keys already present.
					// also - reusing 'index' from above because we have the correct "name"
					for (index in value) {
						if (!(index in props)) {
							props[index] = value[index];
							specialEasing[index] = easing;
						}
					}
				} else {
					specialEasing[name] = easing;
				}
			}
		}

		function Animation(elem, properties, options) {
			var result,
			    stopped,
			    index = 0,
			    length = animationPrefilters.length,
			    deferred = jQuery.Deferred().always(function () {
				// don't match elem in the :animated selector
				delete tick.elem;
			}),
			    tick = function tick() {
				if (stopped) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
				    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
				   
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				    percent = 1 - temp,
				    index = 0,
				    length = animation.tweens.length;

				for (; index < length; index++) {
					animation.tweens[index].run(percent);
				}

				deferred.notifyWith(elem, [animation, percent, remaining]);

				if (percent < 1 && length) {
					return remaining;
				} else {
					deferred.resolveWith(elem, [animation]);
					return false;
				}
			},
			    animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, { specialEasing: {} }, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function createTween(prop, end) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function stop(gotoEnd) {
					var index = 0,
					   
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
					if (stopped) {
						return this;
					}
					stopped = true;
					for (; index < length; index++) {
						animation.tweens[index].run(1);
					}

					// resolve when we played the last frame
					// otherwise, reject
					if (gotoEnd) {
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				}
			}),
			    props = animation.props;

			propFilter(props, animation.opts.specialEasing);

			for (; index < length; index++) {
				result = animationPrefilters[index].call(animation, elem, props, animation.opts);
				if (result) {
					return result;
				}
			}

			jQuery.map(props, createTween, animation);

			if (jQuery.isFunction(animation.opts.start)) {
				animation.opts.start.call(elem, animation);
			}

			jQuery.fx.timer(jQuery.extend(tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			}));

			// attach callbacks from options
			return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
		}

		jQuery.Animation = jQuery.extend(Animation, {
			tweener: function tweener(props, callback) {
				if (jQuery.isFunction(props)) {
					callback = props;
					props = ["*"];
				} else {
					props = props.split(" ");
				}

				var prop,
				    index = 0,
				    length = props.length;

				for (; index < length; index++) {
					prop = props[index];
					tweeners[prop] = tweeners[prop] || [];
					tweeners[prop].unshift(callback);
				}
			},

			prefilter: function prefilter(callback, prepend) {
				if (prepend) {
					animationPrefilters.unshift(callback);
				} else {
					animationPrefilters.push(callback);
				}
			}
		});

		jQuery.speed = function (speed, easing, fn) {
			var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
				complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
				duration: speed,
				easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
			};

			opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

			// normalize opt.queue - true/undefined/null -> "fx"
			if (opt.queue == null || opt.queue === true) {
				opt.queue = "fx";
			}

			// Queueing
			opt.old = opt.complete;

			opt.complete = function () {
				if (jQuery.isFunction(opt.old)) {
					opt.old.call(this);
				}

				if (opt.queue) {
					jQuery.dequeue(this, opt.queue);
				}
			};

			return opt;
		};

		jQuery.fn.extend({
			fadeTo: function fadeTo(speed, to, easing, callback) {

				// show any hidden elements after setting opacity to 0
				return this.filter(isHidden).css("opacity", 0).show()

				// animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback);
			},
			animate: function animate(prop, speed, easing, callback) {
				var empty = jQuery.isEmptyObject(prop),
				    optall = jQuery.speed(speed, easing, callback),
				    doAnimation = function doAnimation() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation(this, jQuery.extend({}, prop), optall);

					// Empty animations, or finishing resolves immediately
					if (empty || jQuery._data(this, "finish")) {
						anim.stop(true);
					}
				};
				doAnimation.finish = doAnimation;

				return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
			},
			stop: function stop(type, clearQueue, gotoEnd) {
				var stopQueue = function stopQueue(hooks) {
					var stop = hooks.stop;
					delete hooks.stop;
					stop(gotoEnd);
				};

				if (typeof type !== "string") {
					gotoEnd = clearQueue;
					clearQueue = type;
					type = undefined;
				}
				if (clearQueue && type !== false) {
					this.queue(type || "fx", []);
				}

				return this.each(function () {
					var dequeue = true,
					    index = type != null && type + "queueHooks",
					    timers = jQuery.timers,
					    data = jQuery._data(this);

					if (index) {
						if (data[index] && data[index].stop) {
							stopQueue(data[index]);
						}
					} else {
						for (index in data) {
							if (data[index] && data[index].stop && rrun.test(index)) {
								stopQueue(data[index]);
							}
						}
					}

					for (index = timers.length; index--;) {
						if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
							timers[index].anim.stop(gotoEnd);
							dequeue = false;
							timers.splice(index, 1);
						}
					}

					// start the next in the queue if the last step wasn't forced
					// timers currently will call their complete callbacks, which will dequeue
					// but only if they were gotoEnd
					if (dequeue || !gotoEnd) {
						jQuery.dequeue(this, type);
					}
				});
			},
			finish: function finish(type) {
				if (type !== false) {
					type = type || "fx";
				}
				return this.each(function () {
					var index,
					    data = jQuery._data(this),
					    queue = data[type + "queue"],
					    hooks = data[type + "queueHooks"],
					    timers = jQuery.timers,
					    length = queue ? queue.length : 0;

					// enable finishing flag on private data
					data.finish = true;

					// empty the queue first
					jQuery.queue(this, type, []);

					if (hooks && hooks.stop) {
						hooks.stop.call(this, true);
					}

					// look for any active animations, and finish them
					for (index = timers.length; index--;) {
						if (timers[index].elem === this && timers[index].queue === type) {
							timers[index].anim.stop(true);
							timers.splice(index, 1);
						}
					}

					// look for any animations in the old queue and finish them
					for (index = 0; index < length; index++) {
						if (queue[index] && queue[index].finish) {
							queue[index].finish.call(this);
						}
					}

					// turn off finishing flag
					delete data.finish;
				});
			}
		});

		jQuery.each(["toggle", "show", "hide"], function (i, name) {
			var cssFn = jQuery.fn[name];
			jQuery.fn[name] = function (speed, easing, callback) {
				return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
			};
		});

		// Generate shortcuts for custom animations
		jQuery.each({
			slideDown: genFx("show"),
			slideUp: genFx("hide"),
			slideToggle: genFx("toggle"),
			fadeIn: { opacity: "show" },
			fadeOut: { opacity: "hide" },
			fadeToggle: { opacity: "toggle" }
		}, function (name, props) {
			jQuery.fn[name] = function (speed, easing, callback) {
				return this.animate(props, speed, easing, callback);
			};
		});

		jQuery.timers = [];
		jQuery.fx.tick = function () {
			var timer,
			    timers = jQuery.timers,
			    i = 0;

			fxNow = jQuery.now();

			for (; i < timers.length; i++) {
				timer = timers[i];
				// Checks the timer has not already been removed
				if (!timer() && timers[i] === timer) {
					timers.splice(i--, 1);
				}
			}

			if (!timers.length) {
				jQuery.fx.stop();
			}
			fxNow = undefined;
		};

		jQuery.fx.timer = function (timer) {
			jQuery.timers.push(timer);
			if (timer()) {
				jQuery.fx.start();
			} else {
				jQuery.timers.pop();
			}
		};

		jQuery.fx.interval = 13;

		jQuery.fx.start = function () {
			if (!timerId) {
				timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
			}
		};

		jQuery.fx.stop = function () {
			clearInterval(timerId);
			timerId = null;
		};

		jQuery.fx.speeds = {
			slow: 600,
			fast: 200,
			// Default speed
			_default: 400
		};

		// Based off of the plugin by Clint Helfers, with permission.
		// http://blindsignals.com/index.php/2009/07/jquery-delay/
		jQuery.fn.delay = function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";

			return this.queue(type, function (next, hooks) {
				var timeout = setTimeout(next, time);
				hooks.stop = function () {
					clearTimeout(timeout);
				};
			});
		};

		(function () {
			// Minified: var a,b,c,d,e
			var input, div, select, a, opt;

			// Setup
			div = document.createElement("div");
			div.setAttribute("className", "t");
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
			a = div.getElementsByTagName("a")[0];

			// First batch of tests.
			select = document.createElement("select");
			opt = select.appendChild(document.createElement("option"));
			input = div.getElementsByTagName("input")[0];

			a.style.cssText = "top:1px";

			// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
			support.getSetAttribute = div.className !== "t";

			// Get the style information from getAttribute
			// (IE uses .cssText instead)
			support.style = /top/.test(a.getAttribute("style"));

			// Make sure that URLs aren't manipulated
			// (IE normalizes it by default)
			support.hrefNormalized = a.getAttribute("href") === "/a";

			// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
			support.checkOn = !!input.value;

			// Make sure that a selected-by-default option has a working selected property.
			// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
			support.optSelected = opt.selected;

			// Tests for enctype support on a form (#6743)
			support.enctype = !!document.createElement("form").enctype;

			// Make sure that the options inside disabled selects aren't marked as disabled
			// (WebKit marks them as disabled)
			select.disabled = true;
			support.optDisabled = !opt.disabled;

			// Support: IE8 only
			// Check if we can trust getAttribute("value")
			input = document.createElement("input");
			input.setAttribute("value", "");
			support.input = input.getAttribute("value") === "";

			// Check if an input maintains its value after becoming a radio
			input.value = "t";
			input.setAttribute("type", "radio");
			support.radioValue = input.value === "t";
		})();

		var rreturn = /\r/g;

		jQuery.fn.extend({
			val: function val(value) {
				var hooks,
				    ret,
				    isFunction,
				    elem = this[0];

				if (!arguments.length) {
					if (elem) {
						hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

						if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
							return ret;
						}

						ret = elem.value;

						return typeof ret === "string" ?
						// handle most common string cases
						ret.replace(rreturn, "") :
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
					}

					return;
				}

				isFunction = jQuery.isFunction(value);

				return this.each(function (i) {
					var val;

					if (this.nodeType !== 1) {
						return;
					}

					if (isFunction) {
						val = value.call(this, i, jQuery(this).val());
					} else {
						val = value;
					}

					// Treat null/undefined as ""; convert numbers to string
					if (val == null) {
						val = "";
					} else if (typeof val === "number") {
						val += "";
					} else if (jQuery.isArray(val)) {
						val = jQuery.map(val, function (value) {
							return value == null ? "" : value + "";
						});
					}

					hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

					// If set returns undefined, fall back to normal setting
					if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
						this.value = val;
					}
				});
			}
		});

		jQuery.extend({
			valHooks: {
				option: {
					get: function get(elem) {
						var val = jQuery.find.attr(elem, "value");
						return val != null ? val :
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim(jQuery.text(elem));
					}
				},
				select: {
					get: function get(elem) {
						var value,
						    option,
						    options = elem.options,
						    index = elem.selectedIndex,
						    one = elem.type === "select-one" || index < 0,
						    values = one ? null : [],
						    max = one ? index + 1 : options.length,
						    i = index < 0 ? max : one ? index : 0;

						// Loop through all the selected options
						for (; i < max; i++) {
							option = options[i];

							// oldIE doesn't update selected after form reset (#2551)
							if ((option.selected || i === index) && (
							// Don't return options that are disabled or in a disabled optgroup
							support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

								// Get the specific value for the option
								value = jQuery(option).val();

								// We don't need an array for one selects
								if (one) {
									return value;
								}

								// Multi-Selects return an array
								values.push(value);
							}
						}

						return values;
					},

					set: function set(elem, value) {
						var optionSet,
						    option,
						    options = elem.options,
						    values = jQuery.makeArray(value),
						    i = options.length;

						while (i--) {
							option = options[i];

							if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {

								// Support: IE6
								// When new option element is added to select box we need to
								// force reflow of newly added node in order to workaround delay
								// of initialization properties
								try {
									option.selected = optionSet = true;
								} catch (_) {

									// Will be executed only in IE6
									option.scrollHeight;
								}
							} else {
								option.selected = false;
							}
						}

						// Force browsers to behave consistently when non-matching value is set
						if (!optionSet) {
							elem.selectedIndex = -1;
						}

						return options;
					}
				}
			}
		});

		// Radios and checkboxes getter/setter
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				set: function set(elem, value) {
					if (jQuery.isArray(value)) {
						return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
					}
				}
			};
			if (!support.checkOn) {
				jQuery.valHooks[this].get = function (elem) {
					// Support: Webkit
					// "" is returned instead of "on" if a value isn't specified
					return elem.getAttribute("value") === null ? "on" : elem.value;
				};
			}
		});

		var nodeHook,
		    boolHook,
		    attrHandle = jQuery.expr.attrHandle,
		    ruseDefault = /^(?:checked|selected)$/i,
		    getSetAttribute = support.getSetAttribute,
		    getSetInput = support.input;

		jQuery.fn.extend({
			attr: function attr(name, value) {
				return access(this, jQuery.attr, name, value, arguments.length > 1);
			},

			removeAttr: function removeAttr(name) {
				return this.each(function () {
					jQuery.removeAttr(this, name);
				});
			}
		});

		jQuery.extend({
			attr: function attr(elem, name, value) {
				var hooks,
				    ret,
				    nType = elem.nodeType;

				// don't get/set attributes on text, comment and attribute nodes
				if (!elem || nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				// Fallback to prop when attributes are not supported
				if (typeof elem.getAttribute === strundefined) {
					return jQuery.prop(elem, name, value);
				}

				// All attributes are lowercase
				// Grab necessary hook if one is defined
				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
					name = name.toLowerCase();
					hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
				}

				if (value !== undefined) {

					if (value === null) {
						jQuery.removeAttr(elem, name);
					} else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					} else {
						elem.setAttribute(name, value + "");
						return value;
					}
				} else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				} else {
					ret = jQuery.find.attr(elem, name);

					// Non-existent attributes return null, we normalize to undefined
					return ret == null ? undefined : ret;
				}
			},

			removeAttr: function removeAttr(elem, value) {
				var name,
				    propName,
				    i = 0,
				    attrNames = value && value.match(rnotwhite);

				if (attrNames && elem.nodeType === 1) {
					while (name = attrNames[i++]) {
						propName = jQuery.propFix[name] || name;

						// Boolean attributes get special treatment (#10870)
						if (jQuery.expr.match.bool.test(name)) {
							// Set corresponding property to false
							if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
								elem[propName] = false;
								// Support: IE<9
								// Also clear defaultChecked/defaultSelected (if appropriate)
							} else {
									elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
								}

							// See #9699 for explanation of this approach (setting first, then removal)
						} else {
								jQuery.attr(elem, name, "");
							}

						elem.removeAttribute(getSetAttribute ? name : propName);
					}
				}
			},

			attrHooks: {
				type: {
					set: function set(elem, value) {
						if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
							// Setting the type on a radio button after the value resets the value in IE6-9
							// Reset value to default in case type is set after value during creation
							var val = elem.value;
							elem.setAttribute("type", value);
							if (val) {
								elem.value = val;
							}
							return value;
						}
					}
				}
			}
		});

		// Hook for boolean attributes
		boolHook = {
			set: function set(elem, value, name) {
				if (value === false) {
					// Remove boolean attributes when set to false
					jQuery.removeAttr(elem, name);
				} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
					// IE<8 needs the *property* name
					elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);

					// Use defaultChecked and defaultSelected for oldIE
				} else {
						elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
					}

				return name;
			}
		};

		// Retrieve booleans specially
		jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {

			var getter = attrHandle[name] || jQuery.find.attr;

			attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function (elem, name, isXML) {
				var ret, handle;
				if (!isXML) {
					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[name];
					attrHandle[name] = ret;
					ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
					attrHandle[name] = handle;
				}
				return ret;
			} : function (elem, name, isXML) {
				if (!isXML) {
					return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
				}
			};
		});

		// fix oldIE attroperties
		if (!getSetInput || !getSetAttribute) {
			jQuery.attrHooks.value = {
				set: function set(elem, value, name) {
					if (jQuery.nodeName(elem, "input")) {
						// Does not return so that setAttribute is also used
						elem.defaultValue = value;
					} else {
						// Use nodeHook if defined (#1954); otherwise setAttribute is fine
						return nodeHook && nodeHook.set(elem, value, name);
					}
				}
			};
		}

		// IE6/7 do not support getting/setting some attributes with get/setAttribute
		if (!getSetAttribute) {

			// Use this for any attribute in IE6/7
			// This fixes almost every IE6/7 issue
			nodeHook = {
				set: function set(elem, value, name) {
					// Set the existing or create a new attribute node
					var ret = elem.getAttributeNode(name);
					if (!ret) {
						elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
					}

					ret.value = value += "";

					// Break association with cloned elements by also using setAttribute (#9646)
					if (name === "value" || value === elem.getAttribute(name)) {
						return value;
					}
				}
			};

			// Some attributes are constructed with empty-string values when not defined
			attrHandle.id = attrHandle.name = attrHandle.coords = function (elem, name, isXML) {
				var ret;
				if (!isXML) {
					return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
				}
			};

			// Fixing value retrieval on a button requires this module
			jQuery.valHooks.button = {
				get: function get(elem, name) {
					var ret = elem.getAttributeNode(name);
					if (ret && ret.specified) {
						return ret.value;
					}
				},
				set: nodeHook.set
			};

			// Set contenteditable to false on removals(#10429)
			// Setting to empty string throws an error as an invalid value
			jQuery.attrHooks.contenteditable = {
				set: function set(elem, value, name) {
					nodeHook.set(elem, value === "" ? false : value, name);
				}
			};

			// Set width and height to auto instead of 0 on empty string( Bug #8150 )
			// This is for removals
			jQuery.each(["width", "height"], function (i, name) {
				jQuery.attrHooks[name] = {
					set: function set(elem, value) {
						if (value === "") {
							elem.setAttribute(name, "auto");
							return value;
						}
					}
				};
			});
		}

		if (!support.style) {
			jQuery.attrHooks.style = {
				get: function get(elem) {
					// Return undefined in the case of empty string
					// Note: IE uppercases css property names, but if we were to .toLowerCase()
					// .cssText, that would destroy case senstitivity in URL's, like in "background"
					return elem.style.cssText || undefined;
				},
				set: function set(elem, value) {
					return elem.style.cssText = value + "";
				}
			};
		}

		var rfocusable = /^(?:input|select|textarea|button|object)$/i,
		    rclickable = /^(?:a|area)$/i;

		jQuery.fn.extend({
			prop: function prop(name, value) {
				return access(this, jQuery.prop, name, value, arguments.length > 1);
			},

			removeProp: function removeProp(name) {
				name = jQuery.propFix[name] || name;
				return this.each(function () {
					// try/catch handles cases where IE balks (such as removing a property on window)
					try {
						this[name] = undefined;
						delete this[name];
					} catch (e) {}
				});
			}
		});

		jQuery.extend({
			propFix: {
				"for": "htmlFor",
				"class": "className"
			},

			prop: function prop(elem, name, value) {
				var ret,
				    hooks,
				    notxml,
				    nType = elem.nodeType;

				// don't get/set properties on text, comment and attribute nodes
				if (!elem || nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				notxml = nType !== 1 || !jQuery.isXMLDoc(elem);

				if (notxml) {
					// Fix name and attach hooks
					name = jQuery.propFix[name] || name;
					hooks = jQuery.propHooks[name];
				}

				if (value !== undefined) {
					return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
				} else {
					return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
				}
			},

			propHooks: {
				tabIndex: {
					get: function get(elem) {
						// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
						// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
						// Use proper attribute retrieval(#12072)
						var tabindex = jQuery.find.attr(elem, "tabindex");

						return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
					}
				}
			}
		});

		// Some attributes require a special call on IE
		// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!support.hrefNormalized) {
			// href/src property should get the full normalized URL (#10299/#12915)
			jQuery.each(["href", "src"], function (i, name) {
				jQuery.propHooks[name] = {
					get: function get(elem) {
						return elem.getAttribute(name, 4);
					}
				};
			});
		}

		// Support: Safari, IE9+
		// mis-reports the default selected property of an option
		// Accessing the parent's selectedIndex property fixes it
		if (!support.optSelected) {
			jQuery.propHooks.selected = {
				get: function get(elem) {
					var parent = elem.parentNode;

					if (parent) {
						parent.selectedIndex;

						// Make sure that it also works with optgroups, see #5701
						if (parent.parentNode) {
							parent.parentNode.selectedIndex;
						}
					}
					return null;
				}
			};
		}

		jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
			jQuery.propFix[this.toLowerCase()] = this;
		});

		// IE6/7 call enctype encoding
		if (!support.enctype) {
			jQuery.propFix.enctype = "encoding";
		}

		var rclass = /[\t\r\n\f]/g;

		jQuery.fn.extend({
			addClass: function addClass(value) {
				var classes,
				    elem,
				    cur,
				    clazz,
				    j,
				    finalValue,
				    i = 0,
				    len = this.length,
				    proceed = typeof value === "string" && value;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).addClass(value.call(this, j, this.className));
					});
				}

				if (proceed) {
					// The disjunction here is for better compressibility (see removeClass)
					classes = (value || "").match(rnotwhite) || [];

					for (; i < len; i++) {
						elem = this[i];
						cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {
								if (cur.indexOf(" " + clazz + " ") < 0) {
									cur += clazz + " ";
								}
							}

							// only assign if different to avoid unneeded rendering.
							finalValue = jQuery.trim(cur);
							if (elem.className !== finalValue) {
								elem.className = finalValue;
							}
						}
					}
				}

				return this;
			},

			removeClass: function removeClass(value) {
				var classes,
				    elem,
				    cur,
				    clazz,
				    j,
				    finalValue,
				    i = 0,
				    len = this.length,
				    proceed = arguments.length === 0 || typeof value === "string" && value;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).removeClass(value.call(this, j, this.className));
					});
				}
				if (proceed) {
					classes = (value || "").match(rnotwhite) || [];

					for (; i < len; i++) {
						elem = this[i];
						// This expression is here for better compressibility (see addClass)
						cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {
								// Remove *all* instances
								while (cur.indexOf(" " + clazz + " ") >= 0) {
									cur = cur.replace(" " + clazz + " ", " ");
								}
							}

							// only assign if different to avoid unneeded rendering.
							finalValue = value ? jQuery.trim(cur) : "";
							if (elem.className !== finalValue) {
								elem.className = finalValue;
							}
						}
					}
				}

				return this;
			},

			toggleClass: function toggleClass(value, stateVal) {
				var type = typeof value;

				if (typeof stateVal === "boolean" && type === "string") {
					return stateVal ? this.addClass(value) : this.removeClass(value);
				}

				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
					});
				}

				return this.each(function () {
					if (type === "string") {
						// toggle individual class names
						var className,
						    i = 0,
						    self = jQuery(this),
						    classNames = value.match(rnotwhite) || [];

						while (className = classNames[i++]) {
							// check each className given, space separated list
							if (self.hasClass(className)) {
								self.removeClass(className);
							} else {
								self.addClass(className);
							}
						}

						// Toggle whole class name
					} else if (type === strundefined || type === "boolean") {
							if (this.className) {
								// store className if set
								jQuery._data(this, "__className__", this.className);
							}

							// If the element has a class name or if we're passed "false",
							// then remove the whole classname (if there was one, the above saved it).
							// Otherwise bring back whatever was previously saved (if anything),
							// falling back to the empty string if nothing was stored.
							this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
						}
				});
			},

			hasClass: function hasClass(selector) {
				var className = " " + selector + " ",
				    i = 0,
				    l = this.length;
				for (; i < l; i++) {
					if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
						return true;
					}
				}

				return false;
			}
		});

		// Return jQuery for attributes-only inclusion

		jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

			// Handle event binding
			jQuery.fn[name] = function (data, fn) {
				return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
			};
		});

		jQuery.fn.extend({
			hover: function hover(fnOver, fnOut) {
				return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
			},

			bind: function bind(types, data, fn) {
				return this.on(types, null, data, fn);
			},
			unbind: function unbind(types, fn) {
				return this.off(types, null, fn);
			},

			delegate: function delegate(selector, types, data, fn) {
				return this.on(types, selector, data, fn);
			},
			undelegate: function undelegate(selector, types, fn) {
				// ( namespace ) or ( selector, types [, fn] )
				return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
			}
		});

		var nonce = jQuery.now();

		var rquery = /\?/;

		var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

		jQuery.parseJSON = function (data) {
			// Attempt to parse using the native JSON parser first
			if (window.JSON && window.JSON.parse) {
				// Support: Android 2.3
				// Workaround failure to string-cast null input
				return window.JSON.parse(data + "");
			}

			var requireNonComma,
			    depth = null,
			    str = jQuery.trim(data + "");

			// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
			// after removing valid tokens
			return str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {

				// Force termination if we see a misplaced comma
				if (requireNonComma && comma) {
					depth = 0;
				}

				// Perform no more replacements after returning to outermost depth
				if (depth === 0) {
					return token;
				}

				// Commas must not follow "[", "{", or ","
				requireNonComma = open || comma;

				// Determine new depth
				// array/object open ("[" or "{"): depth += true - false (increment)
				// array/object close ("]" or "}"): depth += false - true (decrement)
				// other cases ("," or primitive): depth += true - true (numeric cast)
				depth += !close - !open;

				// Remove this token
				return "";
			})) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
		};

		// Cross-browser xml parsing
		jQuery.parseXML = function (data) {
			var xml, tmp;
			if (!data || typeof data !== "string") {
				return null;
			}
			try {
				if (window.DOMParser) {
					// Standard
					tmp = new DOMParser();
					xml = tmp.parseFromString(data, "text/xml");
				} else {
					// IE
					xml = new ActiveXObject("Microsoft.XMLDOM");
					xml.async = "false";
					xml.loadXML(data);
				}
			} catch (e) {
				xml = undefined;
			}
			if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
				jQuery.error("Invalid XML: " + data);
			}
			return xml;
		};

		var
		// Document location
		ajaxLocParts,
		    ajaxLocation,
		    rhash = /#.*$/,
		    rts = /([?&])_=[^&]*/,
		    rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,
		    // IE leaves an \r character at EOL
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		    rnoContent = /^(?:GET|HEAD)$/,
		    rprotocol = /^\/\//,
		    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
		   

		/* Prefilters
	  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	  * 2) These are called:
	  *    - BEFORE asking for a transport
	  *    - AFTER param serialization (s.data is a string if s.processData is true)
	  * 3) key is the dataType
	  * 4) the catchall symbol "*" can be used
	  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	  */
		prefilters = {},
		   

		/* Transports bindings
	  * 1) key is the dataType
	  * 2) the catchall symbol "*" can be used
	  * 3) selection will start with transport dataType and THEN go to "*" if needed
	  */
		transports = {},
		   

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*");

		// #8138, IE may throw an exception when accessing
		// a field from window.location if document.domain has been set
		try {
			ajaxLocation = location.href;
		} catch (e) {
			// Use the href attribute of an A element
			// since IE will modify it given document.location
			ajaxLocation = document.createElement("a");
			ajaxLocation.href = "";
			ajaxLocation = ajaxLocation.href;
		}

		// Segment location into parts
		ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

		// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
		function addToPrefiltersOrTransports(structure) {

			// dataTypeExpression is optional and defaults to "*"
			return function (dataTypeExpression, func) {

				if (typeof dataTypeExpression !== "string") {
					func = dataTypeExpression;
					dataTypeExpression = "*";
				}

				var dataType,
				    i = 0,
				    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

				if (jQuery.isFunction(func)) {
					// For each dataType in the dataTypeExpression
					while (dataType = dataTypes[i++]) {
						// Prepend if requested
						if (dataType.charAt(0) === "+") {
							dataType = dataType.slice(1) || "*";
							(structure[dataType] = structure[dataType] || []).unshift(func);

							// Otherwise append
						} else {
								(structure[dataType] = structure[dataType] || []).push(func);
							}
					}
				}
			};
		}

		// Base inspection function for prefilters and transports
		function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

			var inspected = {},
			    seekingTransport = structure === transports;

			function inspect(dataType) {
				var selected;
				inspected[dataType] = true;
				jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
					var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
					if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
						options.dataTypes.unshift(dataTypeOrTransport);
						inspect(dataTypeOrTransport);
						return false;
					} else if (seekingTransport) {
						return !(selected = dataTypeOrTransport);
					}
				});
				return selected;
			}

			return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
		}

		// A special extend for ajax options
		// that takes "flat" options (not to be deep extended)
		// Fixes #9887
		function ajaxExtend(target, src) {
			var deep,
			    key,
			    flatOptions = jQuery.ajaxSettings.flatOptions || {};

			for (key in src) {
				if (src[key] !== undefined) {
					(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
				}
			}
			if (deep) {
				jQuery.extend(true, target, deep);
			}

			return target;
		}

		/* Handles responses to an ajax request:
	  * - finds the right dataType (mediates between content-type and expected dataType)
	  * - returns the corresponding response
	  */
		function ajaxHandleResponses(s, jqXHR, responses) {
			var firstDataType,
			    ct,
			    finalDataType,
			    type,
			    contents = s.contents,
			    dataTypes = s.dataTypes;

			// Remove auto dataType and get content-type in the process
			while (dataTypes[0] === "*") {
				dataTypes.shift();
				if (ct === undefined) {
					ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
				}
			}

			// Check if we're dealing with a known content-type
			if (ct) {
				for (type in contents) {
					if (contents[type] && contents[type].test(ct)) {
						dataTypes.unshift(type);
						break;
					}
				}
			}

			// Check to see if we have a response for the expected dataType
			if (dataTypes[0] in responses) {
				finalDataType = dataTypes[0];
			} else {
				// Try convertible dataTypes
				for (type in responses) {
					if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
						finalDataType = type;
						break;
					}
					if (!firstDataType) {
						firstDataType = type;
					}
				}
				// Or just use first one
				finalDataType = finalDataType || firstDataType;
			}

			// If we found a dataType
			// We add the dataType to the list if needed
			// and return the corresponding response
			if (finalDataType) {
				if (finalDataType !== dataTypes[0]) {
					dataTypes.unshift(finalDataType);
				}
				return responses[finalDataType];
			}
		}

		/* Chain conversions given the request and the original response
	  * Also sets the responseXXX fields on the jqXHR instance
	  */
		function ajaxConvert(s, response, jqXHR, isSuccess) {
			var conv2,
			    current,
			    conv,
			    tmp,
			    prev,
			    converters = {},
			   
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

			// Create converters map with lowercased keys
			if (dataTypes[1]) {
				for (conv in s.converters) {
					converters[conv.toLowerCase()] = s.converters[conv];
				}
			}

			current = dataTypes.shift();

			// Convert to each sequential dataType
			while (current) {

				if (s.responseFields[current]) {
					jqXHR[s.responseFields[current]] = response;
				}

				// Apply the dataFilter if provided
				if (!prev && isSuccess && s.dataFilter) {
					response = s.dataFilter(response, s.dataType);
				}

				prev = current;
				current = dataTypes.shift();

				if (current) {

					// There's only work to do if current dataType is non-auto
					if (current === "*") {

						current = prev;

						// Convert response if prev dataType is non-auto and differs from current
					} else if (prev !== "*" && prev !== current) {

							// Seek a direct converter
							conv = converters[prev + " " + current] || converters["* " + current];

							// If none found, seek a pair
							if (!conv) {
								for (conv2 in converters) {

									// If conv2 outputs current
									tmp = conv2.split(" ");
									if (tmp[1] === current) {

										// If prev can be converted to accepted input
										conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
										if (conv) {
											// Condense equivalence converters
											if (conv === true) {
												conv = converters[conv2];

												// Otherwise, insert the intermediate dataType
											} else if (converters[conv2] !== true) {
													current = tmp[0];
													dataTypes.unshift(tmp[1]);
												}
											break;
										}
									}
								}
							}

							// Apply converter (if not an equivalence)
							if (conv !== true) {

								// Unless errors are allowed to bubble, catch and return them
								if (conv && s["throws"]) {
									response = conv(response);
								} else {
									try {
										response = conv(response);
									} catch (e) {
										return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
									}
								}
							}
						}
				}
			}

			return { state: "success", data: response };
		}

		jQuery.extend({

			// Counter for holding the number of active queries
			active: 0,

			// Last-Modified header cache for next request
			lastModified: {},
			etag: {},

			ajaxSettings: {
				url: ajaxLocation,
				type: "GET",
				isLocal: rlocalProtocol.test(ajaxLocParts[1]),
				global: true,
				processData: true,
				async: true,
				contentType: "application/x-www-form-urlencoded; charset=UTF-8",
				/*
	   timeout: 0,
	   data: null,
	   dataType: null,
	   username: null,
	   password: null,
	   cache: null,
	   throws: false,
	   traditional: false,
	   headers: {},
	   */

				accepts: {
					"*": allTypes,
					text: "text/plain",
					html: "text/html",
					xml: "application/xml, text/xml",
					json: "application/json, text/javascript"
				},

				contents: {
					xml: /xml/,
					html: /html/,
					json: /json/
				},

				responseFields: {
					xml: "responseXML",
					text: "responseText",
					json: "responseJSON"
				},

				// Data converters
				// Keys separate source (or catchall "*") and destination types with a single space
				converters: {

					// Convert anything to text
					"* text": String,

					// Text to html (true = no transformation)
					"text html": true,

					// Evaluate text as a json expression
					"text json": jQuery.parseJSON,

					// Parse text as xml
					"text xml": jQuery.parseXML
				},

				// For options that shouldn't be deep extended:
				// you can add your own custom options here if
				// and when you create one that shouldn't be
				// deep extended (see ajaxExtend)
				flatOptions: {
					url: true,
					context: true
				}
			},

			// Creates a full fledged settings object into target
			// with both ajaxSettings and settings fields.
			// If target is omitted, writes into ajaxSettings.
			ajaxSetup: function ajaxSetup(target, settings) {
				return settings ?

				// Building a settings object
				ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

				// Extending ajaxSettings
				ajaxExtend(jQuery.ajaxSettings, target);
			},

			ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
			ajaxTransport: addToPrefiltersOrTransports(transports),

			// Main method
			ajax: function ajax(url, options) {

				// If url is an object, simulate pre-1.5 signature
				if (typeof url === "object") {
					options = url;
					url = undefined;
				}

				// Force options to be an object
				options = options || {};

				var // Cross-domain detection vars
				parts,
				   
				// Loop variable
				i,
				   
				// URL without anti-cache param
				cacheURL,
				   
				// Response headers as string
				responseHeadersString,
				   
				// timeout handle
				timeoutTimer,
				   

				// To know if global events are to be dispatched
				fireGlobals,
				    transport,
				   
				// Response headers
				responseHeaders,
				   
				// Create the final options object
				s = jQuery.ajaxSetup({}, options),
				   
				// Callbacks context
				callbackContext = s.context || s,
				   
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
				   
				// Deferreds
				deferred = jQuery.Deferred(),
				    completeDeferred = jQuery.Callbacks("once memory"),
				   
				// Status-dependent callbacks
				_statusCode = s.statusCode || {},
				   
				// Headers (they are sent all at once)
				requestHeaders = {},
				    requestHeadersNames = {},
				   
				// The jqXHR state
				state = 0,
				   
				// Default abort message
				strAbort = "canceled",
				   
				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function getResponseHeader(key) {
						var match;
						if (state === 2) {
							if (!responseHeaders) {
								responseHeaders = {};
								while (match = rheaders.exec(responseHeadersString)) {
									responseHeaders[match[1].toLowerCase()] = match[2];
								}
							}
							match = responseHeaders[key.toLowerCase()];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function getAllResponseHeaders() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function setRequestHeader(name, value) {
						var lname = name.toLowerCase();
						if (!state) {
							name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
							requestHeaders[name] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function overrideMimeType(type) {
						if (!state) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function statusCode(map) {
						var code;
						if (map) {
							if (state < 2) {
								for (code in map) {
									// Lazy-add the new callback in a way that preserves old ones
									_statusCode[code] = [_statusCode[code], map[code]];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always(map[jqXHR.status]);
							}
						}
						return this;
					},

					// Cancel the request
					abort: function abort(statusText) {
						var finalText = statusText || strAbort;
						if (transport) {
							transport.abort(finalText);
						}
						done(0, finalText);
						return this;
					}
				};

				// Attach deferreds
				deferred.promise(jqXHR).complete = completeDeferred.add;
				jqXHR.success = jqXHR.done;
				jqXHR.error = jqXHR.fail;

				// Remove hash character (#7531: and string promotion)
				// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
				// Handle falsy url in the settings object (#10093: consistency with old signature)
				// We also use the url parameter if available
				s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

				// Alias method option to type as per ticket #12004
				s.type = options.method || options.type || s.method || s.type;

				// Extract dataTypes list
				s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

				// A cross-domain request is in order when we have a protocol:host:port mismatch
				if (s.crossDomain == null) {
					parts = rurl.exec(s.url.toLowerCase());
					s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
				}

				// Convert data if not already a string
				if (s.data && s.processData && typeof s.data !== "string") {
					s.data = jQuery.param(s.data, s.traditional);
				}

				// Apply prefilters
				inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

				// If request was aborted inside a prefilter, stop there
				if (state === 2) {
					return jqXHR;
				}

				// We can fire global events as of now if asked to
				// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
				fireGlobals = jQuery.event && s.global;

				// Watch for a new set of requests
				if (fireGlobals && jQuery.active++ === 0) {
					jQuery.event.trigger("ajaxStart");
				}

				// Uppercase the type
				s.type = s.type.toUpperCase();

				// Determine if request has content
				s.hasContent = !rnoContent.test(s.type);

				// Save the URL in case we're toying with the If-Modified-Since
				// and/or If-None-Match header later on
				cacheURL = s.url;

				// More options handling for requests with no content
				if (!s.hasContent) {

					// If data is available, append data to url
					if (s.data) {
						cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
						// #9682: remove data so that it's not used in an eventual retry
						delete s.data;
					}

					// Add anti-cache in url if needed
					if (s.cache === false) {
						s.url = rts.test(cacheURL) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace(rts, "$1_=" + nonce++) :

						// Otherwise add one to the end
						cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
					}
				}

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if (s.ifModified) {
					if (jQuery.lastModified[cacheURL]) {
						jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
					}
					if (jQuery.etag[cacheURL]) {
						jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
					}
				}

				// Set the correct header, if data is being sent
				if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
					jqXHR.setRequestHeader("Content-Type", s.contentType);
				}

				// Set the Accepts header for the server, depending on the dataType
				jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

				// Check for headers option
				for (i in s.headers) {
					jqXHR.setRequestHeader(i, s.headers[i]);
				}

				// Allow custom headers/mimetypes and early abort
				if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
					// Abort if not done already and return
					return jqXHR.abort();
				}

				// aborting is no longer a cancellation
				strAbort = "abort";

				// Install callbacks on deferreds
				for (i in { success: 1, error: 1, complete: 1 }) {
					jqXHR[i](s[i]);
				}

				// Get transport
				transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

				// If no transport, we auto-abort
				if (!transport) {
					done(-1, "No Transport");
				} else {
					jqXHR.readyState = 1;

					// Send global event
					if (fireGlobals) {
						globalEventContext.trigger("ajaxSend", [jqXHR, s]);
					}
					// Timeout
					if (s.async && s.timeout > 0) {
						timeoutTimer = setTimeout(function () {
							jqXHR.abort("timeout");
						}, s.timeout);
					}

					try {
						state = 1;
						transport.send(requestHeaders, done);
					} catch (e) {
						// Propagate exception as error if not done
						if (state < 2) {
							done(-1, e);
							// Simply rethrow otherwise
						} else {
								throw e;
							}
					}
				}

				// Callback for when everything is done
				function done(status, nativeStatusText, responses, headers) {
					var isSuccess,
					    success,
					    error,
					    response,
					    modified,
					    statusText = nativeStatusText;

					// Called once
					if (state === 2) {
						return;
					}

					// State is "done" now
					state = 2;

					// Clear timeout if it exists
					if (timeoutTimer) {
						clearTimeout(timeoutTimer);
					}

					// Dereference transport for early garbage collection
					// (no matter how long the jqXHR object will be used)
					transport = undefined;

					// Cache response headers
					responseHeadersString = headers || "";

					// Set readyState
					jqXHR.readyState = status > 0 ? 4 : 0;

					// Determine if successful
					isSuccess = status >= 200 && status < 300 || status === 304;

					// Get response data
					if (responses) {
						response = ajaxHandleResponses(s, jqXHR, responses);
					}

					// Convert no matter what (that way responseXXX fields are always set)
					response = ajaxConvert(s, response, jqXHR, isSuccess);

					// If successful, handle type chaining
					if (isSuccess) {

						// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
						if (s.ifModified) {
							modified = jqXHR.getResponseHeader("Last-Modified");
							if (modified) {
								jQuery.lastModified[cacheURL] = modified;
							}
							modified = jqXHR.getResponseHeader("etag");
							if (modified) {
								jQuery.etag[cacheURL] = modified;
							}
						}

						// if no content
						if (status === 204 || s.type === "HEAD") {
							statusText = "nocontent";

							// if not modified
						} else if (status === 304) {
								statusText = "notmodified";

								// If we have data, let's convert it
							} else {
									statusText = response.state;
									success = response.data;
									error = response.error;
									isSuccess = !error;
								}
					} else {
						// We extract error from statusText
						// then normalize statusText and status for non-aborts
						error = statusText;
						if (status || !statusText) {
							statusText = "error";
							if (status < 0) {
								status = 0;
							}
						}
					}

					// Set data for the fake xhr object
					jqXHR.status = status;
					jqXHR.statusText = (nativeStatusText || statusText) + "";

					// Success/Error
					if (isSuccess) {
						deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
					} else {
						deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
					}

					// Status-dependent callbacks
					jqXHR.statusCode(_statusCode);
					_statusCode = undefined;

					if (fireGlobals) {
						globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
					}

					// Complete
					completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

					if (fireGlobals) {
						globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
						// Handle the global AJAX counter
						if (! --jQuery.active) {
							jQuery.event.trigger("ajaxStop");
						}
					}
				}

				return jqXHR;
			},

			getJSON: function getJSON(url, data, callback) {
				return jQuery.get(url, data, callback, "json");
			},

			getScript: function getScript(url, callback) {
				return jQuery.get(url, undefined, callback, "script");
			}
		});

		jQuery.each(["get", "post"], function (i, method) {
			jQuery[method] = function (url, data, callback, type) {
				// shift arguments if data argument was omitted
				if (jQuery.isFunction(data)) {
					type = type || callback;
					callback = data;
					data = undefined;
				}

				return jQuery.ajax({
					url: url,
					type: method,
					dataType: type,
					data: data,
					success: callback
				});
			};
		});

		jQuery._evalUrl = function (url) {
			return jQuery.ajax({
				url: url,
				type: "GET",
				dataType: "script",
				async: false,
				global: false,
				"throws": true
			});
		};

		jQuery.fn.extend({
			wrapAll: function wrapAll(html) {
				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapAll(html.call(this, i));
					});
				}

				if (this[0]) {
					// The elements to wrap the target around
					var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

					if (this[0].parentNode) {
						wrap.insertBefore(this[0]);
					}

					wrap.map(function () {
						var elem = this;

						while (elem.firstChild && elem.firstChild.nodeType === 1) {
							elem = elem.firstChild;
						}

						return elem;
					}).append(this);
				}

				return this;
			},

			wrapInner: function wrapInner(html) {
				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapInner(html.call(this, i));
					});
				}

				return this.each(function () {
					var self = jQuery(this),
					    contents = self.contents();

					if (contents.length) {
						contents.wrapAll(html);
					} else {
						self.append(html);
					}
				});
			},

			wrap: function wrap(html) {
				var isFunction = jQuery.isFunction(html);

				return this.each(function (i) {
					jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
				});
			},

			unwrap: function unwrap() {
				return this.parent().each(function () {
					if (!jQuery.nodeName(this, "body")) {
						jQuery(this).replaceWith(this.childNodes);
					}
				}).end();
			}
		});

		jQuery.expr.filters.hidden = function (elem) {
			// Support: Opera <= 12.12
			// Opera reports offsetWidths and offsetHeights less than zero on some elements
			return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
		};

		jQuery.expr.filters.visible = function (elem) {
			return !jQuery.expr.filters.hidden(elem);
		};

		var r20 = /%20/g,
		    rbracket = /\[\]$/,
		    rCRLF = /\r?\n/g,
		    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		    rsubmittable = /^(?:input|select|textarea|keygen)/i;

		function buildParams(prefix, obj, traditional, add) {
			var name;

			if (jQuery.isArray(obj)) {
				// Serialize array item.
				jQuery.each(obj, function (i, v) {
					if (traditional || rbracket.test(prefix)) {
						// Treat each array item as a scalar.
						add(prefix, v);
					} else {
						// Item is non-scalar (array or object), encode its numeric index.
						buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
					}
				});
			} else if (!traditional && jQuery.type(obj) === "object") {
				// Serialize object item.
				for (name in obj) {
					buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
				}
			} else {
				// Serialize scalar item.
				add(prefix, obj);
			}
		}

		// Serialize an array of form elements or a set of
		// key/values into a query string
		jQuery.param = function (a, traditional) {
			var prefix,
			    s = [],
			    add = function add(key, value) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
			};

			// Set traditional to true for jQuery <= 1.3.2 behavior.
			if (traditional === undefined) {
				traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
			}

			// If an array was passed in, assume that it is an array of form elements.
			if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
				// Serialize the form elements
				jQuery.each(a, function () {
					add(this.name, this.value);
				});
			} else {
				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for (prefix in a) {
					buildParams(prefix, a[prefix], traditional, add);
				}
			}

			// Return the resulting serialization
			return s.join("&").replace(r20, "+");
		};

		jQuery.fn.extend({
			serialize: function serialize() {
				return jQuery.param(this.serializeArray());
			},
			serializeArray: function serializeArray() {
				return this.map(function () {
					// Can add propHook for "elements" to filter or add form elements
					var elements = jQuery.prop(this, "elements");
					return elements ? jQuery.makeArray(elements) : this;
				}).filter(function () {
					var type = this.type;
					// Use .is(":disabled") so that fieldset[disabled] works
					return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
				}).map(function (i, elem) {
					var val = jQuery(this).val();

					return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}).get();
			}
		});

		// Create the request object
		// (This is still attached to ajaxSettings for backward compatibility)
		jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
		// Support: IE6+
		function () {

			// XHR cannot access local files, always use ActiveX for that case
			return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
		} :
		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;

		var xhrId = 0,
		    xhrCallbacks = {},
		    xhrSupported = jQuery.ajaxSettings.xhr();

		// Support: IE<10
		// Open requests must be manually aborted on unload (#5280)
		// See https://support.microsoft.com/kb/2856746 for more info
		if (window.attachEvent) {
			window.attachEvent("onunload", function () {
				for (var key in xhrCallbacks) {
					xhrCallbacks[key](undefined, true);
				}
			});
		}

		// Determine support properties
		support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
		xhrSupported = support.ajax = !!xhrSupported;

		// Create transport if the browser can provide an xhr
		if (xhrSupported) {

			jQuery.ajaxTransport(function (options) {
				// Cross domain only allowed if supported through XMLHttpRequest
				if (!options.crossDomain || support.cors) {

					var callback;

					return {
						send: function send(headers, complete) {
							var i,
							    xhr = options.xhr(),
							    id = ++xhrId;

							// Open the socket
							xhr.open(options.type, options.url, options.async, options.username, options.password);

							// Apply custom fields if provided
							if (options.xhrFields) {
								for (i in options.xhrFields) {
									xhr[i] = options.xhrFields[i];
								}
							}

							// Override mime type if needed
							if (options.mimeType && xhr.overrideMimeType) {
								xhr.overrideMimeType(options.mimeType);
							}

							// X-Requested-With header
							// For cross-domain requests, seeing as conditions for a preflight are
							// akin to a jigsaw puzzle, we simply never set it to be sure.
							// (it can always be set on a per-request basis or even using ajaxSetup)
							// For same-domain requests, won't change header if already provided.
							if (!options.crossDomain && !headers["X-Requested-With"]) {
								headers["X-Requested-With"] = "XMLHttpRequest";
							}

							// Set headers
							for (i in headers) {
								// Support: IE<9
								// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
								// request header to a null-value.
								//
								// To keep consistent with other XHR implementations, cast the value
								// to string and ignore `undefined`.
								if (headers[i] !== undefined) {
									xhr.setRequestHeader(i, headers[i] + "");
								}
							}

							// Do send the request
							// This may raise an exception which is actually
							// handled in jQuery.ajax (so no try/catch here)
							xhr.send(options.hasContent && options.data || null);

							// Listener
							callback = function (_, isAbort) {
								var status, statusText, responses;

								// Was never called and is aborted or complete
								if (callback && (isAbort || xhr.readyState === 4)) {
									// Clean up
									delete xhrCallbacks[id];
									callback = undefined;
									xhr.onreadystatechange = jQuery.noop;

									// Abort manually if needed
									if (isAbort) {
										if (xhr.readyState !== 4) {
											xhr.abort();
										}
									} else {
										responses = {};
										status = xhr.status;

										// Support: IE<10
										// Accessing binary-data responseText throws an exception
										// (#11426)
										if (typeof xhr.responseText === "string") {
											responses.text = xhr.responseText;
										}

										// Firefox throws an exception when accessing
										// statusText for faulty cross-domain requests
										try {
											statusText = xhr.statusText;
										} catch (e) {
											// We normalize with Webkit giving an empty statusText
											statusText = "";
										}

										// Filter status for non standard behaviors

										// If the request is local and we have data: assume a success
										// (success with no data won't get notified, that's the best we
										// can do given current implementations)
										if (!status && options.isLocal && !options.crossDomain) {
											status = responses.text ? 200 : 404;
											// IE - #1450: sometimes returns 1223 when it should be 204
										} else if (status === 1223) {
												status = 204;
											}
									}
								}

								// Call complete if needed
								if (responses) {
									complete(status, statusText, responses, xhr.getAllResponseHeaders());
								}
							};

							if (!options.async) {
								// if we're in sync mode we fire the callback
								callback();
							} else if (xhr.readyState === 4) {
								// (IE6 & IE7) if it's in cache and has been
								// retrieved directly we need to fire the callback
								setTimeout(callback);
							} else {
								// Add to the list of active xhr callbacks
								xhr.onreadystatechange = xhrCallbacks[id] = callback;
							}
						},

						abort: function abort() {
							if (callback) {
								callback(undefined, true);
							}
						}
					};
				}
			});
		}

		// Functions to create xhrs
		function createStandardXHR() {
			try {
				return new window.XMLHttpRequest();
			} catch (e) {}
		}

		function createActiveXHR() {
			try {
				return new window.ActiveXObject("Microsoft.XMLHTTP");
			} catch (e) {}
		}

		// Install script dataType
		jQuery.ajaxSetup({
			accepts: {
				script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
			},
			contents: {
				script: /(?:java|ecma)script/
			},
			converters: {
				"text script": function textScript(text) {
					jQuery.globalEval(text);
					return text;
				}
			}
		});

		// Handle cache's special case and global
		jQuery.ajaxPrefilter("script", function (s) {
			if (s.cache === undefined) {
				s.cache = false;
			}
			if (s.crossDomain) {
				s.type = "GET";
				s.global = false;
			}
		});

		// Bind script tag hack transport
		jQuery.ajaxTransport("script", function (s) {

			// This transport only deals with cross domain requests
			if (s.crossDomain) {

				var script,
				    head = document.head || jQuery("head")[0] || document.documentElement;

				return {

					send: function send(_, callback) {

						script = document.createElement("script");

						script.async = true;

						if (s.scriptCharset) {
							script.charset = s.scriptCharset;
						}

						script.src = s.url;

						// Attach handlers for all browsers
						script.onload = script.onreadystatechange = function (_, isAbort) {

							if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

								// Handle memory leak in IE
								script.onload = script.onreadystatechange = null;

								// Remove the script
								if (script.parentNode) {
									script.parentNode.removeChild(script);
								}

								// Dereference the script
								script = null;

								// Callback if not abort
								if (!isAbort) {
									callback(200, "success");
								}
							}
						};

						// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
						// Use native DOM manipulation to avoid our domManip AJAX trickery
						head.insertBefore(script, head.firstChild);
					},

					abort: function abort() {
						if (script) {
							script.onload(undefined, true);
						}
					}
				};
			}
		});

		var oldCallbacks = [],
		    rjsonp = /(=)\?(?=&|$)|\?\?/;

		// Default jsonp settings
		jQuery.ajaxSetup({
			jsonp: "callback",
			jsonpCallback: function jsonpCallback() {
				var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
				this[callback] = true;
				return callback;
			}
		});

		// Detect, normalize options and install callbacks for jsonp requests
		jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

			var callbackName,
			    overwritten,
			    responseContainer,
			    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");

			// Handle iff the expected data type is "jsonp" or we have a parameter to set
			if (jsonProp || s.dataTypes[0] === "jsonp") {

				// Get callback name, remembering preexisting value associated with it
				callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

				// Insert callback into url or form data
				if (jsonProp) {
					s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
				} else if (s.jsonp !== false) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
				}

				// Use data converter to retrieve json after script execution
				s.converters["script json"] = function () {
					if (!responseContainer) {
						jQuery.error(callbackName + " was not called");
					}
					return responseContainer[0];
				};

				// force json dataType
				s.dataTypes[0] = "json";

				// Install callback
				overwritten = window[callbackName];
				window[callbackName] = function () {
					responseContainer = arguments;
				};

				// Clean-up function (fires after converters)
				jqXHR.always(function () {
					// Restore preexisting value
					window[callbackName] = overwritten;

					// Save back as free
					if (s[callbackName]) {
						// make sure that re-using the options doesn't screw things around
						s.jsonpCallback = originalSettings.jsonpCallback;

						// save the callback name for future use
						oldCallbacks.push(callbackName);
					}

					// Call if it was a function and we have a response
					if (responseContainer && jQuery.isFunction(overwritten)) {
						overwritten(responseContainer[0]);
					}

					responseContainer = overwritten = undefined;
				});

				// Delegate to script
				return "script";
			}
		});

		// data: string of html
		// context (optional): If specified, the fragment will be created in this context, defaults to document
		// keepScripts (optional): If true, will include scripts passed in the html string
		jQuery.parseHTML = function (data, context, keepScripts) {
			if (!data || typeof data !== "string") {
				return null;
			}
			if (typeof context === "boolean") {
				keepScripts = context;
				context = false;
			}
			context = context || document;

			var parsed = rsingleTag.exec(data),
			    scripts = !keepScripts && [];

			// Single tag
			if (parsed) {
				return [context.createElement(parsed[1])];
			}

			parsed = jQuery.buildFragment([data], context, scripts);

			if (scripts && scripts.length) {
				jQuery(scripts).remove();
			}

			return jQuery.merge([], parsed.childNodes);
		};

		// Keep a copy of the old load method
		var _load = jQuery.fn.load;

		/**
	  * Load a url into a page
	  */
		jQuery.fn.load = function (url, params, callback) {
			if (typeof url !== "string" && _load) {
				return _load.apply(this, arguments);
			}

			var selector,
			    response,
			    type,
			    self = this,
			    off = url.indexOf(" ");

			if (off >= 0) {
				selector = jQuery.trim(url.slice(off, url.length));
				url = url.slice(0, off);
			}

			// If it's a function
			if (jQuery.isFunction(params)) {

				// We assume that it's the callback
				callback = params;
				params = undefined;

				// Otherwise, build a param string
			} else if (params && typeof params === "object") {
					type = "POST";
				}

			// If we have elements to modify, make the request
			if (self.length > 0) {
				jQuery.ajax({
					url: url,

					// if "type" variable is undefined, then "GET" method will be used
					type: type,
					dataType: "html",
					data: params
				}).done(function (responseText) {

					// Save response for use in complete callback
					response = arguments;

					self.html(selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

					// Otherwise use the full result
					responseText);
				}).complete(callback && function (jqXHR, status) {
					self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
				});
			}

			return this;
		};

		// Attach a bunch of functions for handling common AJAX events
		jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
			jQuery.fn[type] = function (fn) {
				return this.on(type, fn);
			};
		});

		jQuery.expr.filters.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};

		var docElem = window.document.documentElement;

		/**
	  * Gets a window from an element
	  */
		function getWindow(elem) {
			return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
		}

		jQuery.offset = {
			setOffset: function setOffset(elem, options, i) {
				var curPosition,
				    curLeft,
				    curCSSTop,
				    curTop,
				    curOffset,
				    curCSSLeft,
				    calculatePosition,
				    position = jQuery.css(elem, "position"),
				    curElem = jQuery(elem),
				    props = {};

				// set position first, in-case top/left are set even on static elem
				if (position === "static") {
					elem.style.position = "relative";
				}

				curOffset = curElem.offset();
				curCSSTop = jQuery.css(elem, "top");
				curCSSLeft = jQuery.css(elem, "left");
				calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1;

				// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
				if (calculatePosition) {
					curPosition = curElem.position();
					curTop = curPosition.top;
					curLeft = curPosition.left;
				} else {
					curTop = parseFloat(curCSSTop) || 0;
					curLeft = parseFloat(curCSSLeft) || 0;
				}

				if (jQuery.isFunction(options)) {
					options = options.call(elem, i, curOffset);
				}

				if (options.top != null) {
					props.top = options.top - curOffset.top + curTop;
				}
				if (options.left != null) {
					props.left = options.left - curOffset.left + curLeft;
				}

				if ("using" in options) {
					options.using.call(elem, props);
				} else {
					curElem.css(props);
				}
			}
		};

		jQuery.fn.extend({
			offset: function offset(options) {
				if (arguments.length) {
					return options === undefined ? this : this.each(function (i) {
						jQuery.offset.setOffset(this, options, i);
					});
				}

				var docElem,
				    win,
				    box = { top: 0, left: 0 },
				    elem = this[0],
				    doc = elem && elem.ownerDocument;

				if (!doc) {
					return;
				}

				docElem = doc.documentElement;

				// Make sure it's not a disconnected DOM node
				if (!jQuery.contains(docElem, elem)) {
					return box;
				}

				// If we don't have gBCR, just use 0,0 rather than error
				// BlackBerry 5, iOS 3 (original iPhone)
				if (typeof elem.getBoundingClientRect !== strundefined) {
					box = elem.getBoundingClientRect();
				}
				win = getWindow(doc);
				return {
					top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
					left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
				};
			},

			position: function position() {
				if (!this[0]) {
					return;
				}

				var offsetParent,
				    offset,
				    parentOffset = { top: 0, left: 0 },
				    elem = this[0];

				// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
				if (jQuery.css(elem, "position") === "fixed") {
					// we assume that getBoundingClientRect is available when computed position is fixed
					offset = elem.getBoundingClientRect();
				} else {
					// Get *real* offsetParent
					offsetParent = this.offsetParent();

					// Get correct offsets
					offset = this.offset();
					if (!jQuery.nodeName(offsetParent[0], "html")) {
						parentOffset = offsetParent.offset();
					}

					// Add offsetParent borders
					parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
					parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
				}

				// Subtract parent offsets and element margins
				// note: when an element has margin: auto the offsetLeft and marginLeft
				// are the same in Safari causing offset.left to incorrectly be 0
				return {
					top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
					left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
				};
			},

			offsetParent: function offsetParent() {
				return this.map(function () {
					var offsetParent = this.offsetParent || docElem;

					while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
						offsetParent = offsetParent.offsetParent;
					}
					return offsetParent || docElem;
				});
			}
		});

		// Create scrollLeft and scrollTop methods
		jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
			var top = /Y/.test(prop);

			jQuery.fn[method] = function (val) {
				return access(this, function (elem, method, val) {
					var win = getWindow(elem);

					if (val === undefined) {
						return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
					}

					if (win) {
						win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
					} else {
						elem[method] = val;
					}
				}, method, val, arguments.length, null);
			};
		});

		// Add the top/left cssHooks using jQuery.fn.position
		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
		// getComputedStyle returns percent when specified for top/left/bottom/right
		// rather than make the css module depend on the offset module, we just check for it here
		jQuery.each(["top", "left"], function (i, prop) {
			jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
				if (computed) {
					computed = curCSS(elem, prop);
					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
				}
			});
		});

		// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
		jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
			jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
				// margin is only for outerHeight, outerWidth
				jQuery.fn[funcName] = function (margin, value) {
					var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
					    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

					return access(this, function (elem, type, value) {
						var doc;

						if (jQuery.isWindow(elem)) {
							// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
							// isn't a whole lot we can do. See pull request at this URL for discussion:
							// https://github.com/jquery/jquery/pull/764
							return elem.document.documentElement["client" + name];
						}

						// Get document width or height
						if (elem.nodeType === 9) {
							doc = elem.documentElement;

							// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
							// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
							return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
						}

						return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css(elem, type, extra) :

						// Set width or height on the element
						jQuery.style(elem, type, value, extra);
					}, type, chainable ? margin : undefined, chainable, null);
				};
			});
		});

		// The number of elements contained in the matched element set
		jQuery.fn.size = function () {
			return this.length;
		};

		jQuery.fn.andSelf = jQuery.fn.addBack;

		// Register as a named AMD module, since jQuery can be concatenated with other
		// files that may use define, but not via a proper concatenation script that
		// understands anonymous AMD modules. A named AMD is safest and most robust
		// way to register. Lowercase jquery is used because AMD module names are
		// derived from file names, and jQuery is normally delivered in a lowercase
		// file name. Do this after creating the global so that if an AMD module wants
		// to call noConflict to hide this version of jQuery, it will work.

		// Note that for maximum portability, libraries that are not jQuery should
		// declare themselves as anonymous modules, and avoid setting a global if an
		// AMD loader is present. jQuery is a special case. For more information, see
		// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return jQuery;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}

		var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
		   

		// Map over the $ in case of overwrite
		_$ = window.$;

		jQuery.noConflict = function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$;
			}

			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery;
			}

			return jQuery;
		};

		// Expose jQuery and $ identifiers, even in
		// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
		// and CommonJS for browser emulators (#13566)
		if (typeof noGlobal === strundefined) {
			window.jQuery = window.$ = jQuery;
		}

		return jQuery;
	});
	// Otherwise append directly

/***/ },

/***/ 130:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* ====================================================================
	 * eldarion-ajax.min.js v0.14.0
	 * eldarion-ajax-core v0.12.0
	 * eldarion-ajax-handlers v0.1.2
	 * ====================================================================
	 * Copyright (c) 2015, Eldarion, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *
	 *     * Redistributions of source code must retain the above copyright notice,
	 *       this list of conditions and the following disclaimer.
	 *
	 *     * Redistributions in binary form must reproduce the above copyright notice,
	 *       this list of conditions and the following disclaimer in the documentation
	 *       and/or other materials provided with the distribution.
	 *
	 *     * Neither the name of Eldarion, Inc. nor the names of its contributors may
	 *       be used to endorse or promote products derived from this software without
	 *       specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
	 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
	 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 * ==================================================================== */
	"use strict";

	if (document.all && !window.setTimeout.isPolyfill) {
	  var __nativeST__ = window.setTimeout;window.setTimeout = function (e, t) {
	    var o = Array.prototype.slice.call(arguments, 2);return __nativeST__(e instanceof Function ? function () {
	      e.apply(null, o);
	    } : e, t);
	  }, window.setTimeout.isPolyfill = !0;
	}if (document.all && !window.setInterval.isPolyfill) {
	  var __nativeSI__ = window.setInterval;window.setInterval = function (e, t) {
	    var o = Array.prototype.slice.call(arguments, 2);return __nativeSI__(e instanceof Function ? function () {
	      e.apply(null, o);
	    } : e, t);
	  }, window.setInterval.isPolyfill = !0;
	}!(function (e, t) {
	  "use strict"; true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(112)], __WEBPACK_AMD_DEFINE_FACTORY__ = (t), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : t("object" == typeof exports ? require("jquery") : e.jQuery);
	})(undefined, function (e) {
	  "use strict";var t = function t() {};t.prototype._ajax = function (t, o, a, n) {
	    t.trigger("eldarion-ajax:begin", [t]);var r = t.triggerHandler("eldarion-ajax:modify-data", n),
	        c = "application/x-www-form-urlencoded; charset=UTF-8",
	        i = !0,
	        p = !0,
	        s = "object" == typeof n;r && (n = r), s && (c = !1, i = !1, p = !1), e.ajax({ url: o, type: a, dataType: "json", data: n, cache: p, processData: i, contentType: c, headers: { "X-Eldarion-Ajax": !0 }, statusCode: { 200: function _(e) {
	          e || (e = {}), t.trigger("eldarion-ajax:success", [t, e]);
	        }, 500: function _() {
	          t.trigger("eldarion-ajax:error", [t, 500]);
	        }, 400: function _() {
	          t.trigger("eldarion-ajax:error", [t, 400]);
	        }, 403: function _() {
	          t.trigger("eldarion-ajax:error", [t, 403]);
	        }, 404: function _() {
	          t.trigger("eldarion-ajax:error", [t, 404]);
	        } }, complete: function complete(o, a) {
	        e(document).trigger("eldarion-ajax:complete", [t, o, a]);
	      } });
	  }, t.prototype.click = function (o) {
	    var a = e(this),
	        n = a.attr("href"),
	        r = a.data("method"),
	        c = a.data("data"),
	        i = null,
	        p = null;r || (r = "get"), c && (i = {}, c.split(",").map(function (t) {
	      p = t.split(":"), i[p[0]] = 0 === p[1].indexOf("#") ? e(p[1]).val() : p[1];
	    })), o.preventDefault(), t.prototype._ajax(a, n, r, i);
	  }, t.prototype.submit = function (o) {
	    var a = e(this),
	        n = a.attr("action"),
	        r = a.attr("method");o.preventDefault(), void 0 === window.FormData ? t.prototype._ajax(a, n, r, a.serialize()) : t.prototype._ajax(a, n, r, new FormData(a[0]));
	  }, t.prototype.cancel = function (t) {
	    var o = e(this),
	        a = o.attr("data-cancel-closest");t.preventDefault(), o.closest(a).remove();
	  }, t.prototype.timeout = function (o, a) {
	    var n = e(a),
	        r = n.data("timeout"),
	        c = n.data("url"),
	        i = n.data("method");i || (i = "get"), window.setTimeout(t.prototype._ajax, r, n, c, i, null);
	  }, t.prototype.interval = function (o, a) {
	    var n = e(a),
	        r = n.data("interval"),
	        c = n.data("url"),
	        i = n.data("method");i || (i = "get"), window.setInterval(t.prototype._ajax, r, n, c, i, null);
	  }, e(function () {
	    e("body").on("click", "a.ajax", t.prototype.click), e("body").on("submit", "form.ajax", t.prototype.submit), e("body").on("click", "a[data-cancel-closest]", t.prototype.cancel), e("[data-timeout]").each(t.prototype.timeout), e("[data-interval]").each(t.prototype.interval);
	  });
	}), (function (e, t) {
	  "use strict"; true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(112)], __WEBPACK_AMD_DEFINE_FACTORY__ = (t), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : t("object" == typeof exports ? require("jquery") : e.jQuery);
	})(undefined, function (e) {
	  "use strict";var t = function t() {};t.prototype.redirect = function (e, t, o) {
	    return o.location ? (window.location.href = o.location, !1) : void 0;
	  }, t.prototype.replace = function (t, o, a) {
	    e(o.data("replace")).replaceWith(a.html);
	  }, t.prototype.replaceClosest = function (e, t, o) {
	    t.closest(t.data("replace-closest")).replaceWith(o.html);
	  }, t.prototype.replaceInner = function (t, o, a) {
	    e(o.data("replace-inner")).html(a.html);
	  }, t.prototype.replaceClosestInner = function (e, t, o) {
	    t.closest(t.data("replace-closest-inner")).html(o.html);
	  }, t.prototype.append = function (t, o, a) {
	    e(o.data("append")).append(a.html);
	  }, t.prototype.prepend = function (t, o, a) {
	    e(o.data("prepend")).prepend(a.html);
	  }, t.prototype.refresh = function (t, o) {
	    e.each(e(o.data("refresh")), function (t, o) {
	      e.getJSON(e(o).data("refresh-url"), function (t) {
	        e(o).replaceWith(t.html);
	      });
	    });
	  }, t.prototype.refreshClosest = function (t, o) {
	    e.each(e(o.data("refresh-closest")), function (t, a) {
	      e.getJSON(e(a).data("refresh-url"), function (t) {
	        o.closest(e(a)).replaceWith(t.html);
	      });
	    });
	  }, t.prototype.clear = function (t, o) {
	    e(o.data("clear")).html("");
	  }, t.prototype.remove = function (t, o) {
	    e(o.data("remove")).remove();
	  }, t.prototype.clearClosest = function (e, t) {
	    t.closest(t.data("clear-closest")).html("");
	  }, t.prototype.removeClosest = function (e, t) {
	    t.closest(t.data("remove-closest")).remove();
	  }, t.prototype.fragments = function (t, o, a) {
	    a.fragments && e.each(a.fragments, function (t, o) {
	      e(t).replaceWith(o);
	    }), a["inner-fragments"] && e.each(a["inner-fragments"], function (t, o) {
	      e(t).html(o);
	    }), a["append-fragments"] && e.each(a["append-fragments"], function (t, o) {
	      e(t).append(o);
	    }), a["prepend-fragments"] && e.each(a["prepend-fragments"], function (t, o) {
	      e(t).prepend(o);
	    });
	  }, e(function () {
	    e(document).on("eldarion-ajax:success", t.prototype.redirect), e(document).on("eldarion-ajax:success", t.prototype.fragments), e(document).on("eldarion-ajax:success", "[data-replace]", t.prototype.replace), e(document).on("eldarion-ajax:success", "[data-replace-closest]", t.prototype.replaceClosest), e(document).on("eldarion-ajax:success", "[data-replace-inner]", t.prototype.replaceInner), e(document).on("eldarion-ajax:success", "[data-replace-closest-inner]", t.prototype.replaceClosestInner), e(document).on("eldarion-ajax:success", "[data-append]", t.prototype.append), e(document).on("eldarion-ajax:success", "[data-prepend]", t.prototype.prepend), e(document).on("eldarion-ajax:success", "[data-refresh]", t.prototype.refresh), e(document).on("eldarion-ajax:success", "[data-refresh-closest]", t.prototype.refreshClosest), e(document).on("eldarion-ajax:success", "[data-clear]", t.prototype.clear), e(document).on("eldarion-ajax:success", "[data-remove]", t.prototype.remove), e(document).on("eldarion-ajax:success", "[data-clear-closest]", t.prototype.clearClosest), e(document).on("eldarion-ajax:success", "[data-remove-closest]", t.prototype.removeClosest);
	  });
	});

/***/ },

/***/ 131:
/***/ function(module, exports, __webpack_require__) {

	var require;var require;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * Select2 4.0.0
	 * https://select2.github.io
	 *
	 * Released under the MIT license
	 * https://github.com/select2/select2/blob/master/LICENSE.md
	 */
	'use strict';

	(function (factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(112)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node/CommonJS
	    factory(require('jquery'));
	  } else {
	    // Browser globals
	    factory(jQuery);
	  }
	})(function (jQuery) {
	  // This is needed so we can catch the AMD loader configuration and use it
	  // The inner file should be wrapped (by `banner.start.js`) in a function that
	  // returns the AMD loader references.
	  var S2 = (function () {
	    // Restore the Select2 AMD loader so it can be used
	    // Needed mostly in the language files, where the loader is not inserted
	    if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
	      var S2 = jQuery.fn.select2.amd;
	    }
	    var S2;(function () {
	      if (!S2 || !S2.requirejs) {
	        if (!S2) {
	          S2 = {};
	        } else {
	          require = S2;
	        }
	        /**
	         * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
	         * Available via the MIT or new BSD license.
	         * see: http://github.com/jrburke/almond for details
	         */
	        //Going sloppy to avoid 'use strict' string cost, but strict practices should
	        //be followed.
	        /*jslint sloppy: true */
	        /*global setTimeout: false */

	        var requirejs, require, define;
	        (function (undef) {
	          var main,
	              req,
	              makeMap,
	              handlers,
	              defined = {},
	              waiting = {},
	              config = {},
	              defining = {},
	              hasOwn = Object.prototype.hasOwnProperty,
	              aps = [].slice,
	              jsSuffixRegExp = /\.js$/;

	          function hasProp(obj, prop) {
	            return hasOwn.call(obj, prop);
	          }

	          /**
	           * Given a relative module name, like ./something, normalize it to
	           * a real name that can be mapped to a path.
	           * @param {String} name the relative name
	           * @param {String} baseName a real name that the name arg is relative
	           * to.
	           * @returns {String} normalized name
	           */
	          function normalize(name, baseName) {
	            var nameParts,
	                nameSegment,
	                mapValue,
	                foundMap,
	                lastIndex,
	                foundI,
	                foundStarMap,
	                starI,
	                i,
	                j,
	                part,
	                baseParts = baseName && baseName.split("/"),
	                map = config.map,
	                starMap = map && map['*'] || {};

	            //Adjust any relative paths.
	            if (name && name.charAt(0) === ".") {
	              //If have a base name, try to normalize against it,
	              //otherwise, assume it is a top-level require that will
	              //be relative to baseUrl in the end.
	              if (baseName) {
	                //Convert baseName to array, and lop off the last part,
	                //so that . matches that "directory" and not name of the baseName's
	                //module. For instance, baseName of "one/two/three", maps to
	                //"one/two/three.js", but we want the directory, "one/two" for
	                //this normalization.
	                baseParts = baseParts.slice(0, baseParts.length - 1);
	                name = name.split('/');
	                lastIndex = name.length - 1;

	                // Node .js allowance:
	                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                  name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                }

	                name = baseParts.concat(name);

	                //start trimDots
	                for (i = 0; i < name.length; i += 1) {
	                  part = name[i];
	                  if (part === ".") {
	                    name.splice(i, 1);
	                    i -= 1;
	                  } else if (part === "..") {
	                    if (i === 1 && (name[2] === '..' || name[0] === '..')) {
	                      //End of the line. Keep at least one non-dot
	                      //path segment at the front so it can be mapped
	                      //correctly to disk. Otherwise, there is likely
	                      //no path mapping for a path starting with '..'.
	                      //This can still fail, but catches the most reasonable
	                      //uses of ..
	                      break;
	                    } else if (i > 0) {
	                      name.splice(i - 1, 2);
	                      i -= 2;
	                    }
	                  }
	                }
	                //end trimDots

	                name = name.join("/");
	              } else if (name.indexOf('./') === 0) {
	                // No baseName, so this is ID is resolved relative
	                // to baseUrl, pull off the leading dot.
	                name = name.substring(2);
	              }
	            }

	            //Apply map config if available.
	            if ((baseParts || starMap) && map) {
	              nameParts = name.split('/');

	              for (i = nameParts.length; i > 0; i -= 1) {
	                nameSegment = nameParts.slice(0, i).join("/");

	                if (baseParts) {
	                  //Find the longest baseName segment match in the config.
	                  //So, do joins on the biggest to smallest lengths of baseParts.
	                  for (j = baseParts.length; j > 0; j -= 1) {
	                    mapValue = map[baseParts.slice(0, j).join('/')];

	                    //baseName segment has  config, find if it has one for
	                    //this name.
	                    if (mapValue) {
	                      mapValue = mapValue[nameSegment];
	                      if (mapValue) {
	                        //Match, update name to the new value.
	                        foundMap = mapValue;
	                        foundI = i;
	                        break;
	                      }
	                    }
	                  }
	                }

	                if (foundMap) {
	                  break;
	                }

	                //Check for a star map match, but just hold on to it,
	                //if there is a shorter segment match later in a matching
	                //config, then favor over this star map.
	                if (!foundStarMap && starMap && starMap[nameSegment]) {
	                  foundStarMap = starMap[nameSegment];
	                  starI = i;
	                }
	              }

	              if (!foundMap && foundStarMap) {
	                foundMap = foundStarMap;
	                foundI = starI;
	              }

	              if (foundMap) {
	                nameParts.splice(0, foundI, foundMap);
	                name = nameParts.join('/');
	              }
	            }

	            return name;
	          }

	          function makeRequire(relName, forceSync) {
	            return function () {
	              //A version of a require function that passes a moduleName
	              //value for items that may need to
	              //look up paths relative to the moduleName
	              return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
	            };
	          }

	          function makeNormalize(relName) {
	            return function (name) {
	              return normalize(name, relName);
	            };
	          }

	          function makeLoad(depName) {
	            return function (value) {
	              defined[depName] = value;
	            };
	          }

	          function callDep(name) {
	            if (hasProp(waiting, name)) {
	              var args = waiting[name];
	              delete waiting[name];
	              defining[name] = true;
	              main.apply(undef, args);
	            }

	            if (!hasProp(defined, name) && !hasProp(defining, name)) {
	              throw new Error('No ' + name);
	            }
	            return defined[name];
	          }

	          //Turns a plugin!resource to [plugin, resource]
	          //with the plugin being undefined if the name
	          //did not have a plugin prefix.
	          function splitPrefix(name) {
	            var prefix,
	                index = name ? name.indexOf('!') : -1;
	            if (index > -1) {
	              prefix = name.substring(0, index);
	              name = name.substring(index + 1, name.length);
	            }
	            return [prefix, name];
	          }

	          /**
	           * Makes a name map, normalizing the name, and using a plugin
	           * for normalization if necessary. Grabs a ref to plugin
	           * too, as an optimization.
	           */
	          makeMap = function (name, relName) {
	            var plugin,
	                parts = splitPrefix(name),
	                prefix = parts[0];

	            name = parts[1];

	            if (prefix) {
	              prefix = normalize(prefix, relName);
	              plugin = callDep(prefix);
	            }

	            //Normalize according
	            if (prefix) {
	              if (plugin && plugin.normalize) {
	                name = plugin.normalize(name, makeNormalize(relName));
	              } else {
	                name = normalize(name, relName);
	              }
	            } else {
	              name = normalize(name, relName);
	              parts = splitPrefix(name);
	              prefix = parts[0];
	              name = parts[1];
	              if (prefix) {
	                plugin = callDep(prefix);
	              }
	            }

	            //Using ridiculous property names for space reasons
	            return {
	              f: prefix ? prefix + '!' + name : name, //fullName
	              n: name,
	              pr: prefix,
	              p: plugin
	            };
	          };

	          function makeConfig(name) {
	            return function () {
	              return config && config.config && config.config[name] || {};
	            };
	          }

	          handlers = {
	            require: function require(name) {
	              return makeRequire(name);
	            },
	            exports: function exports(name) {
	              var e = defined[name];
	              if (typeof e !== 'undefined') {
	                return e;
	              } else {
	                return defined[name] = {};
	              }
	            },
	            module: function module(name) {
	              return {
	                id: name,
	                uri: '',
	                exports: defined[name],
	                config: makeConfig(name)
	              };
	            }
	          };

	          main = function (name, deps, callback, relName) {
	            var cjsModule,
	                depName,
	                ret,
	                map,
	                i,
	                args = [],
	                callbackType = typeof callback,
	                usingExports;

	            //Use name if no relName
	            relName = relName || name;

	            //Call the callback to define the module, if necessary.
	            if (callbackType === 'undefined' || callbackType === 'function') {
	              //Pull out the defined dependencies and pass the ordered
	              //values to the callback.
	              //Default to [require, exports, module] if no deps
	              deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
	              for (i = 0; i < deps.length; i += 1) {
	                map = makeMap(deps[i], relName);
	                depName = map.f;

	                //Fast path CommonJS standard dependencies.
	                if (depName === "require") {
	                  args[i] = handlers.require(name);
	                } else if (depName === "exports") {
	                  //CommonJS module spec 1.1
	                  args[i] = handlers.exports(name);
	                  usingExports = true;
	                } else if (depName === "module") {
	                  //CommonJS module spec 1.1
	                  cjsModule = args[i] = handlers.module(name);
	                } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {
	                  args[i] = callDep(depName);
	                } else if (map.p) {
	                  map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
	                  args[i] = defined[depName];
	                } else {
	                  throw new Error(name + ' missing ' + depName);
	                }
	              }

	              ret = callback ? callback.apply(defined[name], args) : undefined;

	              if (name) {
	                //If setting exports via "module" is in play,
	                //favor that over return value and exports. After that,
	                //favor a non-undefined return value over exports use.
	                if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {
	                  defined[name] = cjsModule.exports;
	                } else if (ret !== undef || !usingExports) {
	                  //Use the return value from the function.
	                  defined[name] = ret;
	                }
	              }
	            } else if (name) {
	              //May just be an object definition for the module. Only
	              //worry about defining if have a module name.
	              defined[name] = callback;
	            }
	          };

	          requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
	            if (typeof deps === "string") {
	              if (handlers[deps]) {
	                //callback in this case is really relName
	                return handlers[deps](callback);
	              }
	              //Just return the module wanted. In this scenario, the
	              //deps arg is the module name, and second arg (if passed)
	              //is just the relName.
	              //Normalize module name, if it contains . or ..
	              return callDep(makeMap(deps, callback).f);
	            } else if (!deps.splice) {
	              //deps is a config object, not an array.
	              config = deps;
	              if (config.deps) {
	                req(config.deps, config.callback);
	              }
	              if (!callback) {
	                return;
	              }

	              if (callback.splice) {
	                //callback is an array, which means it is a dependency list.
	                //Adjust args if there are dependencies
	                deps = callback;
	                callback = relName;
	                relName = null;
	              } else {
	                deps = undef;
	              }
	            }

	            //Support require(['a'])
	            callback = callback || function () {};

	            //If relName is a function, it is an errback handler,
	            //so remove it.
	            if (typeof relName === 'function') {
	              relName = forceSync;
	              forceSync = alt;
	            }

	            //Simulate async callback;
	            if (forceSync) {
	              main(undef, deps, callback, relName);
	            } else {
	              //Using a non-zero value because of concern for what old browsers
	              //do, and latest browsers "upgrade" to 4 if lower value is used:
	              //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
	              //If want a value immediately, use require('id') instead -- something
	              //that works in almond on the global level, but not guaranteed and
	              //unlikely to work in other AMD implementations.
	              setTimeout(function () {
	                main(undef, deps, callback, relName);
	              }, 4);
	            }

	            return req;
	          };

	          /**
	           * Just drops the config on the floor, but returns req in case
	           * the config return value is used.
	           */
	          req.config = function (cfg) {
	            return req(cfg);
	          };

	          /**
	           * Expose module registry for debugging and tooling
	           */
	          requirejs._defined = defined;

	          define = function (name, deps, callback) {

	            //This module may not have dependencies
	            if (!deps.splice) {
	              //deps is not an array, so probably means
	              //an object literal or factory function for
	              //the value. Adjust args.
	              callback = deps;
	              deps = [];
	            }

	            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
	              waiting[name] = [name, deps, callback];
	            }
	          };

	          define.amd = {
	            jQuery: true
	          };
	        })();

	        S2.requirejs = requirejs;S2.require = require;S2.define = define;
	      }
	    })();
	    S2.define("almond", function () {});

	    /* global jQuery:false, $:false */
	    S2.define('jquery', [], function () {
	      var _$ = jQuery || $;

	      if (_$ == null && console && console.error) {
	        console.error('Select2: An instance of jQuery or a jQuery-compatible library was not ' + 'found. Make sure that you are including jQuery before Select2 on your ' + 'web page.');
	      }

	      return _$;
	    });

	    S2.define('select2/utils', ['jquery'], function ($) {
	      var Utils = {};

	      Utils.Extend = function (ChildClass, SuperClass) {
	        var __hasProp = ({}).hasOwnProperty;

	        function BaseConstructor() {
	          this.constructor = ChildClass;
	        }

	        for (var key in SuperClass) {
	          if (__hasProp.call(SuperClass, key)) {
	            ChildClass[key] = SuperClass[key];
	          }
	        }

	        BaseConstructor.prototype = SuperClass.prototype;
	        ChildClass.prototype = new BaseConstructor();
	        ChildClass.__super__ = SuperClass.prototype;

	        return ChildClass;
	      };

	      function getMethods(theClass) {
	        var proto = theClass.prototype;

	        var methods = [];

	        for (var methodName in proto) {
	          var m = proto[methodName];

	          if (typeof m !== 'function') {
	            continue;
	          }

	          if (methodName === 'constructor') {
	            continue;
	          }

	          methods.push(methodName);
	        }

	        return methods;
	      }

	      Utils.Decorate = function (SuperClass, DecoratorClass) {
	        var decoratedMethods = getMethods(DecoratorClass);
	        var superMethods = getMethods(SuperClass);

	        function DecoratedClass() {
	          var unshift = Array.prototype.unshift;

	          var argCount = DecoratorClass.prototype.constructor.length;

	          var calledConstructor = SuperClass.prototype.constructor;

	          if (argCount > 0) {
	            unshift.call(arguments, SuperClass.prototype.constructor);

	            calledConstructor = DecoratorClass.prototype.constructor;
	          }

	          calledConstructor.apply(this, arguments);
	        }

	        DecoratorClass.displayName = SuperClass.displayName;

	        function ctr() {
	          this.constructor = DecoratedClass;
	        }

	        DecoratedClass.prototype = new ctr();

	        for (var m = 0; m < superMethods.length; m++) {
	          var superMethod = superMethods[m];

	          DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];
	        }

	        var calledMethod = function calledMethod(methodName) {
	          // Stub out the original method if it's not decorating an actual method
	          var originalMethod = function originalMethod() {};

	          if (methodName in DecoratedClass.prototype) {
	            originalMethod = DecoratedClass.prototype[methodName];
	          }

	          var decoratedMethod = DecoratorClass.prototype[methodName];

	          return function () {
	            var unshift = Array.prototype.unshift;

	            unshift.call(arguments, originalMethod);

	            return decoratedMethod.apply(this, arguments);
	          };
	        };

	        for (var d = 0; d < decoratedMethods.length; d++) {
	          var decoratedMethod = decoratedMethods[d];

	          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
	        }

	        return DecoratedClass;
	      };

	      var Observable = function Observable() {
	        this.listeners = {};
	      };

	      Observable.prototype.on = function (event, callback) {
	        this.listeners = this.listeners || {};

	        if (event in this.listeners) {
	          this.listeners[event].push(callback);
	        } else {
	          this.listeners[event] = [callback];
	        }
	      };

	      Observable.prototype.trigger = function (event) {
	        var slice = Array.prototype.slice;

	        this.listeners = this.listeners || {};

	        if (event in this.listeners) {
	          this.invoke(this.listeners[event], slice.call(arguments, 1));
	        }

	        if ('*' in this.listeners) {
	          this.invoke(this.listeners['*'], arguments);
	        }
	      };

	      Observable.prototype.invoke = function (listeners, params) {
	        for (var i = 0, len = listeners.length; i < len; i++) {
	          listeners[i].apply(this, params);
	        }
	      };

	      Utils.Observable = Observable;

	      Utils.generateChars = function (length) {
	        var chars = '';

	        for (var i = 0; i < length; i++) {
	          var randomChar = Math.floor(Math.random() * 36);
	          chars += randomChar.toString(36);
	        }

	        return chars;
	      };

	      Utils.bind = function (func, context) {
	        return function () {
	          func.apply(context, arguments);
	        };
	      };

	      Utils._convertData = function (data) {
	        for (var originalKey in data) {
	          var keys = originalKey.split('-');

	          var dataLevel = data;

	          if (keys.length === 1) {
	            continue;
	          }

	          for (var k = 0; k < keys.length; k++) {
	            var key = keys[k];

	            // Lowercase the first letter
	            // By default, dash-separated becomes camelCase
	            key = key.substring(0, 1).toLowerCase() + key.substring(1);

	            if (!(key in dataLevel)) {
	              dataLevel[key] = {};
	            }

	            if (k == keys.length - 1) {
	              dataLevel[key] = data[originalKey];
	            }

	            dataLevel = dataLevel[key];
	          }

	          delete data[originalKey];
	        }

	        return data;
	      };

	      Utils.hasScroll = function (index, el) {
	        // Adapted from the function created by @ShadowScripter
	        // and adapted by @BillBarry on the Stack Exchange Code Review website.
	        // The original code can be found at
	        // http://codereview.stackexchange.com/q/13338
	        // and was designed to be used with the Sizzle selector engine.

	        var $el = $(el);
	        var overflowX = el.style.overflowX;
	        var overflowY = el.style.overflowY;

	        //Check both x and y declarations
	        if (overflowX === overflowY && (overflowY === 'hidden' || overflowY === 'visible')) {
	          return false;
	        }

	        if (overflowX === 'scroll' || overflowY === 'scroll') {
	          return true;
	        }

	        return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;
	      };

	      Utils.escapeMarkup = function (markup) {
	        var replaceMap = {
	          '\\': '&#92;',
	          '&': '&amp;',
	          '<': '&lt;',
	          '>': '&gt;',
	          '"': '&quot;',
	          '\'': '&#39;',
	          '/': '&#47;'
	        };

	        // Do not try to escape the markup if it's not a string
	        if (typeof markup !== 'string') {
	          return markup;
	        }

	        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
	          return replaceMap[match];
	        });
	      };

	      // Append an array of jQuery nodes to a given element.
	      Utils.appendMany = function ($element, $nodes) {
	        // jQuery 1.7.x does not support $.fn.append() with an array
	        // Fall back to a jQuery object collection using $.fn.add()
	        if ($.fn.jquery.substr(0, 3) === '1.7') {
	          var $jqNodes = $();

	          $.map($nodes, function (node) {
	            $jqNodes = $jqNodes.add(node);
	          });

	          $nodes = $jqNodes;
	        }

	        $element.append($nodes);
	      };

	      return Utils;
	    });

	    S2.define('select2/results', ['jquery', './utils'], function ($, Utils) {
	      function Results($element, options, dataAdapter) {
	        this.$element = $element;
	        this.data = dataAdapter;
	        this.options = options;

	        Results.__super__.constructor.call(this);
	      }

	      Utils.Extend(Results, Utils.Observable);

	      Results.prototype.render = function () {
	        var $results = $('<ul class="select2-results__options" role="tree"></ul>');

	        if (this.options.get('multiple')) {
	          $results.attr('aria-multiselectable', 'true');
	        }

	        this.$results = $results;

	        return $results;
	      };

	      Results.prototype.clear = function () {
	        this.$results.empty();
	      };

	      Results.prototype.displayMessage = function (params) {
	        var escapeMarkup = this.options.get('escapeMarkup');

	        this.clear();
	        this.hideLoading();

	        var $message = $('<li role="treeitem" class="select2-results__option"></li>');

	        var message = this.options.get('translations').get(params.message);

	        $message.append(escapeMarkup(message(params.args)));

	        this.$results.append($message);
	      };

	      Results.prototype.append = function (data) {
	        this.hideLoading();

	        var $options = [];

	        if (data.results == null || data.results.length === 0) {
	          if (this.$results.children().length === 0) {
	            this.trigger('results:message', {
	              message: 'noResults'
	            });
	          }

	          return;
	        }

	        data.results = this.sort(data.results);

	        for (var d = 0; d < data.results.length; d++) {
	          var item = data.results[d];

	          var $option = this.option(item);

	          $options.push($option);
	        }

	        this.$results.append($options);
	      };

	      Results.prototype.position = function ($results, $dropdown) {
	        var $resultsContainer = $dropdown.find('.select2-results');
	        $resultsContainer.append($results);
	      };

	      Results.prototype.sort = function (data) {
	        var sorter = this.options.get('sorter');

	        return sorter(data);
	      };

	      Results.prototype.setClasses = function () {
	        var self = this;

	        this.data.current(function (selected) {
	          var selectedIds = $.map(selected, function (s) {
	            return s.id.toString();
	          });

	          var $options = self.$results.find('.select2-results__option[aria-selected]');

	          $options.each(function () {
	            var $option = $(this);

	            var item = $.data(this, 'data');

	            // id needs to be converted to a string when comparing
	            var id = '' + item.id;

	            if (item.element != null && item.element.selected || item.element == null && $.inArray(id, selectedIds) > -1) {
	              $option.attr('aria-selected', 'true');
	            } else {
	              $option.attr('aria-selected', 'false');
	            }
	          });

	          var $selected = $options.filter('[aria-selected=true]');

	          // Check if there are any selected options
	          if ($selected.length > 0) {
	            // If there are selected options, highlight the first
	            $selected.first().trigger('mouseenter');
	          } else {
	            // If there are no selected options, highlight the first option
	            // in the dropdown
	            $options.first().trigger('mouseenter');
	          }
	        });
	      };

	      Results.prototype.showLoading = function (params) {
	        this.hideLoading();

	        var loadingMore = this.options.get('translations').get('searching');

	        var loading = {
	          disabled: true,
	          loading: true,
	          text: loadingMore(params)
	        };
	        var $loading = this.option(loading);
	        $loading.className += ' loading-results';

	        this.$results.prepend($loading);
	      };

	      Results.prototype.hideLoading = function () {
	        this.$results.find('.loading-results').remove();
	      };

	      Results.prototype.option = function (data) {
	        var option = document.createElement('li');
	        option.className = 'select2-results__option';

	        var attrs = {
	          'role': 'treeitem',
	          'aria-selected': 'false'
	        };

	        if (data.disabled) {
	          delete attrs['aria-selected'];
	          attrs['aria-disabled'] = 'true';
	        }

	        if (data.id == null) {
	          delete attrs['aria-selected'];
	        }

	        if (data._resultId != null) {
	          option.id = data._resultId;
	        }

	        if (data.title) {
	          option.title = data.title;
	        }

	        if (data.children) {
	          attrs.role = 'group';
	          attrs['aria-label'] = data.text;
	          delete attrs['aria-selected'];
	        }

	        for (var attr in attrs) {
	          var val = attrs[attr];

	          option.setAttribute(attr, val);
	        }

	        if (data.children) {
	          var $option = $(option);

	          var label = document.createElement('strong');
	          label.className = 'select2-results__group';

	          var $label = $(label);
	          this.template(data, label);

	          var $children = [];

	          for (var c = 0; c < data.children.length; c++) {
	            var child = data.children[c];

	            var $child = this.option(child);

	            $children.push($child);
	          }

	          var $childrenContainer = $('<ul></ul>', {
	            'class': 'select2-results__options select2-results__options--nested'
	          });

	          $childrenContainer.append($children);

	          $option.append(label);
	          $option.append($childrenContainer);
	        } else {
	          this.template(data, option);
	        }

	        $.data(option, 'data', data);

	        return option;
	      };

	      Results.prototype.bind = function (container, $container) {
	        var self = this;

	        var id = container.id + '-results';

	        this.$results.attr('id', id);

	        container.on('results:all', function (params) {
	          self.clear();
	          self.append(params.data);

	          if (container.isOpen()) {
	            self.setClasses();
	          }
	        });

	        container.on('results:append', function (params) {
	          self.append(params.data);

	          if (container.isOpen()) {
	            self.setClasses();
	          }
	        });

	        container.on('query', function (params) {
	          self.showLoading(params);
	        });

	        container.on('select', function () {
	          if (!container.isOpen()) {
	            return;
	          }

	          self.setClasses();
	        });

	        container.on('unselect', function () {
	          if (!container.isOpen()) {
	            return;
	          }

	          self.setClasses();
	        });

	        container.on('open', function () {
	          // When the dropdown is open, aria-expended="true"
	          self.$results.attr('aria-expanded', 'true');
	          self.$results.attr('aria-hidden', 'false');

	          self.setClasses();
	          self.ensureHighlightVisible();
	        });

	        container.on('close', function () {
	          // When the dropdown is closed, aria-expended="false"
	          self.$results.attr('aria-expanded', 'false');
	          self.$results.attr('aria-hidden', 'true');
	          self.$results.removeAttr('aria-activedescendant');
	        });

	        container.on('results:toggle', function () {
	          var $highlighted = self.getHighlightedResults();

	          if ($highlighted.length === 0) {
	            return;
	          }

	          $highlighted.trigger('mouseup');
	        });

	        container.on('results:select', function () {
	          var $highlighted = self.getHighlightedResults();

	          if ($highlighted.length === 0) {
	            return;
	          }

	          var data = $highlighted.data('data');

	          if ($highlighted.attr('aria-selected') == 'true') {
	            self.trigger('close');
	          } else {
	            self.trigger('select', {
	              data: data
	            });
	          }
	        });

	        container.on('results:previous', function () {
	          var $highlighted = self.getHighlightedResults();

	          var $options = self.$results.find('[aria-selected]');

	          var currentIndex = $options.index($highlighted);

	          // If we are already at te top, don't move further
	          if (currentIndex === 0) {
	            return;
	          }

	          var nextIndex = currentIndex - 1;

	          // If none are highlighted, highlight the first
	          if ($highlighted.length === 0) {
	            nextIndex = 0;
	          }

	          var $next = $options.eq(nextIndex);

	          $next.trigger('mouseenter');

	          var currentOffset = self.$results.offset().top;
	          var nextTop = $next.offset().top;
	          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

	          if (nextIndex === 0) {
	            self.$results.scrollTop(0);
	          } else if (nextTop - currentOffset < 0) {
	            self.$results.scrollTop(nextOffset);
	          }
	        });

	        container.on('results:next', function () {
	          var $highlighted = self.getHighlightedResults();

	          var $options = self.$results.find('[aria-selected]');

	          var currentIndex = $options.index($highlighted);

	          var nextIndex = currentIndex + 1;

	          // If we are at the last option, stay there
	          if (nextIndex >= $options.length) {
	            return;
	          }

	          var $next = $options.eq(nextIndex);

	          $next.trigger('mouseenter');

	          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
	          var nextBottom = $next.offset().top + $next.outerHeight(false);
	          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

	          if (nextIndex === 0) {
	            self.$results.scrollTop(0);
	          } else if (nextBottom > currentOffset) {
	            self.$results.scrollTop(nextOffset);
	          }
	        });

	        container.on('results:focus', function (params) {
	          params.element.addClass('select2-results__option--highlighted');
	        });

	        container.on('results:message', function (params) {
	          self.displayMessage(params);
	        });

	        if ($.fn.mousewheel) {
	          this.$results.on('mousewheel', function (e) {
	            var top = self.$results.scrollTop();

	            var bottom = self.$results.get(0).scrollHeight - self.$results.scrollTop() + e.deltaY;

	            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
	            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

	            if (isAtTop) {
	              self.$results.scrollTop(0);

	              e.preventDefault();
	              e.stopPropagation();
	            } else if (isAtBottom) {
	              self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());

	              e.preventDefault();
	              e.stopPropagation();
	            }
	          });
	        }

	        this.$results.on('mouseup', '.select2-results__option[aria-selected]', function (evt) {
	          var $this = $(this);

	          var data = $this.data('data');

	          if ($this.attr('aria-selected') === 'true') {
	            if (self.options.get('multiple')) {
	              self.trigger('unselect', {
	                originalEvent: evt,
	                data: data
	              });
	            } else {
	              self.trigger('close');
	            }

	            return;
	          }

	          self.trigger('select', {
	            originalEvent: evt,
	            data: data
	          });
	        });

	        this.$results.on('mouseenter', '.select2-results__option[aria-selected]', function (evt) {
	          var data = $(this).data('data');

	          self.getHighlightedResults().removeClass('select2-results__option--highlighted');

	          self.trigger('results:focus', {
	            data: data,
	            element: $(this)
	          });
	        });
	      };

	      Results.prototype.getHighlightedResults = function () {
	        var $highlighted = this.$results.find('.select2-results__option--highlighted');

	        return $highlighted;
	      };

	      Results.prototype.destroy = function () {
	        this.$results.remove();
	      };

	      Results.prototype.ensureHighlightVisible = function () {
	        var $highlighted = this.getHighlightedResults();

	        if ($highlighted.length === 0) {
	          return;
	        }

	        var $options = this.$results.find('[aria-selected]');

	        var currentIndex = $options.index($highlighted);

	        var currentOffset = this.$results.offset().top;
	        var nextTop = $highlighted.offset().top;
	        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

	        var offsetDelta = nextTop - currentOffset;
	        nextOffset -= $highlighted.outerHeight(false) * 2;

	        if (currentIndex <= 2) {
	          this.$results.scrollTop(0);
	        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
	          this.$results.scrollTop(nextOffset);
	        }
	      };

	      Results.prototype.template = function (result, container) {
	        var template = this.options.get('templateResult');
	        var escapeMarkup = this.options.get('escapeMarkup');

	        var content = template(result);

	        if (content == null) {
	          container.style.display = 'none';
	        } else if (typeof content === 'string') {
	          container.innerHTML = escapeMarkup(content);
	        } else {
	          $(container).append(content);
	        }
	      };

	      return Results;
	    });

	    S2.define('select2/keys', [], function () {
	      var KEYS = {
	        BACKSPACE: 8,
	        TAB: 9,
	        ENTER: 13,
	        SHIFT: 16,
	        CTRL: 17,
	        ALT: 18,
	        ESC: 27,
	        SPACE: 32,
	        PAGE_UP: 33,
	        PAGE_DOWN: 34,
	        END: 35,
	        HOME: 36,
	        LEFT: 37,
	        UP: 38,
	        RIGHT: 39,
	        DOWN: 40,
	        DELETE: 46
	      };

	      return KEYS;
	    });

	    S2.define('select2/selection/base', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {
	      function BaseSelection($element, options) {
	        this.$element = $element;
	        this.options = options;

	        BaseSelection.__super__.constructor.call(this);
	      }

	      Utils.Extend(BaseSelection, Utils.Observable);

	      BaseSelection.prototype.render = function () {
	        var $selection = $('<span class="select2-selection" role="combobox" ' + 'aria-autocomplete="list" aria-haspopup="true" aria-expanded="false">' + '</span>');

	        this._tabindex = 0;

	        if (this.$element.data('old-tabindex') != null) {
	          this._tabindex = this.$element.data('old-tabindex');
	        } else if (this.$element.attr('tabindex') != null) {
	          this._tabindex = this.$element.attr('tabindex');
	        }

	        $selection.attr('title', this.$element.attr('title'));
	        $selection.attr('tabindex', this._tabindex);

	        this.$selection = $selection;

	        return $selection;
	      };

	      BaseSelection.prototype.bind = function (container, $container) {
	        var self = this;

	        var id = container.id + '-container';
	        var resultsId = container.id + '-results';

	        this.container = container;

	        this.$selection.on('focus', function (evt) {
	          self.trigger('focus', evt);
	        });

	        this.$selection.on('blur', function (evt) {
	          self.trigger('blur', evt);
	        });

	        this.$selection.on('keydown', function (evt) {
	          self.trigger('keypress', evt);

	          if (evt.which === KEYS.SPACE) {
	            evt.preventDefault();
	          }
	        });

	        container.on('results:focus', function (params) {
	          self.$selection.attr('aria-activedescendant', params.data._resultId);
	        });

	        container.on('selection:update', function (params) {
	          self.update(params.data);
	        });

	        container.on('open', function () {
	          // When the dropdown is open, aria-expanded="true"
	          self.$selection.attr('aria-expanded', 'true');
	          self.$selection.attr('aria-owns', resultsId);

	          self._attachCloseHandler(container);
	        });

	        container.on('close', function () {
	          // When the dropdown is closed, aria-expanded="false"
	          self.$selection.attr('aria-expanded', 'false');
	          self.$selection.removeAttr('aria-activedescendant');
	          self.$selection.removeAttr('aria-owns');

	          self.$selection.focus();

	          self._detachCloseHandler(container);
	        });

	        container.on('enable', function () {
	          self.$selection.attr('tabindex', self._tabindex);
	        });

	        container.on('disable', function () {
	          self.$selection.attr('tabindex', '-1');
	        });
	      };

	      BaseSelection.prototype._attachCloseHandler = function (container) {
	        var self = this;

	        $(document.body).on('mousedown.select2.' + container.id, function (e) {
	          var $target = $(e.target);

	          var $select = $target.closest('.select2');

	          var $all = $('.select2.select2-container--open');

	          $all.each(function () {
	            var $this = $(this);

	            if (this == $select[0]) {
	              return;
	            }

	            var $element = $this.data('element');

	            $element.select2('close');
	          });
	        });
	      };

	      BaseSelection.prototype._detachCloseHandler = function (container) {
	        $(document.body).off('mousedown.select2.' + container.id);
	      };

	      BaseSelection.prototype.position = function ($selection, $container) {
	        var $selectionContainer = $container.find('.selection');
	        $selectionContainer.append($selection);
	      };

	      BaseSelection.prototype.destroy = function () {
	        this._detachCloseHandler(this.container);
	      };

	      BaseSelection.prototype.update = function (data) {
	        throw new Error('The `update` method must be defined in child classes.');
	      };

	      return BaseSelection;
	    });

	    S2.define('select2/selection/single', ['jquery', './base', '../utils', '../keys'], function ($, BaseSelection, Utils, KEYS) {
	      function SingleSelection() {
	        SingleSelection.__super__.constructor.apply(this, arguments);
	      }

	      Utils.Extend(SingleSelection, BaseSelection);

	      SingleSelection.prototype.render = function () {
	        var $selection = SingleSelection.__super__.render.call(this);

	        $selection.addClass('select2-selection--single');

	        $selection.html('<span class="select2-selection__rendered"></span>' + '<span class="select2-selection__arrow" role="presentation">' + '<b role="presentation"></b>' + '</span>');

	        return $selection;
	      };

	      SingleSelection.prototype.bind = function (container, $container) {
	        var self = this;

	        SingleSelection.__super__.bind.apply(this, arguments);

	        var id = container.id + '-container';

	        this.$selection.find('.select2-selection__rendered').attr('id', id);
	        this.$selection.attr('aria-labelledby', id);

	        this.$selection.on('mousedown', function (evt) {
	          // Only respond to left clicks
	          if (evt.which !== 1) {
	            return;
	          }

	          self.trigger('toggle', {
	            originalEvent: evt
	          });
	        });

	        this.$selection.on('focus', function (evt) {
	          // User focuses on the container
	        });

	        this.$selection.on('blur', function (evt) {
	          // User exits the container
	        });

	        container.on('selection:update', function (params) {
	          self.update(params.data);
	        });
	      };

	      SingleSelection.prototype.clear = function () {
	        this.$selection.find('.select2-selection__rendered').empty();
	      };

	      SingleSelection.prototype.display = function (data) {
	        var template = this.options.get('templateSelection');
	        var escapeMarkup = this.options.get('escapeMarkup');

	        return escapeMarkup(template(data));
	      };

	      SingleSelection.prototype.selectionContainer = function () {
	        return $('<span></span>');
	      };

	      SingleSelection.prototype.update = function (data) {
	        if (data.length === 0) {
	          this.clear();
	          return;
	        }

	        var selection = data[0];

	        var formatted = this.display(selection);

	        var $rendered = this.$selection.find('.select2-selection__rendered');
	        $rendered.empty().append(formatted);
	        $rendered.prop('title', selection.title || selection.text);
	      };

	      return SingleSelection;
	    });

	    S2.define('select2/selection/multiple', ['jquery', './base', '../utils'], function ($, BaseSelection, Utils) {
	      function MultipleSelection($element, options) {
	        MultipleSelection.__super__.constructor.apply(this, arguments);
	      }

	      Utils.Extend(MultipleSelection, BaseSelection);

	      MultipleSelection.prototype.render = function () {
	        var $selection = MultipleSelection.__super__.render.call(this);

	        $selection.addClass('select2-selection--multiple');

	        $selection.html('<ul class="select2-selection__rendered"></ul>');

	        return $selection;
	      };

	      MultipleSelection.prototype.bind = function (container, $container) {
	        var self = this;

	        MultipleSelection.__super__.bind.apply(this, arguments);

	        this.$selection.on('click', function (evt) {
	          self.trigger('toggle', {
	            originalEvent: evt
	          });
	        });

	        this.$selection.on('click', '.select2-selection__choice__remove', function (evt) {
	          var $remove = $(this);
	          var $selection = $remove.parent();

	          var data = $selection.data('data');

	          self.trigger('unselect', {
	            originalEvent: evt,
	            data: data
	          });
	        });
	      };

	      MultipleSelection.prototype.clear = function () {
	        this.$selection.find('.select2-selection__rendered').empty();
	      };

	      MultipleSelection.prototype.display = function (data) {
	        var template = this.options.get('templateSelection');
	        var escapeMarkup = this.options.get('escapeMarkup');

	        return escapeMarkup(template(data));
	      };

	      MultipleSelection.prototype.selectionContainer = function () {
	        var $container = $('<li class="select2-selection__choice">' + '<span class="select2-selection__choice__remove" role="presentation">' + '&times;' + '</span>' + '</li>');

	        return $container;
	      };

	      MultipleSelection.prototype.update = function (data) {
	        this.clear();

	        if (data.length === 0) {
	          return;
	        }

	        var $selections = [];

	        for (var d = 0; d < data.length; d++) {
	          var selection = data[d];

	          var formatted = this.display(selection);
	          var $selection = this.selectionContainer();

	          $selection.append(formatted);
	          $selection.prop('title', selection.title || selection.text);

	          $selection.data('data', selection);

	          $selections.push($selection);
	        }

	        var $rendered = this.$selection.find('.select2-selection__rendered');

	        Utils.appendMany($rendered, $selections);
	      };

	      return MultipleSelection;
	    });

	    S2.define('select2/selection/placeholder', ['../utils'], function (Utils) {
	      function Placeholder(decorated, $element, options) {
	        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	        decorated.call(this, $element, options);
	      }

	      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
	        if (typeof placeholder === 'string') {
	          placeholder = {
	            id: '',
	            text: placeholder
	          };
	        }

	        return placeholder;
	      };

	      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
	        var $placeholder = this.selectionContainer();

	        $placeholder.html(this.display(placeholder));
	        $placeholder.addClass('select2-selection__placeholder').removeClass('select2-selection__choice');

	        return $placeholder;
	      };

	      Placeholder.prototype.update = function (decorated, data) {
	        var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;
	        var multipleSelections = data.length > 1;

	        if (multipleSelections || singlePlaceholder) {
	          return decorated.call(this, data);
	        }

	        this.clear();

	        var $placeholder = this.createPlaceholder(this.placeholder);

	        this.$selection.find('.select2-selection__rendered').append($placeholder);
	      };

	      return Placeholder;
	    });

	    S2.define('select2/selection/allowClear', ['jquery', '../keys'], function ($, KEYS) {
	      function AllowClear() {}

	      AllowClear.prototype.bind = function (decorated, container, $container) {
	        var self = this;

	        decorated.call(this, container, $container);

	        if (this.placeholder == null) {
	          if (this.options.get('debug') && window.console && console.error) {
	            console.error('Select2: The `allowClear` option should be used in combination ' + 'with the `placeholder` option.');
	          }
	        }

	        this.$selection.on('mousedown', '.select2-selection__clear', function (evt) {
	          self._handleClear(evt);
	        });

	        container.on('keypress', function (evt) {
	          self._handleKeyboardClear(evt, container);
	        });
	      };

	      AllowClear.prototype._handleClear = function (_, evt) {
	        // Ignore the event if it is disabled
	        if (this.options.get('disabled')) {
	          return;
	        }

	        var $clear = this.$selection.find('.select2-selection__clear');

	        // Ignore the event if nothing has been selected
	        if ($clear.length === 0) {
	          return;
	        }

	        evt.stopPropagation();

	        var data = $clear.data('data');

	        for (var d = 0; d < data.length; d++) {
	          var unselectData = {
	            data: data[d]
	          };

	          // Trigger the `unselect` event, so people can prevent it from being
	          // cleared.
	          this.trigger('unselect', unselectData);

	          // If the event was prevented, don't clear it out.
	          if (unselectData.prevented) {
	            return;
	          }
	        }

	        this.$element.val(this.placeholder.id).trigger('change');

	        this.trigger('toggle');
	      };

	      AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
	        if (container.isOpen()) {
	          return;
	        }

	        if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
	          this._handleClear(evt);
	        }
	      };

	      AllowClear.prototype.update = function (decorated, data) {
	        decorated.call(this, data);

	        if (this.$selection.find('.select2-selection__placeholder').length > 0 || data.length === 0) {
	          return;
	        }

	        var $remove = $('<span class="select2-selection__clear">' + '&times;' + '</span>');
	        $remove.data('data', data);

	        this.$selection.find('.select2-selection__rendered').prepend($remove);
	      };

	      return AllowClear;
	    });

	    S2.define('select2/selection/search', ['jquery', '../utils', '../keys'], function ($, Utils, KEYS) {
	      function Search(decorated, $element, options) {
	        decorated.call(this, $element, options);
	      }

	      Search.prototype.render = function (decorated) {
	        var $search = $('<li class="select2-search select2-search--inline">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="off"' + ' spellcheck="false" role="textbox" />' + '</li>');

	        this.$searchContainer = $search;
	        this.$search = $search.find('input');

	        var $rendered = decorated.call(this);

	        return $rendered;
	      };

	      Search.prototype.bind = function (decorated, container, $container) {
	        var self = this;

	        decorated.call(this, container, $container);

	        container.on('open', function () {
	          self.$search.attr('tabindex', 0);

	          self.$search.focus();
	        });

	        container.on('close', function () {
	          self.$search.attr('tabindex', -1);

	          self.$search.val('');
	          self.$search.focus();
	        });

	        container.on('enable', function () {
	          self.$search.prop('disabled', false);
	        });

	        container.on('disable', function () {
	          self.$search.prop('disabled', true);
	        });

	        this.$selection.on('focusin', '.select2-search--inline', function (evt) {
	          self.trigger('focus', evt);
	        });

	        this.$selection.on('focusout', '.select2-search--inline', function (evt) {
	          self.trigger('blur', evt);
	        });

	        this.$selection.on('keydown', '.select2-search--inline', function (evt) {
	          evt.stopPropagation();

	          self.trigger('keypress', evt);

	          self._keyUpPrevented = evt.isDefaultPrevented();

	          var key = evt.which;

	          if (key === KEYS.BACKSPACE && self.$search.val() === '') {
	            var $previousChoice = self.$searchContainer.prev('.select2-selection__choice');

	            if ($previousChoice.length > 0) {
	              var item = $previousChoice.data('data');

	              self.searchRemoveChoice(item);

	              evt.preventDefault();
	            }
	          }
	        });

	        // Workaround for browsers which do not support the `input` event
	        // This will prevent double-triggering of events for browsers which support
	        // both the `keyup` and `input` events.
	        this.$selection.on('input', '.select2-search--inline', function (evt) {
	          // Unbind the duplicated `keyup` event
	          self.$selection.off('keyup.search');
	        });

	        this.$selection.on('keyup.search input', '.select2-search--inline', function (evt) {
	          self.handleSearch(evt);
	        });
	      };

	      Search.prototype.createPlaceholder = function (decorated, placeholder) {
	        this.$search.attr('placeholder', placeholder.text);
	      };

	      Search.prototype.update = function (decorated, data) {
	        this.$search.attr('placeholder', '');

	        decorated.call(this, data);

	        this.$selection.find('.select2-selection__rendered').append(this.$searchContainer);

	        this.resizeSearch();
	      };

	      Search.prototype.handleSearch = function () {
	        this.resizeSearch();

	        if (!this._keyUpPrevented) {
	          var input = this.$search.val();

	          this.trigger('query', {
	            term: input
	          });
	        }

	        this._keyUpPrevented = false;
	      };

	      Search.prototype.searchRemoveChoice = function (decorated, item) {
	        this.trigger('unselect', {
	          data: item
	        });

	        this.trigger('open');

	        this.$search.val(item.text + ' ');
	      };

	      Search.prototype.resizeSearch = function () {
	        this.$search.css('width', '25px');

	        var width = '';

	        if (this.$search.attr('placeholder') !== '') {
	          width = this.$selection.find('.select2-selection__rendered').innerWidth();
	        } else {
	          var minimumWidth = this.$search.val().length + 1;

	          width = minimumWidth * 0.75 + 'em';
	        }

	        this.$search.css('width', width);
	      };

	      return Search;
	    });

	    S2.define('select2/selection/eventRelay', ['jquery'], function ($) {
	      function EventRelay() {}

	      EventRelay.prototype.bind = function (decorated, container, $container) {
	        var self = this;
	        var relayEvents = ['open', 'opening', 'close', 'closing', 'select', 'selecting', 'unselect', 'unselecting'];

	        var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

	        decorated.call(this, container, $container);

	        container.on('*', function (name, params) {
	          // Ignore events that should not be relayed
	          if ($.inArray(name, relayEvents) === -1) {
	            return;
	          }

	          // The parameters should always be an object
	          params = params || {};

	          // Generate the jQuery event for the Select2 event
	          var evt = $.Event('select2:' + name, {
	            params: params
	          });

	          self.$element.trigger(evt);

	          // Only handle preventable events if it was one
	          if ($.inArray(name, preventableEvents) === -1) {
	            return;
	          }

	          params.prevented = evt.isDefaultPrevented();
	        });
	      };

	      return EventRelay;
	    });

	    S2.define('select2/translation', ['jquery', 'require'], function ($, require) {
	      function Translation(dict) {
	        this.dict = dict || {};
	      }

	      Translation.prototype.all = function () {
	        return this.dict;
	      };

	      Translation.prototype.get = function (key) {
	        return this.dict[key];
	      };

	      Translation.prototype.extend = function (translation) {
	        this.dict = $.extend({}, translation.all(), this.dict);
	      };

	      // Static functions

	      Translation._cache = {};

	      Translation.loadPath = function (path) {
	        if (!(path in Translation._cache)) {
	          var translations = require(path);

	          Translation._cache[path] = translations;
	        }

	        return new Translation(Translation._cache[path]);
	      };

	      return Translation;
	    });

	    S2.define('select2/diacritics', [], function () {
	      var diacritics = {
	        'Ⓐ': 'A',
	        'Ａ': 'A',
	        'À': 'A',
	        'Á': 'A',
	        'Â': 'A',
	        'Ầ': 'A',
	        'Ấ': 'A',
	        'Ẫ': 'A',
	        'Ẩ': 'A',
	        'Ã': 'A',
	        'Ā': 'A',
	        'Ă': 'A',
	        'Ằ': 'A',
	        'Ắ': 'A',
	        'Ẵ': 'A',
	        'Ẳ': 'A',
	        'Ȧ': 'A',
	        'Ǡ': 'A',
	        'Ä': 'A',
	        'Ǟ': 'A',
	        'Ả': 'A',
	        'Å': 'A',
	        'Ǻ': 'A',
	        'Ǎ': 'A',
	        'Ȁ': 'A',
	        'Ȃ': 'A',
	        'Ạ': 'A',
	        'Ậ': 'A',
	        'Ặ': 'A',
	        'Ḁ': 'A',
	        'Ą': 'A',
	        'Ⱥ': 'A',
	        'Ɐ': 'A',
	        'Ꜳ': 'AA',
	        'Æ': 'AE',
	        'Ǽ': 'AE',
	        'Ǣ': 'AE',
	        'Ꜵ': 'AO',
	        'Ꜷ': 'AU',
	        'Ꜹ': 'AV',
	        'Ꜻ': 'AV',
	        'Ꜽ': 'AY',
	        'Ⓑ': 'B',
	        'Ｂ': 'B',
	        'Ḃ': 'B',
	        'Ḅ': 'B',
	        'Ḇ': 'B',
	        'Ƀ': 'B',
	        'Ƃ': 'B',
	        'Ɓ': 'B',
	        'Ⓒ': 'C',
	        'Ｃ': 'C',
	        'Ć': 'C',
	        'Ĉ': 'C',
	        'Ċ': 'C',
	        'Č': 'C',
	        'Ç': 'C',
	        'Ḉ': 'C',
	        'Ƈ': 'C',
	        'Ȼ': 'C',
	        'Ꜿ': 'C',
	        'Ⓓ': 'D',
	        'Ｄ': 'D',
	        'Ḋ': 'D',
	        'Ď': 'D',
	        'Ḍ': 'D',
	        'Ḑ': 'D',
	        'Ḓ': 'D',
	        'Ḏ': 'D',
	        'Đ': 'D',
	        'Ƌ': 'D',
	        'Ɗ': 'D',
	        'Ɖ': 'D',
	        'Ꝺ': 'D',
	        'Ǳ': 'DZ',
	        'Ǆ': 'DZ',
	        'ǲ': 'Dz',
	        'ǅ': 'Dz',
	        'Ⓔ': 'E',
	        'Ｅ': 'E',
	        'È': 'E',
	        'É': 'E',
	        'Ê': 'E',
	        'Ề': 'E',
	        'Ế': 'E',
	        'Ễ': 'E',
	        'Ể': 'E',
	        'Ẽ': 'E',
	        'Ē': 'E',
	        'Ḕ': 'E',
	        'Ḗ': 'E',
	        'Ĕ': 'E',
	        'Ė': 'E',
	        'Ë': 'E',
	        'Ẻ': 'E',
	        'Ě': 'E',
	        'Ȅ': 'E',
	        'Ȇ': 'E',
	        'Ẹ': 'E',
	        'Ệ': 'E',
	        'Ȩ': 'E',
	        'Ḝ': 'E',
	        'Ę': 'E',
	        'Ḙ': 'E',
	        'Ḛ': 'E',
	        'Ɛ': 'E',
	        'Ǝ': 'E',
	        'Ⓕ': 'F',
	        'Ｆ': 'F',
	        'Ḟ': 'F',
	        'Ƒ': 'F',
	        'Ꝼ': 'F',
	        'Ⓖ': 'G',
	        'Ｇ': 'G',
	        'Ǵ': 'G',
	        'Ĝ': 'G',
	        'Ḡ': 'G',
	        'Ğ': 'G',
	        'Ġ': 'G',
	        'Ǧ': 'G',
	        'Ģ': 'G',
	        'Ǥ': 'G',
	        'Ɠ': 'G',
	        'Ꞡ': 'G',
	        'Ᵹ': 'G',
	        'Ꝿ': 'G',
	        'Ⓗ': 'H',
	        'Ｈ': 'H',
	        'Ĥ': 'H',
	        'Ḣ': 'H',
	        'Ḧ': 'H',
	        'Ȟ': 'H',
	        'Ḥ': 'H',
	        'Ḩ': 'H',
	        'Ḫ': 'H',
	        'Ħ': 'H',
	        'Ⱨ': 'H',
	        'Ⱶ': 'H',
	        'Ɥ': 'H',
	        'Ⓘ': 'I',
	        'Ｉ': 'I',
	        'Ì': 'I',
	        'Í': 'I',
	        'Î': 'I',
	        'Ĩ': 'I',
	        'Ī': 'I',
	        'Ĭ': 'I',
	        'İ': 'I',
	        'Ï': 'I',
	        'Ḯ': 'I',
	        'Ỉ': 'I',
	        'Ǐ': 'I',
	        'Ȉ': 'I',
	        'Ȋ': 'I',
	        'Ị': 'I',
	        'Į': 'I',
	        'Ḭ': 'I',
	        'Ɨ': 'I',
	        'Ⓙ': 'J',
	        'Ｊ': 'J',
	        'Ĵ': 'J',
	        'Ɉ': 'J',
	        'Ⓚ': 'K',
	        'Ｋ': 'K',
	        'Ḱ': 'K',
	        'Ǩ': 'K',
	        'Ḳ': 'K',
	        'Ķ': 'K',
	        'Ḵ': 'K',
	        'Ƙ': 'K',
	        'Ⱪ': 'K',
	        'Ꝁ': 'K',
	        'Ꝃ': 'K',
	        'Ꝅ': 'K',
	        'Ꞣ': 'K',
	        'Ⓛ': 'L',
	        'Ｌ': 'L',
	        'Ŀ': 'L',
	        'Ĺ': 'L',
	        'Ľ': 'L',
	        'Ḷ': 'L',
	        'Ḹ': 'L',
	        'Ļ': 'L',
	        'Ḽ': 'L',
	        'Ḻ': 'L',
	        'Ł': 'L',
	        'Ƚ': 'L',
	        'Ɫ': 'L',
	        'Ⱡ': 'L',
	        'Ꝉ': 'L',
	        'Ꝇ': 'L',
	        'Ꞁ': 'L',
	        'Ǉ': 'LJ',
	        'ǈ': 'Lj',
	        'Ⓜ': 'M',
	        'Ｍ': 'M',
	        'Ḿ': 'M',
	        'Ṁ': 'M',
	        'Ṃ': 'M',
	        'Ɱ': 'M',
	        'Ɯ': 'M',
	        'Ⓝ': 'N',
	        'Ｎ': 'N',
	        'Ǹ': 'N',
	        'Ń': 'N',
	        'Ñ': 'N',
	        'Ṅ': 'N',
	        'Ň': 'N',
	        'Ṇ': 'N',
	        'Ņ': 'N',
	        'Ṋ': 'N',
	        'Ṉ': 'N',
	        'Ƞ': 'N',
	        'Ɲ': 'N',
	        'Ꞑ': 'N',
	        'Ꞥ': 'N',
	        'Ǌ': 'NJ',
	        'ǋ': 'Nj',
	        'Ⓞ': 'O',
	        'Ｏ': 'O',
	        'Ò': 'O',
	        'Ó': 'O',
	        'Ô': 'O',
	        'Ồ': 'O',
	        'Ố': 'O',
	        'Ỗ': 'O',
	        'Ổ': 'O',
	        'Õ': 'O',
	        'Ṍ': 'O',
	        'Ȭ': 'O',
	        'Ṏ': 'O',
	        'Ō': 'O',
	        'Ṑ': 'O',
	        'Ṓ': 'O',
	        'Ŏ': 'O',
	        'Ȯ': 'O',
	        'Ȱ': 'O',
	        'Ö': 'O',
	        'Ȫ': 'O',
	        'Ỏ': 'O',
	        'Ő': 'O',
	        'Ǒ': 'O',
	        'Ȍ': 'O',
	        'Ȏ': 'O',
	        'Ơ': 'O',
	        'Ờ': 'O',
	        'Ớ': 'O',
	        'Ỡ': 'O',
	        'Ở': 'O',
	        'Ợ': 'O',
	        'Ọ': 'O',
	        'Ộ': 'O',
	        'Ǫ': 'O',
	        'Ǭ': 'O',
	        'Ø': 'O',
	        'Ǿ': 'O',
	        'Ɔ': 'O',
	        'Ɵ': 'O',
	        'Ꝋ': 'O',
	        'Ꝍ': 'O',
	        'Ƣ': 'OI',
	        'Ꝏ': 'OO',
	        'Ȣ': 'OU',
	        'Ⓟ': 'P',
	        'Ｐ': 'P',
	        'Ṕ': 'P',
	        'Ṗ': 'P',
	        'Ƥ': 'P',
	        'Ᵽ': 'P',
	        'Ꝑ': 'P',
	        'Ꝓ': 'P',
	        'Ꝕ': 'P',
	        'Ⓠ': 'Q',
	        'Ｑ': 'Q',
	        'Ꝗ': 'Q',
	        'Ꝙ': 'Q',
	        'Ɋ': 'Q',
	        'Ⓡ': 'R',
	        'Ｒ': 'R',
	        'Ŕ': 'R',
	        'Ṙ': 'R',
	        'Ř': 'R',
	        'Ȑ': 'R',
	        'Ȓ': 'R',
	        'Ṛ': 'R',
	        'Ṝ': 'R',
	        'Ŗ': 'R',
	        'Ṟ': 'R',
	        'Ɍ': 'R',
	        'Ɽ': 'R',
	        'Ꝛ': 'R',
	        'Ꞧ': 'R',
	        'Ꞃ': 'R',
	        'Ⓢ': 'S',
	        'Ｓ': 'S',
	        'ẞ': 'S',
	        'Ś': 'S',
	        'Ṥ': 'S',
	        'Ŝ': 'S',
	        'Ṡ': 'S',
	        'Š': 'S',
	        'Ṧ': 'S',
	        'Ṣ': 'S',
	        'Ṩ': 'S',
	        'Ș': 'S',
	        'Ş': 'S',
	        'Ȿ': 'S',
	        'Ꞩ': 'S',
	        'Ꞅ': 'S',
	        'Ⓣ': 'T',
	        'Ｔ': 'T',
	        'Ṫ': 'T',
	        'Ť': 'T',
	        'Ṭ': 'T',
	        'Ț': 'T',
	        'Ţ': 'T',
	        'Ṱ': 'T',
	        'Ṯ': 'T',
	        'Ŧ': 'T',
	        'Ƭ': 'T',
	        'Ʈ': 'T',
	        'Ⱦ': 'T',
	        'Ꞇ': 'T',
	        'Ꜩ': 'TZ',
	        'Ⓤ': 'U',
	        'Ｕ': 'U',
	        'Ù': 'U',
	        'Ú': 'U',
	        'Û': 'U',
	        'Ũ': 'U',
	        'Ṹ': 'U',
	        'Ū': 'U',
	        'Ṻ': 'U',
	        'Ŭ': 'U',
	        'Ü': 'U',
	        'Ǜ': 'U',
	        'Ǘ': 'U',
	        'Ǖ': 'U',
	        'Ǚ': 'U',
	        'Ủ': 'U',
	        'Ů': 'U',
	        'Ű': 'U',
	        'Ǔ': 'U',
	        'Ȕ': 'U',
	        'Ȗ': 'U',
	        'Ư': 'U',
	        'Ừ': 'U',
	        'Ứ': 'U',
	        'Ữ': 'U',
	        'Ử': 'U',
	        'Ự': 'U',
	        'Ụ': 'U',
	        'Ṳ': 'U',
	        'Ų': 'U',
	        'Ṷ': 'U',
	        'Ṵ': 'U',
	        'Ʉ': 'U',
	        'Ⓥ': 'V',
	        'Ｖ': 'V',
	        'Ṽ': 'V',
	        'Ṿ': 'V',
	        'Ʋ': 'V',
	        'Ꝟ': 'V',
	        'Ʌ': 'V',
	        'Ꝡ': 'VY',
	        'Ⓦ': 'W',
	        'Ｗ': 'W',
	        'Ẁ': 'W',
	        'Ẃ': 'W',
	        'Ŵ': 'W',
	        'Ẇ': 'W',
	        'Ẅ': 'W',
	        'Ẉ': 'W',
	        'Ⱳ': 'W',
	        'Ⓧ': 'X',
	        'Ｘ': 'X',
	        'Ẋ': 'X',
	        'Ẍ': 'X',
	        'Ⓨ': 'Y',
	        'Ｙ': 'Y',
	        'Ỳ': 'Y',
	        'Ý': 'Y',
	        'Ŷ': 'Y',
	        'Ỹ': 'Y',
	        'Ȳ': 'Y',
	        'Ẏ': 'Y',
	        'Ÿ': 'Y',
	        'Ỷ': 'Y',
	        'Ỵ': 'Y',
	        'Ƴ': 'Y',
	        'Ɏ': 'Y',
	        'Ỿ': 'Y',
	        'Ⓩ': 'Z',
	        'Ｚ': 'Z',
	        'Ź': 'Z',
	        'Ẑ': 'Z',
	        'Ż': 'Z',
	        'Ž': 'Z',
	        'Ẓ': 'Z',
	        'Ẕ': 'Z',
	        'Ƶ': 'Z',
	        'Ȥ': 'Z',
	        'Ɀ': 'Z',
	        'Ⱬ': 'Z',
	        'Ꝣ': 'Z',
	        'ⓐ': 'a',
	        'ａ': 'a',
	        'ẚ': 'a',
	        'à': 'a',
	        'á': 'a',
	        'â': 'a',
	        'ầ': 'a',
	        'ấ': 'a',
	        'ẫ': 'a',
	        'ẩ': 'a',
	        'ã': 'a',
	        'ā': 'a',
	        'ă': 'a',
	        'ằ': 'a',
	        'ắ': 'a',
	        'ẵ': 'a',
	        'ẳ': 'a',
	        'ȧ': 'a',
	        'ǡ': 'a',
	        'ä': 'a',
	        'ǟ': 'a',
	        'ả': 'a',
	        'å': 'a',
	        'ǻ': 'a',
	        'ǎ': 'a',
	        'ȁ': 'a',
	        'ȃ': 'a',
	        'ạ': 'a',
	        'ậ': 'a',
	        'ặ': 'a',
	        'ḁ': 'a',
	        'ą': 'a',
	        'ⱥ': 'a',
	        'ɐ': 'a',
	        'ꜳ': 'aa',
	        'æ': 'ae',
	        'ǽ': 'ae',
	        'ǣ': 'ae',
	        'ꜵ': 'ao',
	        'ꜷ': 'au',
	        'ꜹ': 'av',
	        'ꜻ': 'av',
	        'ꜽ': 'ay',
	        'ⓑ': 'b',
	        'ｂ': 'b',
	        'ḃ': 'b',
	        'ḅ': 'b',
	        'ḇ': 'b',
	        'ƀ': 'b',
	        'ƃ': 'b',
	        'ɓ': 'b',
	        'ⓒ': 'c',
	        'ｃ': 'c',
	        'ć': 'c',
	        'ĉ': 'c',
	        'ċ': 'c',
	        'č': 'c',
	        'ç': 'c',
	        'ḉ': 'c',
	        'ƈ': 'c',
	        'ȼ': 'c',
	        'ꜿ': 'c',
	        'ↄ': 'c',
	        'ⓓ': 'd',
	        'ｄ': 'd',
	        'ḋ': 'd',
	        'ď': 'd',
	        'ḍ': 'd',
	        'ḑ': 'd',
	        'ḓ': 'd',
	        'ḏ': 'd',
	        'đ': 'd',
	        'ƌ': 'd',
	        'ɖ': 'd',
	        'ɗ': 'd',
	        'ꝺ': 'd',
	        'ǳ': 'dz',
	        'ǆ': 'dz',
	        'ⓔ': 'e',
	        'ｅ': 'e',
	        'è': 'e',
	        'é': 'e',
	        'ê': 'e',
	        'ề': 'e',
	        'ế': 'e',
	        'ễ': 'e',
	        'ể': 'e',
	        'ẽ': 'e',
	        'ē': 'e',
	        'ḕ': 'e',
	        'ḗ': 'e',
	        'ĕ': 'e',
	        'ė': 'e',
	        'ë': 'e',
	        'ẻ': 'e',
	        'ě': 'e',
	        'ȅ': 'e',
	        'ȇ': 'e',
	        'ẹ': 'e',
	        'ệ': 'e',
	        'ȩ': 'e',
	        'ḝ': 'e',
	        'ę': 'e',
	        'ḙ': 'e',
	        'ḛ': 'e',
	        'ɇ': 'e',
	        'ɛ': 'e',
	        'ǝ': 'e',
	        'ⓕ': 'f',
	        'ｆ': 'f',
	        'ḟ': 'f',
	        'ƒ': 'f',
	        'ꝼ': 'f',
	        'ⓖ': 'g',
	        'ｇ': 'g',
	        'ǵ': 'g',
	        'ĝ': 'g',
	        'ḡ': 'g',
	        'ğ': 'g',
	        'ġ': 'g',
	        'ǧ': 'g',
	        'ģ': 'g',
	        'ǥ': 'g',
	        'ɠ': 'g',
	        'ꞡ': 'g',
	        'ᵹ': 'g',
	        'ꝿ': 'g',
	        'ⓗ': 'h',
	        'ｈ': 'h',
	        'ĥ': 'h',
	        'ḣ': 'h',
	        'ḧ': 'h',
	        'ȟ': 'h',
	        'ḥ': 'h',
	        'ḩ': 'h',
	        'ḫ': 'h',
	        'ẖ': 'h',
	        'ħ': 'h',
	        'ⱨ': 'h',
	        'ⱶ': 'h',
	        'ɥ': 'h',
	        'ƕ': 'hv',
	        'ⓘ': 'i',
	        'ｉ': 'i',
	        'ì': 'i',
	        'í': 'i',
	        'î': 'i',
	        'ĩ': 'i',
	        'ī': 'i',
	        'ĭ': 'i',
	        'ï': 'i',
	        'ḯ': 'i',
	        'ỉ': 'i',
	        'ǐ': 'i',
	        'ȉ': 'i',
	        'ȋ': 'i',
	        'ị': 'i',
	        'į': 'i',
	        'ḭ': 'i',
	        'ɨ': 'i',
	        'ı': 'i',
	        'ⓙ': 'j',
	        'ｊ': 'j',
	        'ĵ': 'j',
	        'ǰ': 'j',
	        'ɉ': 'j',
	        'ⓚ': 'k',
	        'ｋ': 'k',
	        'ḱ': 'k',
	        'ǩ': 'k',
	        'ḳ': 'k',
	        'ķ': 'k',
	        'ḵ': 'k',
	        'ƙ': 'k',
	        'ⱪ': 'k',
	        'ꝁ': 'k',
	        'ꝃ': 'k',
	        'ꝅ': 'k',
	        'ꞣ': 'k',
	        'ⓛ': 'l',
	        'ｌ': 'l',
	        'ŀ': 'l',
	        'ĺ': 'l',
	        'ľ': 'l',
	        'ḷ': 'l',
	        'ḹ': 'l',
	        'ļ': 'l',
	        'ḽ': 'l',
	        'ḻ': 'l',
	        'ſ': 'l',
	        'ł': 'l',
	        'ƚ': 'l',
	        'ɫ': 'l',
	        'ⱡ': 'l',
	        'ꝉ': 'l',
	        'ꞁ': 'l',
	        'ꝇ': 'l',
	        'ǉ': 'lj',
	        'ⓜ': 'm',
	        'ｍ': 'm',
	        'ḿ': 'm',
	        'ṁ': 'm',
	        'ṃ': 'm',
	        'ɱ': 'm',
	        'ɯ': 'm',
	        'ⓝ': 'n',
	        'ｎ': 'n',
	        'ǹ': 'n',
	        'ń': 'n',
	        'ñ': 'n',
	        'ṅ': 'n',
	        'ň': 'n',
	        'ṇ': 'n',
	        'ņ': 'n',
	        'ṋ': 'n',
	        'ṉ': 'n',
	        'ƞ': 'n',
	        'ɲ': 'n',
	        'ŉ': 'n',
	        'ꞑ': 'n',
	        'ꞥ': 'n',
	        'ǌ': 'nj',
	        'ⓞ': 'o',
	        'ｏ': 'o',
	        'ò': 'o',
	        'ó': 'o',
	        'ô': 'o',
	        'ồ': 'o',
	        'ố': 'o',
	        'ỗ': 'o',
	        'ổ': 'o',
	        'õ': 'o',
	        'ṍ': 'o',
	        'ȭ': 'o',
	        'ṏ': 'o',
	        'ō': 'o',
	        'ṑ': 'o',
	        'ṓ': 'o',
	        'ŏ': 'o',
	        'ȯ': 'o',
	        'ȱ': 'o',
	        'ö': 'o',
	        'ȫ': 'o',
	        'ỏ': 'o',
	        'ő': 'o',
	        'ǒ': 'o',
	        'ȍ': 'o',
	        'ȏ': 'o',
	        'ơ': 'o',
	        'ờ': 'o',
	        'ớ': 'o',
	        'ỡ': 'o',
	        'ở': 'o',
	        'ợ': 'o',
	        'ọ': 'o',
	        'ộ': 'o',
	        'ǫ': 'o',
	        'ǭ': 'o',
	        'ø': 'o',
	        'ǿ': 'o',
	        'ɔ': 'o',
	        'ꝋ': 'o',
	        'ꝍ': 'o',
	        'ɵ': 'o',
	        'ƣ': 'oi',
	        'ȣ': 'ou',
	        'ꝏ': 'oo',
	        'ⓟ': 'p',
	        'ｐ': 'p',
	        'ṕ': 'p',
	        'ṗ': 'p',
	        'ƥ': 'p',
	        'ᵽ': 'p',
	        'ꝑ': 'p',
	        'ꝓ': 'p',
	        'ꝕ': 'p',
	        'ⓠ': 'q',
	        'ｑ': 'q',
	        'ɋ': 'q',
	        'ꝗ': 'q',
	        'ꝙ': 'q',
	        'ⓡ': 'r',
	        'ｒ': 'r',
	        'ŕ': 'r',
	        'ṙ': 'r',
	        'ř': 'r',
	        'ȑ': 'r',
	        'ȓ': 'r',
	        'ṛ': 'r',
	        'ṝ': 'r',
	        'ŗ': 'r',
	        'ṟ': 'r',
	        'ɍ': 'r',
	        'ɽ': 'r',
	        'ꝛ': 'r',
	        'ꞧ': 'r',
	        'ꞃ': 'r',
	        'ⓢ': 's',
	        'ｓ': 's',
	        'ß': 's',
	        'ś': 's',
	        'ṥ': 's',
	        'ŝ': 's',
	        'ṡ': 's',
	        'š': 's',
	        'ṧ': 's',
	        'ṣ': 's',
	        'ṩ': 's',
	        'ș': 's',
	        'ş': 's',
	        'ȿ': 's',
	        'ꞩ': 's',
	        'ꞅ': 's',
	        'ẛ': 's',
	        'ⓣ': 't',
	        'ｔ': 't',
	        'ṫ': 't',
	        'ẗ': 't',
	        'ť': 't',
	        'ṭ': 't',
	        'ț': 't',
	        'ţ': 't',
	        'ṱ': 't',
	        'ṯ': 't',
	        'ŧ': 't',
	        'ƭ': 't',
	        'ʈ': 't',
	        'ⱦ': 't',
	        'ꞇ': 't',
	        'ꜩ': 'tz',
	        'ⓤ': 'u',
	        'ｕ': 'u',
	        'ù': 'u',
	        'ú': 'u',
	        'û': 'u',
	        'ũ': 'u',
	        'ṹ': 'u',
	        'ū': 'u',
	        'ṻ': 'u',
	        'ŭ': 'u',
	        'ü': 'u',
	        'ǜ': 'u',
	        'ǘ': 'u',
	        'ǖ': 'u',
	        'ǚ': 'u',
	        'ủ': 'u',
	        'ů': 'u',
	        'ű': 'u',
	        'ǔ': 'u',
	        'ȕ': 'u',
	        'ȗ': 'u',
	        'ư': 'u',
	        'ừ': 'u',
	        'ứ': 'u',
	        'ữ': 'u',
	        'ử': 'u',
	        'ự': 'u',
	        'ụ': 'u',
	        'ṳ': 'u',
	        'ų': 'u',
	        'ṷ': 'u',
	        'ṵ': 'u',
	        'ʉ': 'u',
	        'ⓥ': 'v',
	        'ｖ': 'v',
	        'ṽ': 'v',
	        'ṿ': 'v',
	        'ʋ': 'v',
	        'ꝟ': 'v',
	        'ʌ': 'v',
	        'ꝡ': 'vy',
	        'ⓦ': 'w',
	        'ｗ': 'w',
	        'ẁ': 'w',
	        'ẃ': 'w',
	        'ŵ': 'w',
	        'ẇ': 'w',
	        'ẅ': 'w',
	        'ẘ': 'w',
	        'ẉ': 'w',
	        'ⱳ': 'w',
	        'ⓧ': 'x',
	        'ｘ': 'x',
	        'ẋ': 'x',
	        'ẍ': 'x',
	        'ⓨ': 'y',
	        'ｙ': 'y',
	        'ỳ': 'y',
	        'ý': 'y',
	        'ŷ': 'y',
	        'ỹ': 'y',
	        'ȳ': 'y',
	        'ẏ': 'y',
	        'ÿ': 'y',
	        'ỷ': 'y',
	        'ẙ': 'y',
	        'ỵ': 'y',
	        'ƴ': 'y',
	        'ɏ': 'y',
	        'ỿ': 'y',
	        'ⓩ': 'z',
	        'ｚ': 'z',
	        'ź': 'z',
	        'ẑ': 'z',
	        'ż': 'z',
	        'ž': 'z',
	        'ẓ': 'z',
	        'ẕ': 'z',
	        'ƶ': 'z',
	        'ȥ': 'z',
	        'ɀ': 'z',
	        'ⱬ': 'z',
	        'ꝣ': 'z',
	        'Ά': 'Α',
	        'Έ': 'Ε',
	        'Ή': 'Η',
	        'Ί': 'Ι',
	        'Ϊ': 'Ι',
	        'Ό': 'Ο',
	        'Ύ': 'Υ',
	        'Ϋ': 'Υ',
	        'Ώ': 'Ω',
	        'ά': 'α',
	        'έ': 'ε',
	        'ή': 'η',
	        'ί': 'ι',
	        'ϊ': 'ι',
	        'ΐ': 'ι',
	        'ό': 'ο',
	        'ύ': 'υ',
	        'ϋ': 'υ',
	        'ΰ': 'υ',
	        'ω': 'ω',
	        'ς': 'σ'
	      };

	      return diacritics;
	    });

	    S2.define('select2/data/base', ['../utils'], function (Utils) {
	      function BaseAdapter($element, options) {
	        BaseAdapter.__super__.constructor.call(this);
	      }

	      Utils.Extend(BaseAdapter, Utils.Observable);

	      BaseAdapter.prototype.current = function (callback) {
	        throw new Error('The `current` method must be defined in child classes.');
	      };

	      BaseAdapter.prototype.query = function (params, callback) {
	        throw new Error('The `query` method must be defined in child classes.');
	      };

	      BaseAdapter.prototype.bind = function (container, $container) {
	        // Can be implemented in subclasses
	      };

	      BaseAdapter.prototype.destroy = function () {
	        // Can be implemented in subclasses
	      };

	      BaseAdapter.prototype.generateResultId = function (container, data) {
	        var id = container.id + '-result-';

	        id += Utils.generateChars(4);

	        if (data.id != null) {
	          id += '-' + data.id.toString();
	        } else {
	          id += '-' + Utils.generateChars(4);
	        }
	        return id;
	      };

	      return BaseAdapter;
	    });

	    S2.define('select2/data/select', ['./base', '../utils', 'jquery'], function (BaseAdapter, Utils, $) {
	      function SelectAdapter($element, options) {
	        this.$element = $element;
	        this.options = options;

	        SelectAdapter.__super__.constructor.call(this);
	      }

	      Utils.Extend(SelectAdapter, BaseAdapter);

	      SelectAdapter.prototype.current = function (callback) {
	        var data = [];
	        var self = this;

	        this.$element.find(':selected').each(function () {
	          var $option = $(this);

	          var option = self.item($option);

	          data.push(option);
	        });

	        callback(data);
	      };

	      SelectAdapter.prototype.select = function (data) {
	        var self = this;

	        data.selected = true;

	        // If data.element is a DOM node, use it instead
	        if ($(data.element).is('option')) {
	          data.element.selected = true;

	          this.$element.trigger('change');

	          return;
	        }

	        if (this.$element.prop('multiple')) {
	          this.current(function (currentData) {
	            var val = [];

	            data = [data];
	            data.push.apply(data, currentData);

	            for (var d = 0; d < data.length; d++) {
	              var id = data[d].id;

	              if ($.inArray(id, val) === -1) {
	                val.push(id);
	              }
	            }

	            self.$element.val(val);
	            self.$element.trigger('change');
	          });
	        } else {
	          var val = data.id;

	          this.$element.val(val);
	          this.$element.trigger('change');
	        }
	      };

	      SelectAdapter.prototype.unselect = function (data) {
	        var self = this;

	        if (!this.$element.prop('multiple')) {
	          return;
	        }

	        data.selected = false;

	        if ($(data.element).is('option')) {
	          data.element.selected = false;

	          this.$element.trigger('change');

	          return;
	        }

	        this.current(function (currentData) {
	          var val = [];

	          for (var d = 0; d < currentData.length; d++) {
	            var id = currentData[d].id;

	            if (id !== data.id && $.inArray(id, val) === -1) {
	              val.push(id);
	            }
	          }

	          self.$element.val(val);

	          self.$element.trigger('change');
	        });
	      };

	      SelectAdapter.prototype.bind = function (container, $container) {
	        var self = this;

	        this.container = container;

	        container.on('select', function (params) {
	          self.select(params.data);
	        });

	        container.on('unselect', function (params) {
	          self.unselect(params.data);
	        });
	      };

	      SelectAdapter.prototype.destroy = function () {
	        // Remove anything added to child elements
	        this.$element.find('*').each(function () {
	          // Remove any custom data set by Select2
	          $.removeData(this, 'data');
	        });
	      };

	      SelectAdapter.prototype.query = function (params, callback) {
	        var data = [];
	        var self = this;

	        var $options = this.$element.children();

	        $options.each(function () {
	          var $option = $(this);

	          if (!$option.is('option') && !$option.is('optgroup')) {
	            return;
	          }

	          var option = self.item($option);

	          var matches = self.matches(params, option);

	          if (matches !== null) {
	            data.push(matches);
	          }
	        });

	        callback({
	          results: data
	        });
	      };

	      SelectAdapter.prototype.addOptions = function ($options) {
	        Utils.appendMany(this.$element, $options);
	      };

	      SelectAdapter.prototype.option = function (data) {
	        var option;

	        if (data.children) {
	          option = document.createElement('optgroup');
	          option.label = data.text;
	        } else {
	          option = document.createElement('option');

	          if (option.textContent !== undefined) {
	            option.textContent = data.text;
	          } else {
	            option.innerText = data.text;
	          }
	        }

	        if (data.id) {
	          option.value = data.id;
	        }

	        if (data.disabled) {
	          option.disabled = true;
	        }

	        if (data.selected) {
	          option.selected = true;
	        }

	        if (data.title) {
	          option.title = data.title;
	        }

	        var $option = $(option);

	        var normalizedData = this._normalizeItem(data);
	        normalizedData.element = option;

	        // Override the option's data with the combined data
	        $.data(option, 'data', normalizedData);

	        return $option;
	      };

	      SelectAdapter.prototype.item = function ($option) {
	        var data = {};

	        data = $.data($option[0], 'data');

	        if (data != null) {
	          return data;
	        }

	        if ($option.is('option')) {
	          data = {
	            id: $option.val(),
	            text: $option.text(),
	            disabled: $option.prop('disabled'),
	            selected: $option.prop('selected'),
	            title: $option.prop('title')
	          };
	        } else if ($option.is('optgroup')) {
	          data = {
	            text: $option.prop('label'),
	            children: [],
	            title: $option.prop('title')
	          };

	          var $children = $option.children('option');
	          var children = [];

	          for (var c = 0; c < $children.length; c++) {
	            var $child = $($children[c]);

	            var child = this.item($child);

	            children.push(child);
	          }

	          data.children = children;
	        }

	        data = this._normalizeItem(data);
	        data.element = $option[0];

	        $.data($option[0], 'data', data);

	        return data;
	      };

	      SelectAdapter.prototype._normalizeItem = function (item) {
	        if (!$.isPlainObject(item)) {
	          item = {
	            id: item,
	            text: item
	          };
	        }

	        item = $.extend({}, {
	          text: ''
	        }, item);

	        var defaults = {
	          selected: false,
	          disabled: false
	        };

	        if (item.id != null) {
	          item.id = item.id.toString();
	        }

	        if (item.text != null) {
	          item.text = item.text.toString();
	        }

	        if (item._resultId == null && item.id && this.container != null) {
	          item._resultId = this.generateResultId(this.container, item);
	        }

	        return $.extend({}, defaults, item);
	      };

	      SelectAdapter.prototype.matches = function (params, data) {
	        var matcher = this.options.get('matcher');

	        return matcher(params, data);
	      };

	      return SelectAdapter;
	    });

	    S2.define('select2/data/array', ['./select', '../utils', 'jquery'], function (SelectAdapter, Utils, $) {
	      function ArrayAdapter($element, options) {
	        var data = options.get('data') || [];

	        ArrayAdapter.__super__.constructor.call(this, $element, options);

	        this.addOptions(this.convertToOptions(data));
	      }

	      Utils.Extend(ArrayAdapter, SelectAdapter);

	      ArrayAdapter.prototype.select = function (data) {
	        var $option = this.$element.find('option').filter(function (i, elm) {
	          return elm.value == data.id.toString();
	        });

	        if ($option.length === 0) {
	          $option = this.option(data);

	          this.addOptions($option);
	        }

	        ArrayAdapter.__super__.select.call(this, data);
	      };

	      ArrayAdapter.prototype.convertToOptions = function (data) {
	        var self = this;

	        var $existing = this.$element.find('option');
	        var existingIds = $existing.map(function () {
	          return self.item($(this)).id;
	        }).get();

	        var $options = [];

	        // Filter out all items except for the one passed in the argument
	        function onlyItem(item) {
	          return function () {
	            return $(this).val() == item.id;
	          };
	        }

	        for (var d = 0; d < data.length; d++) {
	          var item = this._normalizeItem(data[d]);

	          // Skip items which were pre-loaded, only merge the data
	          if ($.inArray(item.id, existingIds) >= 0) {
	            var $existingOption = $existing.filter(onlyItem(item));

	            var existingData = this.item($existingOption);
	            var newData = $.extend(true, {}, existingData, item);

	            var $newOption = this.option(existingData);

	            $existingOption.replaceWith($newOption);

	            continue;
	          }

	          var $option = this.option(item);

	          if (item.children) {
	            var $children = this.convertToOptions(item.children);

	            Utils.appendMany($option, $children);
	          }

	          $options.push($option);
	        }

	        return $options;
	      };

	      return ArrayAdapter;
	    });

	    S2.define('select2/data/ajax', ['./array', '../utils', 'jquery'], function (ArrayAdapter, Utils, $) {
	      function AjaxAdapter($element, options) {
	        this.ajaxOptions = this._applyDefaults(options.get('ajax'));

	        if (this.ajaxOptions.processResults != null) {
	          this.processResults = this.ajaxOptions.processResults;
	        }

	        ArrayAdapter.__super__.constructor.call(this, $element, options);
	      }

	      Utils.Extend(AjaxAdapter, ArrayAdapter);

	      AjaxAdapter.prototype._applyDefaults = function (options) {
	        var defaults = {
	          data: function data(params) {
	            return {
	              q: params.term
	            };
	          },
	          transport: function transport(params, success, failure) {
	            var $request = $.ajax(params);

	            $request.then(success);
	            $request.fail(failure);

	            return $request;
	          }
	        };

	        return $.extend({}, defaults, options, true);
	      };

	      AjaxAdapter.prototype.processResults = function (results) {
	        return results;
	      };

	      AjaxAdapter.prototype.query = function (params, callback) {
	        var matches = [];
	        var self = this;

	        if (this._request != null) {
	          // JSONP requests cannot always be aborted
	          if ($.isFunction(this._request.abort)) {
	            this._request.abort();
	          }

	          this._request = null;
	        }

	        var options = $.extend({
	          type: 'GET'
	        }, this.ajaxOptions);

	        if (typeof options.url === 'function') {
	          options.url = options.url(params);
	        }

	        if (typeof options.data === 'function') {
	          options.data = options.data(params);
	        }

	        function request() {
	          var $request = options.transport(options, function (data) {
	            var results = self.processResults(data, params);

	            if (self.options.get('debug') && window.console && console.error) {
	              // Check to make sure that the response included a `results` key.
	              if (!results || !results.results || !$.isArray(results.results)) {
	                console.error('Select2: The AJAX results did not return an array in the ' + '`results` key of the response.');
	              }
	            }

	            callback(results);
	          }, function () {
	            // TODO: Handle AJAX errors
	          });

	          self._request = $request;
	        }

	        if (this.ajaxOptions.delay && params.term !== '') {
	          if (this._queryTimeout) {
	            window.clearTimeout(this._queryTimeout);
	          }

	          this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
	        } else {
	          request();
	        }
	      };

	      return AjaxAdapter;
	    });

	    S2.define('select2/data/tags', ['jquery'], function ($) {
	      function Tags(decorated, $element, options) {
	        var tags = options.get('tags');

	        var createTag = options.get('createTag');

	        if (createTag !== undefined) {
	          this.createTag = createTag;
	        }

	        decorated.call(this, $element, options);

	        if ($.isArray(tags)) {
	          for (var t = 0; t < tags.length; t++) {
	            var tag = tags[t];
	            var item = this._normalizeItem(tag);

	            var $option = this.option(item);

	            this.$element.append($option);
	          }
	        }
	      }

	      Tags.prototype.query = function (decorated, params, callback) {
	        var self = this;

	        this._removeOldTags();

	        if (params.term == null || params.page != null) {
	          decorated.call(this, params, callback);
	          return;
	        }

	        function wrapper(obj, child) {
	          var data = obj.results;

	          for (var i = 0; i < data.length; i++) {
	            var option = data[i];

	            var checkChildren = option.children != null && !wrapper({
	              results: option.children
	            }, true);

	            var checkText = option.text === params.term;

	            if (checkText || checkChildren) {
	              if (child) {
	                return false;
	              }

	              obj.data = data;
	              callback(obj);

	              return;
	            }
	          }

	          if (child) {
	            return true;
	          }

	          var tag = self.createTag(params);

	          if (tag != null) {
	            var $option = self.option(tag);
	            $option.attr('data-select2-tag', true);

	            self.addOptions([$option]);

	            self.insertTag(data, tag);
	          }

	          obj.results = data;

	          callback(obj);
	        }

	        decorated.call(this, params, wrapper);
	      };

	      Tags.prototype.createTag = function (decorated, params) {
	        var term = $.trim(params.term);

	        if (term === '') {
	          return null;
	        }

	        return {
	          id: term,
	          text: term
	        };
	      };

	      Tags.prototype.insertTag = function (_, data, tag) {
	        data.unshift(tag);
	      };

	      Tags.prototype._removeOldTags = function (_) {
	        var tag = this._lastTag;

	        var $options = this.$element.find('option[data-select2-tag]');

	        $options.each(function () {
	          if (this.selected) {
	            return;
	          }

	          $(this).remove();
	        });
	      };

	      return Tags;
	    });

	    S2.define('select2/data/tokenizer', ['jquery'], function ($) {
	      function Tokenizer(decorated, $element, options) {
	        var tokenizer = options.get('tokenizer');

	        if (tokenizer !== undefined) {
	          this.tokenizer = tokenizer;
	        }

	        decorated.call(this, $element, options);
	      }

	      Tokenizer.prototype.bind = function (decorated, container, $container) {
	        decorated.call(this, container, $container);

	        this.$search = container.dropdown.$search || container.selection.$search || $container.find('.select2-search__field');
	      };

	      Tokenizer.prototype.query = function (decorated, params, callback) {
	        var self = this;

	        function select(data) {
	          self.select(data);
	        }

	        params.term = params.term || '';

	        var tokenData = this.tokenizer(params, this.options, select);

	        if (tokenData.term !== params.term) {
	          // Replace the search term if we have the search box
	          if (this.$search.length) {
	            this.$search.val(tokenData.term);
	            this.$search.focus();
	          }

	          params.term = tokenData.term;
	        }

	        decorated.call(this, params, callback);
	      };

	      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
	        var separators = options.get('tokenSeparators') || [];
	        var term = params.term;
	        var i = 0;

	        var createTag = this.createTag || function (params) {
	          return {
	            id: params.term,
	            text: params.term
	          };
	        };

	        while (i < term.length) {
	          var termChar = term[i];

	          if ($.inArray(termChar, separators) === -1) {
	            i++;

	            continue;
	          }

	          var part = term.substr(0, i);
	          var partParams = $.extend({}, params, {
	            term: part
	          });

	          var data = createTag(partParams);

	          callback(data);

	          // Reset the term to not include the tokenized portion
	          term = term.substr(i + 1) || '';
	          i = 0;
	        }

	        return {
	          term: term
	        };
	      };

	      return Tokenizer;
	    });

	    S2.define('select2/data/minimumInputLength', [], function () {
	      function MinimumInputLength(decorated, $e, options) {
	        this.minimumInputLength = options.get('minimumInputLength');

	        decorated.call(this, $e, options);
	      }

	      MinimumInputLength.prototype.query = function (decorated, params, callback) {
	        params.term = params.term || '';

	        if (params.term.length < this.minimumInputLength) {
	          this.trigger('results:message', {
	            message: 'inputTooShort',
	            args: {
	              minimum: this.minimumInputLength,
	              input: params.term,
	              params: params
	            }
	          });

	          return;
	        }

	        decorated.call(this, params, callback);
	      };

	      return MinimumInputLength;
	    });

	    S2.define('select2/data/maximumInputLength', [], function () {
	      function MaximumInputLength(decorated, $e, options) {
	        this.maximumInputLength = options.get('maximumInputLength');

	        decorated.call(this, $e, options);
	      }

	      MaximumInputLength.prototype.query = function (decorated, params, callback) {
	        params.term = params.term || '';

	        if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {
	          this.trigger('results:message', {
	            message: 'inputTooLong',
	            args: {
	              maximum: this.maximumInputLength,
	              input: params.term,
	              params: params
	            }
	          });

	          return;
	        }

	        decorated.call(this, params, callback);
	      };

	      return MaximumInputLength;
	    });

	    S2.define('select2/data/maximumSelectionLength', [], function () {
	      function MaximumSelectionLength(decorated, $e, options) {
	        this.maximumSelectionLength = options.get('maximumSelectionLength');

	        decorated.call(this, $e, options);
	      }

	      MaximumSelectionLength.prototype.query = function (decorated, params, callback) {
	        var self = this;

	        this.current(function (currentData) {
	          var count = currentData != null ? currentData.length : 0;
	          if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {
	            self.trigger('results:message', {
	              message: 'maximumSelected',
	              args: {
	                maximum: self.maximumSelectionLength
	              }
	            });
	            return;
	          }
	          decorated.call(self, params, callback);
	        });
	      };

	      return MaximumSelectionLength;
	    });

	    S2.define('select2/dropdown', ['jquery', './utils'], function ($, Utils) {
	      function Dropdown($element, options) {
	        this.$element = $element;
	        this.options = options;

	        Dropdown.__super__.constructor.call(this);
	      }

	      Utils.Extend(Dropdown, Utils.Observable);

	      Dropdown.prototype.render = function () {
	        var $dropdown = $('<span class="select2-dropdown">' + '<span class="select2-results"></span>' + '</span>');

	        $dropdown.attr('dir', this.options.get('dir'));

	        this.$dropdown = $dropdown;

	        return $dropdown;
	      };

	      Dropdown.prototype.position = function ($dropdown, $container) {
	        // Should be implmented in subclasses
	      };

	      Dropdown.prototype.destroy = function () {
	        // Remove the dropdown from the DOM
	        this.$dropdown.remove();
	      };

	      return Dropdown;
	    });

	    S2.define('select2/dropdown/search', ['jquery', '../utils'], function ($, Utils) {
	      function Search() {}

	      Search.prototype.render = function (decorated) {
	        var $rendered = decorated.call(this);

	        var $search = $('<span class="select2-search select2-search--dropdown">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="off"' + ' spellcheck="false" role="textbox" />' + '</span>');

	        this.$searchContainer = $search;
	        this.$search = $search.find('input');

	        $rendered.prepend($search);

	        return $rendered;
	      };

	      Search.prototype.bind = function (decorated, container, $container) {
	        var self = this;

	        decorated.call(this, container, $container);

	        this.$search.on('keydown', function (evt) {
	          self.trigger('keypress', evt);

	          self._keyUpPrevented = evt.isDefaultPrevented();
	        });

	        // Workaround for browsers which do not support the `input` event
	        // This will prevent double-triggering of events for browsers which support
	        // both the `keyup` and `input` events.
	        this.$search.on('input', function (evt) {
	          // Unbind the duplicated `keyup` event
	          $(this).off('keyup');
	        });

	        this.$search.on('keyup input', function (evt) {
	          self.handleSearch(evt);
	        });

	        container.on('open', function () {
	          self.$search.attr('tabindex', 0);

	          self.$search.focus();

	          window.setTimeout(function () {
	            self.$search.focus();
	          }, 0);
	        });

	        container.on('close', function () {
	          self.$search.attr('tabindex', -1);

	          self.$search.val('');
	        });

	        container.on('results:all', function (params) {
	          if (params.query.term == null || params.query.term === '') {
	            var showSearch = self.showSearch(params);

	            if (showSearch) {
	              self.$searchContainer.removeClass('select2-search--hide');
	            } else {
	              self.$searchContainer.addClass('select2-search--hide');
	            }
	          }
	        });
	      };

	      Search.prototype.handleSearch = function (evt) {
	        if (!this._keyUpPrevented) {
	          var input = this.$search.val();

	          this.trigger('query', {
	            term: input
	          });
	        }

	        this._keyUpPrevented = false;
	      };

	      Search.prototype.showSearch = function (_, params) {
	        return true;
	      };

	      return Search;
	    });

	    S2.define('select2/dropdown/hidePlaceholder', [], function () {
	      function HidePlaceholder(decorated, $element, options, dataAdapter) {
	        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	        decorated.call(this, $element, options, dataAdapter);
	      }

	      HidePlaceholder.prototype.append = function (decorated, data) {
	        data.results = this.removePlaceholder(data.results);

	        decorated.call(this, data);
	      };

	      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
	        if (typeof placeholder === 'string') {
	          placeholder = {
	            id: '',
	            text: placeholder
	          };
	        }

	        return placeholder;
	      };

	      HidePlaceholder.prototype.removePlaceholder = function (_, data) {
	        var modifiedData = data.slice(0);

	        for (var d = data.length - 1; d >= 0; d--) {
	          var item = data[d];

	          if (this.placeholder.id === item.id) {
	            modifiedData.splice(d, 1);
	          }
	        }

	        return modifiedData;
	      };

	      return HidePlaceholder;
	    });

	    S2.define('select2/dropdown/infiniteScroll', ['jquery'], function ($) {
	      function InfiniteScroll(decorated, $element, options, dataAdapter) {
	        this.lastParams = {};

	        decorated.call(this, $element, options, dataAdapter);

	        this.$loadingMore = this.createLoadingMore();
	        this.loading = false;
	      }

	      InfiniteScroll.prototype.append = function (decorated, data) {
	        this.$loadingMore.remove();
	        this.loading = false;

	        decorated.call(this, data);

	        if (this.showLoadingMore(data)) {
	          this.$results.append(this.$loadingMore);
	        }
	      };

	      InfiniteScroll.prototype.bind = function (decorated, container, $container) {
	        var self = this;

	        decorated.call(this, container, $container);

	        container.on('query', function (params) {
	          self.lastParams = params;
	          self.loading = true;
	        });

	        container.on('query:append', function (params) {
	          self.lastParams = params;
	          self.loading = true;
	        });

	        this.$results.on('scroll', function () {
	          var isLoadMoreVisible = $.contains(document.documentElement, self.$loadingMore[0]);

	          if (self.loading || !isLoadMoreVisible) {
	            return;
	          }

	          var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
	          var loadingMoreOffset = self.$loadingMore.offset().top + self.$loadingMore.outerHeight(false);

	          if (currentOffset + 50 >= loadingMoreOffset) {
	            self.loadMore();
	          }
	        });
	      };

	      InfiniteScroll.prototype.loadMore = function () {
	        this.loading = true;

	        var params = $.extend({}, { page: 1 }, this.lastParams);

	        params.page++;

	        this.trigger('query:append', params);
	      };

	      InfiniteScroll.prototype.showLoadingMore = function (_, data) {
	        return data.pagination && data.pagination.more;
	      };

	      InfiniteScroll.prototype.createLoadingMore = function () {
	        var $option = $('<li class="option load-more" role="treeitem"></li>');

	        var message = this.options.get('translations').get('loadingMore');

	        $option.html(message(this.lastParams));

	        return $option;
	      };

	      return InfiniteScroll;
	    });

	    S2.define('select2/dropdown/attachBody', ['jquery', '../utils'], function ($, Utils) {
	      function AttachBody(decorated, $element, options) {
	        this.$dropdownParent = options.get('dropdownParent') || document.body;

	        decorated.call(this, $element, options);
	      }

	      AttachBody.prototype.bind = function (decorated, container, $container) {
	        var self = this;

	        var setupResultsEvents = false;

	        decorated.call(this, container, $container);

	        container.on('open', function () {
	          self._showDropdown();
	          self._attachPositioningHandler(container);

	          if (!setupResultsEvents) {
	            setupResultsEvents = true;

	            container.on('results:all', function () {
	              self._positionDropdown();
	              self._resizeDropdown();
	            });

	            container.on('results:append', function () {
	              self._positionDropdown();
	              self._resizeDropdown();
	            });
	          }
	        });

	        container.on('close', function () {
	          self._hideDropdown();
	          self._detachPositioningHandler(container);
	        });

	        this.$dropdownContainer.on('mousedown', function (evt) {
	          evt.stopPropagation();
	        });
	      };

	      AttachBody.prototype.position = function (decorated, $dropdown, $container) {
	        // Clone all of the container classes
	        $dropdown.attr('class', $container.attr('class'));

	        $dropdown.removeClass('select2');
	        $dropdown.addClass('select2-container--open');

	        $dropdown.css({
	          position: 'absolute',
	          top: -999999
	        });

	        this.$container = $container;
	      };

	      AttachBody.prototype.render = function (decorated) {
	        var $container = $('<span></span>');

	        var $dropdown = decorated.call(this);
	        $container.append($dropdown);

	        this.$dropdownContainer = $container;

	        return $container;
	      };

	      AttachBody.prototype._hideDropdown = function (decorated) {
	        this.$dropdownContainer.detach();
	      };

	      AttachBody.prototype._attachPositioningHandler = function (container) {
	        var self = this;

	        var scrollEvent = 'scroll.select2.' + container.id;
	        var resizeEvent = 'resize.select2.' + container.id;
	        var orientationEvent = 'orientationchange.select2.' + container.id;

	        var $watchers = this.$container.parents().filter(Utils.hasScroll);
	        $watchers.each(function () {
	          $(this).data('select2-scroll-position', {
	            x: $(this).scrollLeft(),
	            y: $(this).scrollTop()
	          });
	        });

	        $watchers.on(scrollEvent, function (ev) {
	          var position = $(this).data('select2-scroll-position');
	          $(this).scrollTop(position.y);
	        });

	        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent, function (e) {
	          self._positionDropdown();
	          self._resizeDropdown();
	        });
	      };

	      AttachBody.prototype._detachPositioningHandler = function (container) {
	        var scrollEvent = 'scroll.select2.' + container.id;
	        var resizeEvent = 'resize.select2.' + container.id;
	        var orientationEvent = 'orientationchange.select2.' + container.id;

	        var $watchers = this.$container.parents().filter(Utils.hasScroll);
	        $watchers.off(scrollEvent);

	        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
	      };

	      AttachBody.prototype._positionDropdown = function () {
	        var $window = $(window);

	        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
	        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

	        var newDirection = null;

	        var position = this.$container.position();
	        var offset = this.$container.offset();

	        offset.bottom = offset.top + this.$container.outerHeight(false);

	        var container = {
	          height: this.$container.outerHeight(false)
	        };

	        container.top = offset.top;
	        container.bottom = offset.top + container.height;

	        var dropdown = {
	          height: this.$dropdown.outerHeight(false)
	        };

	        var viewport = {
	          top: $window.scrollTop(),
	          bottom: $window.scrollTop() + $window.height()
	        };

	        var enoughRoomAbove = viewport.top < offset.top - dropdown.height;
	        var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;

	        var css = {
	          left: offset.left,
	          top: container.bottom
	        };

	        if (!isCurrentlyAbove && !isCurrentlyBelow) {
	          newDirection = 'below';
	        }

	        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
	          newDirection = 'above';
	        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
	          newDirection = 'below';
	        }

	        if (newDirection == 'above' || isCurrentlyAbove && newDirection !== 'below') {
	          css.top = container.top - dropdown.height;
	        }

	        if (newDirection != null) {
	          this.$dropdown.removeClass('select2-dropdown--below select2-dropdown--above').addClass('select2-dropdown--' + newDirection);
	          this.$container.removeClass('select2-container--below select2-container--above').addClass('select2-container--' + newDirection);
	        }

	        this.$dropdownContainer.css(css);
	      };

	      AttachBody.prototype._resizeDropdown = function () {
	        this.$dropdownContainer.width();

	        var css = {
	          width: this.$container.outerWidth(false) + 'px'
	        };

	        if (this.options.get('dropdownAutoWidth')) {
	          css.minWidth = css.width;
	          css.width = 'auto';
	        }

	        this.$dropdown.css(css);
	      };

	      AttachBody.prototype._showDropdown = function (decorated) {
	        this.$dropdownContainer.appendTo(this.$dropdownParent);

	        this._positionDropdown();
	        this._resizeDropdown();
	      };

	      return AttachBody;
	    });

	    S2.define('select2/dropdown/minimumResultsForSearch', [], function () {
	      function countResults(data) {
	        var count = 0;

	        for (var d = 0; d < data.length; d++) {
	          var item = data[d];

	          if (item.children) {
	            count += countResults(item.children);
	          } else {
	            count++;
	          }
	        }

	        return count;
	      }

	      function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
	        this.minimumResultsForSearch = options.get('minimumResultsForSearch');

	        if (this.minimumResultsForSearch < 0) {
	          this.minimumResultsForSearch = Infinity;
	        }

	        decorated.call(this, $element, options, dataAdapter);
	      }

	      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
	        if (countResults(params.data.results) < this.minimumResultsForSearch) {
	          return false;
	        }

	        return decorated.call(this, params);
	      };

	      return MinimumResultsForSearch;
	    });

	    S2.define('select2/dropdown/selectOnClose', [], function () {
	      function SelectOnClose() {}

	      SelectOnClose.prototype.bind = function (decorated, container, $container) {
	        var self = this;

	        decorated.call(this, container, $container);

	        container.on('close', function () {
	          self._handleSelectOnClose();
	        });
	      };

	      SelectOnClose.prototype._handleSelectOnClose = function () {
	        var $highlightedResults = this.getHighlightedResults();

	        if ($highlightedResults.length < 1) {
	          return;
	        }

	        this.trigger('select', {
	          data: $highlightedResults.data('data')
	        });
	      };

	      return SelectOnClose;
	    });

	    S2.define('select2/dropdown/closeOnSelect', [], function () {
	      function CloseOnSelect() {}

	      CloseOnSelect.prototype.bind = function (decorated, container, $container) {
	        var self = this;

	        decorated.call(this, container, $container);

	        container.on('select', function (evt) {
	          self._selectTriggered(evt);
	        });

	        container.on('unselect', function (evt) {
	          self._selectTriggered(evt);
	        });
	      };

	      CloseOnSelect.prototype._selectTriggered = function (_, evt) {
	        var originalEvent = evt.originalEvent;

	        // Don't close if the control key is being held
	        if (originalEvent && originalEvent.ctrlKey) {
	          return;
	        }

	        this.trigger('close');
	      };

	      return CloseOnSelect;
	    });

	    S2.define('select2/i18n/en', [], function () {
	      // English
	      return {
	        errorLoading: function errorLoading() {
	          return 'The results could not be loaded.';
	        },
	        inputTooLong: function inputTooLong(args) {
	          var overChars = args.input.length - args.maximum;

	          var message = 'Please delete ' + overChars + ' character';

	          if (overChars != 1) {
	            message += 's';
	          }

	          return message;
	        },
	        inputTooShort: function inputTooShort(args) {
	          var remainingChars = args.minimum - args.input.length;

	          var message = 'Please enter ' + remainingChars + ' or more characters';

	          return message;
	        },
	        loadingMore: function loadingMore() {
	          return 'Loading more results…';
	        },
	        maximumSelected: function maximumSelected(args) {
	          var message = 'You can only select ' + args.maximum + ' item';

	          if (args.maximum != 1) {
	            message += 's';
	          }

	          return message;
	        },
	        noResults: function noResults() {
	          return 'No results found';
	        },
	        searching: function searching() {
	          return 'Searching…';
	        }
	      };
	    });

	    S2.define('select2/defaults', ['jquery', 'require', './results', './selection/single', './selection/multiple', './selection/placeholder', './selection/allowClear', './selection/search', './selection/eventRelay', './utils', './translation', './diacritics', './data/select', './data/array', './data/ajax', './data/tags', './data/tokenizer', './data/minimumInputLength', './data/maximumInputLength', './data/maximumSelectionLength', './dropdown', './dropdown/search', './dropdown/hidePlaceholder', './dropdown/infiniteScroll', './dropdown/attachBody', './dropdown/minimumResultsForSearch', './dropdown/selectOnClose', './dropdown/closeOnSelect', './i18n/en'], function ($, require, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, EnglishTranslation) {
	      function Defaults() {
	        this.reset();
	      }

	      Defaults.prototype.apply = function (options) {
	        options = $.extend({}, this.defaults, options);

	        if (options.dataAdapter == null) {
	          if (options.ajax != null) {
	            options.dataAdapter = AjaxData;
	          } else if (options.data != null) {
	            options.dataAdapter = ArrayData;
	          } else {
	            options.dataAdapter = SelectData;
	          }

	          if (options.minimumInputLength > 0) {
	            options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength);
	          }

	          if (options.maximumInputLength > 0) {
	            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength);
	          }

	          if (options.maximumSelectionLength > 0) {
	            options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength);
	          }

	          if (options.tags) {
	            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
	          }

	          if (options.tokenSeparators != null || options.tokenizer != null) {
	            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer);
	          }

	          if (options.query != null) {
	            var Query = require(options.amdBase + 'compat/query');

	            options.dataAdapter = Utils.Decorate(options.dataAdapter, Query);
	          }

	          if (options.initSelection != null) {
	            var InitSelection = require(options.amdBase + 'compat/initSelection');

	            options.dataAdapter = Utils.Decorate(options.dataAdapter, InitSelection);
	          }
	        }

	        if (options.resultsAdapter == null) {
	          options.resultsAdapter = ResultsList;

	          if (options.ajax != null) {
	            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll);
	          }

	          if (options.placeholder != null) {
	            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder);
	          }

	          if (options.selectOnClose) {
	            options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose);
	          }
	        }

	        if (options.dropdownAdapter == null) {
	          if (options.multiple) {
	            options.dropdownAdapter = Dropdown;
	          } else {
	            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

	            options.dropdownAdapter = SearchableDropdown;
	          }

	          if (options.minimumResultsForSearch !== 0) {
	            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, MinimumResultsForSearch);
	          }

	          if (options.closeOnSelect) {
	            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect);
	          }

	          if (options.dropdownCssClass != null || options.dropdownCss != null || options.adaptDropdownCssClass != null) {
	            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

	            options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS);
	          }

	          options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody);
	        }

	        if (options.selectionAdapter == null) {
	          if (options.multiple) {
	            options.selectionAdapter = MultipleSelection;
	          } else {
	            options.selectionAdapter = SingleSelection;
	          }

	          // Add the placeholder mixin if a placeholder was specified
	          if (options.placeholder != null) {
	            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder);
	          }

	          if (options.allowClear) {
	            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear);
	          }

	          if (options.multiple) {
	            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch);
	          }

	          if (options.containerCssClass != null || options.containerCss != null || options.adaptContainerCssClass != null) {
	            var ContainerCSS = require(options.amdBase + 'compat/containerCss');

	            options.selectionAdapter = Utils.Decorate(options.selectionAdapter, ContainerCSS);
	          }

	          options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay);
	        }

	        if (typeof options.language === 'string') {
	          // Check if the language is specified with a region
	          if (options.language.indexOf('-') > 0) {
	            // Extract the region information if it is included
	            var languageParts = options.language.split('-');
	            var baseLanguage = languageParts[0];

	            options.language = [options.language, baseLanguage];
	          } else {
	            options.language = [options.language];
	          }
	        }

	        if ($.isArray(options.language)) {
	          var languages = new Translation();
	          options.language.push('en');

	          var languageNames = options.language;

	          for (var l = 0; l < languageNames.length; l++) {
	            var name = languageNames[l];
	            var language = {};

	            try {
	              // Try to load it with the original name
	              language = Translation.loadPath(name);
	            } catch (e) {
	              try {
	                // If we couldn't load it, check if it wasn't the full path
	                name = this.defaults.amdLanguageBase + name;
	                language = Translation.loadPath(name);
	              } catch (ex) {
	                // The translation could not be loaded at all. Sometimes this is
	                // because of a configuration problem, other times this can be
	                // because of how Select2 helps load all possible translation files.
	                if (options.debug && window.console && console.warn) {
	                  console.warn('Select2: The language file for "' + name + '" could not be ' + 'automatically loaded. A fallback will be used instead.');
	                }

	                continue;
	              }
	            }

	            languages.extend(language);
	          }

	          options.translations = languages;
	        } else {
	          var baseTranslation = Translation.loadPath(this.defaults.amdLanguageBase + 'en');
	          var customTranslation = new Translation(options.language);

	          customTranslation.extend(baseTranslation);

	          options.translations = customTranslation;
	        }

	        return options;
	      };

	      Defaults.prototype.reset = function () {
	        function stripDiacritics(text) {
	          // Used 'uni range + named function' from http://jsperf.com/diacritics/18
	          function match(a) {
	            return DIACRITICS[a] || a;
	          }

	          return text.replace(/[^\u0000-\u007E]/g, match);
	        }

	        function matcher(_x, _x2) {
	          var _again = true;

	          _function: while (_again) {
	            var params = _x,
	                data = _x2;
	            match = c = child = matches = original = term = undefined;
	            _again = false;

	            // Always return the object if there is nothing to compare
	            if ($.trim(params.term) === '') {
	              return data;
	            }

	            // Do a recursive check for options with children
	            if (data.children && data.children.length > 0) {
	              // Clone the data object if there are children
	              // This is required as we modify the object to remove any non-matches
	              var match = $.extend(true, {}, data);

	              // Check each child of the option
	              for (var c = data.children.length - 1; c >= 0; c--) {
	                var child = data.children[c];

	                var matches = matcher(params, child);

	                // If there wasn't a match, remove the object in the array
	                if (matches == null) {
	                  match.children.splice(c, 1);
	                }
	              }

	              // If any children matched, return the new object
	              if (match.children.length > 0) {
	                return match;
	              }

	              // If there were no matching children, check just the plain object
	              _x = params;
	              _x2 = match;
	              _again = true;
	              continue _function;
	            }

	            var original = stripDiacritics(data.text).toUpperCase();
	            var term = stripDiacritics(params.term).toUpperCase();

	            // Check if the text contains the term
	            if (original.indexOf(term) > -1) {
	              return data;
	            }

	            // If it doesn't contain the term, don't return anything
	            return null;
	          }
	        }

	        this.defaults = {
	          amdBase: './',
	          amdLanguageBase: './i18n/',
	          closeOnSelect: true,
	          debug: false,
	          dropdownAutoWidth: false,
	          escapeMarkup: Utils.escapeMarkup,
	          language: EnglishTranslation,
	          matcher: matcher,
	          minimumInputLength: 0,
	          maximumInputLength: 0,
	          maximumSelectionLength: 0,
	          minimumResultsForSearch: 0,
	          selectOnClose: false,
	          sorter: function sorter(data) {
	            return data;
	          },
	          templateResult: function templateResult(result) {
	            return result.text;
	          },
	          templateSelection: function templateSelection(selection) {
	            return selection.text;
	          },
	          theme: 'default',
	          width: 'resolve'
	        };
	      };

	      Defaults.prototype.set = function (key, value) {
	        var camelKey = $.camelCase(key);

	        var data = {};
	        data[camelKey] = value;

	        var convertedData = Utils._convertData(data);

	        $.extend(this.defaults, convertedData);
	      };

	      var defaults = new Defaults();

	      return defaults;
	    });

	    S2.define('select2/options', ['require', 'jquery', './defaults', './utils'], function (require, $, Defaults, Utils) {
	      function Options(options, $element) {
	        this.options = options;

	        if ($element != null) {
	          this.fromElement($element);
	        }

	        this.options = Defaults.apply(this.options);

	        if ($element && $element.is('input')) {
	          var InputCompat = require(this.get('amdBase') + 'compat/inputData');

	          this.options.dataAdapter = Utils.Decorate(this.options.dataAdapter, InputCompat);
	        }
	      }

	      Options.prototype.fromElement = function ($e) {
	        var excludedData = ['select2'];

	        if (this.options.multiple == null) {
	          this.options.multiple = $e.prop('multiple');
	        }

	        if (this.options.disabled == null) {
	          this.options.disabled = $e.prop('disabled');
	        }

	        if (this.options.language == null) {
	          if ($e.prop('lang')) {
	            this.options.language = $e.prop('lang').toLowerCase();
	          } else if ($e.closest('[lang]').prop('lang')) {
	            this.options.language = $e.closest('[lang]').prop('lang');
	          }
	        }

	        if (this.options.dir == null) {
	          if ($e.prop('dir')) {
	            this.options.dir = $e.prop('dir');
	          } else if ($e.closest('[dir]').prop('dir')) {
	            this.options.dir = $e.closest('[dir]').prop('dir');
	          } else {
	            this.options.dir = 'ltr';
	          }
	        }

	        $e.prop('disabled', this.options.disabled);
	        $e.prop('multiple', this.options.multiple);

	        if ($e.data('select2Tags')) {
	          if (this.options.debug && window.console && console.warn) {
	            console.warn('Select2: The `data-select2-tags` attribute has been changed to ' + 'use the `data-data` and `data-tags="true"` attributes and will be ' + 'removed in future versions of Select2.');
	          }

	          $e.data('data', $e.data('select2Tags'));
	          $e.data('tags', true);
	        }

	        if ($e.data('ajaxUrl')) {
	          if (this.options.debug && window.console && console.warn) {
	            console.warn('Select2: The `data-ajax-url` attribute has been changed to ' + '`data-ajax--url` and support for the old attribute will be removed' + ' in future versions of Select2.');
	          }

	          $e.attr('ajax--url', $e.data('ajaxUrl'));
	          $e.data('ajax--url', $e.data('ajaxUrl'));
	        }

	        var dataset = {};

	        // Prefer the element's `dataset` attribute if it exists
	        // jQuery 1.x does not correctly handle data attributes with multiple dashes
	        if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
	          dataset = $.extend(true, {}, $e[0].dataset, $e.data());
	        } else {
	          dataset = $e.data();
	        }

	        var data = $.extend(true, {}, dataset);

	        data = Utils._convertData(data);

	        for (var key in data) {
	          if ($.inArray(key, excludedData) > -1) {
	            continue;
	          }

	          if ($.isPlainObject(this.options[key])) {
	            $.extend(this.options[key], data[key]);
	          } else {
	            this.options[key] = data[key];
	          }
	        }

	        return this;
	      };

	      Options.prototype.get = function (key) {
	        return this.options[key];
	      };

	      Options.prototype.set = function (key, val) {
	        this.options[key] = val;
	      };

	      return Options;
	    });

	    S2.define('select2/core', ['jquery', './options', './utils', './keys'], function ($, Options, Utils, KEYS) {
	      var Select2 = function Select2($element, options) {
	        if ($element.data('select2') != null) {
	          $element.data('select2').destroy();
	        }

	        this.$element = $element;

	        this.id = this._generateId($element);

	        options = options || {};

	        this.options = new Options(options, $element);

	        Select2.__super__.constructor.call(this);

	        // Set up the tabindex

	        var tabindex = $element.attr('tabindex') || 0;
	        $element.data('old-tabindex', tabindex);
	        $element.attr('tabindex', '-1');

	        // Set up containers and adapters

	        var DataAdapter = this.options.get('dataAdapter');
	        this.dataAdapter = new DataAdapter($element, this.options);

	        var $container = this.render();

	        this._placeContainer($container);

	        var SelectionAdapter = this.options.get('selectionAdapter');
	        this.selection = new SelectionAdapter($element, this.options);
	        this.$selection = this.selection.render();

	        this.selection.position(this.$selection, $container);

	        var DropdownAdapter = this.options.get('dropdownAdapter');
	        this.dropdown = new DropdownAdapter($element, this.options);
	        this.$dropdown = this.dropdown.render();

	        this.dropdown.position(this.$dropdown, $container);

	        var ResultsAdapter = this.options.get('resultsAdapter');
	        this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
	        this.$results = this.results.render();

	        this.results.position(this.$results, this.$dropdown);

	        // Bind events

	        var self = this;

	        // Bind the container to all of the adapters
	        this._bindAdapters();

	        // Register any DOM event handlers
	        this._registerDomEvents();

	        // Register any internal event handlers
	        this._registerDataEvents();
	        this._registerSelectionEvents();
	        this._registerDropdownEvents();
	        this._registerResultsEvents();
	        this._registerEvents();

	        // Set the initial state
	        this.dataAdapter.current(function (initialData) {
	          self.trigger('selection:update', {
	            data: initialData
	          });
	        });

	        // Hide the original select
	        $element.addClass('select2-hidden-accessible');
	        $element.attr('aria-hidden', 'true');

	        // Synchronize any monitored attributes
	        this._syncAttributes();

	        $element.data('select2', this);
	      };

	      Utils.Extend(Select2, Utils.Observable);

	      Select2.prototype._generateId = function ($element) {
	        var id = '';

	        if ($element.attr('id') != null) {
	          id = $element.attr('id');
	        } else if ($element.attr('name') != null) {
	          id = $element.attr('name') + '-' + Utils.generateChars(2);
	        } else {
	          id = Utils.generateChars(4);
	        }

	        id = 'select2-' + id;

	        return id;
	      };

	      Select2.prototype._placeContainer = function ($container) {
	        $container.insertAfter(this.$element);

	        var width = this._resolveWidth(this.$element, this.options.get('width'));

	        if (width != null) {
	          $container.css('width', width);
	        }
	      };

	      Select2.prototype._resolveWidth = function ($element, method) {
	        var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

	        if (method == 'resolve') {
	          var styleWidth = this._resolveWidth($element, 'style');

	          if (styleWidth != null) {
	            return styleWidth;
	          }

	          return this._resolveWidth($element, 'element');
	        }

	        if (method == 'element') {
	          var elementWidth = $element.outerWidth(false);

	          if (elementWidth <= 0) {
	            return 'auto';
	          }

	          return elementWidth + 'px';
	        }

	        if (method == 'style') {
	          var style = $element.attr('style');

	          if (typeof style !== 'string') {
	            return null;
	          }

	          var attrs = style.split(';');

	          for (var i = 0, l = attrs.length; i < l; i = i + 1) {
	            var attr = attrs[i].replace(/\s/g, '');
	            var matches = attr.match(WIDTH);

	            if (matches !== null && matches.length >= 1) {
	              return matches[1];
	            }
	          }

	          return null;
	        }

	        return method;
	      };

	      Select2.prototype._bindAdapters = function () {
	        this.dataAdapter.bind(this, this.$container);
	        this.selection.bind(this, this.$container);

	        this.dropdown.bind(this, this.$container);
	        this.results.bind(this, this.$container);
	      };

	      Select2.prototype._registerDomEvents = function () {
	        var self = this;

	        this.$element.on('change.select2', function () {
	          self.dataAdapter.current(function (data) {
	            self.trigger('selection:update', {
	              data: data
	            });
	          });
	        });

	        this._sync = Utils.bind(this._syncAttributes, this);

	        if (this.$element[0].attachEvent) {
	          this.$element[0].attachEvent('onpropertychange', this._sync);
	        }

	        var observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

	        if (observer != null) {
	          this._observer = new observer(function (mutations) {
	            $.each(mutations, self._sync);
	          });
	          this._observer.observe(this.$element[0], {
	            attributes: true,
	            subtree: false
	          });
	        } else if (this.$element[0].addEventListener) {
	          this.$element[0].addEventListener('DOMAttrModified', self._sync, false);
	        }
	      };

	      Select2.prototype._registerDataEvents = function () {
	        var self = this;

	        this.dataAdapter.on('*', function (name, params) {
	          self.trigger(name, params);
	        });
	      };

	      Select2.prototype._registerSelectionEvents = function () {
	        var self = this;
	        var nonRelayEvents = ['toggle'];

	        this.selection.on('toggle', function () {
	          self.toggleDropdown();
	        });

	        this.selection.on('*', function (name, params) {
	          if ($.inArray(name, nonRelayEvents) !== -1) {
	            return;
	          }

	          self.trigger(name, params);
	        });
	      };

	      Select2.prototype._registerDropdownEvents = function () {
	        var self = this;

	        this.dropdown.on('*', function (name, params) {
	          self.trigger(name, params);
	        });
	      };

	      Select2.prototype._registerResultsEvents = function () {
	        var self = this;

	        this.results.on('*', function (name, params) {
	          self.trigger(name, params);
	        });
	      };

	      Select2.prototype._registerEvents = function () {
	        var self = this;

	        this.on('open', function () {
	          self.$container.addClass('select2-container--open');
	        });

	        this.on('close', function () {
	          self.$container.removeClass('select2-container--open');
	        });

	        this.on('enable', function () {
	          self.$container.removeClass('select2-container--disabled');
	        });

	        this.on('disable', function () {
	          self.$container.addClass('select2-container--disabled');
	        });

	        this.on('focus', function () {
	          self.$container.addClass('select2-container--focus');
	        });

	        this.on('blur', function () {
	          self.$container.removeClass('select2-container--focus');
	        });

	        this.on('query', function (params) {
	          if (!self.isOpen()) {
	            self.trigger('open');
	          }

	          this.dataAdapter.query(params, function (data) {
	            self.trigger('results:all', {
	              data: data,
	              query: params
	            });
	          });
	        });

	        this.on('query:append', function (params) {
	          this.dataAdapter.query(params, function (data) {
	            self.trigger('results:append', {
	              data: data,
	              query: params
	            });
	          });
	        });

	        this.on('keypress', function (evt) {
	          var key = evt.which;

	          if (self.isOpen()) {
	            if (key === KEYS.ENTER) {
	              self.trigger('results:select');

	              evt.preventDefault();
	            } else if (key === KEYS.SPACE && evt.ctrlKey) {
	              self.trigger('results:toggle');

	              evt.preventDefault();
	            } else if (key === KEYS.UP) {
	              self.trigger('results:previous');

	              evt.preventDefault();
	            } else if (key === KEYS.DOWN) {
	              self.trigger('results:next');

	              evt.preventDefault();
	            } else if (key === KEYS.ESC || key === KEYS.TAB) {
	              self.close();

	              evt.preventDefault();
	            }
	          } else {
	            if (key === KEYS.ENTER || key === KEYS.SPACE || (key === KEYS.DOWN || key === KEYS.UP) && evt.altKey) {
	              self.open();

	              evt.preventDefault();
	            }
	          }
	        });
	      };

	      Select2.prototype._syncAttributes = function () {
	        this.options.set('disabled', this.$element.prop('disabled'));

	        if (this.options.get('disabled')) {
	          if (this.isOpen()) {
	            this.close();
	          }

	          this.trigger('disable');
	        } else {
	          this.trigger('enable');
	        }
	      };

	      /**
	       * Override the trigger method to automatically trigger pre-events when
	       * there are events that can be prevented.
	       */
	      Select2.prototype.trigger = function (name, args) {
	        var actualTrigger = Select2.__super__.trigger;
	        var preTriggerMap = {
	          'open': 'opening',
	          'close': 'closing',
	          'select': 'selecting',
	          'unselect': 'unselecting'
	        };

	        if (name in preTriggerMap) {
	          var preTriggerName = preTriggerMap[name];
	          var preTriggerArgs = {
	            prevented: false,
	            name: name,
	            args: args
	          };

	          actualTrigger.call(this, preTriggerName, preTriggerArgs);

	          if (preTriggerArgs.prevented) {
	            args.prevented = true;

	            return;
	          }
	        }

	        actualTrigger.call(this, name, args);
	      };

	      Select2.prototype.toggleDropdown = function () {
	        if (this.options.get('disabled')) {
	          return;
	        }

	        if (this.isOpen()) {
	          this.close();
	        } else {
	          this.open();
	        }
	      };

	      Select2.prototype.open = function () {
	        if (this.isOpen()) {
	          return;
	        }

	        this.trigger('query', {});

	        this.trigger('open');
	      };

	      Select2.prototype.close = function () {
	        if (!this.isOpen()) {
	          return;
	        }

	        this.trigger('close');
	      };

	      Select2.prototype.isOpen = function () {
	        return this.$container.hasClass('select2-container--open');
	      };

	      Select2.prototype.enable = function (args) {
	        if (this.options.get('debug') && window.console && console.warn) {
	          console.warn('Select2: The `select2("enable")` method has been deprecated and will' + ' be removed in later Select2 versions. Use $element.prop("disabled")' + ' instead.');
	        }

	        if (args == null || args.length === 0) {
	          args = [true];
	        }

	        var disabled = !args[0];

	        this.$element.prop('disabled', disabled);
	      };

	      Select2.prototype.data = function () {
	        if (this.options.get('debug') && arguments.length > 0 && window.console && console.warn) {
	          console.warn('Select2: Data can no longer be set using `select2("data")`. You ' + 'should consider setting the value instead using `$element.val()`.');
	        }

	        var data = [];

	        this.dataAdapter.current(function (currentData) {
	          data = currentData;
	        });

	        return data;
	      };

	      Select2.prototype.val = function (args) {
	        if (this.options.get('debug') && window.console && console.warn) {
	          console.warn('Select2: The `select2("val")` method has been deprecated and will be' + ' removed in later Select2 versions. Use $element.val() instead.');
	        }

	        if (args == null || args.length === 0) {
	          return this.$element.val();
	        }

	        var newVal = args[0];

	        if ($.isArray(newVal)) {
	          newVal = $.map(newVal, function (obj) {
	            return obj.toString();
	          });
	        }

	        this.$element.val(newVal).trigger('change');
	      };

	      Select2.prototype.destroy = function () {
	        this.$container.remove();

	        if (this.$element[0].detachEvent) {
	          this.$element[0].detachEvent('onpropertychange', this._sync);
	        }

	        if (this._observer != null) {
	          this._observer.disconnect();
	          this._observer = null;
	        } else if (this.$element[0].removeEventListener) {
	          this.$element[0].removeEventListener('DOMAttrModified', this._sync, false);
	        }

	        this._sync = null;

	        this.$element.off('.select2');
	        this.$element.attr('tabindex', this.$element.data('old-tabindex'));

	        this.$element.removeClass('select2-hidden-accessible');
	        this.$element.attr('aria-hidden', 'false');
	        this.$element.removeData('select2');

	        this.dataAdapter.destroy();
	        this.selection.destroy();
	        this.dropdown.destroy();
	        this.results.destroy();

	        this.dataAdapter = null;
	        this.selection = null;
	        this.dropdown = null;
	        this.results = null;
	      };

	      Select2.prototype.render = function () {
	        var $container = $('<span class="select2 select2-container">' + '<span class="selection"></span>' + '<span class="dropdown-wrapper" aria-hidden="true"></span>' + '</span>');

	        $container.attr('dir', this.options.get('dir'));

	        this.$container = $container;

	        this.$container.addClass('select2-container--' + this.options.get('theme'));

	        $container.data('element', this.$element);

	        return $container;
	      };

	      return Select2;
	    });

	    S2.define('jquery.select2', ['jquery', 'require', './select2/core', './select2/defaults'], function ($, require, Select2, Defaults) {
	      // Force jQuery.mousewheel to be loaded if it hasn't already
	      require('jquery.mousewheel');

	      if ($.fn.select2 == null) {
	        // All methods that should return the element
	        var thisMethods = ['open', 'close', 'destroy'];

	        $.fn.select2 = function (options) {
	          options = options || {};

	          if (typeof options === 'object') {
	            this.each(function () {
	              var instanceOptions = $.extend({}, options, true);

	              var instance = new Select2($(this), instanceOptions);
	            });

	            return this;
	          } else if (typeof options === 'string') {
	            var instance = this.data('select2');

	            if (instance == null && window.console && console.error) {
	              console.error('The select2(\'' + options + '\') method was called on an ' + 'element that is not using Select2.');
	            }

	            var args = Array.prototype.slice.call(arguments, 1);

	            var ret = instance[options](args);

	            // Check if we should be returning `this`
	            if ($.inArray(options, thisMethods) > -1) {
	              return this;
	            }

	            return ret;
	          } else {
	            throw new Error('Invalid arguments for Select2: ' + options);
	          }
	        };
	      }

	      if ($.fn.select2.defaults == null) {
	        $.fn.select2.defaults = Defaults;
	      }

	      return Select2;
	    });

	    S2.define('jquery.mousewheel', ['jquery'], function ($) {
	      // Used to shim jQuery.mousewheel for non-full builds.
	      return $;
	    });

	    // Return the AMD loader configuration so it can be used outside of this file
	    return {
	      define: S2.define,
	      require: S2.require
	    };
	  })();

	  // Autoload the jQuery bindings
	  // We know that all of the modules exist above this, so we're safe
	  var select2 = S2.require('jquery.select2');

	  // Hold the AMD module references on the jQuery function that was just loaded
	  // This allows Select2 to use the internal loader outside of this file, such
	  // as in the language files.
	  jQuery.fn.select2.amd = S2;

	  // Return the Select2 instance for anyone who is importing it.
	  return select2;
	});

/***/ },

/***/ 132:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables 1.10.7
	 * ©2008-2014 SpryMedia Ltd - datatables.net/license
	 */

	/**
	 * @summary     DataTables
	 * @description Paginate, search and order HTML tables
	 * @version     1.10.7
	 * @file        jquery.dataTables.js
	 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
	 * @contact     www.sprymedia.co.uk/contact
	 * @copyright   Copyright 2008-2014 SpryMedia Ltd.
	 *
	 * This source file is free software, available under the following license:
	 *   MIT license - http://datatables.net/license
	 *
	 * This source file is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
	 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
	 *
	 * For details please refer to: http://www.datatables.net
	 */

	/*jslint evil: true, undef: true, browser: true */
	/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

	'use strict';

	(function (window, document, undefined) {

		(function (factory) {
			"use strict";

			if (true) {
				// Define as an AMD module if possible
				!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(112)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else if (typeof exports === 'object') {
				// Node/CommonJS
				module.exports = factory(require('jquery'));
			} else if (jQuery && !jQuery.fn.dataTable) {
				// Define using browser globals otherwise
				// Prevent multiple instantiations if the script is loaded twice
				factory(jQuery);
			}
		})( /** @lends <global> */function ($) {
			"use strict";

			/**
	   * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	   * flexible tool, based upon the foundations of progressive enhancement,
	   * which will add advanced interaction controls to any HTML table. For a
	   * full list of features please refer to
	   * [DataTables.net](href="http://datatables.net).
	   *
	   * Note that the `DataTable` object is not a global variable but is aliased
	   * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	   * be  accessed.
	   *
	   *  @class
	   *  @param {object} [init={}] Configuration object for DataTables. Options
	   *    are defined by {@link DataTable.defaults}
	   *  @requires jQuery 1.7+
	   *
	   *  @example
	   *    // Basic initialisation
	   *    $(document).ready( function {
	   *      $('#example').dataTable();
	   *    } );
	   *
	   *  @example
	   *    // Initialisation with configuration options - in this case, disable
	   *    // pagination and sorting.
	   *    $(document).ready( function {
	   *      $('#example').dataTable( {
	   *        "paginate": false,
	   *        "sort": false
	   *      } );
	   *    } );
	   */
			var DataTable;

			/*
	   * It is useful to have variables which are scoped locally so only the
	   * DataTables functions can access them and they don't leak into global space.
	   * At the same time these functions are often useful over multiple files in the
	   * core and API, so we list, or at least document, all variables which are used
	   * by DataTables as private variables here. This also ensures that there is no
	   * clashing of variable names and that they can easily referenced for reuse.
	   */

			// Defined else where
			//  _selector_run
			//  _selector_opts
			//  _selector_first
			//  _selector_row_indexes

			var _ext; // DataTable.ext
			var _Api; // DataTable.Api
			var _api_register; // DataTable.Api.register
			var _api_registerPlural; // DataTable.Api.registerPlural

			var _re_dic = {};
			var _re_new_lines = /[\r\n]/g;
			var _re_html = /<.*?>/g;
			var _re_date_start = /^[\w\+\-]/;
			var _re_date_end = /[\w\+\-]$/;

			// Escape regular expression special characters
			var _re_escape_regex = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-'].join('|\\') + ')', 'g');

			// http://en.wikipedia.org/wiki/Foreign_exchange_market
			// - \u20BD - Russian ruble.
			// - \u20a9 - South Korean Won
			// - \u20BA - Turkish Lira
			// - \u20B9 - Indian Rupee
			// - R - Brazil (R$) and South Africa
			// - fr - Swiss Franc
			// - kr - Swedish krona, Norwegian krone and Danish krone
			// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
			//   standards as thousands separators.
			var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;

			var _empty = function _empty(d) {
				return !d || d === true || d === '-' ? true : false;
			};

			var _intVal = function _intVal(s) {
				var integer = parseInt(s, 10);
				return !isNaN(integer) && isFinite(s) ? integer : null;
			};

			// Convert from a formatted number with characters other than `.` as the
			// decimal place, to a Javascript number
			var _numToDecimal = function _numToDecimal(num, decimalPoint) {
				// Cache created regular expressions for speed as this function is called often
				if (!_re_dic[decimalPoint]) {
					_re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
				}
				return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') : num;
			};

			var _isNumber = function _isNumber(d, decimalPoint, formatted) {
				var strType = typeof d === 'string';

				// If empty return immediately so there must be a number if it is a
				// formatted string (this stops the string "k", or "kr", etc being detected
				// as a formatted number for currency
				if (_empty(d)) {
					return true;
				}

				if (decimalPoint && strType) {
					d = _numToDecimal(d, decimalPoint);
				}

				if (formatted && strType) {
					d = d.replace(_re_formatted_numeric, '');
				}

				return !isNaN(parseFloat(d)) && isFinite(d);
			};

			// A string without HTML in it can be considered to be HTML still
			var _isHtml = function _isHtml(d) {
				return _empty(d) || typeof d === 'string';
			};

			var _htmlNumeric = function _htmlNumeric(d, decimalPoint, formatted) {
				if (_empty(d)) {
					return true;
				}

				var html = _isHtml(d);
				return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
			};

			var _pluck = function _pluck(a, prop, prop2) {
				var out = [];
				var i = 0,
				    ien = a.length;

				// Could have the test in the loop for slightly smaller code, but speed
				// is essential here
				if (prop2 !== undefined) {
					for (; i < ien; i++) {
						if (a[i] && a[i][prop]) {
							out.push(a[i][prop][prop2]);
						}
					}
				} else {
					for (; i < ien; i++) {
						if (a[i]) {
							out.push(a[i][prop]);
						}
					}
				}

				return out;
			};

			// Basically the same as _pluck, but rather than looping over `a` we use `order`
			// as the indexes to pick from `a`
			var _pluck_order = function _pluck_order(a, order, prop, prop2) {
				var out = [];
				var i = 0,
				    ien = order.length;

				// Could have the test in the loop for slightly smaller code, but speed
				// is essential here
				if (prop2 !== undefined) {
					for (; i < ien; i++) {
						if (a[order[i]][prop]) {
							out.push(a[order[i]][prop][prop2]);
						}
					}
				} else {
					for (; i < ien; i++) {
						out.push(a[order[i]][prop]);
					}
				}

				return out;
			};

			var _range = function _range(len, start) {
				var out = [];
				var end;

				if (start === undefined) {
					start = 0;
					end = len;
				} else {
					end = start;
					start = len;
				}

				for (var i = start; i < end; i++) {
					out.push(i);
				}

				return out;
			};

			var _removeEmpty = function _removeEmpty(a) {
				var out = [];

				for (var i = 0, ien = a.length; i < ien; i++) {
					if (a[i]) {
						// careful - will remove all falsy values!
						out.push(a[i]);
					}
				}

				return out;
			};

			var _stripHtml = function _stripHtml(d) {
				return d.replace(_re_html, '');
			};

			/**
	   * Find the unique elements in a source array.
	   *
	   * @param  {array} src Source array
	   * @return {array} Array of unique items
	   * @ignore
	   */
			var _unique = function _unique(src) {
				// A faster unique method is to use object keys to identify used values,
				// but this doesn't work with arrays or objects, which we must also
				// consider. See jsperf.com/compare-array-unique-versions/4 for more
				// information.
				var out = [],
				    val,
				    i,
				    ien = src.length,
				    j,
				    k = 0;

				again: for (i = 0; i < ien; i++) {
					val = src[i];

					for (j = 0; j < k; j++) {
						if (out[j] === val) {
							continue again;
						}
					}

					out.push(val);
					k++;
				}

				return out;
			};

			/**
	   * Create a mapping object that allows camel case parameters to be looked up
	   * for their Hungarian counterparts. The mapping is stored in a private
	   * parameter called `_hungarianMap` which can be accessed on the source object.
	   *  @param {object} o
	   *  @memberof DataTable#oApi
	   */
			function _fnHungarianMap(o) {
				var hungarian = 'a aa ai ao as b fn i m o s ',
				    match,
				    newKey,
				    map = {};

				$.each(o, function (key, val) {
					match = key.match(/^([^A-Z]+?)([A-Z])/);

					if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
						newKey = key.replace(match[0], match[2].toLowerCase());
						map[newKey] = key;

						if (match[1] === 'o') {
							_fnHungarianMap(o[key]);
						}
					}
				});

				o._hungarianMap = map;
			}

			/**
	   * Convert from camel case parameters to Hungarian, based on a Hungarian map
	   * created by _fnHungarianMap.
	   *  @param {object} src The model object which holds all parameters that can be
	   *    mapped.
	   *  @param {object} user The object to convert from camel case to Hungarian.
	   *  @param {boolean} force When set to `true`, properties which already have a
	   *    Hungarian value in the `user` object will be overwritten. Otherwise they
	   *    won't be.
	   *  @memberof DataTable#oApi
	   */
			function _fnCamelToHungarian(src, user, force) {
				if (!src._hungarianMap) {
					_fnHungarianMap(src);
				}

				var hungarianKey;

				$.each(user, function (key, val) {
					hungarianKey = src._hungarianMap[key];

					if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
						// For objects, we need to buzz down into the object to copy parameters
						if (hungarianKey.charAt(0) === 'o') {
							// Copy the camelCase options over to the hungarian
							if (!user[hungarianKey]) {
								user[hungarianKey] = {};
							}
							$.extend(true, user[hungarianKey], user[key]);

							_fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
						} else {
							user[hungarianKey] = user[key];
						}
					}
				});
			}

			/**
	   * Language compatibility - when certain options are given, and others aren't, we
	   * need to duplicate the values over, in order to provide backwards compatibility
	   * with older language files.
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnLanguageCompat(lang) {
				var defaults = DataTable.defaults.oLanguage;
				var zeroRecords = lang.sZeroRecords;

				/* Backwards compatibility - if there is no sEmptyTable given, then use the same as
	    * sZeroRecords - assuming that is given.
	    */
				if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === "No data available in table") {
					_fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
				}

				/* Likewise with loading records */
				if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === "Loading...") {
					_fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
				}

				// Old parameter name of the thousands separator mapped onto the new
				if (lang.sInfoThousands) {
					lang.sThousands = lang.sInfoThousands;
				}

				var decimal = lang.sDecimal;
				if (decimal) {
					_addNumericSort(decimal);
				}
			}

			/**
	   * Map one parameter onto another
	   *  @param {object} o Object to map
	   *  @param {*} knew The new parameter name
	   *  @param {*} old The old parameter name
	   */
			var _fnCompatMap = function _fnCompatMap(o, knew, old) {
				if (o[knew] !== undefined) {
					o[old] = o[knew];
				}
			};

			/**
	   * Provide backwards compatibility for the main DT options. Note that the new
	   * options are mapped onto the old parameters, so this is an external interface
	   * change only.
	   *  @param {object} init Object to map
	   */
			function _fnCompatOpts(init) {
				_fnCompatMap(init, 'ordering', 'bSort');
				_fnCompatMap(init, 'orderMulti', 'bSortMulti');
				_fnCompatMap(init, 'orderClasses', 'bSortClasses');
				_fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');
				_fnCompatMap(init, 'order', 'aaSorting');
				_fnCompatMap(init, 'orderFixed', 'aaSortingFixed');
				_fnCompatMap(init, 'paging', 'bPaginate');
				_fnCompatMap(init, 'pagingType', 'sPaginationType');
				_fnCompatMap(init, 'pageLength', 'iDisplayLength');
				_fnCompatMap(init, 'searching', 'bFilter');

				// Column search objects are in an array, so it needs to be converted
				// element by element
				var searchCols = init.aoSearchCols;

				if (searchCols) {
					for (var i = 0, ien = searchCols.length; i < ien; i++) {
						if (searchCols[i]) {
							_fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
						}
					}
				}
			}

			/**
	   * Provide backwards compatibility for column options. Note that the new options
	   * are mapped onto the old parameters, so this is an external interface change
	   * only.
	   *  @param {object} init Object to map
	   */
			function _fnCompatCols(init) {
				_fnCompatMap(init, 'orderable', 'bSortable');
				_fnCompatMap(init, 'orderData', 'aDataSort');
				_fnCompatMap(init, 'orderSequence', 'asSorting');
				_fnCompatMap(init, 'orderDataType', 'sortDataType');

				// orderData can be given as an integer
				var dataSort = init.aDataSort;
				if (dataSort && !$.isArray(dataSort)) {
					init.aDataSort = [dataSort];
				}
			}

			/**
	   * Browser feature detection for capabilities, quirks
	   *  @param {object} settings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnBrowserDetect(settings) {
				var browser = settings.oBrowser;

				// Scrolling feature / quirks detection
				var n = $('<div/>').css({
					position: 'absolute',
					top: 0,
					left: 0,
					height: 1,
					width: 1,
					overflow: 'hidden'
				}).append($('<div/>').css({
					position: 'absolute',
					top: 1,
					left: 1,
					width: 100,
					overflow: 'scroll'
				}).append($('<div class="test"/>').css({
					width: '100%',
					height: 10
				}))).appendTo('body');

				var test = n.find('.test');

				// IE6/7 will oversize a width 100% element inside a scrolling element, to
				// include the width of the scrollbar, while other browsers ensure the inner
				// element is contained without forcing scrolling
				browser.bScrollOversize = test[0].offsetWidth === 100;

				// In rtl text layout, some browsers (most, but not all) will place the
				// scrollbar on the left, rather than the right.
				browser.bScrollbarLeft = Math.round(test.offset().left) !== 1;

				n.remove();
			}

			/**
	   * Array.prototype reduce[Right] method, used for browsers which don't support
	   * JS 1.6. Done this way to reduce code size, since we iterate either way
	   *  @param {object} settings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnReduce(that, fn, init, start, end, inc) {
				var i = start,
				    value,
				    isSet = false;

				if (init !== undefined) {
					value = init;
					isSet = true;
				}

				while (i !== end) {
					if (!that.hasOwnProperty(i)) {
						continue;
					}

					value = isSet ? fn(value, that[i], i, that) : that[i];

					isSet = true;
					i += inc;
				}

				return value;
			}

			/**
	   * Add a column to the list used for the table with default values
	   *  @param {object} oSettings dataTables settings object
	   *  @param {node} nTh The th element for this column
	   *  @memberof DataTable#oApi
	   */
			function _fnAddColumn(oSettings, nTh) {
				// Add column to aoColumns array
				var oDefaults = DataTable.defaults.column;
				var iCol = oSettings.aoColumns.length;
				var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
					"nTh": nTh ? nTh : document.createElement('th'),
					"sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
					"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
					"mData": oDefaults.mData ? oDefaults.mData : iCol,
					idx: iCol
				});
				oSettings.aoColumns.push(oCol);

				// Add search object for column specific search. Note that the `searchCols[ iCol ]`
				// passed into extend can be undefined. This allows the user to give a default
				// with only some of the parameters defined, and also not give a default
				var searchCols = oSettings.aoPreSearchCols;
				searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);

				// Use the default column options function to initialise classes etc
				_fnColumnOptions(oSettings, iCol, $(nTh).data());
			}

			/**
	   * Apply options for a column
	   *  @param {object} oSettings dataTables settings object
	   *  @param {int} iCol column index to consider
	   *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	   *  @memberof DataTable#oApi
	   */
			function _fnColumnOptions(oSettings, iCol, oOptions) {
				var oCol = oSettings.aoColumns[iCol];
				var oClasses = oSettings.oClasses;
				var th = $(oCol.nTh);

				// Try to get width information from the DOM. We can't get it from CSS
				// as we'd need to parse the CSS stylesheet. `width` option can override
				if (!oCol.sWidthOrig) {
					// Width attribute
					oCol.sWidthOrig = th.attr('width') || null;

					// Style attribute
					var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
					if (t) {
						oCol.sWidthOrig = t[1];
					}
				}

				/* User specified column options */
				if (oOptions !== undefined && oOptions !== null) {
					// Backwards compatibility
					_fnCompatCols(oOptions);

					// Map camel case parameters to their Hungarian counterparts
					_fnCamelToHungarian(DataTable.defaults.column, oOptions);

					/* Backwards compatibility for mDataProp */
					if (oOptions.mDataProp !== undefined && !oOptions.mData) {
						oOptions.mData = oOptions.mDataProp;
					}

					if (oOptions.sType) {
						oCol._sManualType = oOptions.sType;
					}

					// `class` is a reserved word in Javascript, so we need to provide
					// the ability to use a valid name for the camel case input
					if (oOptions.className && !oOptions.sClass) {
						oOptions.sClass = oOptions.className;
					}

					$.extend(oCol, oOptions);
					_fnMap(oCol, oOptions, "sWidth", "sWidthOrig");

					/* iDataSort to be applied (backwards compatibility), but aDataSort will take
	     * priority if defined
	     */
					if (oOptions.iDataSort !== undefined) {
						oCol.aDataSort = [oOptions.iDataSort];
					}
					_fnMap(oCol, oOptions, "aDataSort");
				}

				/* Cache the data get and set functions for speed */
				var mDataSrc = oCol.mData;
				var mData = _fnGetObjectDataFn(mDataSrc);
				var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

				var attrTest = function attrTest(src) {
					return typeof src === 'string' && src.indexOf('@') !== -1;
				};
				oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));

				oCol.fnGetData = function (rowData, type, meta) {
					var innerData = mData(rowData, type, undefined, meta);

					return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
				};
				oCol.fnSetData = function (rowData, val, meta) {
					return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
				};

				// Indicate if DataTables should read DOM data as an object or array
				// Used in _fnGetRowElements
				if (typeof mDataSrc !== 'number') {
					oSettings._rowReadObject = true;
				}

				/* Feature sorting overrides column specific when off */
				if (!oSettings.oFeatures.bSort) {
					oCol.bSortable = false;
					th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
				}

				/* Check that the class assignment is correct for sorting */
				var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
				var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
				if (!oCol.bSortable || !bAsc && !bDesc) {
					oCol.sSortingClass = oClasses.sSortableNone;
					oCol.sSortingClassJUI = "";
				} else if (bAsc && !bDesc) {
					oCol.sSortingClass = oClasses.sSortableAsc;
					oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
				} else if (!bAsc && bDesc) {
					oCol.sSortingClass = oClasses.sSortableDesc;
					oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
				} else {
					oCol.sSortingClass = oClasses.sSortable;
					oCol.sSortingClassJUI = oClasses.sSortJUI;
				}
			}

			/**
	   * Adjust the table column widths for new data. Note: you would probably want to
	   * do a redraw after calling this function!
	   *  @param {object} settings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnAdjustColumnSizing(settings) {
				/* Not interested in doing column width calculation if auto-width is disabled */
				if (settings.oFeatures.bAutoWidth !== false) {
					var columns = settings.aoColumns;

					_fnCalculateColumnWidths(settings);
					for (var i = 0, iLen = columns.length; i < iLen; i++) {
						columns[i].nTh.style.width = columns[i].sWidth;
					}
				}

				var scroll = settings.oScroll;
				if (scroll.sY !== '' || scroll.sX !== '') {
					_fnScrollDraw(settings);
				}

				_fnCallbackFire(settings, null, 'column-sizing', [settings]);
			}

			/**
	   * Covert the index of a visible column to the index in the data array (take account
	   * of hidden columns)
	   *  @param {object} oSettings dataTables settings object
	   *  @param {int} iMatch Visible column index to lookup
	   *  @returns {int} i the data index
	   *  @memberof DataTable#oApi
	   */
			function _fnVisibleToColumnIndex(oSettings, iMatch) {
				var aiVis = _fnGetColumns(oSettings, 'bVisible');

				return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;
			}

			/**
	   * Covert the index of an index in the data array and convert it to the visible
	   *   column index (take account of hidden columns)
	   *  @param {int} iMatch Column index to lookup
	   *  @param {object} oSettings dataTables settings object
	   *  @returns {int} i the data index
	   *  @memberof DataTable#oApi
	   */
			function _fnColumnIndexToVisible(oSettings, iMatch) {
				var aiVis = _fnGetColumns(oSettings, 'bVisible');
				var iPos = $.inArray(iMatch, aiVis);

				return iPos !== -1 ? iPos : null;
			}

			/**
	   * Get the number of visible columns
	   *  @param {object} oSettings dataTables settings object
	   *  @returns {int} i the number of visible columns
	   *  @memberof DataTable#oApi
	   */
			function _fnVisbleColumns(oSettings) {
				return _fnGetColumns(oSettings, 'bVisible').length;
			}

			/**
	   * Get an array of column indexes that match a given property
	   *  @param {object} oSettings dataTables settings object
	   *  @param {string} sParam Parameter in aoColumns to look for - typically
	   *    bVisible or bSearchable
	   *  @returns {array} Array of indexes with matched properties
	   *  @memberof DataTable#oApi
	   */
			function _fnGetColumns(oSettings, sParam) {
				var a = [];

				$.map(oSettings.aoColumns, function (val, i) {
					if (val[sParam]) {
						a.push(i);
					}
				});

				return a;
			}

			/**
	   * Calculate the 'type' of a column
	   *  @param {object} settings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnColumnTypes(settings) {
				var columns = settings.aoColumns;
				var data = settings.aoData;
				var types = DataTable.ext.type.detect;
				var i, ien, j, jen, k, ken;
				var col, cell, detectedType, cache;

				// For each column, spin over the
				for (i = 0, ien = columns.length; i < ien; i++) {
					col = columns[i];
					cache = [];

					if (!col.sType && col._sManualType) {
						col.sType = col._sManualType;
					} else if (!col.sType) {
						for (j = 0, jen = types.length; j < jen; j++) {
							for (k = 0, ken = data.length; k < ken; k++) {
								// Use a cache array so we only need to get the type data
								// from the formatter once (when using multiple detectors)
								if (cache[k] === undefined) {
									cache[k] = _fnGetCellData(settings, k, i, 'type');
								}

								detectedType = types[j](cache[k], settings);

								// If null, then this type can't apply to this column, so
								// rather than testing all cells, break out. There is an
								// exception for the last type which is `html`. We need to
								// scan all rows since it is possible to mix string and HTML
								// types
								if (!detectedType && j !== types.length - 1) {
									break;
								}

								// Only a single match is needed for html type since it is
								// bottom of the pile and very similar to string
								if (detectedType === 'html') {
									break;
								}
							}

							// Type is valid for all data points in the column - use this
							// type
							if (detectedType) {
								col.sType = detectedType;
								break;
							}
						}

						// Fall back - if no type was detected, always use string
						if (!col.sType) {
							col.sType = 'string';
						}
					}
				}
			}

			/**
	   * Take the column definitions and static columns arrays and calculate how
	   * they relate to column indexes. The callback function will then apply the
	   * definition found for a column to a suitable configuration object.
	   *  @param {object} oSettings dataTables settings object
	   *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	   *  @param {array} aoCols The aoColumns array that defines columns individually
	   *  @param {function} fn Callback function - takes two parameters, the calculated
	   *    column index and the definition for that column.
	   *  @memberof DataTable#oApi
	   */
			function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
				var i, iLen, j, jLen, k, kLen, def;
				var columns = oSettings.aoColumns;

				// Column definitions with aTargets
				if (aoColDefs) {
					/* Loop over the definitions array - loop in reverse so first instance has priority */
					for (i = aoColDefs.length - 1; i >= 0; i--) {
						def = aoColDefs[i];

						/* Each definition can target multiple columns, as it is an array */
						var aTargets = def.targets !== undefined ? def.targets : def.aTargets;

						if (!$.isArray(aTargets)) {
							aTargets = [aTargets];
						}

						for (j = 0, jLen = aTargets.length; j < jLen; j++) {
							if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
								/* Add columns that we don't yet know about */
								while (columns.length <= aTargets[j]) {
									_fnAddColumn(oSettings);
								}

								/* Integer, basic index */
								fn(aTargets[j], def);
							} else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
								/* Negative integer, right to left column counting */
								fn(columns.length + aTargets[j], def);
							} else if (typeof aTargets[j] === 'string') {
								/* Class name matching on TH element */
								for (k = 0, kLen = columns.length; k < kLen; k++) {
									if (aTargets[j] == "_all" || $(columns[k].nTh).hasClass(aTargets[j])) {
										fn(k, def);
									}
								}
							}
						}
					}
				}

				// Statically defined columns array
				if (aoCols) {
					for (i = 0, iLen = aoCols.length; i < iLen; i++) {
						fn(i, aoCols[i]);
					}
				}
			}

			/**
	   * Add a data array to the table, creating DOM node etc. This is the parallel to
	   * _fnGatherData, but for adding rows from a Javascript source, rather than a
	   * DOM source.
	   *  @param {object} oSettings dataTables settings object
	   *  @param {array} aData data array to be added
	   *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	   *    DataTables will create a row automatically
	   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	   *    if nTr is.
	   *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	   *  @memberof DataTable#oApi
	   */
			function _fnAddData(oSettings, aDataIn, nTr, anTds) {
				/* Create the object for storing information about this new row */
				var iRow = oSettings.aoData.length;
				var oData = $.extend(true, {}, DataTable.models.oRow, {
					src: nTr ? 'dom' : 'data'
				});

				oData._aData = aDataIn;
				oSettings.aoData.push(oData);

				/* Create the cells */
				var nTd, sThisType;
				var columns = oSettings.aoColumns;
				for (var i = 0, iLen = columns.length; i < iLen; i++) {
					// When working with a row, the data source object must be populated. In
					// all other cases, the data source object is already populated, so we
					// don't overwrite it, which might break bindings etc
					if (nTr) {
						_fnSetCellData(oSettings, iRow, i, _fnGetCellData(oSettings, iRow, i));
					}
					columns[i].sType = null;
				}

				/* Add to the display array */
				oSettings.aiDisplayMaster.push(iRow);

				/* Create the DOM information, or register it if already present */
				if (nTr || !oSettings.oFeatures.bDeferRender) {
					_fnCreateTr(oSettings, iRow, nTr, anTds);
				}

				return iRow;
			}

			/**
	   * Add one or more TR elements to the table. Generally we'd expect to
	   * use this for reading data from a DOM sourced table, but it could be
	   * used for an TR element. Note that if a TR is given, it is used (i.e.
	   * it is not cloned).
	   *  @param {object} settings dataTables settings object
	   *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	   *  @returns {array} Array of indexes for the added rows
	   *  @memberof DataTable#oApi
	   */
			function _fnAddTr(settings, trs) {
				var row;

				// Allow an individual node to be passed in
				if (!(trs instanceof $)) {
					trs = $(trs);
				}

				return trs.map(function (i, el) {
					row = _fnGetRowElements(settings, el);
					return _fnAddData(settings, row.data, el, row.cells);
				});
			}

			/**
	   * Take a TR element and convert it to an index in aoData
	   *  @param {object} oSettings dataTables settings object
	   *  @param {node} n the TR element to find
	   *  @returns {int} index if the node is found, null if not
	   *  @memberof DataTable#oApi
	   */
			function _fnNodeToDataIndex(oSettings, n) {
				return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
			}

			/**
	   * Take a TD element and convert it into a column data index (not the visible index)
	   *  @param {object} oSettings dataTables settings object
	   *  @param {int} iRow The row number the TD/TH can be found in
	   *  @param {node} n The TD/TH element to find
	   *  @returns {int} index if the node is found, -1 if not
	   *  @memberof DataTable#oApi
	   */
			function _fnNodeToColumnIndex(oSettings, iRow, n) {
				return $.inArray(n, oSettings.aoData[iRow].anCells);
			}

			/**
	   * Get the data for a given cell from the internal cache, taking into account data mapping
	   *  @param {object} settings dataTables settings object
	   *  @param {int} rowIdx aoData row id
	   *  @param {int} colIdx Column index
	   *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	   *  @returns {*} Cell data
	   *  @memberof DataTable#oApi
	   */
			function _fnGetCellData(settings, rowIdx, colIdx, type) {
				var draw = settings.iDraw;
				var col = settings.aoColumns[colIdx];
				var rowData = settings.aoData[rowIdx]._aData;
				var defaultContent = col.sDefaultContent;
				var cellData = col.fnGetData(rowData, type, {
					settings: settings,
					row: rowIdx,
					col: colIdx
				});

				if (cellData === undefined) {
					if (settings.iDrawError != draw && defaultContent === null) {
						_fnLog(settings, 0, "Requested unknown parameter " + (typeof col.mData == 'function' ? '{function}' : "'" + col.mData + "'") + " for row " + rowIdx, 4);
						settings.iDrawError = draw;
					}
					return defaultContent;
				}

				/* When the data source is null, we can use default column data */
				if ((cellData === rowData || cellData === null) && defaultContent !== null) {
					cellData = defaultContent;
				} else if (typeof cellData === 'function') {
					// If the data source is a function, then we run it and use the return,
					// executing in the scope of the data object (for instances)
					return cellData.call(rowData);
				}

				if (cellData === null && type == 'display') {
					return '';
				}
				return cellData;
			}

			/**
	   * Set the value for a specific cell, into the internal data cache
	   *  @param {object} settings dataTables settings object
	   *  @param {int} rowIdx aoData row id
	   *  @param {int} colIdx Column index
	   *  @param {*} val Value to set
	   *  @memberof DataTable#oApi
	   */
			function _fnSetCellData(settings, rowIdx, colIdx, val) {
				var col = settings.aoColumns[colIdx];
				var rowData = settings.aoData[rowIdx]._aData;

				col.fnSetData(rowData, val, {
					settings: settings,
					row: rowIdx,
					col: colIdx
				});
			}

			// Private variable that is used to match action syntax in the data property object
			var __reArray = /\[.*?\]$/;
			var __reFn = /\(\)$/;

			/**
	   * Split string on periods, taking into account escaped periods
	   * @param  {string} str String to split
	   * @return {array} Split string
	   */
			function _fnSplitObjNotation(str) {
				return $.map(str.match(/(\\.|[^\.])+/g), function (s) {
					return s.replace(/\\./g, '.');
				});
			}

			/**
	   * Return a function that can be used to get data from a source object, taking
	   * into account the ability to use nested objects as a source
	   *  @param {string|int|function} mSource The data source for the object
	   *  @returns {function} Data get function
	   *  @memberof DataTable#oApi
	   */
			function _fnGetObjectDataFn(mSource) {
				if ($.isPlainObject(mSource)) {
					/* Build an object of get functions, and wrap them in a single call */
					var o = {};
					$.each(mSource, function (key, val) {
						if (val) {
							o[key] = _fnGetObjectDataFn(val);
						}
					});

					return function (data, type, row, meta) {
						var t = o[type] || o._;
						return t !== undefined ? t(data, type, row, meta) : data;
					};
				} else if (mSource === null) {
					/* Give an empty string for rendering / sorting etc */
					return function (data) {
						// type, row and meta also passed, but not used
						return data;
					};
				} else if (typeof mSource === 'function') {
					return function (data, type, row, meta) {
						return mSource(data, type, row, meta);
					};
				} else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
					/* If there is a . in the source string then the data source is in a
	     * nested object so we loop over the data for each level to get the next
	     * level down. On each loop we test for undefined, and if found immediately
	     * return. This allows entire objects to be missing and sDefaultContent to
	     * be used if defined, rather than throwing an error
	     */
					var fetchData = function fetchData(data, type, src) {
						var arrayNotation, funcNotation, out, innerSrc;

						if (src !== "") {
							var a = _fnSplitObjNotation(src);

							for (var i = 0, iLen = a.length; i < iLen; i++) {
								// Check if we are dealing with special notation
								arrayNotation = a[i].match(__reArray);
								funcNotation = a[i].match(__reFn);

								if (arrayNotation) {
									// Array notation
									a[i] = a[i].replace(__reArray, '');

									// Condition allows simply [] to be passed in
									if (a[i] !== "") {
										data = data[a[i]];
									}
									out = [];

									// Get the remainder of the nested object to get
									a.splice(0, i + 1);
									innerSrc = a.join('.');

									// Traverse each entry in the array getting the properties requested
									for (var j = 0, jLen = data.length; j < jLen; j++) {
										out.push(fetchData(data[j], type, innerSrc));
									}

									// If a string is given in between the array notation indicators, that
									// is used to join the strings together, otherwise an array is returned
									var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
									data = join === "" ? out : out.join(join);

									// The inner call to fetchData has already traversed through the remainder
									// of the source requested, so we exit from the loop
									break;
								} else if (funcNotation) {
									// Function call
									a[i] = a[i].replace(__reFn, '');
									data = data[a[i]]();
									continue;
								}

								if (data === null || data[a[i]] === undefined) {
									return undefined;
								}
								data = data[a[i]];
							}
						}

						return data;
					};

					return function (data, type) {
						// row and meta also passed, but not used
						return fetchData(data, type, mSource);
					};
				} else {
					/* Array or flat object mapping */
					return function (data, type) {
						// row and meta also passed, but not used
						return data[mSource];
					};
				}
			}

			/**
	   * Return a function that can be used to set data from a source object, taking
	   * into account the ability to use nested objects as a source
	   *  @param {string|int|function} mSource The data source for the object
	   *  @returns {function} Data set function
	   *  @memberof DataTable#oApi
	   */
			function _fnSetObjectDataFn(_x) {
				var _again = true;

				_function: while (_again) {
					var mSource = _x;
					setData = undefined;
					_again = false;

					if ($.isPlainObject(mSource)) {
						/* Unlike get, only the underscore (global) option is used for for
	      * setting data since we don't know the type here. This is why an object
	      * option is not documented for `mData` (which is read/write), but it is
	      * for `mRender` which is read only.
	      */
						_x = mSource._;
						_again = true;
						continue _function;
					} else if (mSource === null) {
						/* Nothing to do when the data source is null */
						return function () {};
					} else if (typeof mSource === 'function') {
						return function (data, val, meta) {
							mSource(data, 'set', val, meta);
						};
					} else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
						/* Like the get, we need to get data from a nested object */
						var setData = function setData(data, val, src) {
							var a = _fnSplitObjNotation(src),
							    b;
							var aLast = a[a.length - 1];
							var arrayNotation, funcNotation, o, innerSrc;

							for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
								// Check if we are dealing with an array notation request
								arrayNotation = a[i].match(__reArray);
								funcNotation = a[i].match(__reFn);

								if (arrayNotation) {
									a[i] = a[i].replace(__reArray, '');
									data[a[i]] = [];

									// Get the remainder of the nested object to set so we can recurse
									b = a.slice();
									b.splice(0, i + 1);
									innerSrc = b.join('.');

									// Traverse each entry in the array setting the properties requested
									for (var j = 0, jLen = val.length; j < jLen; j++) {
										o = {};
										setData(o, val[j], innerSrc);
										data[a[i]].push(o);
									}

									// The inner call to setData has already traversed through the remainder
									// of the source and has set the data, thus we can exit here
									return;
								} else if (funcNotation) {
									// Function call
									a[i] = a[i].replace(__reFn, '');
									data = data[a[i]](val);
								}

								// If the nested object doesn't currently exist - since we are
								// trying to set the value - create it
								if (data[a[i]] === null || data[a[i]] === undefined) {
									data[a[i]] = {};
								}
								data = data[a[i]];
							}

							// Last item in the input - i.e, the actual set
							if (aLast.match(__reFn)) {
								// Function call
								data = data[aLast.replace(__reFn, '')](val);
							} else {
								// If array notation is used, we just want to strip it and use the property name
								// and assign the value. If it isn't used, then we get the result we want anyway
								data[aLast.replace(__reArray, '')] = val;
							}
						};

						return function (data, val) {
							// meta is also passed in, but not used
							return setData(data, val, mSource);
						};
					} else {
						/* Array or flat object mapping */
						return function (data, val) {
							// meta is also passed in, but not used
							data[mSource] = val;
						};
					}
				}
			}

			/**
	   * Return an array with the full table data
	   *  @param {object} oSettings dataTables settings object
	   *  @returns array {array} aData Master data array
	   *  @memberof DataTable#oApi
	   */
			function _fnGetDataMaster(settings) {
				return _pluck(settings.aoData, '_aData');
			}

			/**
	   * Nuke the table
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnClearTable(settings) {
				settings.aoData.length = 0;
				settings.aiDisplayMaster.length = 0;
				settings.aiDisplay.length = 0;
			}

			/**
	  * Take an array of integers (index array) and remove a target integer (value - not
	  * the key!)
	  *  @param {array} a Index array to target
	  *  @param {int} iTarget value to find
	  *  @memberof DataTable#oApi
	  */
			function _fnDeleteIndex(a, iTarget, splice) {
				var iTargetIndex = -1;

				for (var i = 0, iLen = a.length; i < iLen; i++) {
					if (a[i] == iTarget) {
						iTargetIndex = i;
					} else if (a[i] > iTarget) {
						a[i]--;
					}
				}

				if (iTargetIndex != -1 && splice === undefined) {
					a.splice(iTargetIndex, 1);
				}
			}

			/**
	   * Mark cached data as invalid such that a re-read of the data will occur when
	   * the cached data is next requested. Also update from the data source object.
	   *
	   * @param {object} settings DataTables settings object
	   * @param {int}    rowIdx   Row index to invalidate
	   * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	   *     or 'data'
	   * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	   *     row will be invalidated
	   * @memberof DataTable#oApi
	   *
	   * @todo For the modularisation of v1.11 this will need to become a callback, so
	   *   the sort and filter methods can subscribe to it. That will required
	   *   initialisation options for sorting, which is why it is not already baked in
	   */
			function _fnInvalidate(settings, rowIdx, src, colIdx) {
				var row = settings.aoData[rowIdx];
				var i, ien;
				var cellWrite = function cellWrite(cell, col) {
					// This is very frustrating, but in IE if you just write directly
					// to innerHTML, and elements that are overwritten are GC'ed,
					// even if there is a reference to them elsewhere
					while (cell.childNodes.length) {
						cell.removeChild(cell.firstChild);
					}

					cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
				};

				// Are we reading last data from DOM or the data object?
				if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {
					// Read the data from the DOM
					row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
				} else {
					// Reading from data object, update the DOM
					var cells = row.anCells;

					if (cells) {
						if (colIdx !== undefined) {
							cellWrite(cells[colIdx], colIdx);
						} else {
							for (i = 0, ien = cells.length; i < ien; i++) {
								cellWrite(cells[i], i);
							}
						}
					}
				}

				// For both row and cell invalidation, the cached data for sorting and
				// filtering is nulled out
				row._aSortData = null;
				row._aFilterData = null;

				// Invalidate the type for a specific column (if given) or all columns since
				// the data might have changed
				var cols = settings.aoColumns;
				if (colIdx !== undefined) {
					cols[colIdx].sType = null;
				} else {
					for (i = 0, ien = cols.length; i < ien; i++) {
						cols[i].sType = null;
					}

					// Update DataTables special `DT_*` attributes for the row
					_fnRowAttributes(row);
				}
			}

			/**
	   * Build a data source object from an HTML row, reading the contents of the
	   * cells that are in the row.
	   *
	   * @param {object} settings DataTables settings object
	   * @param {node|object} TR element from which to read data or existing row
	   *   object from which to re-read the data from the cells
	   * @param {int} [colIdx] Optional column index
	   * @param {array|object} [d] Data source object. If `colIdx` is given then this
	   *   parameter should also be given and will be used to write the data into.
	   *   Only the column in question will be written
	   * @returns {object} Object with two parameters: `data` the data read, in
	   *   document order, and `cells` and array of nodes (they can be useful to the
	   *   caller, so rather than needing a second traversal to get them, just return
	   *   them from here).
	   * @memberof DataTable#oApi
	   */
			function _fnGetRowElements(settings, row, colIdx, d) {
				var tds = [],
				    td = row.firstChild,
				    name,
				    col,
				    o,
				    i = 0,
				    contents,
				    columns = settings.aoColumns,
				    objectRead = settings._rowReadObject;

				// Allow the data object to be passed in, or construct
				d = d || objectRead ? {} : [];

				var attr = function attr(str, td) {
					if (typeof str === 'string') {
						var idx = str.indexOf('@');

						if (idx !== -1) {
							var attr = str.substring(idx + 1);
							var setter = _fnSetObjectDataFn(str);
							setter(d, td.getAttribute(attr));
						}
					}
				};

				// Read data from a cell and store into the data object
				var cellProcess = function cellProcess(cell) {
					if (colIdx === undefined || colIdx === i) {
						col = columns[i];
						contents = $.trim(cell.innerHTML);

						if (col && col._bAttrSrc) {
							var setter = _fnSetObjectDataFn(col.mData._);
							setter(d, contents);

							attr(col.mData.sort, cell);
							attr(col.mData.type, cell);
							attr(col.mData.filter, cell);
						} else {
							// Depending on the `data` option for the columns the data can
							// be read to either an object or an array.
							if (objectRead) {
								if (!col._setter) {
									// Cache the setter function
									col._setter = _fnSetObjectDataFn(col.mData);
								}
								col._setter(d, contents);
							} else {
								d[i] = contents;
							}
						}
					}

					i++;
				};

				if (td) {
					// `tr` element was passed in
					while (td) {
						name = td.nodeName.toUpperCase();

						if (name == "TD" || name == "TH") {
							cellProcess(td);
							tds.push(td);
						}

						td = td.nextSibling;
					}
				} else {
					// Existing row object passed in
					tds = row.anCells;

					for (var j = 0, jen = tds.length; j < jen; j++) {
						cellProcess(tds[j]);
					}
				}

				return {
					data: d,
					cells: tds
				};
			}
			/**
	   * Create a new TR element (and it's TD children) for a row
	   *  @param {object} oSettings dataTables settings object
	   *  @param {int} iRow Row to consider
	   *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	   *    DataTables will create a row automatically
	   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	   *    if nTr is.
	   *  @memberof DataTable#oApi
	   */
			function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
				var row = oSettings.aoData[iRow],
				    rowData = row._aData,
				    cells = [],
				    nTr,
				    nTd,
				    oCol,
				    i,
				    iLen;

				if (row.nTr === null) {
					nTr = nTrIn || document.createElement('tr');

					row.nTr = nTr;
					row.anCells = cells;

					/* Use a private property on the node to allow reserve mapping from the node
	     * to the aoData array for fast look up
	     */
					nTr._DT_RowIndex = iRow;

					/* Special parameters can be given by the data source to be used on the row */
					_fnRowAttributes(row);

					/* Process each column */
					for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
						oCol = oSettings.aoColumns[i];

						nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
						cells.push(nTd);

						// Need to create the HTML if new, or if a rendering function is defined
						if (!nTrIn || oCol.mRender || oCol.mData !== i) {
							nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
						}

						/* Add user defined class */
						if (oCol.sClass) {
							nTd.className += ' ' + oCol.sClass;
						}

						// Visibility - add or remove as required
						if (oCol.bVisible && !nTrIn) {
							nTr.appendChild(nTd);
						} else if (!oCol.bVisible && nTrIn) {
							nTd.parentNode.removeChild(nTd);
						}

						if (oCol.fnCreatedCell) {
							oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
						}
					}

					_fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow]);
				}

				// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
				// and deployed
				row.nTr.setAttribute('role', 'row');
			}

			/**
	   * Add attributes to a row based on the special `DT_*` parameters in a data
	   * source object.
	   *  @param {object} DataTables row object for the row to be modified
	   *  @memberof DataTable#oApi
	   */
			function _fnRowAttributes(row) {
				var tr = row.nTr;
				var data = row._aData;

				if (tr) {
					if (data.DT_RowId) {
						tr.id = data.DT_RowId;
					}

					if (data.DT_RowClass) {
						// Remove any classes added by DT_RowClass before
						var a = data.DT_RowClass.split(' ');
						row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;

						$(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);
					}

					if (data.DT_RowAttr) {
						$(tr).attr(data.DT_RowAttr);
					}

					if (data.DT_RowData) {
						$(tr).data(data.DT_RowData);
					}
				}
			}

			/**
	   * Create the HTML header for the table
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnBuildHead(oSettings) {
				var i, ien, cell, row, column;
				var thead = oSettings.nTHead;
				var tfoot = oSettings.nTFoot;
				var createHeader = $('th, td', thead).length === 0;
				var classes = oSettings.oClasses;
				var columns = oSettings.aoColumns;

				if (createHeader) {
					row = $('<tr/>').appendTo(thead);
				}

				for (i = 0, ien = columns.length; i < ien; i++) {
					column = columns[i];
					cell = $(column.nTh).addClass(column.sClass);

					if (createHeader) {
						cell.appendTo(row);
					}

					// 1.11 move into sorting
					if (oSettings.oFeatures.bSort) {
						cell.addClass(column.sSortingClass);

						if (column.bSortable !== false) {
							cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);

							_fnSortAttachListener(oSettings, column.nTh, i);
						}
					}

					if (column.sTitle != cell.html()) {
						cell.html(column.sTitle);
					}

					_fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);
				}

				if (createHeader) {
					_fnDetectHeader(oSettings.aoHeader, thead);
				}

				/* ARIA role for the rows */
				$(thead).find('>tr').attr('role', 'row');

				/* Deal with the footer - add classes if required */
				$(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
				$(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);

				// Cache the footer cells. Note that we only take the cells from the first
				// row in the footer. If there is more than one row the user wants to
				// interact with, they need to use the table().foot() method. Note also this
				// allows cells to be used for multiple columns using colspan
				if (tfoot !== null) {
					var cells = oSettings.aoFooter[0];

					for (i = 0, ien = cells.length; i < ien; i++) {
						column = columns[i];
						column.nTf = cells[i].cell;

						if (column.sClass) {
							$(column.nTf).addClass(column.sClass);
						}
					}
				}
			}

			/**
	   * Draw the header (or footer) element based on the column visibility states. The
	   * methodology here is to use the layout array from _fnDetectHeader, modified for
	   * the instantaneous column visibility, to construct the new layout. The grid is
	   * traversed over cell at a time in a rows x columns grid fashion, although each
	   * cell insert can cover multiple elements in the grid - which is tracks using the
	   * aApplied array. Cell inserts in the grid will only occur where there isn't
	   * already a cell in that position.
	   *  @param {object} oSettings dataTables settings object
	   *  @param array {objects} aoSource Layout array from _fnDetectHeader
	   *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	   *  @memberof DataTable#oApi
	   */
			function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
				var i, iLen, j, jLen, k, kLen, n, nLocalTr;
				var aoLocal = [];
				var aApplied = [];
				var iColumns = oSettings.aoColumns.length;
				var iRowspan, iColspan;

				if (!aoSource) {
					return;
				}

				if (bIncludeHidden === undefined) {
					bIncludeHidden = false;
				}

				/* Make a copy of the master layout array, but without the visible columns in it */
				for (i = 0, iLen = aoSource.length; i < iLen; i++) {
					aoLocal[i] = aoSource[i].slice();
					aoLocal[i].nTr = aoSource[i].nTr;

					/* Remove any columns which are currently hidden */
					for (j = iColumns - 1; j >= 0; j--) {
						if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
							aoLocal[i].splice(j, 1);
						}
					}

					/* Prep the applied array - it needs an element for each row */
					aApplied.push([]);
				}

				for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
					nLocalTr = aoLocal[i].nTr;

					/* All cells are going to be replaced, so empty out the row */
					if (nLocalTr) {
						while (n = nLocalTr.firstChild) {
							nLocalTr.removeChild(n);
						}
					}

					for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
						iRowspan = 1;
						iColspan = 1;

						/* Check to see if there is already a cell (row/colspan) covering our target
	      * insert point. If there is, then there is nothing to do.
	      */
						if (aApplied[i][j] === undefined) {
							nLocalTr.appendChild(aoLocal[i][j].cell);
							aApplied[i][j] = 1;

							/* Expand the cell to cover as many rows as needed */
							while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
								aApplied[i + iRowspan][j] = 1;
								iRowspan++;
							}

							/* Expand the cell to cover as many columns as needed */
							while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
								/* Must update the applied array over the rows for the columns */
								for (k = 0; k < iRowspan; k++) {
									aApplied[i + k][j + iColspan] = 1;
								}
								iColspan++;
							}

							/* Do the actual expansion in the DOM */
							$(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);
						}
					}
				}
			}

			/**
	   * Insert the required TR nodes into the table for display
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnDraw(oSettings) {
				/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
				var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);
				if ($.inArray(false, aPreDraw) !== -1) {
					_fnProcessingDisplay(oSettings, false);
					return;
				}

				var i, iLen, n;
				var anRows = [];
				var iRowCount = 0;
				var asStripeClasses = oSettings.asStripeClasses;
				var iStripes = asStripeClasses.length;
				var iOpenRows = oSettings.aoOpenRows.length;
				var oLang = oSettings.oLanguage;
				var iInitDisplayStart = oSettings.iInitDisplayStart;
				var bServerSide = _fnDataSource(oSettings) == 'ssp';
				var aiDisplay = oSettings.aiDisplay;

				oSettings.bDrawing = true;

				/* Check and see if we have an initial draw position from state saving */
				if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
					oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;

					oSettings.iInitDisplayStart = -1;
				}

				var iDisplayStart = oSettings._iDisplayStart;
				var iDisplayEnd = oSettings.fnDisplayEnd();

				/* Server-side processing draw intercept */
				if (oSettings.bDeferLoading) {
					oSettings.bDeferLoading = false;
					oSettings.iDraw++;
					_fnProcessingDisplay(oSettings, false);
				} else if (!bServerSide) {
					oSettings.iDraw++;
				} else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
					return;
				}

				if (aiDisplay.length !== 0) {
					var iStart = bServerSide ? 0 : iDisplayStart;
					var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

					for (var j = iStart; j < iEnd; j++) {
						var iDataIndex = aiDisplay[j];
						var aoData = oSettings.aoData[iDataIndex];
						if (aoData.nTr === null) {
							_fnCreateTr(oSettings, iDataIndex);
						}

						var nRow = aoData.nTr;

						/* Remove the old striping classes and then add the new one */
						if (iStripes !== 0) {
							var sStripe = asStripeClasses[iRowCount % iStripes];
							if (aoData._sRowStripe != sStripe) {
								$(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
								aoData._sRowStripe = sStripe;
							}
						}

						// Row callback functions - might want to manipulate the row
						// iRowCount and j are not currently documented. Are they at all
						// useful?
						_fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j]);

						anRows.push(nRow);
						iRowCount++;
					}
				} else {
					/* Table is empty - create a row with an empty message in it */
					var sZero = oLang.sZeroRecords;
					if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
						sZero = oLang.sLoadingRecords;
					} else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
						sZero = oLang.sEmptyTable;
					}

					anRows[0] = $('<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' }).append($('<td />', {
						'valign': 'top',
						'colSpan': _fnVisbleColumns(oSettings),
						'class': oSettings.oClasses.sRowEmpty
					}).html(sZero))[0];
				}

				/* Header and footer callbacks */
				_fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

				_fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

				var body = $(oSettings.nTBody);

				body.children().detach();
				body.append($(anRows));

				/* Call all required callback functions for the end of a draw */
				_fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);

				/* Draw is complete, sorting and filtering must be as well */
				oSettings.bSorted = false;
				oSettings.bFiltered = false;
				oSettings.bDrawing = false;
			}

			/**
	   * Redraw the table - taking account of the various features which are enabled
	   *  @param {object} oSettings dataTables settings object
	   *  @param {boolean} [holdPosition] Keep the current paging position. By default
	   *    the paging is reset to the first page
	   *  @memberof DataTable#oApi
	   */
			function _fnReDraw(settings, holdPosition) {
				var features = settings.oFeatures,
				    sort = features.bSort,
				    filter = features.bFilter;

				if (sort) {
					_fnSort(settings);
				}

				if (filter) {
					_fnFilterComplete(settings, settings.oPreviousSearch);
				} else {
					// No filtering, so we want to just use the display master
					settings.aiDisplay = settings.aiDisplayMaster.slice();
				}

				if (holdPosition !== true) {
					settings._iDisplayStart = 0;
				}

				// Let any modules know about the draw hold position state (used by
				// scrolling internally)
				settings._drawHold = holdPosition;

				_fnDraw(settings);

				settings._drawHold = false;
			}

			/**
	   * Add the options to the page HTML for the table
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnAddOptionsHtml(oSettings) {
				var classes = oSettings.oClasses;
				var table = $(oSettings.nTable);
				var holding = $('<div/>').insertBefore(table); // Holding element for speed
				var features = oSettings.oFeatures;

				// All DataTables are wrapped in a div
				var insert = $('<div/>', {
					id: oSettings.sTableId + '_wrapper',
					'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
				});

				oSettings.nHolding = holding[0];
				oSettings.nTableWrapper = insert[0];
				oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

				/* Loop over the user set positioning and place the elements as needed */
				var aDom = oSettings.sDom.split('');
				var featureNode, cOption, nNewNode, cNext, sAttr, j;
				for (var i = 0; i < aDom.length; i++) {
					featureNode = null;
					cOption = aDom[i];

					if (cOption == '<') {
						/* New container div */
						nNewNode = $('<div/>')[0];

						/* Check to see if we should append an id and/or a class name to the container */
						cNext = aDom[i + 1];
						if (cNext == "'" || cNext == '"') {
							sAttr = "";
							j = 2;
							while (aDom[i + j] != cNext) {
								sAttr += aDom[i + j];
								j++;
							}

							/* Replace jQuery UI constants @todo depreciated */
							if (sAttr == "H") {
								sAttr = classes.sJUIHeader;
							} else if (sAttr == "F") {
								sAttr = classes.sJUIFooter;
							}

							/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
	       * breaks the string into parts and applies them as needed
	       */
							if (sAttr.indexOf('.') != -1) {
								var aSplit = sAttr.split('.');
								nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
								nNewNode.className = aSplit[1];
							} else if (sAttr.charAt(0) == "#") {
								nNewNode.id = sAttr.substr(1, sAttr.length - 1);
							} else {
								nNewNode.className = sAttr;
							}

							i += j; /* Move along the position array */
						}

						insert.append(nNewNode);
						insert = $(nNewNode);
					} else if (cOption == '>') {
						/* End container div */
						insert = insert.parent();
					}
					// @todo Move options into their own plugins?
					else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
							/* Length */
							featureNode = _fnFeatureHtmlLength(oSettings);
						} else if (cOption == 'f' && features.bFilter) {
							/* Filter */
							featureNode = _fnFeatureHtmlFilter(oSettings);
						} else if (cOption == 'r' && features.bProcessing) {
							/* pRocessing */
							featureNode = _fnFeatureHtmlProcessing(oSettings);
						} else if (cOption == 't') {
							/* Table */
							featureNode = _fnFeatureHtmlTable(oSettings);
						} else if (cOption == 'i' && features.bInfo) {
							/* Info */
							featureNode = _fnFeatureHtmlInfo(oSettings);
						} else if (cOption == 'p' && features.bPaginate) {
							/* Pagination */
							featureNode = _fnFeatureHtmlPaginate(oSettings);
						} else if (DataTable.ext.feature.length !== 0) {
							/* Plug-in features */
							var aoFeatures = DataTable.ext.feature;
							for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
								if (cOption == aoFeatures[k].cFeature) {
									featureNode = aoFeatures[k].fnInit(oSettings);
									break;
								}
							}
						}

					/* Add to the 2D features array */
					if (featureNode) {
						var aanFeatures = oSettings.aanFeatures;

						if (!aanFeatures[cOption]) {
							aanFeatures[cOption] = [];
						}

						aanFeatures[cOption].push(featureNode);
						insert.append(featureNode);
					}
				}

				/* Built our DOM structure - replace the holding div with what we want */
				holding.replaceWith(insert);
			}

			/**
	   * Use the DOM source to create up an array of header cells. The idea here is to
	   * create a layout grid (array) of rows x columns, which contains a reference
	   * to the cell that that point in the grid (regardless of col/rowspan), such that
	   * any column / row could be removed and the new grid constructed
	   *  @param array {object} aLayout Array to store the calculated layout in
	   *  @param {node} nThead The header/footer element for the table
	   *  @memberof DataTable#oApi
	   */
			function _fnDetectHeader(aLayout, nThead) {
				var nTrs = $(nThead).children('tr');
				var nTr, nCell;
				var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
				var bUnique;
				var fnShiftCol = function fnShiftCol(a, i, j) {
					var k = a[i];
					while (k[j]) {
						j++;
					}
					return j;
				};

				aLayout.splice(0, aLayout.length);

				/* We know how many rows there are in the layout - so prep it */
				for (i = 0, iLen = nTrs.length; i < iLen; i++) {
					aLayout.push([]);
				}

				/* Calculate a layout array */
				for (i = 0, iLen = nTrs.length; i < iLen; i++) {
					nTr = nTrs[i];
					iColumn = 0;

					/* For every cell in the row... */
					nCell = nTr.firstChild;
					while (nCell) {
						if (nCell.nodeName.toUpperCase() == "TD" || nCell.nodeName.toUpperCase() == "TH") {
							/* Get the col and rowspan attributes from the DOM and sanitise them */
							iColspan = nCell.getAttribute('colspan') * 1;
							iRowspan = nCell.getAttribute('rowspan') * 1;
							iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
							iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;

							/* There might be colspan cells already in this row, so shift our target
	       * accordingly
	       */
							iColShifted = fnShiftCol(aLayout, i, iColumn);

							/* Cache calculation for unique columns */
							bUnique = iColspan === 1 ? true : false;

							/* If there is col / rowspan, copy the information into the layout grid */
							for (l = 0; l < iColspan; l++) {
								for (k = 0; k < iRowspan; k++) {
									aLayout[i + k][iColShifted + l] = {
										"cell": nCell,
										"unique": bUnique
									};
									aLayout[i + k].nTr = nTr;
								}
							}
						}
						nCell = nCell.nextSibling;
					}
				}
			}

			/**
	   * Get an array of unique th elements, one for each column
	   *  @param {object} oSettings dataTables settings object
	   *  @param {node} nHeader automatically detect the layout from this node - optional
	   *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	   *  @returns array {node} aReturn list of unique th's
	   *  @memberof DataTable#oApi
	   */
			function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
				var aReturn = [];
				if (!aLayout) {
					aLayout = oSettings.aoHeader;
					if (nHeader) {
						aLayout = [];
						_fnDetectHeader(aLayout, nHeader);
					}
				}

				for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
					for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
						if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
							aReturn[j] = aLayout[i][j].cell;
						}
					}
				}

				return aReturn;
			}

			/**
	   * Create an Ajax call based on the table's settings, taking into account that
	   * parameters can have multiple forms, and backwards compatibility.
	   *
	   * @param {object} oSettings dataTables settings object
	   * @param {array} data Data to send to the server, required by
	   *     DataTables - may be augmented by developer callbacks
	   * @param {function} fn Callback function to run when data is obtained
	   */
			function _fnBuildAjax(oSettings, data, fn) {
				// Compatibility with 1.9-, allow fnServerData and event to manipulate
				_fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);

				// Convert to object based for 1.10+ if using the old array scheme which can
				// come from server-side processing or serverParams
				if (data && $.isArray(data)) {
					var tmp = {};
					var rbracket = /(.*?)\[\]$/;

					$.each(data, function (key, val) {
						var match = val.name.match(rbracket);

						if (match) {
							// Support for arrays
							var name = match[0];

							if (!tmp[name]) {
								tmp[name] = [];
							}
							tmp[name].push(val.value);
						} else {
							tmp[val.name] = val.value;
						}
					});
					data = tmp;
				}

				var ajaxData;
				var ajax = oSettings.ajax;
				var instance = oSettings.oInstance;
				var callback = function callback(json) {
					_fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);
					fn(json);
				};

				if ($.isPlainObject(ajax) && ajax.data) {
					ajaxData = ajax.data;

					var newData = $.isFunction(ajaxData) ? ajaxData(data, oSettings) : // fn can manipulate data or return
					ajaxData; // an object object or array to merge

					// If the function returned something, use that alone
					data = $.isFunction(ajaxData) && newData ? newData : $.extend(true, data, newData);

					// Remove the data property as we've resolved it already and don't want
					// jQuery to do it again (it is restored at the end of the function)
					delete ajax.data;
				}

				var baseAjax = {
					"data": data,
					"success": function success(json) {
						var error = json.error || json.sError;
						if (error) {
							_fnLog(oSettings, 0, error);
						}

						oSettings.json = json;
						callback(json);
					},
					"dataType": "json",
					"cache": false,
					"type": oSettings.sServerMethod,
					"error": function error(xhr, _error, thrown) {
						var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);

						if ($.inArray(true, ret) === -1) {
							if (_error == "parsererror") {
								_fnLog(oSettings, 0, 'Invalid JSON response', 1);
							} else if (xhr.readyState === 4) {
								_fnLog(oSettings, 0, 'Ajax error', 7);
							}
						}

						_fnProcessingDisplay(oSettings, false);
					}
				};

				// Store the data submitted for the API
				oSettings.oAjaxData = data;

				// Allow plug-ins and external processes to modify the data
				_fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);

				if (oSettings.fnServerData) {
					// DataTables 1.9- compatibility
					oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {
						// Need to convert back to 1.9 trad format
						return { name: key, value: val };
					}), callback, oSettings);
				} else if (oSettings.sAjaxSource || typeof ajax === 'string') {
					// DataTables 1.9- compatibility
					oSettings.jqXHR = $.ajax($.extend(baseAjax, {
						url: ajax || oSettings.sAjaxSource
					}));
				} else if ($.isFunction(ajax)) {
					// Is a function - let the caller define what needs to be done
					oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
				} else {
					// Object to extend the base settings
					oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

					// Restore for next time around
					ajax.data = ajaxData;
				}
			}

			/**
	   * Update the table using an Ajax call
	   *  @param {object} settings dataTables settings object
	   *  @returns {boolean} Block the table drawing or not
	   *  @memberof DataTable#oApi
	   */
			function _fnAjaxUpdate(settings) {
				if (settings.bAjaxDataGet) {
					settings.iDraw++;
					_fnProcessingDisplay(settings, true);

					_fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
						_fnAjaxUpdateDraw(settings, json);
					});

					return false;
				}
				return true;
			}

			/**
	   * Build up the parameters in an object needed for a server-side processing
	   * request. Note that this is basically done twice, is different ways - a modern
	   * method which is used by default in DataTables 1.10 which uses objects and
	   * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	   * the sAjaxSource option is used in the initialisation, or the legacyAjax
	   * option is set.
	   *  @param {object} oSettings dataTables settings object
	   *  @returns {bool} block the table drawing or not
	   *  @memberof DataTable#oApi
	   */
			function _fnAjaxParameters(settings) {
				var columns = settings.aoColumns,
				    columnCount = columns.length,
				    features = settings.oFeatures,
				    preSearch = settings.oPreviousSearch,
				    preColSearch = settings.aoPreSearchCols,
				    i,
				    data = [],
				    dataProp,
				    column,
				    columnSearch,
				    sort = _fnSortFlatten(settings),
				    displayStart = settings._iDisplayStart,
				    displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;

				var param = function param(name, value) {
					data.push({ 'name': name, 'value': value });
				};

				// DataTables 1.9- compatible method
				param('sEcho', settings.iDraw);
				param('iColumns', columnCount);
				param('sColumns', _pluck(columns, 'sName').join(','));
				param('iDisplayStart', displayStart);
				param('iDisplayLength', displayLength);

				// DataTables 1.10+ method
				var d = {
					draw: settings.iDraw,
					columns: [],
					order: [],
					start: displayStart,
					length: displayLength,
					search: {
						value: preSearch.sSearch,
						regex: preSearch.bRegex
					}
				};

				for (i = 0; i < columnCount; i++) {
					column = columns[i];
					columnSearch = preColSearch[i];
					dataProp = typeof column.mData == "function" ? 'function' : column.mData;

					d.columns.push({
						data: dataProp,
						name: column.sName,
						searchable: column.bSearchable,
						orderable: column.bSortable,
						search: {
							value: columnSearch.sSearch,
							regex: columnSearch.bRegex
						}
					});

					param("mDataProp_" + i, dataProp);

					if (features.bFilter) {
						param('sSearch_' + i, columnSearch.sSearch);
						param('bRegex_' + i, columnSearch.bRegex);
						param('bSearchable_' + i, column.bSearchable);
					}

					if (features.bSort) {
						param('bSortable_' + i, column.bSortable);
					}
				}

				if (features.bFilter) {
					param('sSearch', preSearch.sSearch);
					param('bRegex', preSearch.bRegex);
				}

				if (features.bSort) {
					$.each(sort, function (i, val) {
						d.order.push({ column: val.col, dir: val.dir });

						param('iSortCol_' + i, val.col);
						param('sSortDir_' + i, val.dir);
					});

					param('iSortingCols', sort.length);
				}

				// If the legacy.ajax parameter is null, then we automatically decide which
				// form to use, based on sAjaxSource
				var legacy = DataTable.ext.legacy.ajax;
				if (legacy === null) {
					return settings.sAjaxSource ? data : d;
				}

				// Otherwise, if legacy has been specified then we use that to decide on the
				// form
				return legacy ? data : d;
			}

			/**
	   * Data the data from the server (nuking the old) and redraw the table
	   *  @param {object} oSettings dataTables settings object
	   *  @param {object} json json data return from the server.
	   *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	   *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	   *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	   *  @param {array} json.aaData The data to display on this page
	   *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	   *  @memberof DataTable#oApi
	   */
			function _fnAjaxUpdateDraw(settings, json) {
				// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
				// Support both
				var compat = function compat(old, modern) {
					return json[old] !== undefined ? json[old] : json[modern];
				};

				var data = _fnAjaxDataSrc(settings, json);
				var draw = compat('sEcho', 'draw');
				var recordsTotal = compat('iTotalRecords', 'recordsTotal');
				var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');

				if (draw) {
					// Protect against out of sequence returns
					if (draw * 1 < settings.iDraw) {
						return;
					}
					settings.iDraw = draw * 1;
				}

				_fnClearTable(settings);
				settings._iRecordsTotal = parseInt(recordsTotal, 10);
				settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

				for (var i = 0, ien = data.length; i < ien; i++) {
					_fnAddData(settings, data[i]);
				}
				settings.aiDisplay = settings.aiDisplayMaster.slice();

				settings.bAjaxDataGet = false;
				_fnDraw(settings);

				if (!settings._bInitComplete) {
					_fnInitComplete(settings, json);
				}

				settings.bAjaxDataGet = true;
				_fnProcessingDisplay(settings, false);
			}

			/**
	   * Get the data from the JSON data source to use for drawing a table. Using
	   * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	   * source object, or from a processing function.
	   *  @param {object} oSettings dataTables settings object
	   *  @param  {object} json Data source object / array from the server
	   *  @return {array} Array of data to use
	   */
			function _fnAjaxDataSrc(oSettings, json) {
				var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.

				// Compatibility with 1.9-. In order to read from aaData, check if the
				// default has been changed, if not, check for aaData
				if (dataSrc === 'data') {
					return json.aaData || json[dataSrc];
				}

				return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
			}

			/**
	   * Generate the node required for filtering text
	   *  @returns {node} Filter control element
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnFeatureHtmlFilter(settings) {
				var classes = settings.oClasses;
				var tableId = settings.sTableId;
				var language = settings.oLanguage;
				var previousSearch = settings.oPreviousSearch;
				var features = settings.aanFeatures;
				var input = '<input type="search" class="' + classes.sFilterInput + '"/>';

				var str = language.sSearch;
				str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;

				var filter = $('<div/>', {
					'id': !features.f ? tableId + '_filter' : null,
					'class': classes.sFilter
				}).append($('<label/>').append(str));

				var searchFn = function searchFn() {
					/* Update all other filter input elements for the new display */
					var n = features.f;
					var val = !this.value ? "" : this.value; // mental IE8 fix :-(

					/* Now do the filter */
					if (val != previousSearch.sSearch) {
						_fnFilterComplete(settings, {
							"sSearch": val,
							"bRegex": previousSearch.bRegex,
							"bSmart": previousSearch.bSmart,
							"bCaseInsensitive": previousSearch.bCaseInsensitive
						});

						// Need to redraw, without resorting
						settings._iDisplayStart = 0;
						_fnDraw(settings);
					}
				};

				var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;

				var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).bind('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).bind('keypress.DT', function (e) {
					/* Prevent form submission */
					if (e.keyCode == 13) {
						return false;
					}
				}).attr('aria-controls', tableId);

				// Update the input elements whenever the table is filtered
				$(settings.nTable).on('search.dt.DT', function (ev, s) {
					if (settings === s) {
						// IE9 throws an 'unknown error' if document.activeElement is used
						// inside an iframe or frame...
						try {
							if (jqFilter[0] !== document.activeElement) {
								jqFilter.val(previousSearch.sSearch);
							}
						} catch (e) {}
					}
				});

				return filter[0];
			}

			/**
	   * Filter the table using both the global filter and column based filtering
	   *  @param {object} oSettings dataTables settings object
	   *  @param {object} oSearch search information
	   *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	   *  @memberof DataTable#oApi
	   */
			function _fnFilterComplete(oSettings, oInput, iForce) {
				var oPrevSearch = oSettings.oPreviousSearch;
				var aoPrevSearch = oSettings.aoPreSearchCols;
				var fnSaveFilter = function fnSaveFilter(oFilter) {
					/* Save the filtering values */
					oPrevSearch.sSearch = oFilter.sSearch;
					oPrevSearch.bRegex = oFilter.bRegex;
					oPrevSearch.bSmart = oFilter.bSmart;
					oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
				};
				var fnRegex = function fnRegex(o) {
					// Backwards compatibility with the bEscapeRegex option
					return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
				};

				// Resolve any column types that are unknown due to addition or invalidation
				// @todo As per sort - can this be moved into an event handler?
				_fnColumnTypes(oSettings);

				/* In server-side processing all filtering is done by the server, so no point hanging around here */
				if (_fnDataSource(oSettings) != 'ssp') {
					/* Global filter */
					_fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);
					fnSaveFilter(oInput);

					/* Now do the individual column filter */
					for (var i = 0; i < aoPrevSearch.length; i++) {
						_fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
					}

					/* Custom filtering */
					_fnFilterCustom(oSettings);
				} else {
					fnSaveFilter(oInput);
				}

				/* Tell the draw function we have been filtering */
				oSettings.bFiltered = true;
				_fnCallbackFire(oSettings, null, 'search', [oSettings]);
			}

			/**
	   * Apply custom filtering functions
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnFilterCustom(settings) {
				var filters = DataTable.ext.search;
				var displayRows = settings.aiDisplay;
				var row, rowIdx;

				for (var i = 0, ien = filters.length; i < ien; i++) {
					var rows = [];

					// Loop over each row and see if it should be included
					for (var j = 0, jen = displayRows.length; j < jen; j++) {
						rowIdx = displayRows[j];
						row = settings.aoData[rowIdx];

						if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
							rows.push(rowIdx);
						}
					}

					// So the array reference doesn't break set the results into the
					// existing array
					displayRows.length = 0;
					displayRows.push.apply(displayRows, rows);
				}
			}

			/**
	   * Filter the table on a per-column basis
	   *  @param {object} oSettings dataTables settings object
	   *  @param {string} sInput string to filter on
	   *  @param {int} iColumn column to filter
	   *  @param {bool} bRegex treat search string as a regular expression or not
	   *  @param {bool} bSmart use smart filtering or not
	   *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	   *  @memberof DataTable#oApi
	   */
			function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
				if (searchStr === '') {
					return;
				}

				var data;
				var display = settings.aiDisplay;
				var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);

				for (var i = display.length - 1; i >= 0; i--) {
					data = settings.aoData[display[i]]._aFilterData[colIdx];

					if (!rpSearch.test(data)) {
						display.splice(i, 1);
					}
				}
			}

			/**
	   * Filter the data table based on user input and draw the table
	   *  @param {object} settings dataTables settings object
	   *  @param {string} input string to filter on
	   *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	   *  @param {bool} regex treat as a regular expression or not
	   *  @param {bool} smart perform smart filtering or not
	   *  @param {bool} caseInsensitive Do case insenstive matching or not
	   *  @memberof DataTable#oApi
	   */
			function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
				var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
				var prevSearch = settings.oPreviousSearch.sSearch;
				var displayMaster = settings.aiDisplayMaster;
				var display, invalidated, i;

				// Need to take account of custom filtering functions - always filter
				if (DataTable.ext.search.length !== 0) {
					force = true;
				}

				// Check if any of the rows were invalidated
				invalidated = _fnFilterData(settings);

				// If the input is blank - we just want the full data set
				if (input.length <= 0) {
					settings.aiDisplay = displayMaster.slice();
				} else {
					// New search - start from the master array
					if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be
					// re-filtered since indexes will have changed
					) {
							settings.aiDisplay = displayMaster.slice();
						}

					// Search the display array
					display = settings.aiDisplay;

					for (i = display.length - 1; i >= 0; i--) {
						if (!rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
							display.splice(i, 1);
						}
					}
				}
			}

			/**
	   * Build a regular expression object suitable for searching a table
	   *  @param {string} sSearch string to search for
	   *  @param {bool} bRegex treat as a regular expression or not
	   *  @param {bool} bSmart perform smart filtering or not
	   *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	   *  @returns {RegExp} constructed object
	   *  @memberof DataTable#oApi
	   */
			function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
				search = regex ? search : _fnEscapeRegex(search);

				if (smart) {
					/* For smart filtering we want to allow the search to work regardless of
	     * word order. We also want double quoted text to be preserved, so word
	     * order is important - a la google. So this is what we want to
	     * generate:
	     * 
	     * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
	     */
					var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
						if (word.charAt(0) === '"') {
							var m = word.match(/^"(.*)"$/);
							word = m ? m[1] : word;
						}

						return word.replace('"', '');
					});

					search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
				}

				return new RegExp(search, caseInsensitive ? 'i' : '');
			}

			/**
	   * Escape a string such that it can be used in a regular expression
	   *  @param {string} sVal string to escape
	   *  @returns {string} escaped string
	   *  @memberof DataTable#oApi
	   */
			function _fnEscapeRegex(sVal) {
				return sVal.replace(_re_escape_regex, '\\$1');
			}

			var __filter_div = $('<div>')[0];
			var __filter_div_textContent = __filter_div.textContent !== undefined;

			// Update the filtering data for each row if needed (by invalidation or first run)
			function _fnFilterData(settings) {
				var columns = settings.aoColumns;
				var column;
				var i, j, ien, jen, filterData, cellData, row;
				var fomatters = DataTable.ext.type.search;
				var wasInvalidated = false;

				for (i = 0, ien = settings.aoData.length; i < ien; i++) {
					row = settings.aoData[i];

					if (!row._aFilterData) {
						filterData = [];

						for (j = 0, jen = columns.length; j < jen; j++) {
							column = columns[j];

							if (column.bSearchable) {
								cellData = _fnGetCellData(settings, i, j, 'filter');

								if (fomatters[column.sType]) {
									cellData = fomatters[column.sType](cellData);
								}

								// Search in DataTables 1.10 is string based. In 1.11 this
								// should be altered to also allow strict type checking.
								if (cellData === null) {
									cellData = '';
								}

								if (typeof cellData !== 'string' && cellData.toString) {
									cellData = cellData.toString();
								}
							} else {
								cellData = '';
							}

							// If it looks like there is an HTML entity in the string,
							// attempt to decode it so sorting works as expected. Note that
							// we could use a single line of jQuery to do this, but the DOM
							// method used here is much faster http://jsperf.com/html-decode
							if (cellData.indexOf && cellData.indexOf('&') !== -1) {
								__filter_div.innerHTML = cellData;
								cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
							}

							if (cellData.replace) {
								cellData = cellData.replace(/[\r\n]/g, '');
							}

							filterData.push(cellData);
						}

						row._aFilterData = filterData;
						row._sFilterRow = filterData.join('  ');
						wasInvalidated = true;
					}
				}

				return wasInvalidated;
			}

			/**
	   * Convert from the internal Hungarian notation to camelCase for external
	   * interaction
	   *  @param {object} obj Object to convert
	   *  @returns {object} Inverted object
	   *  @memberof DataTable#oApi
	   */
			function _fnSearchToCamel(obj) {
				return {
					search: obj.sSearch,
					smart: obj.bSmart,
					regex: obj.bRegex,
					caseInsensitive: obj.bCaseInsensitive
				};
			}

			/**
	   * Convert from camelCase notation to the internal Hungarian. We could use the
	   * Hungarian convert function here, but this is cleaner
	   *  @param {object} obj Object to convert
	   *  @returns {object} Inverted object
	   *  @memberof DataTable#oApi
	   */
			function _fnSearchToHung(obj) {
				return {
					sSearch: obj.search,
					bSmart: obj.smart,
					bRegex: obj.regex,
					bCaseInsensitive: obj.caseInsensitive
				};
			}

			/**
	   * Generate the node required for the info display
	   *  @param {object} oSettings dataTables settings object
	   *  @returns {node} Information element
	   *  @memberof DataTable#oApi
	   */
			function _fnFeatureHtmlInfo(settings) {
				var tid = settings.sTableId,
				    nodes = settings.aanFeatures.i,
				    n = $('<div/>', {
					'class': settings.oClasses.sInfo,
					'id': !nodes ? tid + '_info' : null
				});

				if (!nodes) {
					// Update display on each draw
					settings.aoDrawCallback.push({
						"fn": _fnUpdateInfo,
						"sName": "information"
					});

					n.attr('role', 'status').attr('aria-live', 'polite');

					// Table is described by our info div
					$(settings.nTable).attr('aria-describedby', tid + '_info');
				}

				return n[0];
			}

			/**
	   * Update the information elements in the display
	   *  @param {object} settings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnUpdateInfo(settings) {
				/* Show information about the table */
				var nodes = settings.aanFeatures.i;
				if (nodes.length === 0) {
					return;
				}

				var lang = settings.oLanguage,
				    start = settings._iDisplayStart + 1,
				    end = settings.fnDisplayEnd(),
				    max = settings.fnRecordsTotal(),
				    total = settings.fnRecordsDisplay(),
				    out = total ? lang.sInfo : lang.sInfoEmpty;

				if (total !== max) {
					/* Record set after filtering */
					out += ' ' + lang.sInfoFiltered;
				}

				// Convert the macros
				out += lang.sInfoPostFix;
				out = _fnInfoMacros(settings, out);

				var callback = lang.fnInfoCallback;
				if (callback !== null) {
					out = callback.call(settings.oInstance, settings, start, end, max, total, out);
				}

				$(nodes).html(out);
			}

			function _fnInfoMacros(settings, str) {
				// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
				// internally
				var formatter = settings.fnFormatNumber,
				    start = settings._iDisplayStart + 1,
				    len = settings._iDisplayLength,
				    vis = settings.fnRecordsDisplay(),
				    all = len === -1;

				return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
			}

			/**
	   * Draw the table for the first time, adding all required features
	   *  @param {object} settings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnInitialise(settings) {
				var i,
				    iLen,
				    iAjaxStart = settings.iInitDisplayStart;
				var columns = settings.aoColumns,
				    column;
				var features = settings.oFeatures;

				/* Ensure that the table data is fully initialised */
				if (!settings.bInitialised) {
					setTimeout(function () {
						_fnInitialise(settings);
					}, 200);
					return;
				}

				/* Show the display HTML options */
				_fnAddOptionsHtml(settings);

				/* Build and draw the header / footer for the table */
				_fnBuildHead(settings);
				_fnDrawHead(settings, settings.aoHeader);
				_fnDrawHead(settings, settings.aoFooter);

				/* Okay to show that something is going on now */
				_fnProcessingDisplay(settings, true);

				/* Calculate sizes for columns */
				if (features.bAutoWidth) {
					_fnCalculateColumnWidths(settings);
				}

				for (i = 0, iLen = columns.length; i < iLen; i++) {
					column = columns[i];

					if (column.sWidth) {
						column.nTh.style.width = _fnStringToCss(column.sWidth);
					}
				}

				// If there is default sorting required - let's do it. The sort function
				// will do the drawing for us. Otherwise we draw the table regardless of the
				// Ajax source - this allows the table to look initialised for Ajax sourcing
				// data (show 'loading' message possibly)
				_fnReDraw(settings);

				// Server-side processing init complete is done by _fnAjaxUpdateDraw
				var dataSrc = _fnDataSource(settings);
				if (dataSrc != 'ssp') {
					// if there is an ajax source load the data
					if (dataSrc == 'ajax') {
						_fnBuildAjax(settings, [], function (json) {
							var aData = _fnAjaxDataSrc(settings, json);

							// Got the data - add it to the table
							for (i = 0; i < aData.length; i++) {
								_fnAddData(settings, aData[i]);
							}

							// Reset the init display for cookie saving. We've already done
							// a filter, and therefore cleared it before. So we need to make
							// it appear 'fresh'
							settings.iInitDisplayStart = iAjaxStart;

							_fnReDraw(settings);

							_fnProcessingDisplay(settings, false);
							_fnInitComplete(settings, json);
						}, settings);
					} else {
						_fnProcessingDisplay(settings, false);
						_fnInitComplete(settings);
					}
				}
			}

			/**
	   * Draw the table for the first time, adding all required features
	   *  @param {object} oSettings dataTables settings object
	   *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	   *    with client-side processing (optional)
	   *  @memberof DataTable#oApi
	   */
			function _fnInitComplete(settings, json) {
				settings._bInitComplete = true;

				// On an Ajax load we now have data and therefore want to apply the column
				// sizing
				if (json) {
					_fnAdjustColumnSizing(settings);
				}

				_fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);
			}

			function _fnLengthChange(settings, val) {
				var len = parseInt(val, 10);
				settings._iDisplayLength = len;

				_fnLengthOverflow(settings);

				// Fire length change event
				_fnCallbackFire(settings, null, 'length', [settings, len]);
			}

			/**
	   * Generate the node required for user display length changing
	   *  @param {object} settings dataTables settings object
	   *  @returns {node} Display length feature node
	   *  @memberof DataTable#oApi
	   */
			function _fnFeatureHtmlLength(settings) {
				var classes = settings.oClasses,
				    tableId = settings.sTableId,
				    menu = settings.aLengthMenu,
				    d2 = $.isArray(menu[0]),
				    lengths = d2 ? menu[0] : menu,
				    language = d2 ? menu[1] : menu;

				var select = $('<select/>', {
					'name': tableId + '_length',
					'aria-controls': tableId,
					'class': classes.sLengthSelect
				});

				for (var i = 0, ien = lengths.length; i < ien; i++) {
					select[0][i] = new Option(language[i], lengths[i]);
				}

				var div = $('<div><label/></div>').addClass(classes.sLength);
				if (!settings.aanFeatures.l) {
					div[0].id = tableId + '_length';
				}

				div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML));

				// Can't use `select` variable as user might provide their own and the
				// reference is broken by the use of outerHTML
				$('select', div).val(settings._iDisplayLength).bind('change.DT', function (e) {
					_fnLengthChange(settings, $(this).val());
					_fnDraw(settings);
				});

				// Update node value whenever anything changes the table's length
				$(settings.nTable).bind('length.dt.DT', function (e, s, len) {
					if (settings === s) {
						$('select', div).val(len);
					}
				});

				return div[0];
			}

			/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	   * Note that most of the paging logic is done in
	   * DataTable.ext.pager
	   */

			/**
	   * Generate the node required for default pagination
	   *  @param {object} oSettings dataTables settings object
	   *  @returns {node} Pagination feature node
	   *  @memberof DataTable#oApi
	   */
			function _fnFeatureHtmlPaginate(settings) {
				var type = settings.sPaginationType,
				    plugin = DataTable.ext.pager[type],
				    modern = typeof plugin === 'function',
				    redraw = function redraw(settings) {
					_fnDraw(settings);
				},
				    node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],
				    features = settings.aanFeatures;

				if (!modern) {
					plugin.fnInit(settings, node, redraw);
				}

				/* Add a draw callback for the pagination on first instance, to update the paging display */
				if (!features.p) {
					node.id = settings.sTableId + '_paginate';

					settings.aoDrawCallback.push({
						"fn": function fn(settings) {
							if (modern) {
								var start = settings._iDisplayStart,
								    len = settings._iDisplayLength,
								    visRecords = settings.fnRecordsDisplay(),
								    all = len === -1,
								    page = all ? 0 : Math.ceil(start / len),
								    pages = all ? 1 : Math.ceil(visRecords / len),
								    buttons = plugin(page, pages),
								    i,
								    ien;

								for (i = 0, ien = features.p.length; i < ien; i++) {
									_fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);
								}
							} else {
								plugin.fnUpdate(settings, redraw);
							}
						},
						"sName": "pagination"
					});
				}

				return node;
			}

			/**
	   * Alter the display settings to change the page
	   *  @param {object} settings DataTables settings object
	   *  @param {string|int} action Paging action to take: "first", "previous",
	   *    "next" or "last" or page number to jump to (integer)
	   *  @param [bool] redraw Automatically draw the update or not
	   *  @returns {bool} true page has changed, false - no change
	   *  @memberof DataTable#oApi
	   */
			function _fnPageChange(settings, action, redraw) {
				var start = settings._iDisplayStart,
				    len = settings._iDisplayLength,
				    records = settings.fnRecordsDisplay();

				if (records === 0 || len === -1) {
					start = 0;
				} else if (typeof action === "number") {
					start = action * len;

					if (start > records) {
						start = 0;
					}
				} else if (action == "first") {
					start = 0;
				} else if (action == "previous") {
					start = len >= 0 ? start - len : 0;

					if (start < 0) {
						start = 0;
					}
				} else if (action == "next") {
					if (start + len < records) {
						start += len;
					}
				} else if (action == "last") {
					start = Math.floor((records - 1) / len) * len;
				} else {
					_fnLog(settings, 0, "Unknown paging action: " + action, 5);
				}

				var changed = settings._iDisplayStart !== start;
				settings._iDisplayStart = start;

				if (changed) {
					_fnCallbackFire(settings, null, 'page', [settings]);

					if (redraw) {
						_fnDraw(settings);
					}
				}

				return changed;
			}

			/**
	   * Generate the node required for the processing node
	   *  @param {object} settings dataTables settings object
	   *  @returns {node} Processing element
	   *  @memberof DataTable#oApi
	   */
			function _fnFeatureHtmlProcessing(settings) {
				return $('<div/>', {
					'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
					'class': settings.oClasses.sProcessing
				}).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
			}

			/**
	   * Display or hide the processing indicator
	   *  @param {object} settings dataTables settings object
	   *  @param {bool} show Show the processing indicator (true) or not (false)
	   *  @memberof DataTable#oApi
	   */
			function _fnProcessingDisplay(settings, show) {
				if (settings.oFeatures.bProcessing) {
					$(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
				}

				_fnCallbackFire(settings, null, 'processing', [settings, show]);
			}

			/**
	   * Add any control elements for the table - specifically scrolling
	   *  @param {object} settings dataTables settings object
	   *  @returns {node} Node to add to the DOM
	   *  @memberof DataTable#oApi
	   */
			function _fnFeatureHtmlTable(settings) {
				var table = $(settings.nTable);

				// Add the ARIA grid role to the table
				table.attr('role', 'grid');

				// Scrolling from here on in
				var scroll = settings.oScroll;

				if (scroll.sX === '' && scroll.sY === '') {
					return settings.nTable;
				}

				var scrollX = scroll.sX;
				var scrollY = scroll.sY;
				var classes = settings.oClasses;
				var caption = table.children('caption');
				var captionSide = caption.length ? caption[0]._captionSide : null;
				var headerClone = $(table[0].cloneNode(false));
				var footerClone = $(table[0].cloneNode(false));
				var footer = table.children('tfoot');
				var _div = '<div/>';
				var size = function size(s) {
					return !s ? null : _fnStringToCss(s);
				};

				// This is fairly messy, but with x scrolling enabled, if the table has a
				// width attribute, regardless of any width applied using the column width
				// options, the browser will shrink or grow the table as needed to fit into
				// that 100%. That would make the width options useless. So we remove it.
				// This is okay, under the assumption that width:100% is applied to the
				// table in CSS (it is in the default stylesheet) which will set the table
				// width as appropriate (the attribute and css behave differently...)
				if (scroll.sX && table.attr('width') === '100%') {
					table.removeAttr('width');
				}

				if (!footer.length) {
					footer = null;
				}

				/*
	    * The HTML structure that we want to generate in this function is:
	    *  div - scroller
	    *    div - scroll head
	    *      div - scroll head inner
	    *        table - scroll head table
	    *          thead - thead
	    *    div - scroll body
	    *      table - table (master table)
	    *        thead - thead clone for sizing
	    *        tbody - tbody
	    *    div - scroll foot
	    *      div - scroll foot inner
	    *        table - scroll foot table
	    *          tfoot - tfoot
	    */
				var scroller = $(_div, { 'class': classes.sScrollWrapper }).append($(_div, { 'class': classes.sScrollHead }).css({
					overflow: 'hidden',
					position: 'relative',
					border: 0,
					width: scrollX ? size(scrollX) : '100%'
				}).append($(_div, { 'class': classes.sScrollHeadInner }).css({
					'box-sizing': 'content-box',
					width: scroll.sXInner || '100%'
				}).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, { 'class': classes.sScrollBody }).css({
					overflow: 'auto',
					height: size(scrollY),
					width: size(scrollX)
				}).append(table));

				if (footer) {
					scroller.append($(_div, { 'class': classes.sScrollFoot }).css({
						overflow: 'hidden',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					}).append($(_div, { 'class': classes.sScrollFootInner }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));
				}

				var children = scroller.children();
				var scrollHead = children[0];
				var scrollBody = children[1];
				var scrollFoot = footer ? children[2] : null;

				// When the body is scrolled, then we also want to scroll the headers
				if (scrollX) {
					$(scrollBody).on('scroll.DT', function (e) {
						var scrollLeft = this.scrollLeft;

						scrollHead.scrollLeft = scrollLeft;

						if (footer) {
							scrollFoot.scrollLeft = scrollLeft;
						}
					});
				}

				settings.nScrollHead = scrollHead;
				settings.nScrollBody = scrollBody;
				settings.nScrollFoot = scrollFoot;

				// On redraw - align columns
				settings.aoDrawCallback.push({
					"fn": _fnScrollDraw,
					"sName": "scrolling"
				});

				return scroller[0];
			}

			/**
	   * Update the header, footer and body tables for resizing - i.e. column
	   * alignment.
	   *
	   * Welcome to the most horrible function DataTables. The process that this
	   * function follows is basically:
	   *   1. Re-create the table inside the scrolling div
	   *   2. Take live measurements from the DOM
	   *   3. Apply the measurements to align the columns
	   *   4. Clean up
	   *
	   *  @param {object} settings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnScrollDraw(settings) {
				// Given that this is such a monster function, a lot of variables are use
				// to try and keep the minimised size as small as possible
				var scroll = settings.oScroll,
				    scrollX = scroll.sX,
				    scrollXInner = scroll.sXInner,
				    scrollY = scroll.sY,
				    barWidth = scroll.iBarWidth,
				    divHeader = $(settings.nScrollHead),
				    divHeaderStyle = divHeader[0].style,
				    divHeaderInner = divHeader.children('div'),
				    divHeaderInnerStyle = divHeaderInner[0].style,
				    divHeaderTable = divHeaderInner.children('table'),
				    divBodyEl = settings.nScrollBody,
				    divBody = $(divBodyEl),
				    divBodyStyle = divBodyEl.style,
				    divFooter = $(settings.nScrollFoot),
				    divFooterInner = divFooter.children('div'),
				    divFooterTable = divFooterInner.children('table'),
				    header = $(settings.nTHead),
				    table = $(settings.nTable),
				    tableEl = table[0],
				    tableStyle = tableEl.style,
				    footer = settings.nTFoot ? $(settings.nTFoot) : null,
				    browser = settings.oBrowser,
				    ie67 = browser.bScrollOversize,
				    headerTrgEls,
				    footerTrgEls,
				    headerSrcEls,
				    footerSrcEls,
				    headerCopy,
				    footerCopy,
				    headerWidths = [],
				    footerWidths = [],
				    headerContent = [],
				    idx,
				    correction,
				    sanityWidth,
				    zeroOut = function zeroOut(nSizer) {
					var style = nSizer.style;
					style.paddingTop = "0";
					style.paddingBottom = "0";
					style.borderTopWidth = "0";
					style.borderBottomWidth = "0";
					style.height = 0;
				};

				/*
	    * 1. Re-create the table inside the scrolling div
	    */

				// Remove the old minimised thead and tfoot elements in the inner table
				table.children('thead, tfoot').remove();

				// Clone the current header and footer elements and then place it into the inner table
				headerCopy = header.clone().prependTo(table);
				headerTrgEls = header.find('tr'); // original header is in its own table
				headerSrcEls = headerCopy.find('tr');
				headerCopy.find('th, td').removeAttr('tabindex');

				if (footer) {
					footerCopy = footer.clone().prependTo(table);
					footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
					footerSrcEls = footerCopy.find('tr');
				}

				/*
	    * 2. Take live measurements from the DOM - do not alter the DOM itself!
	    */

				// Remove old sizing and apply the calculated column widths
				// Get the unique column headers in the newly created (cloned) header. We want to apply the
				// calculated sizes to this header
				if (!scrollX) {
					divBodyStyle.width = '100%';
					divHeader[0].style.width = '100%';
				}

				$.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
					idx = _fnVisibleToColumnIndex(settings, i);
					el.style.width = settings.aoColumns[idx].sWidth;
				});

				if (footer) {
					_fnApplyToChildren(function (n) {
						n.style.width = "";
					}, footerSrcEls);
				}

				// If scroll collapse is enabled, when we put the headers back into the body for sizing, we
				// will end up forcing the scrollbar to appear, making our measurements wrong for when we
				// then hide it (end of this function), so add the header height to the body scroller.
				if (scroll.bCollapse && scrollY !== "") {
					divBodyStyle.height = divBody[0].offsetHeight + header[0].offsetHeight + "px";
				}

				// Size the table as a whole
				sanityWidth = table.outerWidth();
				if (scrollX === "") {
					// No x scrolling
					tableStyle.width = "100%";

					// IE7 will make the width of the table when 100% include the scrollbar
					// - which is shouldn't. When there is a scrollbar we need to take this
					// into account.
					if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
						tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
					}
				} else {
					// x scrolling
					if (scrollXInner !== "") {
						// x scroll inner has been given - use it
						tableStyle.width = _fnStringToCss(scrollXInner);
					} else if (sanityWidth == divBody.width() && divBody.height() < table.height()) {
						// There is y-scrolling - try to take account of the y scroll bar
						tableStyle.width = _fnStringToCss(sanityWidth - barWidth);
						if (table.outerWidth() > sanityWidth - barWidth) {
							// Not possible to take account of it
							tableStyle.width = _fnStringToCss(sanityWidth);
						}
					} else {
						// When all else fails
						tableStyle.width = _fnStringToCss(sanityWidth);
					}
				}

				// Recalculate the sanity width - now that we've applied the required width,
				// before it was a temporary variable. This is required because the column
				// width calculation is done before this table DOM is created.
				sanityWidth = table.outerWidth();

				// Hidden header should have zero height, so remove padding and borders. Then
				// set the width based on the real headers

				// Apply all styles in one pass
				_fnApplyToChildren(zeroOut, headerSrcEls);

				// Read all widths in next pass
				_fnApplyToChildren(function (nSizer) {
					headerContent.push(nSizer.innerHTML);
					headerWidths.push(_fnStringToCss($(nSizer).css('width')));
				}, headerSrcEls);

				// Apply all widths in final pass
				_fnApplyToChildren(function (nToSize, i) {
					nToSize.style.width = headerWidths[i];
				}, headerTrgEls);

				$(headerSrcEls).height(0);

				/* Same again with the footer if we have one */
				if (footer) {
					_fnApplyToChildren(zeroOut, footerSrcEls);

					_fnApplyToChildren(function (nSizer) {
						footerWidths.push(_fnStringToCss($(nSizer).css('width')));
					}, footerSrcEls);

					_fnApplyToChildren(function (nToSize, i) {
						nToSize.style.width = footerWidths[i];
					}, footerTrgEls);

					$(footerSrcEls).height(0);
				}

				/*
	    * 3. Apply the measurements
	    */

				// "Hide" the header and footer that we used for the sizing. We need to keep
				// the content of the cell so that the width applied to the header and body
				// both match, but we want to hide it completely. We want to also fix their
				// width to what they currently are
				_fnApplyToChildren(function (nSizer, i) {
					nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
					nSizer.style.width = headerWidths[i];
				}, headerSrcEls);

				if (footer) {
					_fnApplyToChildren(function (nSizer, i) {
						nSizer.innerHTML = "";
						nSizer.style.width = footerWidths[i];
					}, footerSrcEls);
				}

				// Sanity check that the table is of a sensible width. If not then we are going to get
				// misalignment - try to prevent this by not allowing the table to shrink below its min width
				if (table.outerWidth() < sanityWidth) {
					// The min width depends upon if we have a vertical scrollbar visible or not */
					correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll" ? sanityWidth + barWidth : sanityWidth;

					// IE6/7 are a law unto themselves...
					if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
						tableStyle.width = _fnStringToCss(correction - barWidth);
					}

					// And give the user a warning that we've stopped the table getting too small
					if (scrollX === "" || scrollXInner !== "") {
						_fnLog(settings, 1, 'Possible column misalignment', 6);
					}
				} else {
					correction = '100%';
				}

				// Apply to the container elements
				divBodyStyle.width = _fnStringToCss(correction);
				divHeaderStyle.width = _fnStringToCss(correction);

				if (footer) {
					settings.nScrollFoot.style.width = _fnStringToCss(correction);
				}

				/*
	    * 4. Clean up
	    */
				if (!scrollY) {
					/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
	     * the scrollbar height from the visible display, rather than adding it on. We need to
	     * set the height in order to sort this. Don't want to do it in any other browsers.
	     */
					if (ie67) {
						divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
					}
				}

				if (scrollY && scroll.bCollapse) {
					divBodyStyle.height = _fnStringToCss(scrollY);

					var iExtra = scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth ? barWidth : 0;

					if (tableEl.offsetHeight < divBodyEl.offsetHeight) {
						divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + iExtra);
					}
				}

				/* Finally set the width's of the header and footer tables */
				var iOuterWidth = table.outerWidth();
				divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
				divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

				// Figure out if there are scrollbar present - if so then we need a the header and footer to
				// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
				var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
				var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
				divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

				if (footer) {
					divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
					divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
					divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
				}

				/* Adjust the position of the header in case we loose the y-scrollbar */
				divBody.scroll();

				// If sorting or filtering has occurred, jump the scrolling back to the top
				// only if we aren't holding the position
				if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
					divBodyEl.scrollTop = 0;
				}
			}

			/**
	   * Apply a given function to the display child nodes of an element array (typically
	   * TD children of TR rows
	   *  @param {function} fn Method to apply to the objects
	   *  @param array {nodes} an1 List of elements to look through for display children
	   *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	   *  @memberof DataTable#oApi
	   */
			function _fnApplyToChildren(fn, an1, an2) {
				var index = 0,
				    i = 0,
				    iLen = an1.length;
				var nNode1, nNode2;

				while (i < iLen) {
					nNode1 = an1[i].firstChild;
					nNode2 = an2 ? an2[i].firstChild : null;

					while (nNode1) {
						if (nNode1.nodeType === 1) {
							if (an2) {
								fn(nNode1, nNode2, index);
							} else {
								fn(nNode1, index);
							}

							index++;
						}

						nNode1 = nNode1.nextSibling;
						nNode2 = an2 ? nNode2.nextSibling : null;
					}

					i++;
				}
			}

			var __re_html_remove = /<.*?>/g;

			/**
	   * Calculate the width of columns for the table
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnCalculateColumnWidths(oSettings) {
				var table = oSettings.nTable,
				    columns = oSettings.aoColumns,
				    scroll = oSettings.oScroll,
				    scrollY = scroll.sY,
				    scrollX = scroll.sX,
				    scrollXInner = scroll.sXInner,
				    columnCount = columns.length,
				    visibleColumns = _fnGetColumns(oSettings, 'bVisible'),
				    headerCells = $('th', oSettings.nTHead),
				    tableWidthAttr = table.getAttribute('width'),
				    // from DOM element
				tableContainer = table.parentNode,
				    userInputs = false,
				    i,
				    column,
				    columnIdx,
				    width,
				    outerWidth;

				var styleWidth = table.style.width;
				if (styleWidth && styleWidth.indexOf('%') !== -1) {
					tableWidthAttr = styleWidth;
				}

				/* Convert any user input sizes into pixel sizes */
				for (i = 0; i < visibleColumns.length; i++) {
					column = columns[visibleColumns[i]];

					if (column.sWidth !== null) {
						column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);

						userInputs = true;
					}
				}

				/* If the number of columns in the DOM equals the number that we have to
	    * process in DataTables, then we can use the offsets that are created by
	    * the web- browser. No custom sizes can be set in order for this to happen,
	    * nor scrolling used
	    */
				if (!userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
					for (i = 0; i < columnCount; i++) {
						columns[i].sWidth = _fnStringToCss(headerCells.eq(i).width());
					}
				} else {
					// Otherwise construct a single row, worst case, table with the widest
					// node in the data, assign any user defined widths, then insert it into
					// the DOM and allow the browser to do all the hard work of calculating
					// table widths
					var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
					.css('visibility', 'hidden').removeAttr('id');

					// Clean up the table body
					tmpTable.find('tbody tr').remove();
					var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));

					// Remove any assigned widths from the footer (from scrolling)
					tmpTable.find('tfoot th, tfoot td').css('width', '');

					// Apply custom sizing to the cloned header
					headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);

					for (i = 0; i < visibleColumns.length; i++) {
						column = columns[visibleColumns[i]];

						headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : '';
					}

					// Find the widest cell for each column and put it into the table
					if (oSettings.aoData.length) {
						for (i = 0; i < visibleColumns.length; i++) {
							columnIdx = visibleColumns[i];
							column = columns[columnIdx];

							$(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
						}
					}

					// Table has been built, attach to the document so we can work with it
					tmpTable.appendTo(tableContainer);

					// When scrolling (X or Y) we want to set the width of the table as
					// appropriate. However, when not scrolling leave the table width as it
					// is. This results in slightly different, but I think correct behaviour
					if (scrollX && scrollXInner) {
						tmpTable.width(scrollXInner);
					} else if (scrollX) {
						tmpTable.css('width', 'auto');

						if (tmpTable.width() < tableContainer.offsetWidth) {
							tmpTable.width(tableContainer.offsetWidth);
						}
					} else if (scrollY) {
						tmpTable.width(tableContainer.offsetWidth);
					} else if (tableWidthAttr) {
						tmpTable.width(tableWidthAttr);
					}

					// Take into account the y scrollbar
					_fnScrollingWidthAdjust(oSettings, tmpTable[0]);

					// Browsers need a bit of a hand when a width is assigned to any columns
					// when x-scrolling as they tend to collapse the table to the min-width,
					// even if we sent the column widths. So we need to keep track of what
					// the table width should be by summing the user given values, and the
					// automatic values
					if (scrollX) {
						var total = 0;

						for (i = 0; i < visibleColumns.length; i++) {
							column = columns[visibleColumns[i]];
							outerWidth = $(headerCells[i]).outerWidth();

							total += column.sWidthOrig === null ? outerWidth : parseInt(column.sWidth, 10) + outerWidth - $(headerCells[i]).width();
						}

						tmpTable.width(_fnStringToCss(total));
						table.style.width = _fnStringToCss(total);
					}

					// Get the width of each column in the constructed table
					for (i = 0; i < visibleColumns.length; i++) {
						column = columns[visibleColumns[i]];
						width = $(headerCells[i]).width();

						if (width) {
							column.sWidth = _fnStringToCss(width);
						}
					}

					table.style.width = _fnStringToCss(tmpTable.css('width'));

					// Finished with the table - ditch it
					tmpTable.remove();
				}

				// If there is a width attr, we want to attach an event listener which
				// allows the table sizing to automatically adjust when the window is
				// resized. Use the width attr rather than CSS, since we can't know if the
				// CSS is a relative value or absolute - DOM read is always px.
				if (tableWidthAttr) {
					table.style.width = _fnStringToCss(tableWidthAttr);
				}

				if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
					var bindResize = function bindResize() {
						$(window).bind('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
							_fnAdjustColumnSizing(oSettings);
						}));
					};

					// IE6/7 will crash if we bind a resize event handler on page load.
					// To be removed in 1.11 which drops IE6/7 support
					if (oSettings.oBrowser.bScrollOversize) {
						setTimeout(bindResize, 1000);
					} else {
						bindResize();
					}

					oSettings._reszEvt = true;
				}
			}

			/**
	   * Throttle the calls to a function. Arguments and context are maintained for
	   * the throttled function
	   *  @param {function} fn Function to be called
	   *  @param {int} [freq=200] call frequency in mS
	   *  @returns {function} wrapped function
	   *  @memberof DataTable#oApi
	   */
			function _fnThrottle(fn, freq) {
				var frequency = freq !== undefined ? freq : 200,
				    last,
				    timer;

				return function () {
					var that = this,
					    now = +new Date(),
					    args = arguments;

					if (last && now < last + frequency) {
						clearTimeout(timer);

						timer = setTimeout(function () {
							last = undefined;
							fn.apply(that, args);
						}, frequency);
					} else {
						last = now;
						fn.apply(that, args);
					}
				};
			}

			/**
	   * Convert a CSS unit width to pixels (e.g. 2em)
	   *  @param {string} width width to be converted
	   *  @param {node} parent parent to get the with for (required for relative widths) - optional
	   *  @returns {int} width in pixels
	   *  @memberof DataTable#oApi
	   */
			function _fnConvertToWidth(width, parent) {
				if (!width) {
					return 0;
				}

				var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);

				var val = n[0].offsetWidth;
				n.remove();

				return val;
			}

			/**
	   * Adjust a table's width to take account of vertical scroll bar
	   *  @param {object} oSettings dataTables settings object
	   *  @param {node} n table node
	   *  @memberof DataTable#oApi
	   */

			function _fnScrollingWidthAdjust(settings, n) {
				var scroll = settings.oScroll;

				if (scroll.sX || scroll.sY) {
					// When y-scrolling only, we want to remove the width of the scroll bar
					// so the table + scroll bar will fit into the area available, otherwise
					// we fix the table at its current size with no adjustment
					var correction = !scroll.sX ? scroll.iBarWidth : 0;
					n.style.width = _fnStringToCss($(n).outerWidth() - correction);
				}
			}

			/**
	   * Get the widest node
	   *  @param {object} settings dataTables settings object
	   *  @param {int} colIdx column of interest
	   *  @returns {node} widest table node
	   *  @memberof DataTable#oApi
	   */
			function _fnGetWidestNode(settings, colIdx) {
				var idx = _fnGetMaxLenString(settings, colIdx);
				if (idx < 0) {
					return null;
				}

				var data = settings.aoData[idx];
				return !data.nTr ? // Might not have been created when deferred rendering
				$('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];
			}

			/**
	   * Get the maximum strlen for each data column
	   *  @param {object} settings dataTables settings object
	   *  @param {int} colIdx column of interest
	   *  @returns {string} max string length for each column
	   *  @memberof DataTable#oApi
	   */
			function _fnGetMaxLenString(settings, colIdx) {
				var s,
				    max = -1,
				    maxIdx = -1;

				for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
					s = _fnGetCellData(settings, i, colIdx, 'display') + '';
					s = s.replace(__re_html_remove, '');

					if (s.length > max) {
						max = s.length;
						maxIdx = i;
					}
				}

				return maxIdx;
			}

			/**
	   * Append a CSS unit (only if required) to a string
	   *  @param {string} value to css-ify
	   *  @returns {string} value with css unit
	   *  @memberof DataTable#oApi
	   */
			function _fnStringToCss(s) {
				if (s === null) {
					return '0px';
				}

				if (typeof s == 'number') {
					return s < 0 ? '0px' : s + 'px';
				}

				// Check it has a unit character already
				return s.match(/\d$/) ? s + 'px' : s;
			}

			/**
	   * Get the width of a scroll bar in this browser being used
	   *  @returns {int} width in pixels
	   *  @memberof DataTable#oApi
	   */
			function _fnScrollBarWidth() {
				// On first run a static variable is set, since this is only needed once.
				// Subsequent runs will just use the previously calculated value
				var width = DataTable.__scrollbarWidth;

				if (width === undefined) {
					var sizer = $('<p/>').css({
						position: 'absolute',
						top: 0,
						left: 0,
						width: '100%',
						height: 150,
						padding: 0,
						overflow: 'scroll',
						visibility: 'hidden'
					}).appendTo('body');

					width = sizer[0].offsetWidth - sizer[0].clientWidth;
					DataTable.__scrollbarWidth = width;

					sizer.remove();
				}

				return width;
			}

			function _fnSortFlatten(settings) {
				var i,
				    iLen,
				    k,
				    kLen,
				    aSort = [],
				    aiOrig = [],
				    aoColumns = settings.aoColumns,
				    aDataSort,
				    iCol,
				    sType,
				    srcCol,
				    fixed = settings.aaSortingFixed,
				    fixedObj = $.isPlainObject(fixed),
				    nestedSort = [],
				    add = function add(a) {
					if (a.length && !$.isArray(a[0])) {
						// 1D array
						nestedSort.push(a);
					} else {
						// 2D array
						nestedSort.push.apply(nestedSort, a);
					}
				};

				// Build the sort array, with pre-fix and post-fix options if they have been
				// specified
				if ($.isArray(fixed)) {
					add(fixed);
				}

				if (fixedObj && fixed.pre) {
					add(fixed.pre);
				}

				add(settings.aaSorting);

				if (fixedObj && fixed.post) {
					add(fixed.post);
				}

				for (i = 0; i < nestedSort.length; i++) {
					srcCol = nestedSort[i][0];
					aDataSort = aoColumns[srcCol].aDataSort;

					for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
						iCol = aDataSort[k];
						sType = aoColumns[iCol].sType || 'string';

						if (nestedSort[i]._idx === undefined) {
							nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
						}

						aSort.push({
							src: srcCol,
							col: iCol,
							dir: nestedSort[i][1],
							index: nestedSort[i]._idx,
							type: sType,
							formatter: DataTable.ext.type.order[sType + "-pre"]
						});
					}
				}

				return aSort;
			}

			/**
	   * Change the order of the table
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   *  @todo This really needs split up!
	   */
			function _fnSort(oSettings) {
				var i,
				    ien,
				    iLen,
				    j,
				    jLen,
				    k,
				    kLen,
				    sDataType,
				    nTh,
				    aiOrig = [],
				    oExtSort = DataTable.ext.type.order,
				    aoData = oSettings.aoData,
				    aoColumns = oSettings.aoColumns,
				    aDataSort,
				    data,
				    iCol,
				    sType,
				    oSort,
				    formatters = 0,
				    sortCol,
				    displayMaster = oSettings.aiDisplayMaster,
				    aSort;

				// Resolve any column types that are unknown due to addition or invalidation
				// @todo Can this be moved into a 'data-ready' handler which is called when
				//   data is going to be used in the table?
				_fnColumnTypes(oSettings);

				aSort = _fnSortFlatten(oSettings);

				for (i = 0, ien = aSort.length; i < ien; i++) {
					sortCol = aSort[i];

					// Track if we can use the fast sort algorithm
					if (sortCol.formatter) {
						formatters++;
					}

					// Load the data needed for the sort, for each cell
					_fnSortData(oSettings, sortCol.col);
				}

				/* No sorting required if server-side or no sorting array */
				if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
					// Create a value - key array of the current row positions such that we can use their
					// current position during the sort, if values match, in order to perform stable sorting
					for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
						aiOrig[displayMaster[i]] = i;
					}

					/* Do the sort - here we want multi-column sorting based on a given data source (column)
	     * and sorting function (from oSort) in a certain direction. It's reasonably complex to
	     * follow on it's own, but this is what we want (example two column sorting):
	     *  fnLocalSorting = function(a,b){
	     *    var iTest;
	     *    iTest = oSort['string-asc']('data11', 'data12');
	     *      if (iTest !== 0)
	     *        return iTest;
	     *    iTest = oSort['numeric-desc']('data21', 'data22');
	     *    if (iTest !== 0)
	     *      return iTest;
	     *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
	     *  }
	     * Basically we have a test for each sorting column, if the data in that column is equal,
	     * test the next column. If all columns match, then we use a numeric sort on the row
	     * positions in the original data array to provide a stable sort.
	     *
	     * Note - I know it seems excessive to have two sorting methods, but the first is around
	     * 15% faster, so the second is only maintained for backwards compatibility with sorting
	     * methods which do not have a pre-sort formatting function.
	     */
					if (formatters === aSort.length) {
						// All sort types have formatting functions
						displayMaster.sort(function (a, b) {
							var x,
							    y,
							    k,
							    test,
							    sort,
							    len = aSort.length,
							    dataA = aoData[a]._aSortData,
							    dataB = aoData[b]._aSortData;

							for (k = 0; k < len; k++) {
								sort = aSort[k];

								x = dataA[sort.col];
								y = dataB[sort.col];

								test = x < y ? -1 : x > y ? 1 : 0;
								if (test !== 0) {
									return sort.dir === 'asc' ? test : -test;
								}
							}

							x = aiOrig[a];
							y = aiOrig[b];
							return x < y ? -1 : x > y ? 1 : 0;
						});
					} else {
						// Depreciated - remove in 1.11 (providing a plug-in option)
						// Not all sort types have formatting methods, so we have to call their sorting
						// methods.
						displayMaster.sort(function (a, b) {
							var x,
							    y,
							    k,
							    l,
							    test,
							    sort,
							    fn,
							    len = aSort.length,
							    dataA = aoData[a]._aSortData,
							    dataB = aoData[b]._aSortData;

							for (k = 0; k < len; k++) {
								sort = aSort[k];

								x = dataA[sort.col];
								y = dataB[sort.col];

								fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
								test = fn(x, y);
								if (test !== 0) {
									return test;
								}
							}

							x = aiOrig[a];
							y = aiOrig[b];
							return x < y ? -1 : x > y ? 1 : 0;
						});
					}
				}

				/* Tell the draw function that we have sorted the data */
				oSettings.bSorted = true;
			}

			function _fnSortAria(settings) {
				var label;
				var nextSort;
				var columns = settings.aoColumns;
				var aSort = _fnSortFlatten(settings);
				var oAria = settings.oLanguage.oAria;

				// ARIA attributes - need to loop all columns, to update all (removing old
				// attributes as needed)
				for (var i = 0, iLen = columns.length; i < iLen; i++) {
					var col = columns[i];
					var asSorting = col.asSorting;
					var sTitle = col.sTitle.replace(/<.*?>/g, "");
					var th = col.nTh;

					// IE7 is throwing an error when setting these properties with jQuery's
					// attr() and removeAttr() methods...
					th.removeAttribute('aria-sort');

					/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
					if (col.bSortable) {
						if (aSort.length > 0 && aSort[0].col == i) {
							th.setAttribute('aria-sort', aSort[0].dir == "asc" ? "ascending" : "descending");
							nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
						} else {
							nextSort = asSorting[0];
						}

						label = sTitle + (nextSort === "asc" ? oAria.sSortAscending : oAria.sSortDescending);
					} else {
						label = sTitle;
					}

					th.setAttribute('aria-label', label);
				}
			}

			/**
	   * Function to run on user sort request
	   *  @param {object} settings dataTables settings object
	   *  @param {node} attachTo node to attach the handler to
	   *  @param {int} colIdx column sorting index
	   *  @param {boolean} [append=false] Append the requested sort to the existing
	   *    sort if true (i.e. multi-column sort)
	   *  @param {function} [callback] callback function
	   *  @memberof DataTable#oApi
	   */
			function _fnSortListener(settings, colIdx, append, callback) {
				var col = settings.aoColumns[colIdx];
				var sorting = settings.aaSorting;
				var asSorting = col.asSorting;
				var nextSortIdx;
				var next = function next(a, overflow) {
					var idx = a._idx;
					if (idx === undefined) {
						idx = $.inArray(a[1], asSorting);
					}

					return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
				};

				// Convert to 2D array if needed
				if (typeof sorting[0] === 'number') {
					sorting = settings.aaSorting = [sorting];
				}

				// If appending the sort then we are multi-column sorting
				if (append && settings.oFeatures.bSortMulti) {
					// Are we already doing some kind of sort on this column?
					var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));

					if (sortIdx !== -1) {
						// Yes, modify the sort
						nextSortIdx = next(sorting[sortIdx], true);

						if (nextSortIdx === null && sorting.length === 1) {
							nextSortIdx = 0; // can't remove sorting completely
						}

						if (nextSortIdx === null) {
							sorting.splice(sortIdx, 1);
						} else {
							sorting[sortIdx][1] = asSorting[nextSortIdx];
							sorting[sortIdx]._idx = nextSortIdx;
						}
					} else {
						// No sort on this column yet
						sorting.push([colIdx, asSorting[0], 0]);
						sorting[sorting.length - 1]._idx = 0;
					}
				} else if (sorting.length && sorting[0][0] == colIdx) {
					// Single column - already sorting on this column, modify the sort
					nextSortIdx = next(sorting[0]);

					sorting.length = 1;
					sorting[0][1] = asSorting[nextSortIdx];
					sorting[0]._idx = nextSortIdx;
				} else {
					// Single column - sort only on this column
					sorting.length = 0;
					sorting.push([colIdx, asSorting[0]]);
					sorting[0]._idx = 0;
				}

				// Run the sort by calling a full redraw
				_fnReDraw(settings);

				// callback used for async user interaction
				if (typeof callback == 'function') {
					callback(settings);
				}
			}

			/**
	   * Attach a sort handler (click) to a node
	   *  @param {object} settings dataTables settings object
	   *  @param {node} attachTo node to attach the handler to
	   *  @param {int} colIdx column sorting index
	   *  @param {function} [callback] callback function
	   *  @memberof DataTable#oApi
	   */
			function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
				var col = settings.aoColumns[colIdx];

				_fnBindAction(attachTo, {}, function (e) {
					/* If the column is not sortable - don't to anything */
					if (col.bSortable === false) {
						return;
					}

					// If processing is enabled use a timeout to allow the processing
					// display to be shown - otherwise to it synchronously
					if (settings.oFeatures.bProcessing) {
						_fnProcessingDisplay(settings, true);

						setTimeout(function () {
							_fnSortListener(settings, colIdx, e.shiftKey, callback);

							// In server-side processing, the draw callback will remove the
							// processing display
							if (_fnDataSource(settings) !== 'ssp') {
								_fnProcessingDisplay(settings, false);
							}
						}, 0);
					} else {
						_fnSortListener(settings, colIdx, e.shiftKey, callback);
					}
				});
			}

			/**
	   * Set the sorting classes on table's body, Note: it is safe to call this function
	   * when bSort and bSortClasses are false
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnSortingClasses(settings) {
				var oldSort = settings.aLastSort;
				var sortClass = settings.oClasses.sSortColumn;
				var sort = _fnSortFlatten(settings);
				var features = settings.oFeatures;
				var i, ien, colIdx;

				if (features.bSort && features.bSortClasses) {
					// Remove old sorting classes
					for (i = 0, ien = oldSort.length; i < ien; i++) {
						colIdx = oldSort[i].src;

						// Remove column sorting
						$(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));
					}

					// Add new column sorting
					for (i = 0, ien = sort.length; i < ien; i++) {
						colIdx = sort[i].src;

						$(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));
					}
				}

				settings.aLastSort = sort;
			}

			// Get the data to sort a column, be it from cache, fresh (populating the
			// cache), or from a sort formatter
			function _fnSortData(settings, idx) {
				// Custom sorting function - provided by the sort data type
				var column = settings.aoColumns[idx];
				var customSort = DataTable.ext.order[column.sSortDataType];
				var customData;

				if (customSort) {
					customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));
				}

				// Use / populate cache
				var row, cellData;
				var formatter = DataTable.ext.type.order[column.sType + "-pre"];

				for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
					row = settings.aoData[i];

					if (!row._aSortData) {
						row._aSortData = [];
					}

					if (!row._aSortData[idx] || customSort) {
						cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there
						_fnGetCellData(settings, i, idx, 'sort');

						row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
					}
				}
			}

			/**
	   * Save the state of a table
	   *  @param {object} oSettings dataTables settings object
	   *  @memberof DataTable#oApi
	   */
			function _fnSaveState(settings) {
				if (!settings.oFeatures.bStateSave || settings.bDestroying) {
					return;
				}

				/* Store the interesting variables */
				var state = {
					time: +new Date(),
					start: settings._iDisplayStart,
					length: settings._iDisplayLength,
					order: $.extend(true, [], settings.aaSorting),
					search: _fnSearchToCamel(settings.oPreviousSearch),
					columns: $.map(settings.aoColumns, function (col, i) {
						return {
							visible: col.bVisible,
							search: _fnSearchToCamel(settings.aoPreSearchCols[i])
						};
					})
				};

				_fnCallbackFire(settings, "aoStateSaveParams", 'stateSaveParams', [settings, state]);

				settings.oSavedState = state;
				settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
			}

			/**
	   * Attempt to load a saved table state
	   *  @param {object} oSettings dataTables settings object
	   *  @param {object} oInit DataTables init object so we can override settings
	   *  @memberof DataTable#oApi
	   */
			function _fnLoadState(settings, oInit) {
				var i, ien;
				var columns = settings.aoColumns;

				if (!settings.oFeatures.bStateSave) {
					return;
				}

				var state = settings.fnStateLoadCallback.call(settings.oInstance, settings);
				if (!state || !state.time) {
					return;
				}

				/* Allow custom and plug-in manipulation functions to alter the saved data set and
	    * cancelling of loading by returning false
	    */
				var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state]);
				if ($.inArray(false, abStateLoad) !== -1) {
					return;
				}

				/* Reject old data */
				var duration = settings.iStateDuration;
				if (duration > 0 && state.time < +new Date() - duration * 1000) {
					return;
				}

				// Number of columns have changed - all bets are off, no restore of settings
				if (columns.length !== state.columns.length) {
					return;
				}

				// Store the saved state so it might be accessed at any time
				settings.oLoadedState = $.extend(true, {}, state);

				// Restore key features - todo - for 1.11 this needs to be done by
				// subscribed events
				if (state.start !== undefined) {
					settings._iDisplayStart = state.start;
					settings.iInitDisplayStart = state.start;
				}
				if (state.length !== undefined) {
					settings._iDisplayLength = state.length;
				}

				// Order
				if (state.order !== undefined) {
					settings.aaSorting = [];
					$.each(state.order, function (i, col) {
						settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);
					});
				}

				// Search
				if (state.search !== undefined) {
					$.extend(settings.oPreviousSearch, _fnSearchToHung(state.search));
				}

				// Columns
				for (i = 0, ien = state.columns.length; i < ien; i++) {
					var col = state.columns[i];

					// Visibility
					if (col.visible !== undefined) {
						columns[i].bVisible = col.visible;
					}

					// Search
					if (col.search !== undefined) {
						$.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
					}
				}

				_fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, state]);
			}

			/**
	   * Return the settings object for a particular table
	   *  @param {node} table table we are using as a dataTable
	   *  @returns {object} Settings object - or null if not found
	   *  @memberof DataTable#oApi
	   */
			function _fnSettingsFromNode(table) {
				var settings = DataTable.settings;
				var idx = $.inArray(table, _pluck(settings, 'nTable'));

				return idx !== -1 ? settings[idx] : null;
			}

			/**
	   * Log an error message
	   *  @param {object} settings dataTables settings object
	   *  @param {int} level log error messages, or display them to the user
	   *  @param {string} msg error message
	   *  @param {int} tn Technical note id to get more information about the error.
	   *  @memberof DataTable#oApi
	   */
			function _fnLog(settings, level, msg, tn) {
				msg = 'DataTables warning: ' + (settings !== null ? 'table id=' + settings.sTableId + ' - ' : '') + msg;

				if (tn) {
					msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;
				}

				if (!level) {
					// Backwards compatibility pre 1.10
					var ext = DataTable.ext;
					var type = ext.sErrMode || ext.errMode;

					_fnCallbackFire(settings, null, 'error', [settings, tn, msg]);

					if (type == 'alert') {
						alert(msg);
					} else if (type == 'throw') {
						throw new Error(msg);
					} else if (typeof type == 'function') {
						type(settings, tn, msg);
					}
				} else if (window.console && console.log) {
					console.log(msg);
				}
			}

			/**
	   * See if a property is defined on one object, if so assign it to the other object
	   *  @param {object} ret target object
	   *  @param {object} src source object
	   *  @param {string} name property
	   *  @param {string} [mappedName] name to map too - optional, name used if not given
	   *  @memberof DataTable#oApi
	   */
			function _fnMap(ret, src, name, mappedName) {
				if ($.isArray(name)) {
					$.each(name, function (i, val) {
						if ($.isArray(val)) {
							_fnMap(ret, src, val[0], val[1]);
						} else {
							_fnMap(ret, src, val);
						}
					});

					return;
				}

				if (mappedName === undefined) {
					mappedName = name;
				}

				if (src[name] !== undefined) {
					ret[mappedName] = src[name];
				}
			}

			/**
	   * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	   * shallow copy arrays. The reason we need to do this, is that we don't want to
	   * deep copy array init values (such as aaSorting) since the dev wouldn't be
	   * able to override them, but we do want to deep copy arrays.
	   *  @param {object} out Object to extend
	   *  @param {object} extender Object from which the properties will be applied to
	   *      out
	   *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	   *      independent copy with the exception of the `data` or `aaData` parameters
	   *      if they are present. This is so you can pass in a collection to
	   *      DataTables and have that used as your data source without breaking the
	   *      references
	   *  @returns {object} out Reference, just for convenience - out === the return.
	   *  @memberof DataTable#oApi
	   *  @todo This doesn't take account of arrays inside the deep copied objects.
	   */
			function _fnExtend(out, extender, breakRefs) {
				var val;

				for (var prop in extender) {
					if (extender.hasOwnProperty(prop)) {
						val = extender[prop];

						if ($.isPlainObject(val)) {
							if (!$.isPlainObject(out[prop])) {
								out[prop] = {};
							}
							$.extend(true, out[prop], val);
						} else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
							out[prop] = val.slice();
						} else {
							out[prop] = val;
						}
					}
				}

				return out;
			}

			/**
	   * Bind an event handers to allow a click or return key to activate the callback.
	   * This is good for accessibility since a return on the keyboard will have the
	   * same effect as a click, if the element has focus.
	   *  @param {element} n Element to bind the action to
	   *  @param {object} oData Data object to pass to the triggered function
	   *  @param {function} fn Callback function for when the event is triggered
	   *  @memberof DataTable#oApi
	   */
			function _fnBindAction(n, oData, fn) {
				$(n).bind('click.DT', oData, function (e) {
					n.blur(); // Remove focus outline for mouse users
					fn(e);
				}).bind('keypress.DT', oData, function (e) {
					if (e.which === 13) {
						e.preventDefault();
						fn(e);
					}
				}).bind('selectstart.DT', function () {
					/* Take the brutal approach to cancelling text selection */
					return false;
				});
			}

			/**
	   * Register a callback function. Easily allows a callback function to be added to
	   * an array store of callback functions that can then all be called together.
	   *  @param {object} oSettings dataTables settings object
	   *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	   *  @param {function} fn Function to be called back
	   *  @param {string} sName Identifying name for the callback (i.e. a label)
	   *  @memberof DataTable#oApi
	   */
			function _fnCallbackReg(oSettings, sStore, fn, sName) {
				if (fn) {
					oSettings[sStore].push({
						"fn": fn,
						"sName": sName
					});
				}
			}

			/**
	   * Fire callback functions and trigger events. Note that the loop over the
	   * callback array store is done backwards! Further note that you do not want to
	   * fire off triggers in time sensitive applications (for example cell creation)
	   * as its slow.
	   *  @param {object} settings dataTables settings object
	   *  @param {string} callbackArr Name of the array storage for the callbacks in
	   *      oSettings
	   *  @param {string} eventName Name of the jQuery custom event to trigger. If
	   *      null no trigger is fired
	   *  @param {array} args Array of arguments to pass to the callback function /
	   *      trigger
	   *  @memberof DataTable#oApi
	   */
			function _fnCallbackFire(settings, callbackArr, eventName, args) {
				var ret = [];

				if (callbackArr) {
					ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
						return val.fn.apply(settings.oInstance, args);
					});
				}

				if (eventName !== null) {
					var e = $.Event(eventName + '.dt');

					$(settings.nTable).trigger(e, args);

					ret.push(e.result);
				}

				return ret;
			}

			function _fnLengthOverflow(settings) {
				var start = settings._iDisplayStart,
				    end = settings.fnDisplayEnd(),
				    len = settings._iDisplayLength;

				/* If we have space to show extra rows (backing up from the end point - then do so */
				if (start >= end) {
					start = end - len;
				}

				// Keep the start record on the current page
				start -= start % len;

				if (len === -1 || start < 0) {
					start = 0;
				}

				settings._iDisplayStart = start;
			}

			function _fnRenderer(settings, type) {
				var renderer = settings.renderer;
				var host = DataTable.ext.renderer[type];

				if ($.isPlainObject(renderer) && renderer[type]) {
					// Specific renderer for this type. If available use it, otherwise use
					// the default.
					return host[renderer[type]] || host._;
				} else if (typeof renderer === 'string') {
					// Common renderer - if there is one available for this type use it,
					// otherwise use the default
					return host[renderer] || host._;
				}

				// Use the default
				return host._;
			}

			/**
	   * Detect the data source being used for the table. Used to simplify the code
	   * a little (ajax) and to make it compress a little smaller.
	   *
	   *  @param {object} settings dataTables settings object
	   *  @returns {string} Data source
	   *  @memberof DataTable#oApi
	   */
			function _fnDataSource(settings) {
				if (settings.oFeatures.bServerSide) {
					return 'ssp';
				} else if (settings.ajax || settings.sAjaxSource) {
					return 'ajax';
				}
				return 'dom';
			}

			DataTable = function (options) {
				/**
	    * Perform a jQuery selector action on the table's TR elements (from the tbody) and
	    * return the resulting jQuery object.
	    *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	    *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	    *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
	    *    criterion ("applied") or all TR elements (i.e. no filter).
	    *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
	    *    Can be either 'current', whereby the current sorting of the table is used, or
	    *    'original' whereby the original order the data was read into the table is used.
	    *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	    *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	    *    'current' and filter is 'applied', regardless of what they might be given as.
	    *  @returns {object} jQuery object, filtered by the given selector.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Highlight every second row
	    *      oTable.$('tr:odd').css('backgroundColor', 'blue');
	    *    } );
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Filter to rows with 'Webkit' in them, add a background colour and then
	    *      // remove the filter, thus highlighting the 'Webkit' rows only.
	    *      oTable.fnFilter('Webkit');
	    *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
	    *      oTable.fnFilter('');
	    *    } );
	    */
				this.$ = function (sSelector, oOpts) {
					return this.api(true).$(sSelector, oOpts);
				};

				/**
	    * Almost identical to $ in operation, but in this case returns the data for the matched
	    * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
	    * rather than any descendants, so the data can be obtained for the row/cell. If matching
	    * rows are found, the data returned is the original data array/object that was used to
	    * create the row (or a generated array if from a DOM source).
	    *
	    * This method is often useful in-combination with $ where both functions are given the
	    * same parameters and the array indexes will match identically.
	    *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	    *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	    *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
	    *    criterion ("applied") or all elements (i.e. no filter).
	    *  @param {string} [oOpts.order=current] Order of the data in the processed array.
	    *    Can be either 'current', whereby the current sorting of the table is used, or
	    *    'original' whereby the original order the data was read into the table is used.
	    *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	    *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	    *    'current' and filter is 'applied', regardless of what they might be given as.
	    *  @returns {array} Data for the matched elements. If any elements, as a result of the
	    *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
	    *    entry in the array.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Get the data from the first row in the table
	    *      var data = oTable._('tr:first');
	    *
	    *      // Do something useful with the data
	    *      alert( "First cell is: "+data[0] );
	    *    } );
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Filter to 'Webkit' and get all data for
	    *      oTable.fnFilter('Webkit');
	    *      var data = oTable._('tr', {"search": "applied"});
	    *
	    *      // Do something with the data
	    *      alert( data.length+" rows matched the search" );
	    *    } );
	    */
				this._ = function (sSelector, oOpts) {
					return this.api(true).rows(sSelector, oOpts).data();
				};

				/**
	    * Create a DataTables Api instance, with the currently selected tables for
	    * the Api's context.
	    * @param {boolean} [traditional=false] Set the API instance's context to be
	    *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
	    *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
	    *   or if all tables captured in the jQuery object should be used.
	    * @return {DataTables.Api}
	    */
				this.api = function (traditional) {
					return traditional ? new _Api(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api(this);
				};

				/**
	    * Add a single new row or multiple rows of data to the table. Please note
	    * that this is suitable for client-side processing only - if you are using
	    * server-side processing (i.e. "bServerSide": true), then to add data, you
	    * must add it to the data source, i.e. the server-side, through an Ajax call.
	    *  @param {array|object} data The data to be added to the table. This can be:
	    *    <ul>
	    *      <li>1D array of data - add a single row with the data provided</li>
	    *      <li>2D array of arrays - add multiple rows in a single call</li>
	    *      <li>object - data object when using <i>mData</i></li>
	    *      <li>array of objects - multiple data objects when using <i>mData</i></li>
	    *    </ul>
	    *  @param {bool} [redraw=true] redraw the table or not
	    *  @returns {array} An array of integers, representing the list of indexes in
	    *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
	    *    the table.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    // Global var for counter
	    *    var giCount = 2;
	    *
	    *    $(document).ready(function() {
	    *      $('#example').dataTable();
	    *    } );
	    *
	    *    function fnClickAddRow() {
	    *      $('#example').dataTable().fnAddData( [
	    *        giCount+".1",
	    *        giCount+".2",
	    *        giCount+".3",
	    *        giCount+".4" ]
	    *      );
	    *
	    *      giCount++;
	    *    }
	    */
				this.fnAddData = function (data, redraw) {
					var api = this.api(true);

					/* Check if we want to add multiple rows or not */
					var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);

					if (redraw === undefined || redraw) {
						api.draw();
					}

					return rows.flatten().toArray();
				};

				/**
	    * This function will make DataTables recalculate the column sizes, based on the data
	    * contained in the table and the sizes applied to the columns (in the DOM, CSS or
	    * through the sWidth parameter). This can be useful when the width of the table's
	    * parent element changes (for example a window resize).
	    *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable( {
	    *        "sScrollY": "200px",
	    *        "bPaginate": false
	    *      } );
	    *
	    *      $(window).bind('resize', function () {
	    *        oTable.fnAdjustColumnSizing();
	    *      } );
	    *    } );
	    */
				this.fnAdjustColumnSizing = function (bRedraw) {
					var api = this.api(true).columns.adjust();
					var settings = api.settings()[0];
					var scroll = settings.oScroll;

					if (bRedraw === undefined || bRedraw) {
						api.draw(false);
					} else if (scroll.sX !== "" || scroll.sY !== "") {
						/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
						_fnScrollDraw(settings);
					}
				};

				/**
	    * Quickly and simply clear a table
	    *  @param {bool} [bRedraw=true] redraw the table or not
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
	    *      oTable.fnClearTable();
	    *    } );
	    */
				this.fnClearTable = function (bRedraw) {
					var api = this.api(true).clear();

					if (bRedraw === undefined || bRedraw) {
						api.draw();
					}
				};

				/**
	    * The exact opposite of 'opening' a row, this function will close any rows which
	    * are currently 'open'.
	    *  @param {node} nTr the table row to 'close'
	    *  @returns {int} 0 on success, or 1 if failed (can't find the row)
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable;
	    *
	    *      // 'open' an information row when a row is clicked on
	    *      $('#example tbody tr').click( function () {
	    *        if ( oTable.fnIsOpen(this) ) {
	    *          oTable.fnClose( this );
	    *        } else {
	    *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	    *        }
	    *      } );
	    *
	    *      oTable = $('#example').dataTable();
	    *    } );
	    */
				this.fnClose = function (nTr) {
					this.api(true).row(nTr).child.hide();
				};

				/**
	    * Remove a row for the table
	    *  @param {mixed} target The index of the row from aoData to be deleted, or
	    *    the TR element you want to delete
	    *  @param {function|null} [callBack] Callback function
	    *  @param {bool} [redraw=true] Redraw the table or not
	    *  @returns {array} The row that was deleted
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Immediately remove the first row
	    *      oTable.fnDeleteRow( 0 );
	    *    } );
	    */
				this.fnDeleteRow = function (target, callback, redraw) {
					var api = this.api(true);
					var rows = api.rows(target);
					var settings = rows.settings()[0];
					var data = settings.aoData[rows[0][0]];

					rows.remove();

					if (callback) {
						callback.call(this, settings, data);
					}

					if (redraw === undefined || redraw) {
						api.draw();
					}

					return data;
				};

				/**
	    * Restore the table to it's original state in the DOM by removing all of DataTables
	    * enhancements, alterations to the DOM structure of the table and event listeners.
	    *  @param {boolean} [remove=false] Completely remove the table from the DOM
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
	    *      var oTable = $('#example').dataTable();
	    *      oTable.fnDestroy();
	    *    } );
	    */
				this.fnDestroy = function (remove) {
					this.api(true).destroy(remove);
				};

				/**
	    * Redraw the table
	    *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
	    *      oTable.fnDraw();
	    *    } );
	    */
				this.fnDraw = function (complete) {
					// Note that this isn't an exact match to the old call to _fnDraw - it takes
					// into account the new data, but can hold position.
					this.api(true).draw(complete);
				};

				/**
	    * Filter the input based on data
	    *  @param {string} sInput String to filter the table on
	    *  @param {int|null} [iColumn] Column to limit filtering to
	    *  @param {bool} [bRegex=false] Treat as regular expression or not
	    *  @param {bool} [bSmart=true] Perform smart filtering or not
	    *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
	    *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Sometime later - filter...
	    *      oTable.fnFilter( 'test string' );
	    *    } );
	    */
				this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
					var api = this.api(true);

					if (iColumn === null || iColumn === undefined) {
						api.search(sInput, bRegex, bSmart, bCaseInsensitive);
					} else {
						api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
					}

					api.draw();
				};

				/**
	    * Get the data for the whole table, an individual row or an individual cell based on the
	    * provided parameters.
	    *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
	    *    a TR node then the data source for the whole row will be returned. If given as a
	    *    TD/TH cell node then iCol will be automatically calculated and the data for the
	    *    cell returned. If given as an integer, then this is treated as the aoData internal
	    *    data index for the row (see fnGetPosition) and the data for that row used.
	    *  @param {int} [col] Optional column index that you want the data of.
	    *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
	    *    returned. If mRow is defined, just data for that row, and is iCol is
	    *    defined, only data for the designated cell is returned.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    // Row data
	    *    $(document).ready(function() {
	    *      oTable = $('#example').dataTable();
	    *
	    *      oTable.$('tr').click( function () {
	    *        var data = oTable.fnGetData( this );
	    *        // ... do something with the array / object of data for the row
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Individual cell data
	    *    $(document).ready(function() {
	    *      oTable = $('#example').dataTable();
	    *
	    *      oTable.$('td').click( function () {
	    *        var sData = oTable.fnGetData( this );
	    *        alert( 'The cell clicked on had the value of '+sData );
	    *      } );
	    *    } );
	    */
				this.fnGetData = function (src, col) {
					var api = this.api(true);

					if (src !== undefined) {
						var type = src.nodeName ? src.nodeName.toLowerCase() : '';

						return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;
					}

					return api.data().toArray();
				};

				/**
	    * Get an array of the TR nodes that are used in the table's body. Note that you will
	    * typically want to use the '$' API method in preference to this as it is more
	    * flexible.
	    *  @param {int} [iRow] Optional row index for the TR element you want
	    *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
	    *    in the table's body, or iRow is defined, just the TR element requested.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Get the nodes from the table
	    *      var nNodes = oTable.fnGetNodes( );
	    *    } );
	    */
				this.fnGetNodes = function (iRow) {
					var api = this.api(true);

					return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
				};

				/**
	    * Get the array indexes of a particular cell from it's DOM element
	    * and column index including hidden columns
	    *  @param {node} node this can either be a TR, TD or TH in the table's body
	    *  @returns {int} If nNode is given as a TR, then a single index is returned, or
	    *    if given as a cell, an array of [row index, column index (visible),
	    *    column index (all)] is given.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      $('#example tbody td').click( function () {
	    *        // Get the position of the current data from the node
	    *        var aPos = oTable.fnGetPosition( this );
	    *
	    *        // Get the data array for this row
	    *        var aData = oTable.fnGetData( aPos[0] );
	    *
	    *        // Update the data array and return the value
	    *        aData[ aPos[1] ] = 'clicked';
	    *        this.innerHTML = 'clicked';
	    *      } );
	    *
	    *      // Init DataTables
	    *      oTable = $('#example').dataTable();
	    *    } );
	    */
				this.fnGetPosition = function (node) {
					var api = this.api(true);
					var nodeName = node.nodeName.toUpperCase();

					if (nodeName == 'TR') {
						return api.row(node).index();
					} else if (nodeName == 'TD' || nodeName == 'TH') {
						var cell = api.cell(node).index();

						return [cell.row, cell.columnVisible, cell.column];
					}
					return null;
				};

				/**
	    * Check to see if a row is 'open' or not.
	    *  @param {node} nTr the table row to check
	    *  @returns {boolean} true if the row is currently open, false otherwise
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable;
	    *
	    *      // 'open' an information row when a row is clicked on
	    *      $('#example tbody tr').click( function () {
	    *        if ( oTable.fnIsOpen(this) ) {
	    *          oTable.fnClose( this );
	    *        } else {
	    *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	    *        }
	    *      } );
	    *
	    *      oTable = $('#example').dataTable();
	    *    } );
	    */
				this.fnIsOpen = function (nTr) {
					return this.api(true).row(nTr).child.isShown();
				};

				/**
	    * This function will place a new row directly after a row which is currently
	    * on display on the page, with the HTML contents that is passed into the
	    * function. This can be used, for example, to ask for confirmation that a
	    * particular record should be deleted.
	    *  @param {node} nTr The table row to 'open'
	    *  @param {string|node|jQuery} mHtml The HTML to put into the row
	    *  @param {string} sClass Class to give the new TD cell
	    *  @returns {node} The row opened. Note that if the table row passed in as the
	    *    first parameter, is not found in the table, this method will silently
	    *    return.
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable;
	    *
	    *      // 'open' an information row when a row is clicked on
	    *      $('#example tbody tr').click( function () {
	    *        if ( oTable.fnIsOpen(this) ) {
	    *          oTable.fnClose( this );
	    *        } else {
	    *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	    *        }
	    *      } );
	    *
	    *      oTable = $('#example').dataTable();
	    *    } );
	    */
				this.fnOpen = function (nTr, mHtml, sClass) {
					return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
				};

				/**
	    * Change the pagination - provides the internal logic for pagination in a simple API
	    * function. With this function you can have a DataTables table go to the next,
	    * previous, first or last pages.
	    *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
	    *    or page number to jump to (integer), note that page 0 is the first page.
	    *  @param {bool} [bRedraw=true] Redraw the table or not
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *      oTable.fnPageChange( 'next' );
	    *    } );
	    */
				this.fnPageChange = function (mAction, bRedraw) {
					var api = this.api(true).page(mAction);

					if (bRedraw === undefined || bRedraw) {
						api.draw(false);
					}
				};

				/**
	    * Show a particular column
	    *  @param {int} iCol The column whose display should be changed
	    *  @param {bool} bShow Show (true) or hide (false) the column
	    *  @param {bool} [bRedraw=true] Redraw the table or not
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Hide the second column after initialisation
	    *      oTable.fnSetColumnVis( 1, false );
	    *    } );
	    */
				this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
					var api = this.api(true).column(iCol).visible(bShow);

					if (bRedraw === undefined || bRedraw) {
						api.columns.adjust().draw();
					}
				};

				/**
	    * Get the settings for a particular table for external manipulation
	    *  @returns {object} DataTables settings object. See
	    *    {@link DataTable.models.oSettings}
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *      var oSettings = oTable.fnSettings();
	    *
	    *      // Show an example parameter from the settings
	    *      alert( oSettings._iDisplayStart );
	    *    } );
	    */
				this.fnSettings = function () {
					return _fnSettingsFromNode(this[_ext.iApiIndex]);
				};

				/**
	    * Sort the table by a particular column
	    *  @param {int} iCol the data index to sort on. Note that this will not match the
	    *    'display index' if you have hidden data entries
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Sort immediately with columns 0 and 1
	    *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
	    *    } );
	    */
				this.fnSort = function (aaSort) {
					this.api(true).order(aaSort).draw();
				};

				/**
	    * Attach a sort listener to an element for a given column
	    *  @param {node} nNode the element to attach the sort listener to
	    *  @param {int} iColumn the column that a click on this node will sort on
	    *  @param {function} [fnCallback] callback function when sort is run
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *
	    *      // Sort on column 1, when 'sorter' is clicked on
	    *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
	    *    } );
	    */
				this.fnSortListener = function (nNode, iColumn, fnCallback) {
					this.api(true).order.listener(nNode, iColumn, fnCallback);
				};

				/**
	    * Update a table cell or row - this method will accept either a single value to
	    * update the cell with, an array of values with one element for each column or
	    * an object in the same format as the original data source. The function is
	    * self-referencing in order to make the multi column updates easier.
	    *  @param {object|array|string} mData Data to update the cell/row with
	    *  @param {node|int} mRow TR element you want to update or the aoData index
	    *  @param {int} [iColumn] The column to update, give as null or undefined to
	    *    update a whole row.
	    *  @param {bool} [bRedraw=true] Redraw the table or not
	    *  @param {bool} [bAction=true] Perform pre-draw actions or not
	    *  @returns {int} 0 on success, 1 on error
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
	    *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
	    *    } );
	    */
				this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
					var api = this.api(true);

					if (iColumn === undefined || iColumn === null) {
						api.row(mRow).data(mData);
					} else {
						api.cell(mRow, iColumn).data(mData);
					}

					if (bAction === undefined || bAction) {
						api.columns.adjust();
					}

					if (bRedraw === undefined || bRedraw) {
						api.draw();
					}
					return 0;
				};

				/**
	    * Provide a common method for plug-ins to check the version of DataTables being used, in order
	    * to ensure compatibility.
	    *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
	    *    formats "X" and "X.Y" are also acceptable.
	    *  @returns {boolean} true if this version of DataTables is greater or equal to the required
	    *    version, or false if this version of DataTales is not suitable
	    *  @method
	    *  @dtopt API
	    *  @deprecated Since v1.10
	    *
	    *  @example
	    *    $(document).ready(function() {
	    *      var oTable = $('#example').dataTable();
	    *      alert( oTable.fnVersionCheck( '1.9.0' ) );
	    *    } );
	    */
				this.fnVersionCheck = _ext.fnVersionCheck;

				var _that = this;
				var emptyInit = options === undefined;
				var len = this.length;

				if (emptyInit) {
					options = {};
				}

				this.oApi = this.internal = _ext.internal;

				// Extend with old style plug-in API methods
				for (var fn in DataTable.ext.internal) {
					if (fn) {
						this[fn] = _fnExternApiFunc(fn);
					}
				}

				this.each(function () {
					// For each initialisation we want to give it a clean initialisation
					// object that can be bashed around
					var o = {};
					var oInit = len > 1 ? // optimisation for single table case
					_fnExtend(o, options, true) : options;

					/*global oInit,_that,emptyInit*/
					var i = 0,
					    iLen,
					    j,
					    jLen,
					    k,
					    kLen;
					var sId = this.getAttribute('id');
					var bInitHandedOff = false;
					var defaults = DataTable.defaults;
					var $this = $(this);

					/* Sanity check */
					if (this.nodeName.toLowerCase() != 'table') {
						_fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);
						return;
					}

					/* Backwards compatibility for the defaults */
					_fnCompatOpts(defaults);
					_fnCompatCols(defaults.column);

					/* Convert the camel-case defaults to Hungarian */
					_fnCamelToHungarian(defaults, defaults, true);
					_fnCamelToHungarian(defaults.column, defaults.column, true);

					/* Setting up the initialisation object */
					_fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));

					/* Check to see if we are re-initialising a table */
					var allSettings = DataTable.settings;
					for (i = 0, iLen = allSettings.length; i < iLen; i++) {
						var s = allSettings[i];

						/* Base check on table node */
						if (s.nTable == this || s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
							var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
							var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

							if (emptyInit || bRetrieve) {
								return s.oInstance;
							} else if (bDestroy) {
								s.oInstance.fnDestroy();
								break;
							} else {
								_fnLog(s, 0, 'Cannot reinitialise DataTable', 3);
								return;
							}
						}

						/* If the element we are initialising has the same ID as a table which was previously
	      * initialised, but the table nodes don't match (from before) then we destroy the old
	      * instance by simply deleting it. This is under the assumption that the table has been
	      * destroyed by other methods. Anyone using non-id selectors will need to do this manually
	      */
						if (s.sTableId == this.id) {
							allSettings.splice(i, 1);
							break;
						}
					}

					/* Ensure the table has an ID - required for accessibility */
					if (sId === null || sId === "") {
						sId = "DataTables_Table_" + DataTable.ext._unique++;
						this.id = sId;
					}

					/* Create the settings object for this table and set some of the default parameters */
					var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
						"sDestroyWidth": $this[0].style.width,
						"sInstance": sId,
						"sTableId": sId
					});
					oSettings.nTable = this;
					oSettings.oApi = _that.internal;
					oSettings.oInit = oInit;

					allSettings.push(oSettings);

					// Need to add the instance after the instance after the settings object has been added
					// to the settings array, so we can self reference the table instance if more than one
					oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();

					// Backwards compatibility, before we apply all the defaults
					_fnCompatOpts(oInit);

					if (oInit.oLanguage) {
						_fnLanguageCompat(oInit.oLanguage);
					}

					// If the length menu is given, but the init display length is not, use the length menu
					if (oInit.aLengthMenu && !oInit.iDisplayLength) {
						oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
					}

					// Apply the defaults and init options to make a single init object will all
					// options defined from defaults and instance options.
					oInit = _fnExtend($.extend(true, {}, defaults), oInit);

					// Map the initialisation options onto the settings object
					_fnMap(oSettings.oFeatures, oInit, ["bPaginate", "bLengthChange", "bFilter", "bSort", "bSortMulti", "bInfo", "bProcessing", "bAutoWidth", "bSortClasses", "bServerSide", "bDeferRender"]);
					_fnMap(oSettings, oInit, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", ["iCookieDuration", "iStateDuration"], // backwards compat
					["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"], ["bJQueryUI", "bJUI"]]);
					_fnMap(oSettings.oScroll, oInit, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]);
					_fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");

					/* Callback functions which are array driven */
					_fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');
					_fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');
					_fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');
					_fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');
					_fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');
					_fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');
					_fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');
					_fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');
					_fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');
					_fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');
					_fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');

					var oClasses = oSettings.oClasses;

					// @todo Remove in 1.11
					if (oInit.bJQueryUI) {
						/* Use the JUI classes object for display. You could clone the oStdClasses object if
	      * you want to have multiple tables with multiple independent classes
	      */
						$.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses);

						if (oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip") {
							/* Set the DOM to use a layout suitable for jQuery UI's theming */
							oSettings.sDom = '<"H"lfr>t<"F"ip>';
						}

						if (!oSettings.renderer) {
							oSettings.renderer = 'jqueryui';
						} else if ($.isPlainObject(oSettings.renderer) && !oSettings.renderer.header) {
							oSettings.renderer.header = 'jqueryui';
						}
					} else {
						$.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
					}
					$this.addClass(oClasses.sTable);

					/* Calculate the scroll bar width and cache it for use later on */
					if (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") {
						oSettings.oScroll.iBarWidth = _fnScrollBarWidth();
					}
					if (oSettings.oScroll.sX === true) {
						// Easy initialisation of x-scrolling
						oSettings.oScroll.sX = '100%';
					}

					if (oSettings.iInitDisplayStart === undefined) {
						/* Display start point, taking into account the save saving */
						oSettings.iInitDisplayStart = oInit.iDisplayStart;
						oSettings._iDisplayStart = oInit.iDisplayStart;
					}

					if (oInit.iDeferLoading !== null) {
						oSettings.bDeferLoading = true;
						var tmp = $.isArray(oInit.iDeferLoading);
						oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
						oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
					}

					/* Language definitions */
					var oLanguage = oSettings.oLanguage;
					$.extend(true, oLanguage, oInit.oLanguage);

					if (oLanguage.sUrl !== "") {
						/* Get the language definitions from a file - because this Ajax call makes the language
	      * get async to the remainder of this function we use bInitHandedOff to indicate that
	      * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
	      */
						$.ajax({
							dataType: 'json',
							url: oLanguage.sUrl,
							success: function success(json) {
								_fnLanguageCompat(json);
								_fnCamelToHungarian(defaults.oLanguage, json);
								$.extend(true, oLanguage, json);
								_fnInitialise(oSettings);
							},
							error: function error() {
								// Error occurred loading language file, continue on as best we can
								_fnInitialise(oSettings);
							}
						});
						bInitHandedOff = true;
					}

					/*
	     * Stripes
	     */
					if (oInit.asStripeClasses === null) {
						oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];
					}

					/* Remove row stripe classes if they are already on the table row */
					var stripeClasses = oSettings.asStripeClasses;
					var rowOne = $this.children('tbody').find('tr').eq(0);
					if ($.inArray(true, $.map(stripeClasses, function (el, i) {
						return rowOne.hasClass(el);
					})) !== -1) {
						$('tbody tr', this).removeClass(stripeClasses.join(' '));
						oSettings.asDestroyStripes = stripeClasses.slice();
					}

					/*
	     * Columns
	     * See if we should load columns automatically or use defined ones
	     */
					var anThs = [];
					var aoColumnsInit;
					var nThead = this.getElementsByTagName('thead');
					if (nThead.length !== 0) {
						_fnDetectHeader(oSettings.aoHeader, nThead[0]);
						anThs = _fnGetUniqueThs(oSettings);
					}

					/* If not given a column array, generate one with nulls */
					if (oInit.aoColumns === null) {
						aoColumnsInit = [];
						for (i = 0, iLen = anThs.length; i < iLen; i++) {
							aoColumnsInit.push(null);
						}
					} else {
						aoColumnsInit = oInit.aoColumns;
					}

					/* Add the columns */
					for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
						_fnAddColumn(oSettings, anThs ? anThs[i] : null);
					}

					/* Apply the column definitions */
					_fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
						_fnColumnOptions(oSettings, iCol, oDef);
					});

					/* HTML5 attribute detection - build an mData object automatically if the
	     * attributes are found
	     */
					if (rowOne.length) {
						var a = function a(cell, name) {
							return cell.getAttribute('data-' + name) !== null ? name : null;
						};

						$.each(_fnGetRowElements(oSettings, rowOne[0]).cells, function (i, cell) {
							var col = oSettings.aoColumns[i];

							if (col.mData === i) {
								var sort = a(cell, 'sort') || a(cell, 'order');
								var filter = a(cell, 'filter') || a(cell, 'search');

								if (sort !== null || filter !== null) {
									col.mData = {
										_: i + '.display',
										sort: sort !== null ? i + '.@data-' + sort : undefined,
										type: sort !== null ? i + '.@data-' + sort : undefined,
										filter: filter !== null ? i + '.@data-' + filter : undefined
									};

									_fnColumnOptions(oSettings, i);
								}
							}
						});
					}

					var features = oSettings.oFeatures;

					/* Must be done after everything which can be overridden by the state saving! */
					if (oInit.bStateSave) {
						features.bStateSave = true;
						_fnLoadState(oSettings, oInit);
						_fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');
					}

					/*
	     * Sorting
	     * @todo For modularisation (1.11) this needs to do into a sort start up handler
	     */

					// If aaSorting is not defined, then we use the first indicator in asSorting
					// in case that has been altered, so the default sort reflects that option
					if (oInit.aaSorting === undefined) {
						var sorting = oSettings.aaSorting;
						for (i = 0, iLen = sorting.length; i < iLen; i++) {
							sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
						}
					}

					/* Do a first pass on the sorting classes (allows any size changes to be taken into
	     * account, and also will apply sorting disabled classes if disabled
	     */
					_fnSortingClasses(oSettings);

					if (features.bSort) {
						_fnCallbackReg(oSettings, 'aoDrawCallback', function () {
							if (oSettings.bSorted) {
								var aSort = _fnSortFlatten(oSettings);
								var sortedColumns = {};

								$.each(aSort, function (i, val) {
									sortedColumns[val.src] = val.dir;
								});

								_fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);
								_fnSortAria(oSettings);
							}
						});
					}

					_fnCallbackReg(oSettings, 'aoDrawCallback', function () {
						if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
							_fnSortingClasses(oSettings);
						}
					}, 'sc');

					/*
	     * Final init
	     * Cache the header, body and footer as required, creating them if needed
	     */

					/* Browser support detection */
					_fnBrowserDetect(oSettings);

					// Work around for Webkit bug 83867 - store the caption-side before removing from doc
					var captions = $this.children('caption').each(function () {
						this._captionSide = $this.css('caption-side');
					});

					var thead = $this.children('thead');
					if (thead.length === 0) {
						thead = $('<thead/>').appendTo(this);
					}
					oSettings.nTHead = thead[0];

					var tbody = $this.children('tbody');
					if (tbody.length === 0) {
						tbody = $('<tbody/>').appendTo(this);
					}
					oSettings.nTBody = tbody[0];

					var tfoot = $this.children('tfoot');
					if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
						// If we are a scrolling table, and no footer has been given, then we need to create
						// a tfoot element for the caption element to be appended to
						tfoot = $('<tfoot/>').appendTo(this);
					}

					if (tfoot.length === 0 || tfoot.children().length === 0) {
						$this.addClass(oClasses.sNoFooter);
					} else if (tfoot.length > 0) {
						oSettings.nTFoot = tfoot[0];
						_fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
					}

					/* Check if there is data passing into the constructor */
					if (oInit.aaData) {
						for (i = 0; i < oInit.aaData.length; i++) {
							_fnAddData(oSettings, oInit.aaData[i]);
						}
					} else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
						/* Grab the data from the page - only do this when deferred loading or no Ajax
	      * source since there is no point in reading the DOM data if we are then going
	      * to replace it with Ajax data
	      */
						_fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
					}

					/* Copy the data index array */
					oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

					/* Initialisation complete - table can be drawn */
					oSettings.bInitialised = true;

					/* Check if we need to initialise the table (it might not have been handed off to the
	     * language processor)
	     */
					if (bInitHandedOff === false) {
						_fnInitialise(oSettings);
					}
				});
				_that = null;
				return this;
			};

			/**
	   * Computed structure of the DataTables API, defined by the options passed to
	   * `DataTable.Api.register()` when building the API.
	   *
	   * The structure is built in order to speed creation and extension of the Api
	   * objects since the extensions are effectively pre-parsed.
	   *
	   * The array is an array of objects with the following structure, where this
	   * base array represents the Api prototype base:
	   *
	   *     [
	   *       {
	   *         name:      'data'                -- string   - Property name
	   *         val:       function () {},       -- function - Api method (or undefined if just an object
	   *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	   *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	   *       },
	   *       {
	   *         name:     'row'
	   *         val:       {},
	   *         methodExt: [ ... ],
	   *         propExt:   [
	   *           {
	   *             name:      'data'
	   *             val:       function () {},
	   *             methodExt: [ ... ],
	   *             propExt:   [ ... ]
	   *           },
	   *           ...
	   *         ]
	   *       }
	   *     ]
	   *
	   * @type {Array}
	   * @ignore
	   */
			var __apiStruct = [];

			/**
	   * `Array.prototype` reference.
	   *
	   * @type object
	   * @ignore
	   */
			var __arrayProto = Array.prototype;

			/**
	   * Abstraction for `context` parameter of the `Api` constructor to allow it to
	   * take several different forms for ease of use.
	   *
	   * Each of the input parameter types will be converted to a DataTables settings
	   * object where possible.
	   *
	   * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	   *   of:
	   *
	   *   * `string` - jQuery selector. Any DataTables' matching the given selector
	   *     with be found and used.
	   *   * `node` - `TABLE` node which has already been formed into a DataTable.
	   *   * `jQuery` - A jQuery object of `TABLE` nodes.
	   *   * `object` - DataTables settings object
	   *   * `DataTables.Api` - API instance
	   * @return {array|null} Matching DataTables settings objects. `null` or
	   *   `undefined` is returned if no matching DataTable is found.
	   * @ignore
	   */
			var _toSettings = function _toSettings(mixed) {
				var idx, jq;
				var settings = DataTable.settings;
				var tables = $.map(settings, function (el, i) {
					return el.nTable;
				});

				if (!mixed) {
					return [];
				} else if (mixed.nTable && mixed.oApi) {
					// DataTables settings object
					return [mixed];
				} else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
					// Table node
					idx = $.inArray(mixed, tables);
					return idx !== -1 ? [settings[idx]] : null;
				} else if (mixed && typeof mixed.settings === 'function') {
					return mixed.settings().toArray();
				} else if (typeof mixed === 'string') {
					// jQuery selector
					jq = $(mixed);
				} else if (mixed instanceof $) {
					// jQuery object (also DataTables instance)
					jq = mixed;
				}

				if (jq) {
					return jq.map(function (i) {
						idx = $.inArray(this, tables);
						return idx !== -1 ? settings[idx] : null;
					}).toArray();
				}
			};

			/**
	   * DataTables API class - used to control and interface with  one or more
	   * DataTables enhanced tables.
	   *
	   * The API class is heavily based on jQuery, presenting a chainable interface
	   * that you can use to interact with tables. Each instance of the API class has
	   * a "context" - i.e. the tables that it will operate on. This could be a single
	   * table, all tables on a page or a sub-set thereof.
	   *
	   * Additionally the API is designed to allow you to easily work with the data in
	   * the tables, retrieving and manipulating it as required. This is done by
	   * presenting the API class as an array like interface. The contents of the
	   * array depend upon the actions requested by each method (for example
	   * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	   * return an array of objects or arrays depending upon your table's
	   * configuration). The API object has a number of array like methods (`push`,
	   * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	   * `unique` etc) to assist your working with the data held in a table.
	   *
	   * Most methods (those which return an Api instance) are chainable, which means
	   * the return from a method call also has all of the methods available that the
	   * top level object had. For example, these two calls are equivalent:
	   *
	   *     // Not chained
	   *     api.row.add( {...} );
	   *     api.draw();
	   *
	   *     // Chained
	   *     api.row.add( {...} ).draw();
	   *
	   * @class DataTable.Api
	   * @param {array|object|string|jQuery} context DataTable identifier. This is
	   *   used to define which DataTables enhanced tables this API will operate on.
	   *   Can be one of:
	   *
	   *   * `string` - jQuery selector. Any DataTables' matching the given selector
	   *     with be found and used.
	   *   * `node` - `TABLE` node which has already been formed into a DataTable.
	   *   * `jQuery` - A jQuery object of `TABLE` nodes.
	   *   * `object` - DataTables settings object
	   * @param {array} [data] Data to initialise the Api instance with.
	   *
	   * @example
	   *   // Direct initialisation during DataTables construction
	   *   var api = $('#example').DataTable();
	   *
	   * @example
	   *   // Initialisation using a DataTables jQuery object
	   *   var api = $('#example').dataTable().api();
	   *
	   * @example
	   *   // Initialisation as a constructor
	   *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	   */
			_Api = function (context, data) {
				if (!(this instanceof _Api)) {
					return new _Api(context, data);
				}

				var settings = [];
				var ctxSettings = function ctxSettings(o) {
					var a = _toSettings(o);
					if (a) {
						settings.push.apply(settings, a);
					}
				};

				if ($.isArray(context)) {
					for (var i = 0, ien = context.length; i < ien; i++) {
						ctxSettings(context[i]);
					}
				} else {
					ctxSettings(context);
				}

				// Remove duplicates
				this.context = _unique(settings);

				// Initial data
				if (data) {
					this.push.apply(this, data.toArray ? data.toArray() : data);
				}

				// selector
				this.selector = {
					rows: null,
					cols: null,
					opts: null
				};

				_Api.extend(this, this, __apiStruct);
			};

			DataTable.Api = _Api;

			_Api.prototype = /** @lends DataTables.Api */{
				any: function any() {
					return this.flatten().length !== 0;
				},

				concat: __arrayProto.concat,

				context: [], // array of table settings objects

				each: function each(fn) {
					for (var i = 0, ien = this.length; i < ien; i++) {
						fn.call(this, this[i], i, this);
					}

					return this;
				},

				eq: function eq(idx) {
					var ctx = this.context;

					return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;
				},

				filter: function filter(fn) {
					var a = [];

					if (__arrayProto.filter) {
						a = __arrayProto.filter.call(this, fn, this);
					} else {
						// Compatibility for browsers without EMCA-252-5 (JS 1.6)
						for (var i = 0, ien = this.length; i < ien; i++) {
							if (fn.call(this, this[i], i, this)) {
								a.push(this[i]);
							}
						}
					}

					return new _Api(this.context, a);
				},

				flatten: function flatten() {
					var a = [];
					return new _Api(this.context, a.concat.apply(a, this.toArray()));
				},

				join: __arrayProto.join,

				indexOf: __arrayProto.indexOf || function (obj, start) {
					for (var i = start || 0, ien = this.length; i < ien; i++) {
						if (this[i] === obj) {
							return i;
						}
					}
					return -1;
				},

				iterator: function iterator(flatten, type, fn, alwaysNew) {
					var a = [],
					    ret,
					    i,
					    ien,
					    j,
					    jen,
					    context = this.context,
					    rows,
					    items,
					    item,
					    selector = this.selector;

					// Argument shifting
					if (typeof flatten === 'string') {
						alwaysNew = fn;
						fn = type;
						type = flatten;
						flatten = false;
					}

					for (i = 0, ien = context.length; i < ien; i++) {
						var apiInst = new _Api(context[i]);

						if (type === 'table') {
							ret = fn.call(apiInst, context[i], i);

							if (ret !== undefined) {
								a.push(ret);
							}
						} else if (type === 'columns' || type === 'rows') {
							// this has same length as context - one entry for each table
							ret = fn.call(apiInst, context[i], this[i], i);

							if (ret !== undefined) {
								a.push(ret);
							}
						} else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
							// columns and rows share the same structure.
							// 'this' is an array of column indexes for each context
							items = this[i];

							if (type === 'column-rows') {
								rows = _selector_row_indexes(context[i], selector.opts);
							}

							for (j = 0, jen = items.length; j < jen; j++) {
								item = items[j];

								if (type === 'cell') {
									ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
								} else {
									ret = fn.call(apiInst, context[i], item, i, j, rows);
								}

								if (ret !== undefined) {
									a.push(ret);
								}
							}
						}
					}

					if (a.length || alwaysNew) {
						var api = new _Api(context, flatten ? a.concat.apply([], a) : a);
						var apiSelector = api.selector;
						apiSelector.rows = selector.rows;
						apiSelector.cols = selector.cols;
						apiSelector.opts = selector.opts;
						return api;
					}
					return this;
				},

				lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
					// Bit cheeky...
					return this.indexOf.apply(this.toArray.reverse(), arguments);
				},

				length: 0,

				map: function map(fn) {
					var a = [];

					if (__arrayProto.map) {
						a = __arrayProto.map.call(this, fn, this);
					} else {
						// Compatibility for browsers without EMCA-252-5 (JS 1.6)
						for (var i = 0, ien = this.length; i < ien; i++) {
							a.push(fn.call(this, this[i], i));
						}
					}

					return new _Api(this.context, a);
				},

				pluck: function pluck(prop) {
					return this.map(function (el) {
						return el[prop];
					});
				},

				pop: __arrayProto.pop,

				push: __arrayProto.push,

				// Does not return an API instance
				reduce: __arrayProto.reduce || function (fn, init) {
					return _fnReduce(this, fn, init, 0, this.length, 1);
				},

				reduceRight: __arrayProto.reduceRight || function (fn, init) {
					return _fnReduce(this, fn, init, this.length - 1, -1, -1);
				},

				reverse: __arrayProto.reverse,

				// Object with rows, columns and opts
				selector: null,

				shift: __arrayProto.shift,

				sort: __arrayProto.sort, // ? name - order?

				splice: __arrayProto.splice,

				toArray: function toArray() {
					return __arrayProto.slice.call(this);
				},

				to$: function to$() {
					return $(this);
				},

				toJQuery: function toJQuery() {
					return $(this);
				},

				unique: function unique() {
					return new _Api(this.context, _unique(this));
				},

				unshift: __arrayProto.unshift
			};

			_Api.extend = function (scope, obj, ext) {
				// Only extend API instances and static properties of the API
				if (!ext.length || !obj || !(obj instanceof _Api) && !obj.__dt_wrapper) {
					return;
				}

				var i,
				    ien,
				    j,
				    jen,
				    struct,
				    inner,
				    methodScoping = function methodScoping(scope, fn, struc) {
					return function () {
						var ret = fn.apply(scope, arguments);

						// Method extension
						_Api.extend(ret, ret, struc.methodExt);
						return ret;
					};
				};

				for (i = 0, ien = ext.length; i < ien; i++) {
					struct = ext[i];

					// Value
					obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;

					obj[struct.name].__dt_wrapper = true;

					// Property extension
					_Api.extend(scope, obj[struct.name], struct.propExt);
				}
			};

			// @todo - Is there need for an augment function?
			// _Api.augment = function ( inst, name )
			// {
			// 	// Find src object in the structure from the name
			// 	var parts = name.split('.');

			// 	_Api.extend( inst, obj );
			// };

			//     [
			//       {
			//         name:      'data'                -- string   - Property name
			//         val:       function () {},       -- function - Api method (or undefined if just an object
			//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
			//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
			//       },
			//       {
			//         name:     'row'
			//         val:       {},
			//         methodExt: [ ... ],
			//         propExt:   [
			//           {
			//             name:      'data'
			//             val:       function () {},
			//             methodExt: [ ... ],
			//             propExt:   [ ... ]
			//           },
			//           ...
			//         ]
			//       }
			//     ]

			_Api.register = _api_register = function (name, val) {
				if ($.isArray(name)) {
					for (var j = 0, jen = name.length; j < jen; j++) {
						_Api.register(name[j], val);
					}
					return;
				}

				var i,
				    ien,
				    heir = name.split('.'),
				    struct = __apiStruct,
				    key,
				    method;

				var find = function find(src, name) {
					for (var i = 0, ien = src.length; i < ien; i++) {
						if (src[i].name === name) {
							return src[i];
						}
					}
					return null;
				};

				for (i = 0, ien = heir.length; i < ien; i++) {
					method = heir[i].indexOf('()') !== -1;
					key = method ? heir[i].replace('()', '') : heir[i];

					var src = find(struct, key);
					if (!src) {
						src = {
							name: key,
							val: {},
							methodExt: [],
							propExt: []
						};
						struct.push(src);
					}

					if (i === ien - 1) {
						src.val = val;
					} else {
						struct = method ? src.methodExt : src.propExt;
					}
				}
			};

			_Api.registerPlural = _api_registerPlural = function (pluralName, singularName, val) {
				_Api.register(pluralName, val);

				_Api.register(singularName, function () {
					var ret = val.apply(this, arguments);

					if (ret === this) {
						// Returned item is the API instance that was passed in, return it
						return this;
					} else if (ret instanceof _Api) {
						// New API instance returned, want the value from the first item
						// in the returned array for the singular result.
						return ret.length ? $.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : // Array results are 'enhanced'
						ret[0] : undefined;
					}

					// Non-API return - just fire it back
					return ret;
				});
			};

			/**
	   * Selector for HTML tables. Apply the given selector to the give array of
	   * DataTables settings objects.
	   *
	   * @param {string|integer} [selector] jQuery selector string or integer
	   * @param  {array} Array of DataTables settings objects to be filtered
	   * @return {array}
	   * @ignore
	   */
			var __table_selector = function __table_selector(selector, a) {
				// Integer is used to pick out a table by index
				if (typeof selector === 'number') {
					return [a[selector]];
				}

				// Perform a jQuery selector on the table nodes
				var nodes = $.map(a, function (el, i) {
					return el.nTable;
				});

				return $(nodes).filter(selector).map(function (i) {
					// Need to translate back from the table node to the settings
					var idx = $.inArray(this, nodes);
					return a[idx];
				}).toArray();
			};

			/**
	   * Context selector for the API's context (i.e. the tables the API instance
	   * refers to.
	   *
	   * @name    DataTable.Api#tables
	   * @param {string|integer} [selector] Selector to pick which tables the iterator
	   *   should operate on. If not given, all tables in the current context are
	   *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	   *   select multiple tables or as an integer to select a single table.
	   * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	   */
			_api_register('tables()', function (selector) {
				// A new instance is created if there was a selector specified
				return selector ? new _Api(__table_selector(selector, this.context)) : this;
			});

			_api_register('table()', function (selector) {
				var tables = this.tables(selector);
				var ctx = tables.context;

				// Truncate to the first matched table
				return ctx.length ? new _Api(ctx[0]) : tables;
			});

			_api_registerPlural('tables().nodes()', 'table().node()', function () {
				return this.iterator('table', function (ctx) {
					return ctx.nTable;
				}, 1);
			});

			_api_registerPlural('tables().body()', 'table().body()', function () {
				return this.iterator('table', function (ctx) {
					return ctx.nTBody;
				}, 1);
			});

			_api_registerPlural('tables().header()', 'table().header()', function () {
				return this.iterator('table', function (ctx) {
					return ctx.nTHead;
				}, 1);
			});

			_api_registerPlural('tables().footer()', 'table().footer()', function () {
				return this.iterator('table', function (ctx) {
					return ctx.nTFoot;
				}, 1);
			});

			_api_registerPlural('tables().containers()', 'table().container()', function () {
				return this.iterator('table', function (ctx) {
					return ctx.nTableWrapper;
				}, 1);
			});

			/**
	   * Redraw the tables in the current context.
	   *
	   * @param {boolean} [reset=true] Reset (default) or hold the current paging
	   *   position. A full re-sort and re-filter is performed when this method is
	   *   called, which is why the pagination reset is the default action.
	   * @returns {DataTables.Api} this
	   */
			_api_register('draw()', function (resetPaging) {
				return this.iterator('table', function (settings) {
					_fnReDraw(settings, resetPaging === false);
				});
			});

			/**
	   * Get the current page index.
	   *
	   * @return {integer} Current page index (zero based)
	   */ /**
	      * Set the current page.
	      *
	      * Note that if you attempt to show a page which does not exist, DataTables will
	      * not throw an error, but rather reset the paging.
	      *
	      * @param {integer|string} action The paging action to take. This can be one of:
	      *  * `integer` - The page index to jump to
	      *  * `string` - An action to take:
	      *    * `first` - Jump to first page.
	      *    * `next` - Jump to the next page
	      *    * `previous` - Jump to previous page
	      *    * `last` - Jump to the last page.
	      * @returns {DataTables.Api} this
	      */
			_api_register('page()', function (action) {
				if (action === undefined) {
					return this.page.info().page; // not an expensive call
				}

				// else, have an action to take on all tables
				return this.iterator('table', function (settings) {
					_fnPageChange(settings, action);
				});
			});

			/**
	   * Paging information for the first table in the current context.
	   *
	   * If you require paging information for another table, use the `table()` method
	   * with a suitable selector.
	   *
	   * @return {object} Object with the following properties set:
	   *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	   *  * `pages` - Total number of pages
	   *  * `start` - Display index for the first record shown on the current page
	   *  * `end` - Display index for the last record shown on the current page
	   *  * `length` - Display length (number of records). Note that generally `start
	   *    + length = end`, but this is not always true, for example if there are
	   *    only 2 records to show on the final page, with a length of 10.
	   *  * `recordsTotal` - Full data set length
	   *  * `recordsDisplay` - Data set length once the current filtering criterion
	   *    are applied.
	   */
			_api_register('page.info()', function (action) {
				if (this.context.length === 0) {
					return undefined;
				}

				var settings = this.context[0],
				    start = settings._iDisplayStart,
				    len = settings._iDisplayLength,
				    visRecords = settings.fnRecordsDisplay(),
				    all = len === -1;

				return {
					"page": all ? 0 : Math.floor(start / len),
					"pages": all ? 1 : Math.ceil(visRecords / len),
					"start": start,
					"end": settings.fnDisplayEnd(),
					"length": len,
					"recordsTotal": settings.fnRecordsTotal(),
					"recordsDisplay": visRecords
				};
			});

			/**
	   * Get the current page length.
	   *
	   * @return {integer} Current page length. Note `-1` indicates that all records
	   *   are to be shown.
	   */ /**
	      * Set the current page length.
	      *
	      * @param {integer} Page length to set. Use `-1` to show all records.
	      * @returns {DataTables.Api} this
	      */
			_api_register('page.len()', function (len) {
				// Note that we can't call this function 'length()' because `length`
				// is a Javascript property of functions which defines how many arguments
				// the function expects.
				if (len === undefined) {
					return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;
				}

				// else, set the page length
				return this.iterator('table', function (settings) {
					_fnLengthChange(settings, len);
				});
			});

			var __reload = function __reload(settings, holdPosition, callback) {
				// Use the draw event to trigger a callback
				if (callback) {
					var api = new _Api(settings);

					api.one('draw', function () {
						callback(api.ajax.json());
					});
				}

				if (_fnDataSource(settings) == 'ssp') {
					_fnReDraw(settings, holdPosition);
				} else {
					// Trigger xhr
					_fnProcessingDisplay(settings, true);

					_fnBuildAjax(settings, [], function (json) {
						_fnClearTable(settings);

						var data = _fnAjaxDataSrc(settings, json);
						for (var i = 0, ien = data.length; i < ien; i++) {
							_fnAddData(settings, data[i]);
						}

						_fnReDraw(settings, holdPosition);
						_fnProcessingDisplay(settings, false);
					});
				}
			};

			/**
	   * Get the JSON response from the last Ajax request that DataTables made to the
	   * server. Note that this returns the JSON from the first table in the current
	   * context.
	   *
	   * @return {object} JSON received from the server.
	   */
			_api_register('ajax.json()', function () {
				var ctx = this.context;

				if (ctx.length > 0) {
					return ctx[0].json;
				}

				// else return undefined;
			});

			/**
	   * Get the data submitted in the last Ajax request
	   */
			_api_register('ajax.params()', function () {
				var ctx = this.context;

				if (ctx.length > 0) {
					return ctx[0].oAjaxData;
				}

				// else return undefined;
			});

			/**
	   * Reload tables from the Ajax data source. Note that this function will
	   * automatically re-draw the table when the remote data has been loaded.
	   *
	   * @param {boolean} [reset=true] Reset (default) or hold the current paging
	   *   position. A full re-sort and re-filter is performed when this method is
	   *   called, which is why the pagination reset is the default action.
	   * @returns {DataTables.Api} this
	   */
			_api_register('ajax.reload()', function (callback, resetPaging) {
				return this.iterator('table', function (settings) {
					__reload(settings, resetPaging === false, callback);
				});
			});

			/**
	   * Get the current Ajax URL. Note that this returns the URL from the first
	   * table in the current context.
	   *
	   * @return {string} Current Ajax source URL
	   */ /**
	      * Set the Ajax URL. Note that this will set the URL for all tables in the
	      * current context.
	      *
	      * @param {string} url URL to set.
	      * @returns {DataTables.Api} this
	      */
			_api_register('ajax.url()', function (url) {
				var ctx = this.context;

				if (url === undefined) {
					// get
					if (ctx.length === 0) {
						return undefined;
					}
					ctx = ctx[0];

					return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
				}

				// set
				return this.iterator('table', function (settings) {
					if ($.isPlainObject(settings.ajax)) {
						settings.ajax.url = url;
					} else {
						settings.ajax = url;
					}
					// No need to consider sAjaxSource here since DataTables gives priority
					// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
					// value of `sAjaxSource` redundant.
				});
			});

			/**
	   * Load data from the newly set Ajax URL. Note that this method is only
	   * available when `ajax.url()` is used to set a URL. Additionally, this method
	   * has the same effect as calling `ajax.reload()` but is provided for
	   * convenience when setting a new URL. Like `ajax.reload()` it will
	   * automatically redraw the table once the remote data has been loaded.
	   *
	   * @returns {DataTables.Api} this
	   */
			_api_register('ajax.url().load()', function (callback, resetPaging) {
				// Same as a reload, but makes sense to present it for easy access after a
				// url change
				return this.iterator('table', function (ctx) {
					__reload(ctx, resetPaging === false, callback);
				});
			});

			var _selector_run = function _selector_run(type, selector, selectFn, settings, opts) {
				var out = [],
				    res,
				    a,
				    i,
				    ien,
				    j,
				    jen,
				    selectorType = typeof selector;

				// Can't just check for isArray here, as an API or jQuery instance might be
				// given with their array like look
				if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
					selector = [selector];
				}

				for (i = 0, ien = selector.length; i < ien; i++) {
					a = selector[i] && selector[i].split ? selector[i].split(',') : [selector[i]];

					for (j = 0, jen = a.length; j < jen; j++) {
						res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);

						if (res && res.length) {
							out.push.apply(out, res);
						}
					}
				}

				// selector extensions
				var ext = _ext.selector[type];
				if (ext.length) {
					for (i = 0, ien = ext.length; i < ien; i++) {
						out = ext[i](settings, opts, out);
					}
				}

				return out;
			};

			var _selector_opts = function _selector_opts(opts) {
				if (!opts) {
					opts = {};
				}

				// Backwards compatibility for 1.9- which used the terminology filter rather
				// than search
				if (opts.filter && opts.search === undefined) {
					opts.search = opts.filter;
				}

				return $.extend({
					search: 'none',
					order: 'current',
					page: 'all'
				}, opts);
			};

			var _selector_first = function _selector_first(inst) {
				// Reduce the API instance to the first item found
				for (var i = 0, ien = inst.length; i < ien; i++) {
					if (inst[i].length > 0) {
						// Assign the first element to the first item in the instance
						// and truncate the instance and context
						inst[0] = inst[i];
						inst[0].length = 1;
						inst.length = 1;
						inst.context = [inst.context[i]];

						return inst;
					}
				}

				// Not found - return an empty instance
				inst.length = 0;
				return inst;
			};

			var _selector_row_indexes = function _selector_row_indexes(settings, opts) {
				var i,
				    ien,
				    tmp,
				    a = [],
				    displayFiltered = settings.aiDisplay,
				    displayMaster = settings.aiDisplayMaster;

				var search = opts.search,
				    // none, applied, removed
				order = opts.order,
				    // applied, current, index (original - compatibility with 1.9)
				page = opts.page; // all, current

				if (_fnDataSource(settings) == 'ssp') {
					// In server-side processing mode, most options are irrelevant since
					// rows not shown don't exist and the index order is the applied order
					// Removed is a special case - for consistency just return an empty
					// array
					return search === 'removed' ? [] : _range(0, displayMaster.length);
				} else if (page == 'current') {
					// Current page implies that order=current and fitler=applied, since it is
					// fairly senseless otherwise, regardless of what order and search actually
					// are
					for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
						a.push(displayFiltered[i]);
					}
				} else if (order == 'current' || order == 'applied') {
					a = search == 'none' ? displayMaster.slice() : // no search
					search == 'applied' ? displayFiltered.slice() : // applied search
					$.map(displayMaster, function (el, i) {
						// removed search
						return $.inArray(el, displayFiltered) === -1 ? el : null;
					});
				} else if (order == 'index' || order == 'original') {
					for (i = 0, ien = settings.aoData.length; i < ien; i++) {
						if (search == 'none') {
							a.push(i);
						} else {
							// applied | removed
							tmp = $.inArray(i, displayFiltered);

							if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {
								a.push(i);
							}
						}
					}
				}

				return a;
			};

			/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	   * Rows
	   *
	   * {}          - no selector - use all available rows
	   * {integer}   - row aoData index
	   * {node}      - TR node
	   * {string}    - jQuery selector to apply to the TR elements
	   * {array}     - jQuery array of nodes, or simply an array of TR nodes
	   *
	   */

			var __row_selector = function __row_selector(settings, selector, opts) {
				var run = function run(sel) {
					var selInt = _intVal(sel);
					var i, ien;

					// Short cut - selector is a number and no options provided (default is
					// all records, so no need to check if the index is in there, since it
					// must be - dev error if the index doesn't exist).
					if (selInt !== null && !opts) {
						return [selInt];
					}

					var rows = _selector_row_indexes(settings, opts);

					if (selInt !== null && $.inArray(selInt, rows) !== -1) {
						// Selector - integer
						return [selInt];
					} else if (!sel) {
						// Selector - none
						return rows;
					}

					// Selector - function
					if (typeof sel === 'function') {
						return $.map(rows, function (idx) {
							var row = settings.aoData[idx];
							return sel(idx, row._aData, row.nTr) ? idx : null;
						});
					}

					// Get nodes in the order from the `rows` array with null values removed
					var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr'));

					// Selector - node
					if (sel.nodeName) {
						if ($.inArray(sel, nodes) !== -1) {
							return [sel._DT_RowIndex]; // sel is a TR node that is in the table
							// and DataTables adds a prop for fast lookup
						}
					}

					// Selector - jQuery selector string, array of nodes or jQuery object/
					// As jQuery's .filter() allows jQuery objects to be passed in filter,
					// it also allows arrays, so this will cope with all three options
					return $(nodes).filter(sel).map(function () {
						return this._DT_RowIndex;
					}).toArray();
				};

				return _selector_run('row', selector, run, settings, opts);
			};

			_api_register('rows()', function (selector, opts) {
				// argument shifting
				if (selector === undefined) {
					selector = '';
				} else if ($.isPlainObject(selector)) {
					opts = selector;
					selector = '';
				}

				opts = _selector_opts(opts);

				var inst = this.iterator('table', function (settings) {
					return __row_selector(settings, selector, opts);
				}, 1);

				// Want argument shifting here and in __row_selector?
				inst.selector.rows = selector;
				inst.selector.opts = opts;

				return inst;
			});

			_api_register('rows().nodes()', function () {
				return this.iterator('row', function (settings, row) {
					return settings.aoData[row].nTr || undefined;
				}, 1);
			});

			_api_register('rows().data()', function () {
				return this.iterator(true, 'rows', function (settings, rows) {
					return _pluck_order(settings.aoData, rows, '_aData');
				}, 1);
			});

			_api_registerPlural('rows().cache()', 'row().cache()', function (type) {
				return this.iterator('row', function (settings, row) {
					var r = settings.aoData[row];
					return type === 'search' ? r._aFilterData : r._aSortData;
				}, 1);
			});

			_api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
				return this.iterator('row', function (settings, row) {
					_fnInvalidate(settings, row, src);
				});
			});

			_api_registerPlural('rows().indexes()', 'row().index()', function () {
				return this.iterator('row', function (settings, row) {
					return row;
				}, 1);
			});

			_api_registerPlural('rows().remove()', 'row().remove()', function () {
				var that = this;

				return this.iterator('row', function (settings, row, thatIdx) {
					var data = settings.aoData;

					data.splice(row, 1);

					// Update the _DT_RowIndex parameter on all rows in the table
					for (var i = 0, ien = data.length; i < ien; i++) {
						if (data[i].nTr !== null) {
							data[i].nTr._DT_RowIndex = i;
						}
					}

					// Remove the target row from the search array
					var displayIndex = $.inArray(row, settings.aiDisplay);

					// Delete from the display arrays
					_fnDeleteIndex(settings.aiDisplayMaster, row);
					_fnDeleteIndex(settings.aiDisplay, row);
					_fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes

					// Check for an 'overflow' they case for displaying the table
					_fnLengthOverflow(settings);
				});
			});

			_api_register('rows.add()', function (rows) {
				var newRows = this.iterator('table', function (settings) {
					var row, i, ien;
					var out = [];

					for (i = 0, ien = rows.length; i < ien; i++) {
						row = rows[i];

						if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
							out.push(_fnAddTr(settings, row)[0]);
						} else {
							out.push(_fnAddData(settings, row));
						}
					}

					return out;
				}, 1);

				// Return an Api.rows() extended instance, so rows().nodes() etc can be used
				var modRows = this.rows(-1);
				modRows.pop();
				modRows.push.apply(modRows, newRows.toArray());

				return modRows;
			});

			/**
	   *
	   */
			_api_register('row()', function (selector, opts) {
				return _selector_first(this.rows(selector, opts));
			});

			_api_register('row().data()', function (data) {
				var ctx = this.context;

				if (data === undefined) {
					// Get
					return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;
				}

				// Set
				ctx[0].aoData[this[0]]._aData = data;

				// Automatically invalidate
				_fnInvalidate(ctx[0], this[0], 'data');

				return this;
			});

			_api_register('row().node()', function () {
				var ctx = this.context;

				return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
			});

			_api_register('row.add()', function (row) {
				// Allow a jQuery object to be passed in - only a single row is added from
				// it though - the first element in the set
				if (row instanceof $ && row.length) {
					row = row[0];
				}

				var rows = this.iterator('table', function (settings) {
					if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
						return _fnAddTr(settings, row)[0];
					}
					return _fnAddData(settings, row);
				});

				// Return an Api.rows() extended instance, with the newly added row selected
				return this.row(rows[0]);
			});

			var __details_add = function __details_add(ctx, row, data, klass) {
				// Convert to array of TR elements
				var rows = [];
				var addRow = function addRow(r, k) {
					// Recursion to allow for arrays of jQuery objects
					if ($.isArray(r) || r instanceof $) {
						for (var i = 0, ien = r.length; i < ien; i++) {
							addRow(r[i], k);
						}
						return;
					}

					// If we get a TR element, then just add it directly - up to the dev
					// to add the correct number of columns etc
					if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
						rows.push(r);
					} else {
						// Otherwise create a row with a wrapper
						var created = $('<tr><td/></tr>').addClass(k);
						$('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);

						rows.push(created[0]);
					}
				};

				addRow(data, klass);

				if (row._details) {
					row._details.remove();
				}

				row._details = $(rows);

				// If the children were already shown, that state should be retained
				if (row._detailsShow) {
					row._details.insertAfter(row.nTr);
				}
			};

			var __details_remove = function __details_remove(api, idx) {
				var ctx = api.context;

				if (ctx.length) {
					var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

					if (row._details) {
						row._details.remove();

						row._detailsShow = undefined;
						row._details = undefined;
					}
				}
			};

			var __details_display = function __details_display(api, show) {
				var ctx = api.context;

				if (ctx.length && api.length) {
					var row = ctx[0].aoData[api[0]];

					if (row._details) {
						row._detailsShow = show;

						if (show) {
							row._details.insertAfter(row.nTr);
						} else {
							row._details.detach();
						}

						__details_events(ctx[0]);
					}
				}
			};

			var __details_events = function __details_events(settings) {
				var api = new _Api(settings);
				var namespace = '.dt.DT_details';
				var drawEvent = 'draw' + namespace;
				var colvisEvent = 'column-visibility' + namespace;
				var destroyEvent = 'destroy' + namespace;
				var data = settings.aoData;

				api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);

				if (_pluck(data, '_details').length > 0) {
					// On each draw, insert the required elements into the document
					api.on(drawEvent, function (e, ctx) {
						if (settings !== ctx) {
							return;
						}

						api.rows({ page: 'current' }).eq(0).each(function (idx) {
							// Internal data grab
							var row = data[idx];

							if (row._detailsShow) {
								row._details.insertAfter(row.nTr);
							}
						});
					});

					// Column visibility change - update the colspan
					api.on(colvisEvent, function (e, ctx, idx, vis) {
						if (settings !== ctx) {
							return;
						}

						// Update the colspan for the details rows (note, only if it already has
						// a colspan)
						var row,
						    visible = _fnVisbleColumns(ctx);

						for (var i = 0, ien = data.length; i < ien; i++) {
							row = data[i];

							if (row._details) {
								row._details.children('td[colspan]').attr('colspan', visible);
							}
						}
					});

					// Table destroyed - nuke any child rows
					api.on(destroyEvent, function (e, ctx) {
						if (settings !== ctx) {
							return;
						}

						for (var i = 0, ien = data.length; i < ien; i++) {
							if (data[i]._details) {
								__details_remove(api, i);
							}
						}
					});
				}
			};

			// Strings for the method names to help minification
			var _emp = '';
			var _child_obj = _emp + 'row().child';
			var _child_mth = _child_obj + '()';

			// data can be:
			//  tr
			//  string
			//  jQuery or array of any of the above
			_api_register(_child_mth, function (data, klass) {
				var ctx = this.context;

				if (data === undefined) {
					// get
					return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;
				} else if (data === true) {
					// show
					this.child.show();
				} else if (data === false) {
					// remove
					__details_remove(this);
				} else if (ctx.length && this.length) {
					// set
					__details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
				}

				return this;
			});

			_api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without
			], function (show) {
				// it returns an object and this method is not executed)
				__details_display(this, true);
				return this;
			});

			_api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without
			], function () {
				// it returns an object and this method is not executed)
				__details_display(this, false);
				return this;
			});

			_api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without
			], function () {
				// it returns an object and this method is not executed)
				__details_remove(this);
				return this;
			});

			_api_register(_child_obj + '.isShown()', function () {
				var ctx = this.context;

				if (ctx.length && this.length) {
					// _detailsShown as false or undefined will fall through to return false
					return ctx[0].aoData[this[0]]._detailsShow || false;
				}
				return false;
			});

			/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	   * Columns
	   *
	   * {integer}           - column index (>=0 count from left, <0 count from right)
	   * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	   * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	   * "{string}:name"     - column name
	   * "{string}"          - jQuery selector on column header nodes
	   *
	   */

			// can be an array of these items, comma separated list, or an array of comma
			// separated lists

			var __re_column_selector = /^(.+):(name|visIdx|visible)$/;

			// r1 and r2 are redundant - but it means that the parameters match for the
			// iterator callback in columns().data()
			var __columnData = function __columnData(settings, column, r1, r2, rows) {
				var a = [];
				for (var row = 0, ien = rows.length; row < ien; row++) {
					a.push(_fnGetCellData(settings, rows[row], column));
				}
				return a;
			};

			var __column_selector = function __column_selector(settings, selector, opts) {
				var columns = settings.aoColumns,
				    names = _pluck(columns, 'sName'),
				    nodes = _pluck(columns, 'nTh');

				var run = function run(s) {
					var selInt = _intVal(s);

					// Selector - all
					if (s === '') {
						return _range(columns.length);
					}

					// Selector - index
					if (selInt !== null) {
						return [selInt >= 0 ? selInt : // Count from left
						columns.length + selInt // Count from right (+ because its a negative value)
						];
					}

					// Selector = function
					if (typeof s === 'function') {
						var rows = _selector_row_indexes(settings, opts);

						return $.map(columns, function (col, idx) {
							return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
						});
					}

					// jQuery or string selector
					var match = typeof s === 'string' ? s.match(__re_column_selector) : '';

					if (match) {
						switch (match[2]) {
							case 'visIdx':
							case 'visible':
								var idx = parseInt(match[1], 10);
								// Visible index given, convert to column index
								if (idx < 0) {
									// Counting from the right
									var visColumns = $.map(columns, function (col, i) {
										return col.bVisible ? i : null;
									});
									return [visColumns[visColumns.length + idx]];
								}
								// Counting from the left
								return [_fnVisibleToColumnIndex(settings, idx)];

							case 'name':
								// match by name. `names` is column index complete and in order
								return $.map(names, function (name, i) {
									return name === match[1] ? i : null;
								});
						}
					} else {
						// jQuery selector on the TH elements for the columns
						return $(nodes).filter(s).map(function () {
							return $.inArray(this, nodes); // `nodes` is column index complete and in order
						}).toArray();
					}
				};

				return _selector_run('column', selector, run, settings, opts);
			};

			var __setColumnVis = function __setColumnVis(settings, column, vis, recalc) {
				var cols = settings.aoColumns,
				    col = cols[column],
				    data = settings.aoData,
				    row,
				    cells,
				    i,
				    ien,
				    tr;

				// Get
				if (vis === undefined) {
					return col.bVisible;
				}

				// Set
				// No change
				if (col.bVisible === vis) {
					return;
				}

				if (vis) {
					// Insert column
					// Need to decide if we should use appendChild or insertBefore
					var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);

					for (i = 0, ien = data.length; i < ien; i++) {
						tr = data[i].nTr;
						cells = data[i].anCells;

						if (tr) {
							// insertBefore can act like appendChild if 2nd arg is null
							tr.insertBefore(cells[column], cells[insertBefore] || null);
						}
					}
				} else {
					// Remove column
					$(_pluck(settings.aoData, 'anCells', column)).detach();
				}

				// Common actions
				col.bVisible = vis;
				_fnDrawHead(settings, settings.aoHeader);
				_fnDrawHead(settings, settings.aoFooter);

				if (recalc === undefined || recalc) {
					// Automatically adjust column sizing
					_fnAdjustColumnSizing(settings);

					// Realign columns for scrolling
					if (settings.oScroll.sX || settings.oScroll.sY) {
						_fnScrollDraw(settings);
					}
				}

				_fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis]);

				_fnSaveState(settings);
			};

			_api_register('columns()', function (selector, opts) {
				// argument shifting
				if (selector === undefined) {
					selector = '';
				} else if ($.isPlainObject(selector)) {
					opts = selector;
					selector = '';
				}

				opts = _selector_opts(opts);

				var inst = this.iterator('table', function (settings) {
					return __column_selector(settings, selector, opts);
				}, 1);

				// Want argument shifting here and in _row_selector?
				inst.selector.cols = selector;
				inst.selector.opts = opts;

				return inst;
			});

			_api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
				return this.iterator('column', function (settings, column) {
					return settings.aoColumns[column].nTh;
				}, 1);
			});

			_api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
				return this.iterator('column', function (settings, column) {
					return settings.aoColumns[column].nTf;
				}, 1);
			});

			_api_registerPlural('columns().data()', 'column().data()', function () {
				return this.iterator('column-rows', __columnData, 1);
			});

			_api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
				return this.iterator('column', function (settings, column) {
					return settings.aoColumns[column].mData;
				}, 1);
			});

			_api_registerPlural('columns().cache()', 'column().cache()', function (type) {
				return this.iterator('column-rows', function (settings, column, i, j, rows) {
					return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);
				}, 1);
			});

			_api_registerPlural('columns().nodes()', 'column().nodes()', function () {
				return this.iterator('column-rows', function (settings, column, i, j, rows) {
					return _pluck_order(settings.aoData, rows, 'anCells', column);
				}, 1);
			});

			_api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
				return this.iterator('column', function (settings, column) {
					if (vis === undefined) {
						return settings.aoColumns[column].bVisible;
					} // else
					__setColumnVis(settings, column, vis, calc);
				});
			});

			_api_registerPlural('columns().indexes()', 'column().index()', function (type) {
				return this.iterator('column', function (settings, column) {
					return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;
				}, 1);
			});

			_api_register('columns.adjust()', function () {
				return this.iterator('table', function (settings) {
					_fnAdjustColumnSizing(settings);
				}, 1);
			});

			_api_register('column.index()', function (type, idx) {
				if (this.context.length !== 0) {
					var ctx = this.context[0];

					if (type === 'fromVisible' || type === 'toData') {
						return _fnVisibleToColumnIndex(ctx, idx);
					} else if (type === 'fromData' || type === 'toVisible') {
						return _fnColumnIndexToVisible(ctx, idx);
					}
				}
			});

			_api_register('column()', function (selector, opts) {
				return _selector_first(this.columns(selector, opts));
			});

			var __cell_selector = function __cell_selector(settings, selector, opts) {
				var data = settings.aoData;
				var rows = _selector_row_indexes(settings, opts);
				var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));
				var allCells = $([].concat.apply([], cells));
				var row;
				var columns = settings.aoColumns.length;
				var a, i, ien, j, o, host;

				var run = function run(s) {
					var fnSelector = typeof s === 'function';

					if (s === null || s === undefined || fnSelector) {
						// All cells and function selectors
						a = [];

						for (i = 0, ien = rows.length; i < ien; i++) {
							row = rows[i];

							for (j = 0; j < columns; j++) {
								o = {
									row: row,
									column: j
								};

								if (fnSelector) {
									// Selector - function
									host = settings.aoData[row];

									if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
										a.push(o);
									}
								} else {
									// Selector - all
									a.push(o);
								}
							}
						}

						return a;
					}

					// Selector - index
					if ($.isPlainObject(s)) {
						return [s];
					}

					// Selector - jQuery filtered cells
					return allCells.filter(s).map(function (i, el) {
						row = el.parentNode._DT_RowIndex;

						return {
							row: row,
							column: $.inArray(el, data[row].anCells)
						};
					}).toArray();
				};

				return _selector_run('cell', selector, run, settings, opts);
			};

			_api_register('cells()', function (rowSelector, columnSelector, opts) {
				// Argument shifting
				if ($.isPlainObject(rowSelector)) {
					// Indexes
					if (rowSelector.row === undefined) {
						// Selector options in first parameter
						opts = rowSelector;
						rowSelector = null;
					} else {
						// Cell index objects in first parameter
						opts = columnSelector;
						columnSelector = null;
					}
				}
				if ($.isPlainObject(columnSelector)) {
					opts = columnSelector;
					columnSelector = null;
				}

				// Cell selector
				if (columnSelector === null || columnSelector === undefined) {
					return this.iterator('table', function (settings) {
						return __cell_selector(settings, rowSelector, _selector_opts(opts));
					});
				}

				// Row + column selector
				var columns = this.columns(columnSelector, opts);
				var rows = this.rows(rowSelector, opts);
				var a, i, ien, j, jen;

				var cells = this.iterator('table', function (settings, idx) {
					a = [];

					for (i = 0, ien = rows[idx].length; i < ien; i++) {
						for (j = 0, jen = columns[idx].length; j < jen; j++) {
							a.push({
								row: rows[idx][i],
								column: columns[idx][j]
							});
						}
					}

					return a;
				}, 1);

				$.extend(cells.selector, {
					cols: columnSelector,
					rows: rowSelector,
					opts: opts
				});

				return cells;
			});

			_api_registerPlural('cells().nodes()', 'cell().node()', function () {
				return this.iterator('cell', function (settings, row, column) {
					var cells = settings.aoData[row].anCells;
					return cells ? cells[column] : undefined;
				}, 1);
			});

			_api_register('cells().data()', function () {
				return this.iterator('cell', function (settings, row, column) {
					return _fnGetCellData(settings, row, column);
				}, 1);
			});

			_api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
				type = type === 'search' ? '_aFilterData' : '_aSortData';

				return this.iterator('cell', function (settings, row, column) {
					return settings.aoData[row][type][column];
				}, 1);
			});

			_api_registerPlural('cells().render()', 'cell().render()', function (type) {
				return this.iterator('cell', function (settings, row, column) {
					return _fnGetCellData(settings, row, column, type);
				}, 1);
			});

			_api_registerPlural('cells().indexes()', 'cell().index()', function () {
				return this.iterator('cell', function (settings, row, column) {
					return {
						row: row,
						column: column,
						columnVisible: _fnColumnIndexToVisible(settings, column)
					};
				}, 1);
			});

			_api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
				return this.iterator('cell', function (settings, row, column) {
					_fnInvalidate(settings, row, src, column);
				});
			});

			_api_register('cell()', function (rowSelector, columnSelector, opts) {
				return _selector_first(this.cells(rowSelector, columnSelector, opts));
			});

			_api_register('cell().data()', function (data) {
				var ctx = this.context;
				var cell = this[0];

				if (data === undefined) {
					// Get
					return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;
				}

				// Set
				_fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
				_fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);

				return this;
			});

			/**
	   * Get current ordering (sorting) that has been applied to the table.
	   *
	   * @returns {array} 2D array containing the sorting information for the first
	   *   table in the current context. Each element in the parent array represents
	   *   a column being sorted upon (i.e. multi-sorting with two columns would have
	   *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	   *   the column index that the sorting condition applies to, the second is the
	   *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	   *   index of the sorting order from the `column.sorting` initialisation array.
	   */ /**
	      * Set the ordering for the table.
	      *
	      * @param {integer} order Column index to sort upon.
	      * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	      * @returns {DataTables.Api} this
	      */ /**
	         * Set the ordering for the table.
	         *
	         * @param {array} order 1D array of sorting information to be applied.
	         * @param {array} [...] Optional additional sorting conditions
	         * @returns {DataTables.Api} this
	         */ /**
	            * Set the ordering for the table.
	            *
	            * @param {array} order 2D array of sorting information to be applied.
	            * @returns {DataTables.Api} this
	            */
			_api_register('order()', function (order, dir) {
				var ctx = this.context;

				if (order === undefined) {
					// get
					return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
				}

				// set
				if (typeof order === 'number') {
					// Simple column / direction passed in
					order = [[order, dir]];
				} else if (!$.isArray(order[0])) {
					// Arguments passed in (list of 1D arrays)
					order = Array.prototype.slice.call(arguments);
				}
				// otherwise a 2D array was passed in

				return this.iterator('table', function (settings) {
					settings.aaSorting = order.slice();
				});
			});

			/**
	   * Attach a sort listener to an element for a given column
	   *
	   * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	   *   listener to. This can take the form of a single DOM node, a jQuery
	   *   collection of nodes or a jQuery selector which will identify the node(s).
	   * @param {integer} column the column that a click on this node will sort on
	   * @param {function} [callback] callback function when sort is run
	   * @returns {DataTables.Api} this
	   */
			_api_register('order.listener()', function (node, column, callback) {
				return this.iterator('table', function (settings) {
					_fnSortAttachListener(settings, node, column, callback);
				});
			});

			// Order by the selected column(s)
			_api_register(['columns().order()', 'column().order()'], function (dir) {
				var that = this;

				return this.iterator('table', function (settings, i) {
					var sort = [];

					$.each(that[i], function (j, col) {
						sort.push([col, dir]);
					});

					settings.aaSorting = sort;
				});
			});

			_api_register('search()', function (input, regex, smart, caseInsen) {
				var ctx = this.context;

				if (input === undefined) {
					// get
					return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
				}

				// set
				return this.iterator('table', function (settings) {
					if (!settings.oFeatures.bFilter) {
						return;
					}

					_fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
						"sSearch": input + "",
						"bRegex": regex === null ? false : regex,
						"bSmart": smart === null ? true : smart,
						"bCaseInsensitive": caseInsen === null ? true : caseInsen
					}), 1);
				});
			});

			_api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {
				return this.iterator('column', function (settings, column) {
					var preSearch = settings.aoPreSearchCols;

					if (input === undefined) {
						// get
						return preSearch[column].sSearch;
					}

					// set
					if (!settings.oFeatures.bFilter) {
						return;
					}

					$.extend(preSearch[column], {
						"sSearch": input + "",
						"bRegex": regex === null ? false : regex,
						"bSmart": smart === null ? true : smart,
						"bCaseInsensitive": caseInsen === null ? true : caseInsen
					});

					_fnFilterComplete(settings, settings.oPreviousSearch, 1);
				});
			});

			/*
	   * State API methods
	   */

			_api_register('state()', function () {
				return this.context.length ? this.context[0].oSavedState : null;
			});

			_api_register('state.clear()', function () {
				return this.iterator('table', function (settings) {
					// Save an empty object
					settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
				});
			});

			_api_register('state.loaded()', function () {
				return this.context.length ? this.context[0].oLoadedState : null;
			});

			_api_register('state.save()', function () {
				return this.iterator('table', function (settings) {
					_fnSaveState(settings);
				});
			});

			/**
	   * Provide a common method for plug-ins to check the version of DataTables being
	   * used, in order to ensure compatibility.
	   *
	   *  @param {string} version Version string to check for, in the format "X.Y.Z".
	   *    Note that the formats "X" and "X.Y" are also acceptable.
	   *  @returns {boolean} true if this version of DataTables is greater or equal to
	   *    the required version, or false if this version of DataTales is not
	   *    suitable
	   *  @static
	   *  @dtopt API-Static
	   *
	   *  @example
	   *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	   */
			DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
				var aThis = DataTable.version.split('.');
				var aThat = version.split('.');
				var iThis, iThat;

				for (var i = 0, iLen = aThat.length; i < iLen; i++) {
					iThis = parseInt(aThis[i], 10) || 0;
					iThat = parseInt(aThat[i], 10) || 0;

					// Parts are the same, keep comparing
					if (iThis === iThat) {
						continue;
					}

					// Parts are different, return immediately
					return iThis > iThat;
				}

				return true;
			};

			/**
	   * Check if a `<table>` node is a DataTable table already or not.
	   *
	   *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	   *      selector for the table to test. Note that if more than more than one
	   *      table is passed on, only the first will be checked
	   *  @returns {boolean} true the table given is a DataTable, or false otherwise
	   *  @static
	   *  @dtopt API-Static
	   *
	   *  @example
	   *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	   *      $('#example').dataTable();
	   *    }
	   */
			DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
				var t = $(table).get(0);
				var is = false;

				$.each(DataTable.settings, function (i, o) {
					var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
					var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

					if (o.nTable === t || head === t || foot === t) {
						is = true;
					}
				});

				return is;
			};

			/**
	   * Get all DataTable tables that have been initialised - optionally you can
	   * select to get only currently visible tables.
	   *
	   *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	   *    or visible tables only.
	   *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	   *    DataTables
	   *  @static
	   *  @dtopt API-Static
	   *
	   *  @example
	   *    $.each( $.fn.dataTable.tables(true), function () {
	   *      $(table).DataTable().columns.adjust();
	   *    } );
	   */
			DataTable.tables = DataTable.fnTables = function (visible) {
				return $.map(DataTable.settings, function (o) {
					if (!visible || visible && $(o.nTable).is(':visible')) {
						return o.nTable;
					}
				});
			};

			/**
	   * DataTables utility methods
	   * 
	   * This namespace provides helper methods that DataTables uses internally to
	   * create a DataTable, but which are not exclusively used only for DataTables.
	   * These methods can be used by extension authors to save the duplication of
	   * code.
	   *
	   *  @namespace
	   */
			DataTable.util = {
				/**
	    * Throttle the calls to a function. Arguments and context are maintained
	    * for the throttled function.
	    *
	    * @param {function} fn Function to be called
	    * @param {integer} freq Call frequency in mS
	    * @return {function} Wrapped function
	    */
				throttle: _fnThrottle,

				/**
	    * Escape a string such that it can be used in a regular expression
	    *
	    *  @param {string} sVal string to escape
	    *  @returns {string} escaped string
	    */
				escapeRegex: _fnEscapeRegex
			};

			/**
	   * Convert from camel case parameters to Hungarian notation. This is made public
	   * for the extensions to provide the same ability as DataTables core to accept
	   * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	   * parameters.
	   *
	   *  @param {object} src The model object which holds all parameters that can be
	   *    mapped.
	   *  @param {object} user The object to convert from camel case to Hungarian.
	   *  @param {boolean} force When set to `true`, properties which already have a
	   *    Hungarian value in the `user` object will be overwritten. Otherwise they
	   *    won't be.
	   */
			DataTable.camelToHungarian = _fnCamelToHungarian;

			/**
	   *
	   */
			_api_register('$()', function (selector, opts) {
				var rows = this.rows(opts).nodes(),
				    // Get all rows
				jqRows = $(rows);

				return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
			});

			// jQuery functions to operate on the tables
			$.each(['on', 'one', 'off'], function (i, key) {
				_api_register(key + '()', function () /* event, handler */{
					var args = Array.prototype.slice.call(arguments);

					// Add the `dt` namespace automatically if it isn't already present
					if (!args[0].match(/\.dt\b/)) {
						args[0] += '.dt';
					}

					var inst = $(this.tables().nodes());
					inst[key].apply(inst, args);
					return this;
				});
			});

			_api_register('clear()', function () {
				return this.iterator('table', function (settings) {
					_fnClearTable(settings);
				});
			});

			_api_register('settings()', function () {
				return new _Api(this.context, this.context);
			});

			_api_register('init()', function () {
				var ctx = this.context;
				return ctx.length ? ctx[0].oInit : null;
			});

			_api_register('data()', function () {
				return this.iterator('table', function (settings) {
					return _pluck(settings.aoData, '_aData');
				}).flatten();
			});

			_api_register('destroy()', function (remove) {
				remove = remove || false;

				return this.iterator('table', function (settings) {
					var orig = settings.nTableWrapper.parentNode;
					var classes = settings.oClasses;
					var table = settings.nTable;
					var tbody = settings.nTBody;
					var thead = settings.nTHead;
					var tfoot = settings.nTFoot;
					var jqTable = $(table);
					var jqTbody = $(tbody);
					var jqWrapper = $(settings.nTableWrapper);
					var rows = $.map(settings.aoData, function (r) {
						return r.nTr;
					});
					var i, ien;

					// Flag to note that the table is currently being destroyed - no action
					// should be taken
					settings.bDestroying = true;

					// Fire off the destroy callbacks for plug-ins etc
					_fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);

					// If not being removed from the document, make all columns visible
					if (!remove) {
						new _Api(settings).columns().visible(true);
					}

					// Blitz all `DT` namespaced events (these are internal events, the
					// lowercase, `dt` events are user subscribed and they are responsible
					// for removing them
					jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');
					$(window).unbind('.DT-' + settings.sInstance);

					// When scrolling we had to break the table up - restore it
					if (table != thead.parentNode) {
						jqTable.children('thead').detach();
						jqTable.append(thead);
					}

					if (tfoot && table != tfoot.parentNode) {
						jqTable.children('tfoot').detach();
						jqTable.append(tfoot);
					}

					// Remove the DataTables generated nodes, events and classes
					jqTable.detach();
					jqWrapper.detach();

					settings.aaSorting = [];
					settings.aaSortingFixed = [];
					_fnSortingClasses(settings);

					$(rows).removeClass(settings.asStripeClasses.join(' '));

					$('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone);

					if (settings.bJUI) {
						$('th span.' + classes.sSortIcon + ', td span.' + classes.sSortIcon, thead).detach();
						$('th, td', thead).each(function () {
							var wrapper = $('div.' + classes.sSortJUIWrapper, this);
							$(this).append(wrapper.contents());
							wrapper.detach();
						});
					}

					if (!remove && orig) {
						// insertBefore acts like appendChild if !arg[1]
						orig.insertBefore(table, settings.nTableReinsertBefore);
					}

					// Add the TR elements back into the table in their original order
					jqTbody.children().detach();
					jqTbody.append(rows);

					// Restore the width of the original table - was read from the style property,
					// so we can restore directly to that
					jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable);

					// If the were originally stripe classes - then we add them back here.
					// Note this is not fool proof (for example if not all rows had stripe
					// classes - but it's a good effort without getting carried away
					ien = settings.asDestroyStripes.length;

					if (ien) {
						jqTbody.children().each(function (i) {
							$(this).addClass(settings.asDestroyStripes[i % ien]);
						});
					}

					/* Remove the settings object from the settings array */
					var idx = $.inArray(settings, DataTable.settings);
					if (idx !== -1) {
						DataTable.settings.splice(idx, 1);
					}
				});
			});

			// Add the `every()` method for rows, columns and cells in a compact form
			$.each(['column', 'row', 'cell'], function (i, type) {
				_api_register(type + 's().every()', function (fn) {
					return this.iterator(type, function (settings, idx, idx2) {
						// idx2 is undefined for rows and columns.
						fn.call(new _Api(settings)[type](idx, idx2));
					});
				});
			});

			// i18n method for extensions to be able to use the language object from the
			// DataTable
			_api_register('i18n()', function (token, def, plural) {
				var ctx = this.context[0];
				var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

				if (resolved === undefined) {
					resolved = def;
				}

				if (plural !== undefined && $.isPlainObject(resolved)) {
					resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
				}

				return resolved.replace('%d', plural); // nb: plural might be undefined,
			});

			/**
	   * Version string for plug-ins to check compatibility. Allowed format is
	   * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	   * only for non-release builds. See http://semver.org/ for more information.
	   *  @member
	   *  @type string
	   *  @default Version number
	   */
			DataTable.version = "1.10.7";

			/**
	   * Private data store, containing all of the settings objects that are
	   * created for the tables on a given page.
	   *
	   * Note that the `DataTable.settings` object is aliased to
	   * `jQuery.fn.dataTableExt` through which it may be accessed and
	   * manipulated, or `jQuery.fn.dataTable.settings`.
	   *  @member
	   *  @type array
	   *  @default []
	   *  @private
	   */
			DataTable.settings = [];

			/**
	   * Object models container, for the various models that DataTables has
	   * available to it. These models define the objects that are used to hold
	   * the active state and configuration of the table.
	   *  @namespace
	   */
			DataTable.models = {};

			/**
	   * Template object for the way in which DataTables holds information about
	   * search information for the global filter and individual column filters.
	   *  @namespace
	   */
			DataTable.models.oSearch = {
				/**
	    * Flag to indicate if the filtering should be case insensitive or not
	    *  @type boolean
	    *  @default true
	    */
				"bCaseInsensitive": true,

				/**
	    * Applied search term
	    *  @type string
	    *  @default <i>Empty string</i>
	    */
				"sSearch": "",

				/**
	    * Flag to indicate if the search term should be interpreted as a
	    * regular expression (true) or not (false) and therefore and special
	    * regex characters escaped.
	    *  @type boolean
	    *  @default false
	    */
				"bRegex": false,

				/**
	    * Flag to indicate if DataTables is to use its smart filtering or not.
	    *  @type boolean
	    *  @default true
	    */
				"bSmart": true
			};

			/**
	   * Template object for the way in which DataTables holds information about
	   * each individual row. This is the object format used for the settings
	   * aoData array.
	   *  @namespace
	   */
			DataTable.models.oRow = {
				/**
	    * TR element for the row
	    *  @type node
	    *  @default null
	    */
				"nTr": null,

				/**
	    * Array of TD elements for each row. This is null until the row has been
	    * created.
	    *  @type array nodes
	    *  @default []
	    */
				"anCells": null,

				/**
	    * Data object from the original data source for the row. This is either
	    * an array if using the traditional form of DataTables, or an object if
	    * using mData options. The exact type will depend on the passed in
	    * data from the data source, or will be an array if using DOM a data
	    * source.
	    *  @type array|object
	    *  @default []
	    */
				"_aData": [],

				/**
	    * Sorting data cache - this array is ostensibly the same length as the
	    * number of columns (although each index is generated only as it is
	    * needed), and holds the data that is used for sorting each column in the
	    * row. We do this cache generation at the start of the sort in order that
	    * the formatting of the sort data need be done only once for each cell
	    * per sort. This array should not be read from or written to by anything
	    * other than the master sorting methods.
	    *  @type array
	    *  @default null
	    *  @private
	    */
				"_aSortData": null,

				/**
	    * Per cell filtering data cache. As per the sort data cache, used to
	    * increase the performance of the filtering in DataTables
	    *  @type array
	    *  @default null
	    *  @private
	    */
				"_aFilterData": null,

				/**
	    * Filtering data cache. This is the same as the cell filtering cache, but
	    * in this case a string rather than an array. This is easily computed with
	    * a join on `_aFilterData`, but is provided as a cache so the join isn't
	    * needed on every search (memory traded for performance)
	    *  @type array
	    *  @default null
	    *  @private
	    */
				"_sFilterRow": null,

				/**
	    * Cache of the class name that DataTables has applied to the row, so we
	    * can quickly look at this variable rather than needing to do a DOM check
	    * on className for the nTr property.
	    *  @type string
	    *  @default <i>Empty string</i>
	    *  @private
	    */
				"_sRowStripe": "",

				/**
	    * Denote if the original data source was from the DOM, or the data source
	    * object. This is used for invalidating data, so DataTables can
	    * automatically read data from the original source, unless uninstructed
	    * otherwise.
	    *  @type string
	    *  @default null
	    *  @private
	    */
				"src": null
			};

			/**
	   * Template object for the column information object in DataTables. This object
	   * is held in the settings aoColumns array and contains all the information that
	   * DataTables needs about each individual column.
	   *
	   * Note that this object is related to {@link DataTable.defaults.column}
	   * but this one is the internal data store for DataTables's cache of columns.
	   * It should NOT be manipulated outside of DataTables. Any configuration should
	   * be done through the initialisation options.
	   *  @namespace
	   */
			DataTable.models.oColumn = {
				/**
	    * Column index. This could be worked out on-the-fly with $.inArray, but it
	    * is faster to just hold it as a variable
	    *  @type integer
	    *  @default null
	    */
				"idx": null,

				/**
	    * A list of the columns that sorting should occur on when this column
	    * is sorted. That this property is an array allows multi-column sorting
	    * to be defined for a column (for example first name / last name columns
	    * would benefit from this). The values are integers pointing to the
	    * columns to be sorted on (typically it will be a single integer pointing
	    * at itself, but that doesn't need to be the case).
	    *  @type array
	    */
				"aDataSort": null,

				/**
	    * Define the sorting directions that are applied to the column, in sequence
	    * as the column is repeatedly sorted upon - i.e. the first value is used
	    * as the sorting direction when the column if first sorted (clicked on).
	    * Sort it again (click again) and it will move on to the next index.
	    * Repeat until loop.
	    *  @type array
	    */
				"asSorting": null,

				/**
	    * Flag to indicate if the column is searchable, and thus should be included
	    * in the filtering or not.
	    *  @type boolean
	    */
				"bSearchable": null,

				/**
	    * Flag to indicate if the column is sortable or not.
	    *  @type boolean
	    */
				"bSortable": null,

				/**
	    * Flag to indicate if the column is currently visible in the table or not
	    *  @type boolean
	    */
				"bVisible": null,

				/**
	    * Store for manual type assignment using the `column.type` option. This
	    * is held in store so we can manipulate the column's `sType` property.
	    *  @type string
	    *  @default null
	    *  @private
	    */
				"_sManualType": null,

				/**
	    * Flag to indicate if HTML5 data attributes should be used as the data
	    * source for filtering or sorting. True is either are.
	    *  @type boolean
	    *  @default false
	    *  @private
	    */
				"_bAttrSrc": false,

				/**
	    * Developer definable function that is called whenever a cell is created (Ajax source,
	    * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	    * allowing you to modify the DOM element (add background colour for example) when the
	    * element is available.
	    *  @type function
	    *  @param {element} nTd The TD node that has been created
	    *  @param {*} sData The Data for the cell
	    *  @param {array|object} oData The data for the whole row
	    *  @param {int} iRow The row index for the aoData data store
	    *  @default null
	    */
				"fnCreatedCell": null,

				/**
	    * Function to get data from a cell in a column. You should <b>never</b>
	    * access data directly through _aData internally in DataTables - always use
	    * the method attached to this property. It allows mData to function as
	    * required. This function is automatically assigned by the column
	    * initialisation method
	    *  @type function
	    *  @param {array|object} oData The data array/object for the array
	    *    (i.e. aoData[]._aData)
	    *  @param {string} sSpecific The specific data type you want to get -
	    *    'display', 'type' 'filter' 'sort'
	    *  @returns {*} The data for the cell from the given row's data
	    *  @default null
	    */
				"fnGetData": null,

				/**
	    * Function to set data for a cell in the column. You should <b>never</b>
	    * set the data directly to _aData internally in DataTables - always use
	    * this method. It allows mData to function as required. This function
	    * is automatically assigned by the column initialisation method
	    *  @type function
	    *  @param {array|object} oData The data array/object for the array
	    *    (i.e. aoData[]._aData)
	    *  @param {*} sValue Value to set
	    *  @default null
	    */
				"fnSetData": null,

				/**
	    * Property to read the value for the cells in the column from the data
	    * source array / object. If null, then the default content is used, if a
	    * function is given then the return from the function is used.
	    *  @type function|int|string|null
	    *  @default null
	    */
				"mData": null,

				/**
	    * Partner property to mData which is used (only when defined) to get
	    * the data - i.e. it is basically the same as mData, but without the
	    * 'set' option, and also the data fed to it is the result from mData.
	    * This is the rendering method to match the data method of mData.
	    *  @type function|int|string|null
	    *  @default null
	    */
				"mRender": null,

				/**
	    * Unique header TH/TD element for this column - this is what the sorting
	    * listener is attached to (if sorting is enabled.)
	    *  @type node
	    *  @default null
	    */
				"nTh": null,

				/**
	    * Unique footer TH/TD element for this column (if there is one). Not used
	    * in DataTables as such, but can be used for plug-ins to reference the
	    * footer for each column.
	    *  @type node
	    *  @default null
	    */
				"nTf": null,

				/**
	    * The class to apply to all TD elements in the table's TBODY for the column
	    *  @type string
	    *  @default null
	    */
				"sClass": null,

				/**
	    * When DataTables calculates the column widths to assign to each column,
	    * it finds the longest string in each column and then constructs a
	    * temporary table and reads the widths from that. The problem with this
	    * is that "mmm" is much wider then "iiii", but the latter is a longer
	    * string - thus the calculation can go wrong (doing it properly and putting
	    * it into an DOM object and measuring that is horribly(!) slow). Thus as
	    * a "work around" we provide this option. It will append its value to the
	    * text that is found to be the longest string for the column - i.e. padding.
	    *  @type string
	    */
				"sContentPadding": null,

				/**
	    * Allows a default value to be given for a column's data, and will be used
	    * whenever a null data source is encountered (this can be because mData
	    * is set to null, or because the data source itself is null).
	    *  @type string
	    *  @default null
	    */
				"sDefaultContent": null,

				/**
	    * Name for the column, allowing reference to the column by name as well as
	    * by index (needs a lookup to work by name).
	    *  @type string
	    */
				"sName": null,

				/**
	    * Custom sorting data type - defines which of the available plug-ins in
	    * afnSortData the custom sorting will use - if any is defined.
	    *  @type string
	    *  @default std
	    */
				"sSortDataType": 'std',

				/**
	    * Class to be applied to the header element when sorting on this column
	    *  @type string
	    *  @default null
	    */
				"sSortingClass": null,

				/**
	    * Class to be applied to the header element when sorting on this column -
	    * when jQuery UI theming is used.
	    *  @type string
	    *  @default null
	    */
				"sSortingClassJUI": null,

				/**
	    * Title of the column - what is seen in the TH element (nTh).
	    *  @type string
	    */
				"sTitle": null,

				/**
	    * Column sorting and filtering type
	    *  @type string
	    *  @default null
	    */
				"sType": null,

				/**
	    * Width of the column
	    *  @type string
	    *  @default null
	    */
				"sWidth": null,

				/**
	    * Width of the column when it was first "encountered"
	    *  @type string
	    *  @default null
	    */
				"sWidthOrig": null
			};

			/*
	   * Developer note: The properties of the object below are given in Hungarian
	   * notation, that was used as the interface for DataTables prior to v1.10, however
	   * from v1.10 onwards the primary interface is camel case. In order to avoid
	   * breaking backwards compatibility utterly with this change, the Hungarian
	   * version is still, internally the primary interface, but is is not documented
	   * - hence the @name tags in each doc comment. This allows a Javascript function
	   * to create a map from Hungarian notation to camel case (going the other direction
	   * would require each property to be listed, which would at around 3K to the size
	   * of DataTables, while this method is about a 0.5K hit.
	   *
	   * Ultimately this does pave the way for Hungarian notation to be dropped
	   * completely, but that is a massive amount of work and will break current
	   * installs (therefore is on-hold until v2).
	   */

			/**
	   * Initialisation options that can be given to DataTables at initialisation
	   * time.
	   *  @namespace
	   */
			DataTable.defaults = {
				/**
	    * An array of data to use for the table, passed in at initialisation which
	    * will be used in preference to any data which is already in the DOM. This is
	    * particularly useful for constructing tables purely in Javascript, for
	    * example with a custom Ajax call.
	    *  @type array
	    *  @default null
	    *
	    *  @dtopt Option
	    *  @name DataTable.defaults.data
	    *
	    *  @example
	    *    // Using a 2D array data source
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "data": [
	    *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
	    *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
	    *        ],
	    *        "columns": [
	    *          { "title": "Engine" },
	    *          { "title": "Browser" },
	    *          { "title": "Platform" },
	    *          { "title": "Version" },
	    *          { "title": "Grade" }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using an array of objects as a data source (`data`)
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "data": [
	    *          {
	    *            "engine":   "Trident",
	    *            "browser":  "Internet Explorer 4.0",
	    *            "platform": "Win 95+",
	    *            "version":  4,
	    *            "grade":    "X"
	    *          },
	    *          {
	    *            "engine":   "Trident",
	    *            "browser":  "Internet Explorer 5.0",
	    *            "platform": "Win 95+",
	    *            "version":  5,
	    *            "grade":    "C"
	    *          }
	    *        ],
	    *        "columns": [
	    *          { "title": "Engine",   "data": "engine" },
	    *          { "title": "Browser",  "data": "browser" },
	    *          { "title": "Platform", "data": "platform" },
	    *          { "title": "Version",  "data": "version" },
	    *          { "title": "Grade",    "data": "grade" }
	    *        ]
	    *      } );
	    *    } );
	    */
				"aaData": null,

				/**
	    * If ordering is enabled, then DataTables will perform a first pass sort on
	    * initialisation. You can define which column(s) the sort is performed
	    * upon, and the sorting direction, with this variable. The `sorting` array
	    * should contain an array for each column to be sorted initially containing
	    * the column's index and a direction string ('asc' or 'desc').
	    *  @type array
	    *  @default [[0,'asc']]
	    *
	    *  @dtopt Option
	    *  @name DataTable.defaults.order
	    *
	    *  @example
	    *    // Sort by 3rd column first, and then 4th column
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "order": [[2,'asc'], [3,'desc']]
	    *      } );
	    *    } );
	    *
	    *    // No initial sorting
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "order": []
	    *      } );
	    *    } );
	    */
				"aaSorting": [[0, 'asc']],

				/**
	    * This parameter is basically identical to the `sorting` parameter, but
	    * cannot be overridden by user interaction with the table. What this means
	    * is that you could have a column (visible or hidden) which the sorting
	    * will always be forced on first - any sorting after that (from the user)
	    * will then be performed as required. This can be useful for grouping rows
	    * together.
	    *  @type array
	    *  @default null
	    *
	    *  @dtopt Option
	    *  @name DataTable.defaults.orderFixed
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "orderFixed": [[0,'asc']]
	    *      } );
	    *    } )
	    */
				"aaSortingFixed": [],

				/**
	    * DataTables can be instructed to load data to display in the table from a
	    * Ajax source. This option defines how that Ajax call is made and where to.
	    *
	    * The `ajax` property has three different modes of operation, depending on
	    * how it is defined. These are:
	    *
	    * * `string` - Set the URL from where the data should be loaded from.
	    * * `object` - Define properties for `jQuery.ajax`.
	    * * `function` - Custom data get function
	    *
	    * `string`
	    * --------
	    *
	    * As a string, the `ajax` property simply defines the URL from which
	    * DataTables will load data.
	    *
	    * `object`
	    * --------
	    *
	    * As an object, the parameters in the object are passed to
	    * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
	    * of the Ajax request. DataTables has a number of default parameters which
	    * you can override using this option. Please refer to the jQuery
	    * documentation for a full description of the options available, although
	    * the following parameters provide additional options in DataTables or
	    * require special consideration:
	    *
	    * * `data` - As with jQuery, `data` can be provided as an object, but it
	    *   can also be used as a function to manipulate the data DataTables sends
	    *   to the server. The function takes a single parameter, an object of
	    *   parameters with the values that DataTables has readied for sending. An
	    *   object may be returned which will be merged into the DataTables
	    *   defaults, or you can add the items to the object that was passed in and
	    *   not return anything from the function. This supersedes `fnServerParams`
	    *   from DataTables 1.9-.
	    *
	    * * `dataSrc` - By default DataTables will look for the property `data` (or
	    *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
	    *   from an Ajax source or for server-side processing - this parameter
	    *   allows that property to be changed. You can use Javascript dotted
	    *   object notation to get a data source for multiple levels of nesting, or
	    *   it my be used as a function. As a function it takes a single parameter,
	    *   the JSON returned from the server, which can be manipulated as
	    *   required, with the returned value being that used by DataTables as the
	    *   data source for the table. This supersedes `sAjaxDataProp` from
	    *   DataTables 1.9-.
	    *
	    * * `success` - Should not be overridden it is used internally in
	    *   DataTables. To manipulate / transform the data returned by the server
	    *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
	    *
	    * `function`
	    * ----------
	    *
	    * As a function, making the Ajax call is left up to yourself allowing
	    * complete control of the Ajax request. Indeed, if desired, a method other
	    * than Ajax could be used to obtain the required data, such as Web storage
	    * or an AIR database.
	    *
	    * The function is given four parameters and no return is required. The
	    * parameters are:
	    *
	    * 1. _object_ - Data to send to the server
	    * 2. _function_ - Callback function that must be executed when the required
	    *    data has been obtained. That data should be passed into the callback
	    *    as the only parameter
	    * 3. _object_ - DataTables settings object for the table
	    *
	    * Note that this supersedes `fnServerData` from DataTables 1.9-.
	    *
	    *  @type string|object|function
	    *  @default null
	    *
	    *  @dtopt Option
	    *  @name DataTable.defaults.ajax
	    *  @since 1.10.0
	    *
	    * @example
	    *   // Get JSON data from a file via Ajax.
	    *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
	    *   $('#example').dataTable( {
	    *     "ajax": "data.json"
	    *   } );
	    *
	    * @example
	    *   // Get JSON data from a file via Ajax, using `dataSrc` to change
	    *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
	    *   $('#example').dataTable( {
	    *     "ajax": {
	    *       "url": "data.json",
	    *       "dataSrc": "tableData"
	    *     }
	    *   } );
	    *
	    * @example
	    *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
	    *   // from a plain array rather than an array in an object
	    *   $('#example').dataTable( {
	    *     "ajax": {
	    *       "url": "data.json",
	    *       "dataSrc": ""
	    *     }
	    *   } );
	    *
	    * @example
	    *   // Manipulate the data returned from the server - add a link to data
	    *   // (note this can, should, be done using `render` for the column - this
	    *   // is just a simple example of how the data can be manipulated).
	    *   $('#example').dataTable( {
	    *     "ajax": {
	    *       "url": "data.json",
	    *       "dataSrc": function ( json ) {
	    *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
	    *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
	    *         }
	    *         return json;
	    *       }
	    *     }
	    *   } );
	    *
	    * @example
	    *   // Add data to the request
	    *   $('#example').dataTable( {
	    *     "ajax": {
	    *       "url": "data.json",
	    *       "data": function ( d ) {
	    *         return {
	    *           "extra_search": $('#extra').val()
	    *         };
	    *       }
	    *     }
	    *   } );
	    *
	    * @example
	    *   // Send request as POST
	    *   $('#example').dataTable( {
	    *     "ajax": {
	    *       "url": "data.json",
	    *       "type": "POST"
	    *     }
	    *   } );
	    *
	    * @example
	    *   // Get the data from localStorage (could interface with a form for
	    *   // adding, editing and removing rows).
	    *   $('#example').dataTable( {
	    *     "ajax": function (data, callback, settings) {
	    *       callback(
	    *         JSON.parse( localStorage.getItem('dataTablesData') )
	    *       );
	    *     }
	    *   } );
	    */
				"ajax": null,

				/**
	    * This parameter allows you to readily specify the entries in the length drop
	    * down menu that DataTables shows when pagination is enabled. It can be
	    * either a 1D array of options which will be used for both the displayed
	    * option and the value, or a 2D array which will use the array in the first
	    * position as the value, and the array in the second position as the
	    * displayed options (useful for language strings such as 'All').
	    *
	    * Note that the `pageLength` property will be automatically set to the
	    * first value given in this array, unless `pageLength` is also provided.
	    *  @type array
	    *  @default [ 10, 25, 50, 100 ]
	    *
	    *  @dtopt Option
	    *  @name DataTable.defaults.lengthMenu
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
	    *      } );
	    *    } );
	    */
				"aLengthMenu": [10, 25, 50, 100],

				/**
	    * The `columns` option in the initialisation parameter allows you to define
	    * details about the way individual columns behave. For a full list of
	    * column options that can be set, please see
	    * {@link DataTable.defaults.column}. Note that if you use `columns` to
	    * define your columns, you must have an entry in the array for every single
	    * column that you have in your table (these can be null if you don't which
	    * to specify any options).
	    *  @member
	    *
	    *  @name DataTable.defaults.column
	    */
				"aoColumns": null,

				/**
	    * Very similar to `columns`, `columnDefs` allows you to target a specific
	    * column, multiple columns, or all columns, using the `targets` property of
	    * each object in the array. This allows great flexibility when creating
	    * tables, as the `columnDefs` arrays can be of any length, targeting the
	    * columns you specifically want. `columnDefs` may use any of the column
	    * options available: {@link DataTable.defaults.column}, but it _must_
	    * have `targets` defined in each object in the array. Values in the `targets`
	    * array may be:
	    *   <ul>
	    *     <li>a string - class name will be matched on the TH for the column</li>
	    *     <li>0 or a positive integer - column index counting from the left</li>
	    *     <li>a negative integer - column index counting from the right</li>
	    *     <li>the string "_all" - all columns (i.e. assign a default)</li>
	    *   </ul>
	    *  @member
	    *
	    *  @name DataTable.defaults.columnDefs
	    */
				"aoColumnDefs": null,

				/**
	    * Basically the same as `search`, this parameter defines the individual column
	    * filtering state at initialisation time. The array must be of the same size
	    * as the number of columns, and each element be an object with the parameters
	    * `search` and `escapeRegex` (the latter is optional). 'null' is also
	    * accepted and the default will be used.
	    *  @type array
	    *  @default []
	    *
	    *  @dtopt Option
	    *  @name DataTable.defaults.searchCols
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "searchCols": [
	    *          null,
	    *          { "search": "My filter" },
	    *          null,
	    *          { "search": "^[0-9]", "escapeRegex": false }
	    *        ]
	    *      } );
	    *    } )
	    */
				"aoSearchCols": [],

				/**
	    * An array of CSS classes that should be applied to displayed rows. This
	    * array may be of any length, and DataTables will apply each class
	    * sequentially, looping when required.
	    *  @type array
	    *  @default null <i>Will take the values determined by the `oClasses.stripe*`
	    *    options</i>
	    *
	    *  @dtopt Option
	    *  @name DataTable.defaults.stripeClasses
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
	    *      } );
	    *    } )
	    */
				"asStripeClasses": null,

				/**
	    * Enable or disable automatic column width calculation. This can be disabled
	    * as an optimisation (it takes some time to calculate the widths) if the
	    * tables widths are passed in using `columns`.
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.autoWidth
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "autoWidth": false
	    *      } );
	    *    } );
	    */
				"bAutoWidth": true,

				/**
	    * Deferred rendering can provide DataTables with a huge speed boost when you
	    * are using an Ajax or JS data source for the table. This option, when set to
	    * true, will cause DataTables to defer the creation of the table elements for
	    * each row until they are needed for a draw - saving a significant amount of
	    * time.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.deferRender
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "ajax": "sources/arrays.txt",
	    *        "deferRender": true
	    *      } );
	    *    } );
	    */
				"bDeferRender": false,

				/**
	    * Replace a DataTable which matches the given selector and replace it with
	    * one which has the properties of the new initialisation object passed. If no
	    * table matches the selector, then the new DataTable will be constructed as
	    * per normal.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.destroy
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "srollY": "200px",
	    *        "paginate": false
	    *      } );
	    *
	    *      // Some time later....
	    *      $('#example').dataTable( {
	    *        "filter": false,
	    *        "destroy": true
	    *      } );
	    *    } );
	    */
				"bDestroy": false,

				/**
	    * Enable or disable filtering of data. Filtering in DataTables is "smart" in
	    * that it allows the end user to input multiple words (space separated) and
	    * will match a row containing those words, even if not in the order that was
	    * specified (this allow matching across multiple columns). Note that if you
	    * wish to use filtering in DataTables this must remain 'true' - to remove the
	    * default filtering input box and retain filtering abilities, please use
	    * {@link DataTable.defaults.dom}.
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.searching
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "searching": false
	    *      } );
	    *    } );
	    */
				"bFilter": true,

				/**
	    * Enable or disable the table information display. This shows information
	    * about the data that is currently visible on the page, including information
	    * about filtered data if that action is being performed.
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.info
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "info": false
	    *      } );
	    *    } );
	    */
				"bInfo": true,

				/**
	    * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
	    * slightly different and additional mark-up from what DataTables has
	    * traditionally used).
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.jQueryUI
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "jQueryUI": true
	    *      } );
	    *    } );
	    */
				"bJQueryUI": false,

				/**
	    * Allows the end user to select the size of a formatted page from a select
	    * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.lengthChange
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "lengthChange": false
	    *      } );
	    *    } );
	    */
				"bLengthChange": true,

				/**
	    * Enable or disable pagination.
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.paging
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "paging": false
	    *      } );
	    *    } );
	    */
				"bPaginate": true,

				/**
	    * Enable or disable the display of a 'processing' indicator when the table is
	    * being processed (e.g. a sort). This is particularly useful for tables with
	    * large amounts of data where it can take a noticeable amount of time to sort
	    * the entries.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.processing
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "processing": true
	    *      } );
	    *    } );
	    */
				"bProcessing": false,

				/**
	    * Retrieve the DataTables object for the given selector. Note that if the
	    * table has already been initialised, this parameter will cause DataTables
	    * to simply return the object that has already been set up - it will not take
	    * account of any changes you might have made to the initialisation object
	    * passed to DataTables (setting this parameter to true is an acknowledgement
	    * that you understand this). `destroy` can be used to reinitialise a table if
	    * you need.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.retrieve
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      initTable();
	    *      tableActions();
	    *    } );
	    *
	    *    function initTable ()
	    *    {
	    *      return $('#example').dataTable( {
	    *        "scrollY": "200px",
	    *        "paginate": false,
	    *        "retrieve": true
	    *      } );
	    *    }
	    *
	    *    function tableActions ()
	    *    {
	    *      var table = initTable();
	    *      // perform API operations with oTable
	    *    }
	    */
				"bRetrieve": false,

				/**
	    * When vertical (y) scrolling is enabled, DataTables will force the height of
	    * the table's viewport to the given height at all times (useful for layout).
	    * However, this can look odd when filtering data down to a small data set,
	    * and the footer is left "floating" further down. This parameter (when
	    * enabled) will cause DataTables to collapse the table's viewport down when
	    * the result set will fit within the given Y height.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.scrollCollapse
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "scrollY": "200",
	    *        "scrollCollapse": true
	    *      } );
	    *    } );
	    */
				"bScrollCollapse": false,

				/**
	    * Configure DataTables to use server-side processing. Note that the
	    * `ajax` parameter must also be given in order to give DataTables a
	    * source to obtain the required data for each draw.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Features
	    *  @dtopt Server-side
	    *  @name DataTable.defaults.serverSide
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "serverSide": true,
	    *        "ajax": "xhr.php"
	    *      } );
	    *    } );
	    */
				"bServerSide": false,

				/**
	    * Enable or disable sorting of columns. Sorting of individual columns can be
	    * disabled by the `sortable` option for each column.
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.ordering
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "ordering": false
	    *      } );
	    *    } );
	    */
				"bSort": true,

				/**
	    * Enable or display DataTables' ability to sort multiple columns at the
	    * same time (activated by shift-click by the user).
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.orderMulti
	    *
	    *  @example
	    *    // Disable multiple column sorting ability
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "orderMulti": false
	    *      } );
	    *    } );
	    */
				"bSortMulti": true,

				/**
	    * Allows control over whether DataTables should use the top (true) unique
	    * cell that is found for a single column, or the bottom (false - default).
	    * This is useful when using complex headers.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.orderCellsTop
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "orderCellsTop": true
	    *      } );
	    *    } );
	    */
				"bSortCellsTop": false,

				/**
	    * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
	    * `sorting\_3` to the columns which are currently being sorted on. This is
	    * presented as a feature switch as it can increase processing time (while
	    * classes are removed and added) so for large data sets you might want to
	    * turn this off.
	    *  @type boolean
	    *  @default true
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.orderClasses
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "orderClasses": false
	    *      } );
	    *    } );
	    */
				"bSortClasses": true,

				/**
	    * Enable or disable state saving. When enabled HTML5 `localStorage` will be
	    * used to save table display information such as pagination information,
	    * display length, filtering and sorting. As such when the end user reloads
	    * the page the display display will match what thy had previously set up.
	    *
	    * Due to the use of `localStorage` the default state saving is not supported
	    * in IE6 or 7. If state saving is required in those browsers, use
	    * `stateSaveCallback` to provide a storage solution such as cookies.
	    *  @type boolean
	    *  @default false
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.stateSave
	    *
	    *  @example
	    *    $(document).ready( function () {
	    *      $('#example').dataTable( {
	    *        "stateSave": true
	    *      } );
	    *    } );
	    */
				"bStateSave": false,

				/**
	    * This function is called when a TR element is created (and all TD child
	    * elements have been inserted), or registered if using a DOM source, allowing
	    * manipulation of the TR element (adding classes etc).
	    *  @type function
	    *  @param {node} row "TR" element for the current row
	    *  @param {array} data Raw data array for this row
	    *  @param {int} dataIndex The index of this row in the internal aoData array
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.createdRow
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "createdRow": function( row, data, dataIndex ) {
	    *          // Bold the grade for all 'A' grade browsers
	    *          if ( data[4] == "A" )
	    *          {
	    *            $('td:eq(4)', row).html( '<b>A</b>' );
	    *          }
	    *        }
	    *      } );
	    *    } );
	    */
				"fnCreatedRow": null,

				/**
	    * This function is called on every 'draw' event, and allows you to
	    * dynamically modify any aspect you want about the created DOM.
	    *  @type function
	    *  @param {object} settings DataTables settings object
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.drawCallback
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "drawCallback": function( settings ) {
	    *          alert( 'DataTables has redrawn the table' );
	    *        }
	    *      } );
	    *    } );
	    */
				"fnDrawCallback": null,

				/**
	    * Identical to fnHeaderCallback() but for the table footer this function
	    * allows you to modify the table footer on every 'draw' event.
	    *  @type function
	    *  @param {node} foot "TR" element for the footer
	    *  @param {array} data Full table data (as derived from the original HTML)
	    *  @param {int} start Index for the current display starting point in the
	    *    display array
	    *  @param {int} end Index for the current display ending point in the
	    *    display array
	    *  @param {array int} display Index array to translate the visual position
	    *    to the full data array
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.footerCallback
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "footerCallback": function( tfoot, data, start, end, display ) {
	    *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
	    *        }
	    *      } );
	    *    } )
	    */
				"fnFooterCallback": null,

				/**
	    * When rendering large numbers in the information element for the table
	    * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
	    * to have a comma separator for the 'thousands' units (e.g. 1 million is
	    * rendered as "1,000,000") to help readability for the end user. This
	    * function will override the default method DataTables uses.
	    *  @type function
	    *  @member
	    *  @param {int} toFormat number to be formatted
	    *  @returns {string} formatted string for DataTables to show the number
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.formatNumber
	    *
	    *  @example
	    *    // Format a number using a single quote for the separator (note that
	    *    // this can also be done with the language.thousands option)
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "formatNumber": function ( toFormat ) {
	    *          return toFormat.toString().replace(
	    *            /\B(?=(\d{3})+(?!\d))/g, "'"
	    *          );
	    *        };
	    *      } );
	    *    } );
	    */
				"fnFormatNumber": function fnFormatNumber(toFormat) {
					return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
				},

				/**
	    * This function is called on every 'draw' event, and allows you to
	    * dynamically modify the header row. This can be used to calculate and
	    * display useful information about the table.
	    *  @type function
	    *  @param {node} head "TR" element for the header
	    *  @param {array} data Full table data (as derived from the original HTML)
	    *  @param {int} start Index for the current display starting point in the
	    *    display array
	    *  @param {int} end Index for the current display ending point in the
	    *    display array
	    *  @param {array int} display Index array to translate the visual position
	    *    to the full data array
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.headerCallback
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "fheaderCallback": function( head, data, start, end, display ) {
	    *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
	    *        }
	    *      } );
	    *    } )
	    */
				"fnHeaderCallback": null,

				/**
	    * The information element can be used to convey information about the current
	    * state of the table. Although the internationalisation options presented by
	    * DataTables are quite capable of dealing with most customisations, there may
	    * be times where you wish to customise the string further. This callback
	    * allows you to do exactly that.
	    *  @type function
	    *  @param {object} oSettings DataTables settings object
	    *  @param {int} start Starting position in data for the draw
	    *  @param {int} end End position in data for the draw
	    *  @param {int} max Total number of rows in the table (regardless of
	    *    filtering)
	    *  @param {int} total Total number of rows in the data set, after filtering
	    *  @param {string} pre The string that DataTables has formatted using it's
	    *    own rules
	    *  @returns {string} The string to be displayed in the information element.
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.infoCallback
	    *
	    *  @example
	    *    $('#example').dataTable( {
	    *      "infoCallback": function( settings, start, end, max, total, pre ) {
	    *        return start +" to "+ end;
	    *      }
	    *    } );
	    */
				"fnInfoCallback": null,

				/**
	    * Called when the table has been initialised. Normally DataTables will
	    * initialise sequentially and there will be no need for this function,
	    * however, this does not hold true when using external language information
	    * since that is obtained using an async XHR call.
	    *  @type function
	    *  @param {object} settings DataTables settings object
	    *  @param {object} json The JSON object request from the server - only
	    *    present if client-side Ajax sourced data is used
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.initComplete
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "initComplete": function(settings, json) {
	    *          alert( 'DataTables has finished its initialisation.' );
	    *        }
	    *      } );
	    *    } )
	    */
				"fnInitComplete": null,

				/**
	    * Called at the very start of each table draw and can be used to cancel the
	    * draw by returning false, any other return (including undefined) results in
	    * the full draw occurring).
	    *  @type function
	    *  @param {object} settings DataTables settings object
	    *  @returns {boolean} False will cancel the draw, anything else (including no
	    *    return) will allow it to complete.
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.preDrawCallback
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "preDrawCallback": function( settings ) {
	    *          if ( $('#test').val() == 1 ) {
	    *            return false;
	    *          }
	    *        }
	    *      } );
	    *    } );
	    */
				"fnPreDrawCallback": null,

				/**
	    * This function allows you to 'post process' each row after it have been
	    * generated for each table draw, but before it is rendered on screen. This
	    * function might be used for setting the row class name etc.
	    *  @type function
	    *  @param {node} row "TR" element for the current row
	    *  @param {array} data Raw data array for this row
	    *  @param {int} displayIndex The display index for the current table draw
	    *  @param {int} displayIndexFull The index of the data in the full list of
	    *    rows (after filtering)
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.rowCallback
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
	    *          // Bold the grade for all 'A' grade browsers
	    *          if ( data[4] == "A" ) {
	    *            $('td:eq(4)', row).html( '<b>A</b>' );
	    *          }
	    *        }
	    *      } );
	    *    } );
	    */
				"fnRowCallback": null,

				/**
	    * __Deprecated__ The functionality provided by this parameter has now been
	    * superseded by that provided through `ajax`, which should be used instead.
	    *
	    * This parameter allows you to override the default function which obtains
	    * the data from the server so something more suitable for your application.
	    * For example you could use POST data, or pull information from a Gears or
	    * AIR database.
	    *  @type function
	    *  @member
	    *  @param {string} source HTTP source to obtain the data from (`ajax`)
	    *  @param {array} data A key/value pair object containing the data to send
	    *    to the server
	    *  @param {function} callback to be called on completion of the data get
	    *    process that will draw the data on the page.
	    *  @param {object} settings DataTables settings object
	    *
	    *  @dtopt Callbacks
	    *  @dtopt Server-side
	    *  @name DataTable.defaults.serverData
	    *
	    *  @deprecated 1.10. Please use `ajax` for this functionality now.
	    */
				"fnServerData": null,

				/**
	    * __Deprecated__ The functionality provided by this parameter has now been
	    * superseded by that provided through `ajax`, which should be used instead.
	    *
	    *  It is often useful to send extra data to the server when making an Ajax
	    * request - for example custom filtering information, and this callback
	    * function makes it trivial to send extra information to the server. The
	    * passed in parameter is the data set that has been constructed by
	    * DataTables, and you can add to this or modify it as you require.
	    *  @type function
	    *  @param {array} data Data array (array of objects which are name/value
	    *    pairs) that has been constructed by DataTables and will be sent to the
	    *    server. In the case of Ajax sourced data with server-side processing
	    *    this will be an empty array, for server-side processing there will be a
	    *    significant number of parameters!
	    *  @returns {undefined} Ensure that you modify the data array passed in,
	    *    as this is passed by reference.
	    *
	    *  @dtopt Callbacks
	    *  @dtopt Server-side
	    *  @name DataTable.defaults.serverParams
	    *
	    *  @deprecated 1.10. Please use `ajax` for this functionality now.
	    */
				"fnServerParams": null,

				/**
	    * Load the table state. With this function you can define from where, and how, the
	    * state of a table is loaded. By default DataTables will load from `localStorage`
	    * but you might wish to use a server-side database or cookies.
	    *  @type function
	    *  @member
	    *  @param {object} settings DataTables settings object
	    *  @return {object} The DataTables state object to be loaded
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.stateLoadCallback
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stateSave": true,
	    *        "stateLoadCallback": function (settings) {
	    *          var o;
	    *
	    *          // Send an Ajax request to the server to get the data. Note that
	    *          // this is a synchronous request.
	    *          $.ajax( {
	    *            "url": "/state_load",
	    *            "async": false,
	    *            "dataType": "json",
	    *            "success": function (json) {
	    *              o = json;
	    *            }
	    *          } );
	    *
	    *          return o;
	    *        }
	    *      } );
	    *    } );
	    */
				"fnStateLoadCallback": function fnStateLoadCallback(settings) {
					try {
						return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));
					} catch (e) {}
				},

				/**
	    * Callback which allows modification of the saved state prior to loading that state.
	    * This callback is called when the table is loading state from the stored data, but
	    * prior to the settings object being modified by the saved state. Note that for
	    * plug-in authors, you should use the `stateLoadParams` event to load parameters for
	    * a plug-in.
	    *  @type function
	    *  @param {object} settings DataTables settings object
	    *  @param {object} data The state object that is to be loaded
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.stateLoadParams
	    *
	    *  @example
	    *    // Remove a saved filter, so filtering is never loaded
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stateSave": true,
	    *        "stateLoadParams": function (settings, data) {
	    *          data.oSearch.sSearch = "";
	    *        }
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Disallow state loading by returning false
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stateSave": true,
	    *        "stateLoadParams": function (settings, data) {
	    *          return false;
	    *        }
	    *      } );
	    *    } );
	    */
				"fnStateLoadParams": null,

				/**
	    * Callback that is called when the state has been loaded from the state saving method
	    * and the DataTables settings object has been modified as a result of the loaded state.
	    *  @type function
	    *  @param {object} settings DataTables settings object
	    *  @param {object} data The state object that was loaded
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.stateLoaded
	    *
	    *  @example
	    *    // Show an alert with the filtering value that was saved
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stateSave": true,
	    *        "stateLoaded": function (settings, data) {
	    *          alert( 'Saved filter was: '+data.oSearch.sSearch );
	    *        }
	    *      } );
	    *    } );
	    */
				"fnStateLoaded": null,

				/**
	    * Save the table state. This function allows you to define where and how the state
	    * information for the table is stored By default DataTables will use `localStorage`
	    * but you might wish to use a server-side database or cookies.
	    *  @type function
	    *  @member
	    *  @param {object} settings DataTables settings object
	    *  @param {object} data The state object to be saved
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.stateSaveCallback
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stateSave": true,
	    *        "stateSaveCallback": function (settings, data) {
	    *          // Send an Ajax request to the server with the state object
	    *          $.ajax( {
	    *            "url": "/state_save",
	    *            "data": data,
	    *            "dataType": "json",
	    *            "method": "POST"
	    *            "success": function () {}
	    *          } );
	    *        }
	    *      } );
	    *    } );
	    */
				"fnStateSaveCallback": function fnStateSaveCallback(settings, data) {
					try {
						(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));
					} catch (e) {}
				},

				/**
	    * Callback which allows modification of the state to be saved. Called when the table
	    * has changed state a new state save is required. This method allows modification of
	    * the state saving object prior to actually doing the save, including addition or
	    * other state properties or modification. Note that for plug-in authors, you should
	    * use the `stateSaveParams` event to save parameters for a plug-in.
	    *  @type function
	    *  @param {object} settings DataTables settings object
	    *  @param {object} data The state object to be saved
	    *
	    *  @dtopt Callbacks
	    *  @name DataTable.defaults.stateSaveParams
	    *
	    *  @example
	    *    // Remove a saved filter, so filtering is never saved
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stateSave": true,
	    *        "stateSaveParams": function (settings, data) {
	    *          data.oSearch.sSearch = "";
	    *        }
	    *      } );
	    *    } );
	    */
				"fnStateSaveParams": null,

				/**
	    * Duration for which the saved state information is considered valid. After this period
	    * has elapsed the state will be returned to the default.
	    * Value is given in seconds.
	    *  @type int
	    *  @default 7200 <i>(2 hours)</i>
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.stateDuration
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "stateDuration": 60*60*24; // 1 day
	    *      } );
	    *    } )
	    */
				"iStateDuration": 7200,

				/**
	    * When enabled DataTables will not make a request to the server for the first
	    * page draw - rather it will use the data already on the page (no sorting etc
	    * will be applied to it), thus saving on an XHR at load time. `deferLoading`
	    * is used to indicate that deferred loading is required, but it is also used
	    * to tell DataTables how many records there are in the full table (allowing
	    * the information element and pagination to be displayed correctly). In the case
	    * where a filtering is applied to the table on initial load, this can be
	    * indicated by giving the parameter as an array, where the first element is
	    * the number of records available after filtering and the second element is the
	    * number of records without filtering (allowing the table information element
	    * to be shown correctly).
	    *  @type int | array
	    *  @default null
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.deferLoading
	    *
	    *  @example
	    *    // 57 records available in the table, no filtering applied
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "serverSide": true,
	    *        "ajax": "scripts/server_processing.php",
	    *        "deferLoading": 57
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // 57 records after filtering, 100 without filtering (an initial filter applied)
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "serverSide": true,
	    *        "ajax": "scripts/server_processing.php",
	    *        "deferLoading": [ 57, 100 ],
	    *        "search": {
	    *          "search": "my_filter"
	    *        }
	    *      } );
	    *    } );
	    */
				"iDeferLoading": null,

				/**
	    * Number of rows to display on a single page when using pagination. If
	    * feature enabled (`lengthChange`) then the end user will be able to override
	    * this to a custom setting using a pop-up menu.
	    *  @type int
	    *  @default 10
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.pageLength
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "pageLength": 50
	    *      } );
	    *    } )
	    */
				"iDisplayLength": 10,

				/**
	    * Define the starting point for data display when using DataTables with
	    * pagination. Note that this parameter is the number of records, rather than
	    * the page number, so if you have 10 records per page and want to start on
	    * the third page, it should be "20".
	    *  @type int
	    *  @default 0
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.displayStart
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "displayStart": 20
	    *      } );
	    *    } )
	    */
				"iDisplayStart": 0,

				/**
	    * By default DataTables allows keyboard navigation of the table (sorting, paging,
	    * and filtering) by adding a `tabindex` attribute to the required elements. This
	    * allows you to tab through the controls and press the enter key to activate them.
	    * The tabindex is default 0, meaning that the tab follows the flow of the document.
	    * You can overrule this using this parameter if you wish. Use a value of -1 to
	    * disable built-in keyboard navigation.
	    *  @type int
	    *  @default 0
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.tabIndex
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "tabIndex": 1
	    *      } );
	    *    } );
	    */
				"iTabIndex": 0,

				/**
	    * Classes that DataTables assigns to the various components and features
	    * that it adds to the HTML table. This allows classes to be configured
	    * during initialisation in addition to through the static
	    * {@link DataTable.ext.oStdClasses} object).
	    *  @namespace
	    *  @name DataTable.defaults.classes
	    */
				"oClasses": {},

				/**
	    * All strings that DataTables uses in the user interface that it creates
	    * are defined in this object, allowing you to modified them individually or
	    * completely replace them all as required.
	    *  @namespace
	    *  @name DataTable.defaults.language
	    */
				"oLanguage": {
					/**
	     * Strings that are used for WAI-ARIA labels and controls only (these are not
	     * actually visible on the page, but will be read by screenreaders, and thus
	     * must be internationalised as well).
	     *  @namespace
	     *  @name DataTable.defaults.language.aria
	     */
					"oAria": {
						/**
	      * ARIA label that is added to the table headers when the column may be
	      * sorted ascending by activing the column (click or return when focused).
	      * Note that the column header is prefixed to this string.
	      *  @type string
	      *  @default : activate to sort column ascending
	      *
	      *  @dtopt Language
	      *  @name DataTable.defaults.language.aria.sortAscending
	      *
	      *  @example
	      *    $(document).ready( function() {
	      *      $('#example').dataTable( {
	      *        "language": {
	      *          "aria": {
	      *            "sortAscending": " - click/return to sort ascending"
	      *          }
	      *        }
	      *      } );
	      *    } );
	      */
						"sSortAscending": ": activate to sort column ascending",

						/**
	      * ARIA label that is added to the table headers when the column may be
	      * sorted descending by activing the column (click or return when focused).
	      * Note that the column header is prefixed to this string.
	      *  @type string
	      *  @default : activate to sort column ascending
	      *
	      *  @dtopt Language
	      *  @name DataTable.defaults.language.aria.sortDescending
	      *
	      *  @example
	      *    $(document).ready( function() {
	      *      $('#example').dataTable( {
	      *        "language": {
	      *          "aria": {
	      *            "sortDescending": " - click/return to sort descending"
	      *          }
	      *        }
	      *      } );
	      *    } );
	      */
						"sSortDescending": ": activate to sort column descending"
					},

					/**
	     * Pagination string used by DataTables for the built-in pagination
	     * control types.
	     *  @namespace
	     *  @name DataTable.defaults.language.paginate
	     */
					"oPaginate": {
						/**
	      * Text to use when using the 'full_numbers' type of pagination for the
	      * button to take the user to the first page.
	      *  @type string
	      *  @default First
	      *
	      *  @dtopt Language
	      *  @name DataTable.defaults.language.paginate.first
	      *
	      *  @example
	      *    $(document).ready( function() {
	      *      $('#example').dataTable( {
	      *        "language": {
	      *          "paginate": {
	      *            "first": "First page"
	      *          }
	      *        }
	      *      } );
	      *    } );
	      */
						"sFirst": "First",

						/**
	      * Text to use when using the 'full_numbers' type of pagination for the
	      * button to take the user to the last page.
	      *  @type string
	      *  @default Last
	      *
	      *  @dtopt Language
	      *  @name DataTable.defaults.language.paginate.last
	      *
	      *  @example
	      *    $(document).ready( function() {
	      *      $('#example').dataTable( {
	      *        "language": {
	      *          "paginate": {
	      *            "last": "Last page"
	      *          }
	      *        }
	      *      } );
	      *    } );
	      */
						"sLast": "Last",

						/**
	      * Text to use for the 'next' pagination button (to take the user to the
	      * next page).
	      *  @type string
	      *  @default Next
	      *
	      *  @dtopt Language
	      *  @name DataTable.defaults.language.paginate.next
	      *
	      *  @example
	      *    $(document).ready( function() {
	      *      $('#example').dataTable( {
	      *        "language": {
	      *          "paginate": {
	      *            "next": "Next page"
	      *          }
	      *        }
	      *      } );
	      *    } );
	      */
						"sNext": "Next",

						/**
	      * Text to use for the 'previous' pagination button (to take the user to
	      * the previous page).
	      *  @type string
	      *  @default Previous
	      *
	      *  @dtopt Language
	      *  @name DataTable.defaults.language.paginate.previous
	      *
	      *  @example
	      *    $(document).ready( function() {
	      *      $('#example').dataTable( {
	      *        "language": {
	      *          "paginate": {
	      *            "previous": "Previous page"
	      *          }
	      *        }
	      *      } );
	      *    } );
	      */
						"sPrevious": "Previous"
					},

					/**
	     * This string is shown in preference to `zeroRecords` when the table is
	     * empty of data (regardless of filtering). Note that this is an optional
	     * parameter - if it is not given, the value of `zeroRecords` will be used
	     * instead (either the default or given value).
	     *  @type string
	     *  @default No data available in table
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.emptyTable
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "emptyTable": "No data available in table"
	     *        }
	     *      } );
	     *    } );
	     */
					"sEmptyTable": "No data available in table",

					/**
	     * This string gives information to the end user about the information
	     * that is current on display on the page. The following tokens can be
	     * used in the string and will be dynamically replaced as the table
	     * display updates. This tokens can be placed anywhere in the string, or
	     * removed as needed by the language requires:
	     *
	     * * `\_START\_` - Display index of the first record on the current page
	     * * `\_END\_` - Display index of the last record on the current page
	     * * `\_TOTAL\_` - Number of records in the table after filtering
	     * * `\_MAX\_` - Number of records in the table without filtering
	     * * `\_PAGE\_` - Current page number
	     * * `\_PAGES\_` - Total number of pages of data in the table
	     *
	     *  @type string
	     *  @default Showing _START_ to _END_ of _TOTAL_ entries
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.info
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "info": "Showing page _PAGE_ of _PAGES_"
	     *        }
	     *      } );
	     *    } );
	     */
					"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",

					/**
	     * Display information string for when the table is empty. Typically the
	     * format of this string should match `info`.
	     *  @type string
	     *  @default Showing 0 to 0 of 0 entries
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.infoEmpty
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "infoEmpty": "No entries to show"
	     *        }
	     *      } );
	     *    } );
	     */
					"sInfoEmpty": "Showing 0 to 0 of 0 entries",

					/**
	     * When a user filters the information in a table, this string is appended
	     * to the information (`info`) to give an idea of how strong the filtering
	     * is. The variable _MAX_ is dynamically updated.
	     *  @type string
	     *  @default (filtered from _MAX_ total entries)
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.infoFiltered
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "infoFiltered": " - filtering from _MAX_ records"
	     *        }
	     *      } );
	     *    } );
	     */
					"sInfoFiltered": "(filtered from _MAX_ total entries)",

					/**
	     * If can be useful to append extra information to the info string at times,
	     * and this variable does exactly that. This information will be appended to
	     * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
	     * being used) at all times.
	     *  @type string
	     *  @default <i>Empty string</i>
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.infoPostFix
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "infoPostFix": "All records shown are derived from real information."
	     *        }
	     *      } );
	     *    } );
	     */
					"sInfoPostFix": "",

					/**
	     * This decimal place operator is a little different from the other
	     * language options since DataTables doesn't output floating point
	     * numbers, so it won't ever use this for display of a number. Rather,
	     * what this parameter does is modify the sort methods of the table so
	     * that numbers which are in a format which has a character other than
	     * a period (`.`) as a decimal place will be sorted numerically.
	     *
	     * Note that numbers with different decimal places cannot be shown in
	     * the same table and still be sortable, the table must be consistent.
	     * However, multiple different tables on the page can use different
	     * decimal place characters.
	     *  @type string
	     *  @default 
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.decimal
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "decimal": ","
	     *          "thousands": "."
	     *        }
	     *      } );
	     *    } );
	     */
					"sDecimal": "",

					/**
	     * DataTables has a build in number formatter (`formatNumber`) which is
	     * used to format large numbers that are used in the table information.
	     * By default a comma is used, but this can be trivially changed to any
	     * character you wish with this parameter.
	     *  @type string
	     *  @default ,
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.thousands
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "thousands": "'"
	     *        }
	     *      } );
	     *    } );
	     */
					"sThousands": ",",

					/**
	     * Detail the action that will be taken when the drop down menu for the
	     * pagination length option is changed. The '_MENU_' variable is replaced
	     * with a default select list of 10, 25, 50 and 100, and can be replaced
	     * with a custom select box if required.
	     *  @type string
	     *  @default Show _MENU_ entries
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.lengthMenu
	     *
	     *  @example
	     *    // Language change only
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "lengthMenu": "Display _MENU_ records"
	     *        }
	     *      } );
	     *    } );
	     *
	     *  @example
	     *    // Language and options change
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "lengthMenu": 'Display <select>'+
	     *            '<option value="10">10</option>'+
	     *            '<option value="20">20</option>'+
	     *            '<option value="30">30</option>'+
	     *            '<option value="40">40</option>'+
	     *            '<option value="50">50</option>'+
	     *            '<option value="-1">All</option>'+
	     *            '</select> records'
	     *        }
	     *      } );
	     *    } );
	     */
					"sLengthMenu": "Show _MENU_ entries",

					/**
	     * When using Ajax sourced data and during the first draw when DataTables is
	     * gathering the data, this message is shown in an empty row in the table to
	     * indicate to the end user the the data is being loaded. Note that this
	     * parameter is not used when loading data by server-side processing, just
	     * Ajax sourced data with client-side processing.
	     *  @type string
	     *  @default Loading...
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.loadingRecords
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "loadingRecords": "Please wait - loading..."
	     *        }
	     *      } );
	     *    } );
	     */
					"sLoadingRecords": "Loading...",

					/**
	     * Text which is displayed when the table is processing a user action
	     * (usually a sort command or similar).
	     *  @type string
	     *  @default Processing...
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.processing
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "processing": "DataTables is currently busy"
	     *        }
	     *      } );
	     *    } );
	     */
					"sProcessing": "Processing...",

					/**
	     * Details the actions that will be taken when the user types into the
	     * filtering input text box. The variable "_INPUT_", if used in the string,
	     * is replaced with the HTML text box for the filtering input allowing
	     * control over where it appears in the string. If "_INPUT_" is not given
	     * then the input box is appended to the string automatically.
	     *  @type string
	     *  @default Search:
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.search
	     *
	     *  @example
	     *    // Input text box will be appended at the end automatically
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "search": "Filter records:"
	     *        }
	     *      } );
	     *    } );
	     *
	     *  @example
	     *    // Specify where the filter should appear
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "search": "Apply filter _INPUT_ to table"
	     *        }
	     *      } );
	     *    } );
	     */
					"sSearch": "Search:",

					/**
	     * Assign a `placeholder` attribute to the search `input` element
	     *  @type string
	     *  @default 
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.searchPlaceholder
	     */
					"sSearchPlaceholder": "",

					/**
	     * All of the language information can be stored in a file on the
	     * server-side, which DataTables will look up if this parameter is passed.
	     * It must store the URL of the language file, which is in a JSON format,
	     * and the object has the same properties as the oLanguage object in the
	     * initialiser object (i.e. the above parameters). Please refer to one of
	     * the example language files to see how this works in action.
	     *  @type string
	     *  @default <i>Empty string - i.e. disabled</i>
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.url
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
	     *        }
	     *      } );
	     *    } );
	     */
					"sUrl": "",

					/**
	     * Text shown inside the table records when the is no information to be
	     * displayed after filtering. `emptyTable` is shown when there is simply no
	     * information in the table at all (regardless of filtering).
	     *  @type string
	     *  @default No matching records found
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.zeroRecords
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "zeroRecords": "No records to display"
	     *        }
	     *      } );
	     *    } );
	     */
					"sZeroRecords": "No matching records found"
				},

				/**
	    * This parameter allows you to have define the global filtering state at
	    * initialisation time. As an object the `search` parameter must be
	    * defined, but all other parameters are optional. When `regex` is true,
	    * the search string will be treated as a regular expression, when false
	    * (default) it will be treated as a straight string. When `smart`
	    * DataTables will use it's smart filtering methods (to word match at
	    * any point in the data), when false this will not be done.
	    *  @namespace
	    *  @extends DataTable.models.oSearch
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.search
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "search": {"search": "Initial search"}
	    *      } );
	    *    } )
	    */
				"oSearch": $.extend({}, DataTable.models.oSearch),

				/**
	    * __Deprecated__ The functionality provided by this parameter has now been
	    * superseded by that provided through `ajax`, which should be used instead.
	    *
	    * By default DataTables will look for the property `data` (or `aaData` for
	    * compatibility with DataTables 1.9-) when obtaining data from an Ajax
	    * source or for server-side processing - this parameter allows that
	    * property to be changed. You can use Javascript dotted object notation to
	    * get a data source for multiple levels of nesting.
	    *  @type string
	    *  @default data
	    *
	    *  @dtopt Options
	    *  @dtopt Server-side
	    *  @name DataTable.defaults.ajaxDataProp
	    *
	    *  @deprecated 1.10. Please use `ajax` for this functionality now.
	    */
				"sAjaxDataProp": "data",

				/**
	    * __Deprecated__ The functionality provided by this parameter has now been
	    * superseded by that provided through `ajax`, which should be used instead.
	    *
	    * You can instruct DataTables to load data from an external
	    * source using this parameter (use aData if you want to pass data in you
	    * already have). Simply provide a url a JSON object can be obtained from.
	    *  @type string
	    *  @default null
	    *
	    *  @dtopt Options
	    *  @dtopt Server-side
	    *  @name DataTable.defaults.ajaxSource
	    *
	    *  @deprecated 1.10. Please use `ajax` for this functionality now.
	    */
				"sAjaxSource": null,

				/**
	    * This initialisation variable allows you to specify exactly where in the
	    * DOM you want DataTables to inject the various controls it adds to the page
	    * (for example you might want the pagination controls at the top of the
	    * table). DIV elements (with or without a custom class) can also be added to
	    * aid styling. The follow syntax is used:
	    *   <ul>
	    *     <li>The following options are allowed:
	    *       <ul>
	    *         <li>'l' - Length changing</li>
	    *         <li>'f' - Filtering input</li>
	    *         <li>'t' - The table!</li>
	    *         <li>'i' - Information</li>
	    *         <li>'p' - Pagination</li>
	    *         <li>'r' - pRocessing</li>
	    *       </ul>
	    *     </li>
	    *     <li>The following constants are allowed:
	    *       <ul>
	    *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
	    *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
	    *       </ul>
	    *     </li>
	    *     <li>The following syntax is expected:
	    *       <ul>
	    *         <li>'&lt;' and '&gt;' - div elements</li>
	    *         <li>'&lt;"class" and '&gt;' - div with a class</li>
	    *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
	    *       </ul>
	    *     </li>
	    *     <li>Examples:
	    *       <ul>
	    *         <li>'&lt;"wrapper"flipt&gt;'</li>
	    *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
	    *       </ul>
	    *     </li>
	    *   </ul>
	    *  @type string
	    *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
	    *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.dom
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
	    *      } );
	    *    } );
	    */
				"sDom": "lfrtip",

				/**
	    * Search delay option. This will throttle full table searches that use the
	    * DataTables provided search input element (it does not effect calls to
	    * `dt-api search()`, providing a delay before the search is made.
	    *  @type integer
	    *  @default 0
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.searchDelay
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "searchDelay": 200
	    *      } );
	    *    } )
	    */
				"searchDelay": null,

				/**
	    * DataTables features four different built-in options for the buttons to
	    * display for pagination control:
	    *
	    * * `simple` - 'Previous' and 'Next' buttons only
	    * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
	    * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
	    * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
	    *   page numbers
	    *  
	    * Further methods can be added using {@link DataTable.ext.oPagination}.
	    *  @type string
	    *  @default simple_numbers
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.pagingType
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "pagingType": "full_numbers"
	    *      } );
	    *    } )
	    */
				"sPaginationType": "simple_numbers",

				/**
	    * Enable horizontal scrolling. When a table is too wide to fit into a
	    * certain layout, or you have a large number of columns in the table, you
	    * can enable x-scrolling to show the table in a viewport, which can be
	    * scrolled. This property can be `true` which will allow the table to
	    * scroll horizontally when needed, or any CSS unit, or a number (in which
	    * case it will be treated as a pixel measurement). Setting as simply `true`
	    * is recommended.
	    *  @type boolean|string
	    *  @default <i>blank string - i.e. disabled</i>
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.scrollX
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "scrollX": true,
	    *        "scrollCollapse": true
	    *      } );
	    *    } );
	    */
				"sScrollX": "",

				/**
	    * This property can be used to force a DataTable to use more width than it
	    * might otherwise do when x-scrolling is enabled. For example if you have a
	    * table which requires to be well spaced, this parameter is useful for
	    * "over-sizing" the table, and thus forcing scrolling. This property can by
	    * any CSS unit, or a number (in which case it will be treated as a pixel
	    * measurement).
	    *  @type string
	    *  @default <i>blank string - i.e. disabled</i>
	    *
	    *  @dtopt Options
	    *  @name DataTable.defaults.scrollXInner
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "scrollX": "100%",
	    *        "scrollXInner": "110%"
	    *      } );
	    *    } );
	    */
				"sScrollXInner": "",

				/**
	    * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
	    * to the given height, and enable scrolling for any data which overflows the
	    * current viewport. This can be used as an alternative to paging to display
	    * a lot of data in a small area (although paging and scrolling can both be
	    * enabled at the same time). This property can be any CSS unit, or a number
	    * (in which case it will be treated as a pixel measurement).
	    *  @type string
	    *  @default <i>blank string - i.e. disabled</i>
	    *
	    *  @dtopt Features
	    *  @name DataTable.defaults.scrollY
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "scrollY": "200px",
	    *        "paginate": false
	    *      } );
	    *    } );
	    */
				"sScrollY": "",

				/**
	    * __Deprecated__ The functionality provided by this parameter has now been
	    * superseded by that provided through `ajax`, which should be used instead.
	    *
	    * Set the HTTP method that is used to make the Ajax call for server-side
	    * processing or Ajax sourced data.
	    *  @type string
	    *  @default GET
	    *
	    *  @dtopt Options
	    *  @dtopt Server-side
	    *  @name DataTable.defaults.serverMethod
	    *
	    *  @deprecated 1.10. Please use `ajax` for this functionality now.
	    */
				"sServerMethod": "GET",

				/**
	    * DataTables makes use of renderers when displaying HTML elements for
	    * a table. These renderers can be added or modified by plug-ins to
	    * generate suitable mark-up for a site. For example the Bootstrap
	    * integration plug-in for DataTables uses a paging button renderer to
	    * display pagination buttons in the mark-up required by Bootstrap.
	    *
	    * For further information about the renderers available see
	    * DataTable.ext.renderer
	    *  @type string|object
	    *  @default null
	    *
	    *  @name DataTable.defaults.renderer
	    *
	    */
				"renderer": null
			};

			_fnHungarianMap(DataTable.defaults);

			/*
	   * Developer note - See note in model.defaults.js about the use of Hungarian
	   * notation and camel case.
	   */

			/**
	   * Column options that can be given to DataTables at initialisation time.
	   *  @namespace
	   */
			DataTable.defaults.column = {
				/**
	    * Define which column(s) an order will occur on for this column. This
	    * allows a column's ordering to take multiple columns into account when
	    * doing a sort or use the data from a different column. For example first
	    * name / last name columns make sense to do a multi-column sort over the
	    * two columns.
	    *  @type array|int
	    *  @default null <i>Takes the value of the column index automatically</i>
	    *
	    *  @name DataTable.defaults.column.orderData
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
	    *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
	    *          { "orderData": 2, "targets": [ 2 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "orderData": [ 0, 1 ] },
	    *          { "orderData": [ 1, 0 ] },
	    *          { "orderData": 2 },
	    *          null,
	    *          null
	    *        ]
	    *      } );
	    *    } );
	    */
				"aDataSort": null,
				"iDataSort": -1,

				/**
	    * You can control the default ordering direction, and even alter the
	    * behaviour of the sort handler (i.e. only allow ascending ordering etc)
	    * using this parameter.
	    *  @type array
	    *  @default [ 'asc', 'desc' ]
	    *
	    *  @name DataTable.defaults.column.orderSequence
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
	    *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
	    *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          null,
	    *          { "orderSequence": [ "asc" ] },
	    *          { "orderSequence": [ "desc", "asc", "asc" ] },
	    *          { "orderSequence": [ "desc" ] },
	    *          null
	    *        ]
	    *      } );
	    *    } );
	    */
				"asSorting": ['asc', 'desc'],

				/**
	    * Enable or disable filtering on the data in this column.
	    *  @type boolean
	    *  @default true
	    *
	    *  @name DataTable.defaults.column.searchable
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "searchable": false, "targets": [ 0 ] }
	    *        ] } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "searchable": false },
	    *          null,
	    *          null,
	    *          null,
	    *          null
	    *        ] } );
	    *    } );
	    */
				"bSearchable": true,

				/**
	    * Enable or disable ordering on this column.
	    *  @type boolean
	    *  @default true
	    *
	    *  @name DataTable.defaults.column.orderable
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "orderable": false, "targets": [ 0 ] }
	    *        ] } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "orderable": false },
	    *          null,
	    *          null,
	    *          null,
	    *          null
	    *        ] } );
	    *    } );
	    */
				"bSortable": true,

				/**
	    * Enable or disable the display of this column.
	    *  @type boolean
	    *  @default true
	    *
	    *  @name DataTable.defaults.column.visible
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "visible": false, "targets": [ 0 ] }
	    *        ] } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "visible": false },
	    *          null,
	    *          null,
	    *          null,
	    *          null
	    *        ] } );
	    *    } );
	    */
				"bVisible": true,

				/**
	    * Developer definable function that is called whenever a cell is created (Ajax source,
	    * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	    * allowing you to modify the DOM element (add background colour for example) when the
	    * element is available.
	    *  @type function
	    *  @param {element} td The TD node that has been created
	    *  @param {*} cellData The Data for the cell
	    *  @param {array|object} rowData The data for the whole row
	    *  @param {int} row The row index for the aoData data store
	    *  @param {int} col The column index for aoColumns
	    *
	    *  @name DataTable.defaults.column.createdCell
	    *  @dtopt Columns
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [3],
	    *          "createdCell": function (td, cellData, rowData, row, col) {
	    *            if ( cellData == "1.7" ) {
	    *              $(td).css('color', 'blue')
	    *            }
	    *          }
	    *        } ]
	    *      });
	    *    } );
	    */
				"fnCreatedCell": null,

				/**
	    * This parameter has been replaced by `data` in DataTables to ensure naming
	    * consistency. `dataProp` can still be used, as there is backwards
	    * compatibility in DataTables for this option, but it is strongly
	    * recommended that you use `data` in preference to `dataProp`.
	    *  @name DataTable.defaults.column.dataProp
	    */

				/**
	    * This property can be used to read data from any data source property,
	    * including deeply nested objects / properties. `data` can be given in a
	    * number of different ways which effect its behaviour:
	    *
	    * * `integer` - treated as an array index for the data source. This is the
	    *   default that DataTables uses (incrementally increased for each column).
	    * * `string` - read an object property from the data source. There are
	    *   three 'special' options that can be used in the string to alter how
	    *   DataTables reads the data from the source object:
	    *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	    *      Javascript to read from nested objects, so to can the options
	    *      specified in `data`. For example: `browser.version` or
	    *      `browser.name`. If your object parameter name contains a period, use
	    *      `\\` to escape it - i.e. `first\\.name`.
	    *    * `[]` - Array notation. DataTables can automatically combine data
	    *      from and array source, joining the data with the characters provided
	    *      between the two brackets. For example: `name[, ]` would provide a
	    *      comma-space separated list from the source array. If no characters
	    *      are provided between the brackets, the original array source is
	    *      returned.
	    *    * `()` - Function notation. Adding `()` to the end of a parameter will
	    *      execute a function of the name given. For example: `browser()` for a
	    *      simple function on the data source, `browser.version()` for a
	    *      function in a nested property or even `browser().version` to get an
	    *      object property if the function called returns an object. Note that
	    *      function notation is recommended for use in `render` rather than
	    *      `data` as it is much simpler to use as a renderer.
	    * * `null` - use the original data source for the row rather than plucking
	    *   data directly from it. This action has effects on two other
	    *   initialisation options:
	    *    * `defaultContent` - When null is given as the `data` option and
	    *      `defaultContent` is specified for the column, the value defined by
	    *      `defaultContent` will be used for the cell.
	    *    * `render` - When null is used for the `data` option and the `render`
	    *      option is specified for the column, the whole data source for the
	    *      row is used for the renderer.
	    * * `function` - the function given will be executed whenever DataTables
	    *   needs to set or get the data for a cell in the column. The function
	    *   takes three parameters:
	    *    * Parameters:
	    *      * `{array|object}` The data source for the row
	    *      * `{string}` The type call data requested - this will be 'set' when
	    *        setting data or 'filter', 'display', 'type', 'sort' or undefined
	    *        when gathering data. Note that when `undefined` is given for the
	    *        type DataTables expects to get the raw data for the object back<
	    *      * `{*}` Data to set when the second parameter is 'set'.
	    *    * Return:
	    *      * The return value from the function is not required when 'set' is
	    *        the type of call, but otherwise the return is what will be used
	    *        for the data requested.
	    *
	    * Note that `data` is a getter and setter option. If you just require
	    * formatting of data for output, you will likely want to use `render` which
	    * is simply a getter and thus simpler to use.
	    *
	    * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
	    * name change reflects the flexibility of this property and is consistent
	    * with the naming of mRender. If 'mDataProp' is given, then it will still
	    * be used by DataTables, as it automatically maps the old name to the new
	    * if required.
	    *
	    *  @type string|int|function|null
	    *  @default null <i>Use automatically calculated column index</i>
	    *
	    *  @name DataTable.defaults.column.data
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Read table data from objects
	    *    // JSON structure for each row:
	    *    //   {
	    *    //      "engine": {value},
	    *    //      "browser": {value},
	    *    //      "platform": {value},
	    *    //      "version": {value},
	    *    //      "grade": {value}
	    *    //   }
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "ajaxSource": "sources/objects.txt",
	    *        "columns": [
	    *          { "data": "engine" },
	    *          { "data": "browser" },
	    *          { "data": "platform" },
	    *          { "data": "version" },
	    *          { "data": "grade" }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Read information from deeply nested objects
	    *    // JSON structure for each row:
	    *    //   {
	    *    //      "engine": {value},
	    *    //      "browser": {value},
	    *    //      "platform": {
	    *    //         "inner": {value}
	    *    //      },
	    *    //      "details": [
	    *    //         {value}, {value}
	    *    //      ]
	    *    //   }
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "ajaxSource": "sources/deep.txt",
	    *        "columns": [
	    *          { "data": "engine" },
	    *          { "data": "browser" },
	    *          { "data": "platform.inner" },
	    *          { "data": "platform.details.0" },
	    *          { "data": "platform.details.1" }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `data` as a function to provide different information for
	    *    // sorting, filtering and display. In this case, currency (price)
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [ 0 ],
	    *          "data": function ( source, type, val ) {
	    *            if (type === 'set') {
	    *              source.price = val;
	    *              // Store the computed dislay and filter values for efficiency
	    *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
	    *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
	    *              return;
	    *            }
	    *            else if (type === 'display') {
	    *              return source.price_display;
	    *            }
	    *            else if (type === 'filter') {
	    *              return source.price_filter;
	    *            }
	    *            // 'sort', 'type' and undefined all just use the integer
	    *            return source.price;
	    *          }
	    *        } ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using default content
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [ 0 ],
	    *          "data": null,
	    *          "defaultContent": "Click to edit"
	    *        } ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using array notation - outputting a list from an array
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [ 0 ],
	    *          "data": "name[, ]"
	    *        } ]
	    *      } );
	    *    } );
	    *
	    */
				"mData": null,

				/**
	    * This property is the rendering partner to `data` and it is suggested that
	    * when you want to manipulate data for display (including filtering,
	    * sorting etc) without altering the underlying data for the table, use this
	    * property. `render` can be considered to be the the read only companion to
	    * `data` which is read / write (then as such more complex). Like `data`
	    * this option can be given in a number of different ways to effect its
	    * behaviour:
	    *
	    * * `integer` - treated as an array index for the data source. This is the
	    *   default that DataTables uses (incrementally increased for each column).
	    * * `string` - read an object property from the data source. There are
	    *   three 'special' options that can be used in the string to alter how
	    *   DataTables reads the data from the source object:
	    *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	    *      Javascript to read from nested objects, so to can the options
	    *      specified in `data`. For example: `browser.version` or
	    *      `browser.name`. If your object parameter name contains a period, use
	    *      `\\` to escape it - i.e. `first\\.name`.
	    *    * `[]` - Array notation. DataTables can automatically combine data
	    *      from and array source, joining the data with the characters provided
	    *      between the two brackets. For example: `name[, ]` would provide a
	    *      comma-space separated list from the source array. If no characters
	    *      are provided between the brackets, the original array source is
	    *      returned.
	    *    * `()` - Function notation. Adding `()` to the end of a parameter will
	    *      execute a function of the name given. For example: `browser()` for a
	    *      simple function on the data source, `browser.version()` for a
	    *      function in a nested property or even `browser().version` to get an
	    *      object property if the function called returns an object.
	    * * `object` - use different data for the different data types requested by
	    *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
	    *   of the object is the data type the property refers to and the value can
	    *   defined using an integer, string or function using the same rules as
	    *   `render` normally does. Note that an `_` option _must_ be specified.
	    *   This is the default value to use if you haven't specified a value for
	    *   the data type requested by DataTables.
	    * * `function` - the function given will be executed whenever DataTables
	    *   needs to set or get the data for a cell in the column. The function
	    *   takes three parameters:
	    *    * Parameters:
	    *      * {array|object} The data source for the row (based on `data`)
	    *      * {string} The type call data requested - this will be 'filter',
	    *        'display', 'type' or 'sort'.
	    *      * {array|object} The full data source for the row (not based on
	    *        `data`)
	    *    * Return:
	    *      * The return value from the function is what will be used for the
	    *        data requested.
	    *
	    *  @type string|int|function|object|null
	    *  @default null Use the data source value.
	    *
	    *  @name DataTable.defaults.column.render
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Create a comma separated list from an array of objects
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "ajaxSource": "sources/deep.txt",
	    *        "columns": [
	    *          { "data": "engine" },
	    *          { "data": "browser" },
	    *          {
	    *            "data": "platform",
	    *            "render": "[, ].name"
	    *          }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Execute a function to obtain data
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [ 0 ],
	    *          "data": null, // Use the full data source object for the renderer's source
	    *          "render": "browserName()"
	    *        } ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // As an object, extracting different data for the different types
	    *    // This would be used with a data source such as:
	    *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
	    *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
	    *    // (which has both forms) is used for filtering for if a user inputs either format, while
	    *    // the formatted phone number is the one that is shown in the table.
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [ 0 ],
	    *          "data": null, // Use the full data source object for the renderer's source
	    *          "render": {
	    *            "_": "phone",
	    *            "filter": "phone_filter",
	    *            "display": "phone_display"
	    *          }
	    *        } ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Use as a function to create a link from the data source
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [ 0 ],
	    *          "data": "download_link",
	    *          "render": function ( data, type, full ) {
	    *            return '<a href="'+data+'">Download</a>';
	    *          }
	    *        } ]
	    *      } );
	    *    } );
	    */
				"mRender": null,

				/**
	    * Change the cell type created for the column - either TD cells or TH cells. This
	    * can be useful as TH cells have semantic meaning in the table body, allowing them
	    * to act as a header for a row (you may wish to add scope='row' to the TH elements).
	    *  @type string
	    *  @default td
	    *
	    *  @name DataTable.defaults.column.cellType
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Make the first column use TH cells
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [ {
	    *          "targets": [ 0 ],
	    *          "cellType": "th"
	    *        } ]
	    *      } );
	    *    } );
	    */
				"sCellType": "td",

				/**
	    * Class to give to each cell in this column.
	    *  @type string
	    *  @default <i>Empty string</i>
	    *
	    *  @name DataTable.defaults.column.class
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "class": "my_class", "targets": [ 0 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "class": "my_class" },
	    *          null,
	    *          null,
	    *          null,
	    *          null
	    *        ]
	    *      } );
	    *    } );
	    */
				"sClass": "",

				/**
	    * When DataTables calculates the column widths to assign to each column,
	    * it finds the longest string in each column and then constructs a
	    * temporary table and reads the widths from that. The problem with this
	    * is that "mmm" is much wider then "iiii", but the latter is a longer
	    * string - thus the calculation can go wrong (doing it properly and putting
	    * it into an DOM object and measuring that is horribly(!) slow). Thus as
	    * a "work around" we provide this option. It will append its value to the
	    * text that is found to be the longest string for the column - i.e. padding.
	    * Generally you shouldn't need this!
	    *  @type string
	    *  @default <i>Empty string<i>
	    *
	    *  @name DataTable.defaults.column.contentPadding
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          null,
	    *          null,
	    *          null,
	    *          {
	    *            "contentPadding": "mmm"
	    *          }
	    *        ]
	    *      } );
	    *    } );
	    */
				"sContentPadding": "",

				/**
	    * Allows a default value to be given for a column's data, and will be used
	    * whenever a null data source is encountered (this can be because `data`
	    * is set to null, or because the data source itself is null).
	    *  @type string
	    *  @default null
	    *
	    *  @name DataTable.defaults.column.defaultContent
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          {
	    *            "data": null,
	    *            "defaultContent": "Edit",
	    *            "targets": [ -1 ]
	    *          }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          null,
	    *          null,
	    *          null,
	    *          {
	    *            "data": null,
	    *            "defaultContent": "Edit"
	    *          }
	    *        ]
	    *      } );
	    *    } );
	    */
				"sDefaultContent": null,

				/**
	    * This parameter is only used in DataTables' server-side processing. It can
	    * be exceptionally useful to know what columns are being displayed on the
	    * client side, and to map these to database fields. When defined, the names
	    * also allow DataTables to reorder information from the server if it comes
	    * back in an unexpected order (i.e. if you switch your columns around on the
	    * client-side, your server-side code does not also need updating).
	    *  @type string
	    *  @default <i>Empty string</i>
	    *
	    *  @name DataTable.defaults.column.name
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "name": "engine", "targets": [ 0 ] },
	    *          { "name": "browser", "targets": [ 1 ] },
	    *          { "name": "platform", "targets": [ 2 ] },
	    *          { "name": "version", "targets": [ 3 ] },
	    *          { "name": "grade", "targets": [ 4 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "name": "engine" },
	    *          { "name": "browser" },
	    *          { "name": "platform" },
	    *          { "name": "version" },
	    *          { "name": "grade" }
	    *        ]
	    *      } );
	    *    } );
	    */
				"sName": "",

				/**
	    * Defines a data source type for the ordering which can be used to read
	    * real-time information from the table (updating the internally cached
	    * version) prior to ordering. This allows ordering to occur on user
	    * editable elements such as form inputs.
	    *  @type string
	    *  @default std
	    *
	    *  @name DataTable.defaults.column.orderDataType
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
	    *          { "type": "numeric", "targets": [ 3 ] },
	    *          { "orderDataType": "dom-select", "targets": [ 4 ] },
	    *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          null,
	    *          null,
	    *          { "orderDataType": "dom-text" },
	    *          { "orderDataType": "dom-text", "type": "numeric" },
	    *          { "orderDataType": "dom-select" },
	    *          { "orderDataType": "dom-checkbox" }
	    *        ]
	    *      } );
	    *    } );
	    */
				"sSortDataType": "std",

				/**
	    * The title of this column.
	    *  @type string
	    *  @default null <i>Derived from the 'TH' value for this column in the
	    *    original HTML table.</i>
	    *
	    *  @name DataTable.defaults.column.title
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "title": "My column title", "targets": [ 0 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "title": "My column title" },
	    *          null,
	    *          null,
	    *          null,
	    *          null
	    *        ]
	    *      } );
	    *    } );
	    */
				"sTitle": null,

				/**
	    * The type allows you to specify how the data for this column will be
	    * ordered. Four types (string, numeric, date and html (which will strip
	    * HTML tags before ordering)) are currently available. Note that only date
	    * formats understood by Javascript's Date() object will be accepted as type
	    * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
	    * 'numeric', 'date' or 'html' (by default). Further types can be adding
	    * through plug-ins.
	    *  @type string
	    *  @default null <i>Auto-detected from raw data</i>
	    *
	    *  @name DataTable.defaults.column.type
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "type": "html", "targets": [ 0 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "type": "html" },
	    *          null,
	    *          null,
	    *          null,
	    *          null
	    *        ]
	    *      } );
	    *    } );
	    */
				"sType": null,

				/**
	    * Defining the width of the column, this parameter may take any CSS value
	    * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
	    * been given a specific width through this interface ensuring that the table
	    * remains readable.
	    *  @type string
	    *  @default null <i>Automatic</i>
	    *
	    *  @name DataTable.defaults.column.width
	    *  @dtopt Columns
	    *
	    *  @example
	    *    // Using `columnDefs`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columnDefs": [
	    *          { "width": "20%", "targets": [ 0 ] }
	    *        ]
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Using `columns`
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "columns": [
	    *          { "width": "20%" },
	    *          null,
	    *          null,
	    *          null,
	    *          null
	    *        ]
	    *      } );
	    *    } );
	    */
				"sWidth": null
			};

			_fnHungarianMap(DataTable.defaults.column);

			/**
	   * DataTables settings object - this holds all the information needed for a
	   * given table, including configuration, data and current application of the
	   * table options. DataTables does not have a single instance for each DataTable
	   * with the settings attached to that instance, but rather instances of the
	   * DataTable "class" are created on-the-fly as needed (typically by a
	   * $().dataTable() call) and the settings object is then applied to that
	   * instance.
	   *
	   * Note that this object is related to {@link DataTable.defaults} but this
	   * one is the internal data store for DataTables's cache of columns. It should
	   * NOT be manipulated outside of DataTables. Any configuration should be done
	   * through the initialisation options.
	   *  @namespace
	   *  @todo Really should attach the settings object to individual instances so we
	   *    don't need to create new instances on each $().dataTable() call (if the
	   *    table already exists). It would also save passing oSettings around and
	   *    into every single function. However, this is a very significant
	   *    architecture change for DataTables and will almost certainly break
	   *    backwards compatibility with older installations. This is something that
	   *    will be done in 2.0.
	   */
			DataTable.models.oSettings = {
				/**
	    * Primary features of DataTables and their enablement state.
	    *  @namespace
	    */
				"oFeatures": {

					/**
	     * Flag to say if DataTables should automatically try to calculate the
	     * optimum table and columns widths (true) or not (false).
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bAutoWidth": null,

					/**
	     * Delay the creation of TR and TD elements until they are actually
	     * needed by a driven page draw. This can give a significant speed
	     * increase for Ajax source and Javascript source data, but makes no
	     * difference at all fro DOM and server-side processing tables.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bDeferRender": null,

					/**
	     * Enable filtering on the table or not. Note that if this is disabled
	     * then there is no filtering at all on the table, including fnFilter.
	     * To just remove the filtering input use sDom and remove the 'f' option.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bFilter": null,

					/**
	     * Table information element (the 'Showing x of y records' div) enable
	     * flag.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bInfo": null,

					/**
	     * Present a user control allowing the end user to change the page size
	     * when pagination is enabled.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bLengthChange": null,

					/**
	     * Pagination enabled or not. Note that if this is disabled then length
	     * changing must also be disabled.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bPaginate": null,

					/**
	     * Processing indicator enable flag whenever DataTables is enacting a
	     * user request - typically an Ajax request for server-side processing.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bProcessing": null,

					/**
	     * Server-side processing enabled flag - when enabled DataTables will
	     * get all data from the server for every draw - there is no filtering,
	     * sorting or paging done on the client-side.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bServerSide": null,

					/**
	     * Sorting enablement flag.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bSort": null,

					/**
	     * Multi-column sorting
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bSortMulti": null,

					/**
	     * Apply a class to the columns which are being sorted to provide a
	     * visual highlight or not. This can slow things down when enabled since
	     * there is a lot of DOM interaction.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bSortClasses": null,

					/**
	     * State saving enablement flag.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bStateSave": null
				},

				/**
	    * Scrolling settings for a table.
	    *  @namespace
	    */
				"oScroll": {
					/**
	     * When the table is shorter in height than sScrollY, collapse the
	     * table container down to the height of the table (when true).
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type boolean
	     */
					"bCollapse": null,

					/**
	     * Width of the scrollbar for the web-browser's platform. Calculated
	     * during table initialisation.
	     *  @type int
	     *  @default 0
	     */
					"iBarWidth": 0,

					/**
	     * Viewport width for horizontal scrolling. Horizontal scrolling is
	     * disabled if an empty string.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type string
	     */
					"sX": null,

					/**
	     * Width to expand the table to when using x-scrolling. Typically you
	     * should not need to use this.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type string
	     *  @deprecated
	     */
					"sXInner": null,

					/**
	     * Viewport height for vertical scrolling. Vertical scrolling is disabled
	     * if an empty string.
	     * Note that this parameter will be set by the initialisation routine. To
	     * set a default use {@link DataTable.defaults}.
	     *  @type string
	     */
					"sY": null
				},

				/**
	    * Language information for the table.
	    *  @namespace
	    *  @extends DataTable.defaults.oLanguage
	    */
				"oLanguage": {
					/**
	     * Information callback function. See
	     * {@link DataTable.defaults.fnInfoCallback}
	     *  @type function
	     *  @default null
	     */
					"fnInfoCallback": null
				},

				/**
	    * Browser support parameters
	    *  @namespace
	    */
				"oBrowser": {
					/**
	     * Indicate if the browser incorrectly calculates width:100% inside a
	     * scrolling element (IE6/7)
	     *  @type boolean
	     *  @default false
	     */
					"bScrollOversize": false,

					/**
	     * Determine if the vertical scrollbar is on the right or left of the
	     * scrolling container - needed for rtl language layout, although not
	     * all browsers move the scrollbar (Safari).
	     *  @type boolean
	     *  @default false
	     */
					"bScrollbarLeft": false
				},

				"ajax": null,

				/**
	    * Array referencing the nodes which are used for the features. The
	    * parameters of this object match what is allowed by sDom - i.e.
	    *   <ul>
	    *     <li>'l' - Length changing</li>
	    *     <li>'f' - Filtering input</li>
	    *     <li>'t' - The table!</li>
	    *     <li>'i' - Information</li>
	    *     <li>'p' - Pagination</li>
	    *     <li>'r' - pRocessing</li>
	    *   </ul>
	    *  @type array
	    *  @default []
	    */
				"aanFeatures": [],

				/**
	    * Store data information - see {@link DataTable.models.oRow} for detailed
	    * information.
	    *  @type array
	    *  @default []
	    */
				"aoData": [],

				/**
	    * Array of indexes which are in the current display (after filtering etc)
	    *  @type array
	    *  @default []
	    */
				"aiDisplay": [],

				/**
	    * Array of indexes for display - no filtering
	    *  @type array
	    *  @default []
	    */
				"aiDisplayMaster": [],

				/**
	    * Store information about each column that is in use
	    *  @type array
	    *  @default []
	    */
				"aoColumns": [],

				/**
	    * Store information about the table's header
	    *  @type array
	    *  @default []
	    */
				"aoHeader": [],

				/**
	    * Store information about the table's footer
	    *  @type array
	    *  @default []
	    */
				"aoFooter": [],

				/**
	    * Store the applied global search information in case we want to force a
	    * research or compare the old search to a new one.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @namespace
	    *  @extends DataTable.models.oSearch
	    */
				"oPreviousSearch": {},

				/**
	    * Store the applied search for each column - see
	    * {@link DataTable.models.oSearch} for the format that is used for the
	    * filtering information for each column.
	    *  @type array
	    *  @default []
	    */
				"aoPreSearchCols": [],

				/**
	    * Sorting that is applied to the table. Note that the inner arrays are
	    * used in the following manner:
	    * <ul>
	    *   <li>Index 0 - column number</li>
	    *   <li>Index 1 - current sorting direction</li>
	    * </ul>
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type array
	    *  @todo These inner arrays should really be objects
	    */
				"aaSorting": null,

				/**
	    * Sorting that is always applied to the table (i.e. prefixed in front of
	    * aaSorting).
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type array
	    *  @default []
	    */
				"aaSortingFixed": [],

				/**
	    * Classes to use for the striping of a table.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type array
	    *  @default []
	    */
				"asStripeClasses": null,

				/**
	    * If restoring a table - we should restore its striping classes as well
	    *  @type array
	    *  @default []
	    */
				"asDestroyStripes": [],

				/**
	    * If restoring a table - we should restore its width
	    *  @type int
	    *  @default 0
	    */
				"sDestroyWidth": 0,

				/**
	    * Callback functions array for every time a row is inserted (i.e. on a draw).
	    *  @type array
	    *  @default []
	    */
				"aoRowCallback": [],

				/**
	    * Callback functions for the header on each draw.
	    *  @type array
	    *  @default []
	    */
				"aoHeaderCallback": [],

				/**
	    * Callback function for the footer on each draw.
	    *  @type array
	    *  @default []
	    */
				"aoFooterCallback": [],

				/**
	    * Array of callback functions for draw callback functions
	    *  @type array
	    *  @default []
	    */
				"aoDrawCallback": [],

				/**
	    * Array of callback functions for row created function
	    *  @type array
	    *  @default []
	    */
				"aoRowCreatedCallback": [],

				/**
	    * Callback functions for just before the table is redrawn. A return of
	    * false will be used to cancel the draw.
	    *  @type array
	    *  @default []
	    */
				"aoPreDrawCallback": [],

				/**
	    * Callback functions for when the table has been initialised.
	    *  @type array
	    *  @default []
	    */
				"aoInitComplete": [],

				/**
	    * Callbacks for modifying the settings to be stored for state saving, prior to
	    * saving state.
	    *  @type array
	    *  @default []
	    */
				"aoStateSaveParams": [],

				/**
	    * Callbacks for modifying the settings that have been stored for state saving
	    * prior to using the stored values to restore the state.
	    *  @type array
	    *  @default []
	    */
				"aoStateLoadParams": [],

				/**
	    * Callbacks for operating on the settings object once the saved state has been
	    * loaded
	    *  @type array
	    *  @default []
	    */
				"aoStateLoaded": [],

				/**
	    * Cache the table ID for quick access
	    *  @type string
	    *  @default <i>Empty string</i>
	    */
				"sTableId": "",

				/**
	    * The TABLE node for the main table
	    *  @type node
	    *  @default null
	    */
				"nTable": null,

				/**
	    * Permanent ref to the thead element
	    *  @type node
	    *  @default null
	    */
				"nTHead": null,

				/**
	    * Permanent ref to the tfoot element - if it exists
	    *  @type node
	    *  @default null
	    */
				"nTFoot": null,

				/**
	    * Permanent ref to the tbody element
	    *  @type node
	    *  @default null
	    */
				"nTBody": null,

				/**
	    * Cache the wrapper node (contains all DataTables controlled elements)
	    *  @type node
	    *  @default null
	    */
				"nTableWrapper": null,

				/**
	    * Indicate if when using server-side processing the loading of data
	    * should be deferred until the second draw.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    *  @default false
	    */
				"bDeferLoading": false,

				/**
	    * Indicate if all required information has been read in
	    *  @type boolean
	    *  @default false
	    */
				"bInitialised": false,

				/**
	    * Information about open rows. Each object in the array has the parameters
	    * 'nTr' and 'nParent'
	    *  @type array
	    *  @default []
	    */
				"aoOpenRows": [],

				/**
	    * Dictate the positioning of DataTables' control elements - see
	    * {@link DataTable.model.oInit.sDom}.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    *  @default null
	    */
				"sDom": null,

				/**
	    * Search delay (in mS)
	    *  @type integer
	    *  @default null
	    */
				"searchDelay": null,

				/**
	    * Which type of pagination should be used.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    *  @default two_button
	    */
				"sPaginationType": "two_button",

				/**
	    * The state duration (for `stateSave`) in seconds.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type int
	    *  @default 0
	    */
				"iStateDuration": 0,

				/**
	    * Array of callback functions for state saving. Each array element is an
	    * object with the following parameters:
	    *   <ul>
	    *     <li>function:fn - function to call. Takes two parameters, oSettings
	    *       and the JSON string to save that has been thus far created. Returns
	    *       a JSON string to be inserted into a json object
	    *       (i.e. '"param": [ 0, 1, 2]')</li>
	    *     <li>string:sName - name of callback</li>
	    *   </ul>
	    *  @type array
	    *  @default []
	    */
				"aoStateSave": [],

				/**
	    * Array of callback functions for state loading. Each array element is an
	    * object with the following parameters:
	    *   <ul>
	    *     <li>function:fn - function to call. Takes two parameters, oSettings
	    *       and the object stored. May return false to cancel state loading</li>
	    *     <li>string:sName - name of callback</li>
	    *   </ul>
	    *  @type array
	    *  @default []
	    */
				"aoStateLoad": [],

				/**
	    * State that was saved. Useful for back reference
	    *  @type object
	    *  @default null
	    */
				"oSavedState": null,

				/**
	    * State that was loaded. Useful for back reference
	    *  @type object
	    *  @default null
	    */
				"oLoadedState": null,

				/**
	    * Source url for AJAX data for the table.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    *  @default null
	    */
				"sAjaxSource": null,

				/**
	    * Property from a given object from which to read the table data from. This
	    * can be an empty string (when not server-side processing), in which case
	    * it is  assumed an an array is given directly.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    */
				"sAjaxDataProp": null,

				/**
	    * Note if draw should be blocked while getting data
	    *  @type boolean
	    *  @default true
	    */
				"bAjaxDataGet": true,

				/**
	    * The last jQuery XHR object that was used for server-side data gathering.
	    * This can be used for working with the XHR information in one of the
	    * callbacks
	    *  @type object
	    *  @default null
	    */
				"jqXHR": null,

				/**
	    * JSON returned from the server in the last Ajax request
	    *  @type object
	    *  @default undefined
	    */
				"json": undefined,

				/**
	    * Data submitted as part of the last Ajax request
	    *  @type object
	    *  @default undefined
	    */
				"oAjaxData": undefined,

				/**
	    * Function to get the server-side data.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type function
	    */
				"fnServerData": null,

				/**
	    * Functions which are called prior to sending an Ajax request so extra
	    * parameters can easily be sent to the server
	    *  @type array
	    *  @default []
	    */
				"aoServerParams": [],

				/**
	    * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
	    * required).
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    */
				"sServerMethod": null,

				/**
	    * Format numbers for display.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type function
	    */
				"fnFormatNumber": null,

				/**
	    * List of options that can be used for the user selectable length menu.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type array
	    *  @default []
	    */
				"aLengthMenu": null,

				/**
	    * Counter for the draws that the table does. Also used as a tracker for
	    * server-side processing
	    *  @type int
	    *  @default 0
	    */
				"iDraw": 0,

				/**
	    * Indicate if a redraw is being done - useful for Ajax
	    *  @type boolean
	    *  @default false
	    */
				"bDrawing": false,

				/**
	    * Draw index (iDraw) of the last error when parsing the returned data
	    *  @type int
	    *  @default -1
	    */
				"iDrawError": -1,

				/**
	    * Paging display length
	    *  @type int
	    *  @default 10
	    */
				"_iDisplayLength": 10,

				/**
	    * Paging start point - aiDisplay index
	    *  @type int
	    *  @default 0
	    */
				"_iDisplayStart": 0,

				/**
	    * Server-side processing - number of records in the result set
	    * (i.e. before filtering), Use fnRecordsTotal rather than
	    * this property to get the value of the number of records, regardless of
	    * the server-side processing setting.
	    *  @type int
	    *  @default 0
	    *  @private
	    */
				"_iRecordsTotal": 0,

				/**
	    * Server-side processing - number of records in the current display set
	    * (i.e. after filtering). Use fnRecordsDisplay rather than
	    * this property to get the value of the number of records, regardless of
	    * the server-side processing setting.
	    *  @type boolean
	    *  @default 0
	    *  @private
	    */
				"_iRecordsDisplay": 0,

				/**
	    * Flag to indicate if jQuery UI marking and classes should be used.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bJUI": null,

				/**
	    * The classes to use for the table
	    *  @type object
	    *  @default {}
	    */
				"oClasses": {},

				/**
	    * Flag attached to the settings object so you can check in the draw
	    * callback if filtering has been done in the draw. Deprecated in favour of
	    * events.
	    *  @type boolean
	    *  @default false
	    *  @deprecated
	    */
				"bFiltered": false,

				/**
	    * Flag attached to the settings object so you can check in the draw
	    * callback if sorting has been done in the draw. Deprecated in favour of
	    * events.
	    *  @type boolean
	    *  @default false
	    *  @deprecated
	    */
				"bSorted": false,

				/**
	    * Indicate that if multiple rows are in the header and there is more than
	    * one unique cell per column, if the top one (true) or bottom one (false)
	    * should be used for sorting / title by DataTables.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bSortCellsTop": null,

				/**
	    * Initialisation object that is used for the table
	    *  @type object
	    *  @default null
	    */
				"oInit": null,

				/**
	    * Destroy callback functions - for plug-ins to attach themselves to the
	    * destroy so they can clean up markup and events.
	    *  @type array
	    *  @default []
	    */
				"aoDestroyCallback": [],

				/**
	    * Get the number of records in the current record set, before filtering
	    *  @type function
	    */
				"fnRecordsTotal": function fnRecordsTotal() {
					return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
				},

				/**
	    * Get the number of records in the current record set, after filtering
	    *  @type function
	    */
				"fnRecordsDisplay": function fnRecordsDisplay() {
					return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
				},

				/**
	    * Get the display end point - aiDisplay index
	    *  @type function
	    */
				"fnDisplayEnd": function fnDisplayEnd() {
					var len = this._iDisplayLength,
					    start = this._iDisplayStart,
					    calc = start + len,
					    records = this.aiDisplay.length,
					    features = this.oFeatures,
					    paginate = features.bPaginate;

					if (features.bServerSide) {
						return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);
					} else {
						return !paginate || calc > records || len === -1 ? records : calc;
					}
				},

				/**
	    * The DataTables object for this table
	    *  @type object
	    *  @default null
	    */
				"oInstance": null,

				/**
	    * Unique identifier for each instance of the DataTables object. If there
	    * is an ID on the table node, then it takes that value, otherwise an
	    * incrementing internal counter is used.
	    *  @type string
	    *  @default null
	    */
				"sInstance": null,

				/**
	    * tabindex attribute value that is added to DataTables control elements, allowing
	    * keyboard navigation of the table and its controls.
	    */
				"iTabIndex": 0,

				/**
	    * DIV container for the footer scrolling table if scrolling
	    */
				"nScrollHead": null,

				/**
	    * DIV container for the footer scrolling table if scrolling
	    */
				"nScrollFoot": null,

				/**
	    * Last applied sort
	    *  @type array
	    *  @default []
	    */
				"aLastSort": [],

				/**
	    * Stored plug-in instances
	    *  @type object
	    *  @default {}
	    */
				"oPlugins": {}
			};

			/**
	   * Extension object for DataTables that is used to provide all extension
	   * options.
	   *
	   * Note that the `DataTable.ext` object is available through
	   * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	   * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	   *  @namespace
	   *  @extends DataTable.models.ext
	   */

			/**
	   * DataTables extensions
	   * 
	   * This namespace acts as a collection area for plug-ins that can be used to
	   * extend DataTables capabilities. Indeed many of the build in methods
	   * use this method to provide their own capabilities (sorting methods for
	   * example).
	   *
	   * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	   * reasons
	   *
	   *  @namespace
	   */
			DataTable.ext = _ext = {
				/**
	    * Buttons. For use with the Buttons extension for DataTables. This is
	    * defined here so other extensions can define buttons regardless of load
	    * order. It is _not_ used by DataTables core.
	    *
	    *  @type object
	    *  @default {}
	    */
				buttons: {},

				/**
	    * Element class names
	    *
	    *  @type object
	    *  @default {}
	    */
				classes: {},

				/**
	    * Error reporting.
	    * 
	    * How should DataTables report an error. Can take the value 'alert',
	    * 'throw', 'none' or a function.
	    *
	    *  @type string|function
	    *  @default alert
	    */
				errMode: "alert",

				/**
	    * Feature plug-ins.
	    * 
	    * This is an array of objects which describe the feature plug-ins that are
	    * available to DataTables. These feature plug-ins are then available for
	    * use through the `dom` initialisation option.
	    * 
	    * Each feature plug-in is described by an object which must have the
	    * following properties:
	    * 
	    * * `fnInit` - function that is used to initialise the plug-in,
	    * * `cFeature` - a character so the feature can be enabled by the `dom`
	    *   instillation option. This is case sensitive.
	    *
	    * The `fnInit` function has the following input parameters:
	    *
	    * 1. `{object}` DataTables settings object: see
	    *    {@link DataTable.models.oSettings}
	    *
	    * And the following return is expected:
	    * 
	    * * {node|null} The element which contains your feature. Note that the
	    *   return may also be void if your plug-in does not require to inject any
	    *   DOM elements into DataTables control (`dom`) - for example this might
	    *   be useful when developing a plug-in which allows table control via
	    *   keyboard entry
	    *
	    *  @type array
	    *
	    *  @example
	    *    $.fn.dataTable.ext.features.push( {
	    *      "fnInit": function( oSettings ) {
	    *        return new TableTools( { "oDTSettings": oSettings } );
	    *      },
	    *      "cFeature": "T"
	    *    } );
	    */
				feature: [],

				/**
	    * Row searching.
	    * 
	    * This method of searching is complimentary to the default type based
	    * searching, and a lot more comprehensive as it allows you complete control
	    * over the searching logic. Each element in this array is a function
	    * (parameters described below) that is called for every row in the table,
	    * and your logic decides if it should be included in the searching data set
	    * or not.
	    *
	    * Searching functions have the following input parameters:
	    *
	    * 1. `{object}` DataTables settings object: see
	    *    {@link DataTable.models.oSettings}
	    * 2. `{array|object}` Data for the row to be processed (same as the
	    *    original format that was passed in as the data source, or an array
	    *    from a DOM data source
	    * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
	    *    can be useful to retrieve the `TR` element if you need DOM interaction.
	    *
	    * And the following return is expected:
	    *
	    * * {boolean} Include the row in the searched result set (true) or not
	    *   (false)
	    *
	    * Note that as with the main search ability in DataTables, technically this
	    * is "filtering", since it is subtractive. However, for consistency in
	    * naming we call it searching here.
	    *
	    *  @type array
	    *  @default []
	    *
	    *  @example
	    *    // The following example shows custom search being applied to the
	    *    // fourth column (i.e. the data[3] index) based on two input values
	    *    // from the end-user, matching the data in a certain range.
	    *    $.fn.dataTable.ext.search.push(
	    *      function( settings, data, dataIndex ) {
	    *        var min = document.getElementById('min').value * 1;
	    *        var max = document.getElementById('max').value * 1;
	    *        var version = data[3] == "-" ? 0 : data[3]*1;
	    *
	    *        if ( min == "" && max == "" ) {
	    *          return true;
	    *        }
	    *        else if ( min == "" && version < max ) {
	    *          return true;
	    *        }
	    *        else if ( min < version && "" == max ) {
	    *          return true;
	    *        }
	    *        else if ( min < version && version < max ) {
	    *          return true;
	    *        }
	    *        return false;
	    *      }
	    *    );
	    */
				search: [],

				/**
	    * Selector extensions
	    *
	    * The `selector` option can be used to extend the options available for the
	    * selector modifier options (`selector-modifier` object data type) that
	    * each of the three built in selector types offer (row, column and cell +
	    * their plural counterparts). For example the Select extension uses this
	    * mechanism to provide an option to select only rows, columns and cells
	    * that have been marked as selected by the end user (`{selected: true}`),
	    * which can be used in conjunction with the existing built in selector
	    * options.
	    *
	    * Each property is an array to which functions can be pushed. The functions
	    * take three attributes:
	    *
	    * * Settings object for the host table
	    * * Options object (`selector-modifier` object type)
	    * * Array of selected item indexes
	    *
	    * The return is an array of the resulting item indexes after the custom
	    * selector has been applied.
	    *
	    *  @type object
	    */
				selector: {
					cell: [],
					column: [],
					row: []
				},

				/**
	    * Internal functions, exposed for used in plug-ins.
	    * 
	    * Please note that you should not need to use the internal methods for
	    * anything other than a plug-in (and even then, try to avoid if possible).
	    * The internal function may change between releases.
	    *
	    *  @type object
	    *  @default {}
	    */
				internal: {},

				/**
	    * Legacy configuration options. Enable and disable legacy options that
	    * are available in DataTables.
	    *
	    *  @type object
	    */
				legacy: {
					/**
	     * Enable / disable DataTables 1.9 compatible server-side processing
	     * requests
	     *
	     *  @type boolean
	     *  @default null
	     */
					ajax: null
				},

				/**
	    * Pagination plug-in methods.
	    * 
	    * Each entry in this object is a function and defines which buttons should
	    * be shown by the pagination rendering method that is used for the table:
	    * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
	    * buttons are displayed in the document, while the functions here tell it
	    * what buttons to display. This is done by returning an array of button
	    * descriptions (what each button will do).
	    *
	    * Pagination types (the four built in options and any additional plug-in
	    * options defined here) can be used through the `paginationType`
	    * initialisation parameter.
	    *
	    * The functions defined take two parameters:
	    *
	    * 1. `{int} page` The current page index
	    * 2. `{int} pages` The number of pages in the table
	    *
	    * Each function is expected to return an array where each element of the
	    * array can be one of:
	    *
	    * * `first` - Jump to first page when activated
	    * * `last` - Jump to last page when activated
	    * * `previous` - Show previous page when activated
	    * * `next` - Show next page when activated
	    * * `{int}` - Show page of the index given
	    * * `{array}` - A nested array containing the above elements to add a
	    *   containing 'DIV' element (might be useful for styling).
	    *
	    * Note that DataTables v1.9- used this object slightly differently whereby
	    * an object with two functions would be defined for each plug-in. That
	    * ability is still supported by DataTables 1.10+ to provide backwards
	    * compatibility, but this option of use is now decremented and no longer
	    * documented in DataTables 1.10+.
	    *
	    *  @type object
	    *  @default {}
	    *
	    *  @example
	    *    // Show previous, next and current page buttons only
	    *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
	    *      return [ 'previous', page, 'next' ];
	    *    };
	    */
				pager: {},

				renderer: {
					pageButton: {},
					header: {}
				},

				/**
	    * Ordering plug-ins - custom data source
	    * 
	    * The extension options for ordering of data available here is complimentary
	    * to the default type based ordering that DataTables typically uses. It
	    * allows much greater control over the the data that is being used to
	    * order a column, but is necessarily therefore more complex.
	    * 
	    * This type of ordering is useful if you want to do ordering based on data
	    * live from the DOM (for example the contents of an 'input' element) rather
	    * than just the static string that DataTables knows of.
	    * 
	    * The way these plug-ins work is that you create an array of the values you
	    * wish to be ordering for the column in question and then return that
	    * array. The data in the array much be in the index order of the rows in
	    * the table (not the currently ordering order!). Which order data gathering
	    * function is run here depends on the `dt-init columns.orderDataType`
	    * parameter that is used for the column (if any).
	    *
	    * The functions defined take two parameters:
	    *
	    * 1. `{object}` DataTables settings object: see
	    *    {@link DataTable.models.oSettings}
	    * 2. `{int}` Target column index
	    *
	    * Each function is expected to return an array:
	    *
	    * * `{array}` Data for the column to be ordering upon
	    *
	    *  @type array
	    *
	    *  @example
	    *    // Ordering using `input` node values
	    *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
	    *    {
	    *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
	    *        return $('input', td).val();
	    *      } );
	    *    }
	    */
				order: {},

				/**
	    * Type based plug-ins.
	    *
	    * Each column in DataTables has a type assigned to it, either by automatic
	    * detection or by direct assignment using the `type` option for the column.
	    * The type of a column will effect how it is ordering and search (plug-ins
	    * can also make use of the column type if required).
	    *
	    * @namespace
	    */
				type: {
					/**
	     * Type detection functions.
	     *
	     * The functions defined in this object are used to automatically detect
	     * a column's type, making initialisation of DataTables super easy, even
	     * when complex data is in the table.
	     *
	     * The functions defined take two parameters:
	     *
	        *  1. `{*}` Data from the column cell to be analysed
	        *  2. `{settings}` DataTables settings object. This can be used to
	        *     perform context specific type detection - for example detection
	        *     based on language settings such as using a comma for a decimal
	        *     place. Generally speaking the options from the settings will not
	        *     be required
	     *
	     * Each function is expected to return:
	     *
	     * * `{string|null}` Data type detected, or null if unknown (and thus
	     *   pass it on to the other type detection functions.
	     *
	     *  @type array
	     *
	     *  @example
	     *    // Currency type detection plug-in:
	     *    $.fn.dataTable.ext.type.detect.push(
	     *      function ( data, settings ) {
	     *        // Check the numeric part
	     *        if ( ! $.isNumeric( data.substring(1) ) ) {
	     *          return null;
	     *        }
	     *
	     *        // Check prefixed by currency
	     *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
	     *          return 'currency';
	     *        }
	     *        return null;
	     *      }
	     *    );
	     */
					detect: [],

					/**
	     * Type based search formatting.
	     *
	     * The type based searching functions can be used to pre-format the
	     * data to be search on. For example, it can be used to strip HTML
	     * tags or to de-format telephone numbers for numeric only searching.
	     *
	     * Note that is a search is not defined for a column of a given type,
	     * no search formatting will be performed.
	     * 
	     * Pre-processing of searching data plug-ins - When you assign the sType
	     * for a column (or have it automatically detected for you by DataTables
	     * or a type detection plug-in), you will typically be using this for
	     * custom sorting, but it can also be used to provide custom searching
	     * by allowing you to pre-processing the data and returning the data in
	     * the format that should be searched upon. This is done by adding
	     * functions this object with a parameter name which matches the sType
	     * for that target column. This is the corollary of <i>afnSortData</i>
	     * for searching data.
	     *
	     * The functions defined take a single parameter:
	     *
	        *  1. `{*}` Data from the column cell to be prepared for searching
	     *
	     * Each function is expected to return:
	     *
	     * * `{string|null}` Formatted string that will be used for the searching.
	     *
	     *  @type object
	     *  @default {}
	     *
	     *  @example
	     *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
	     *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
	     *    }
	     */
					search: {},

					/**
	     * Type based ordering.
	     *
	     * The column type tells DataTables what ordering to apply to the table
	     * when a column is sorted upon. The order for each type that is defined,
	     * is defined by the functions available in this object.
	     *
	     * Each ordering option can be described by three properties added to
	     * this object:
	     *
	     * * `{type}-pre` - Pre-formatting function
	     * * `{type}-asc` - Ascending order function
	     * * `{type}-desc` - Descending order function
	     *
	     * All three can be used together, only `{type}-pre` or only
	     * `{type}-asc` and `{type}-desc` together. It is generally recommended
	     * that only `{type}-pre` is used, as this provides the optimal
	     * implementation in terms of speed, although the others are provided
	     * for compatibility with existing Javascript sort functions.
	     *
	     * `{type}-pre`: Functions defined take a single parameter:
	     *
	        *  1. `{*}` Data from the column cell to be prepared for ordering
	     *
	     * And return:
	     *
	     * * `{*}` Data to be sorted upon
	     *
	     * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
	     * functions, taking two parameters:
	     *
	        *  1. `{*}` Data to compare to the second parameter
	        *  2. `{*}` Data to compare to the first parameter
	     *
	     * And returning:
	     *
	     * * `{*}` Ordering match: <0 if first parameter should be sorted lower
	     *   than the second parameter, ===0 if the two parameters are equal and
	     *   >0 if the first parameter should be sorted height than the second
	     *   parameter.
	     * 
	     *  @type object
	     *  @default {}
	     *
	     *  @example
	     *    // Numeric ordering of formatted numbers with a pre-formatter
	     *    $.extend( $.fn.dataTable.ext.type.order, {
	     *      "string-pre": function(x) {
	     *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
	     *        return parseFloat( a );
	     *      }
	     *    } );
	     *
	     *  @example
	     *    // Case-sensitive string ordering, with no pre-formatting method
	     *    $.extend( $.fn.dataTable.ext.order, {
	     *      "string-case-asc": function(x,y) {
	     *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	     *      },
	     *      "string-case-desc": function(x,y) {
	     *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
	     *      }
	     *    } );
	     */
					order: {}
				},

				/**
	    * Unique DataTables instance counter
	    *
	    * @type int
	    * @private
	    */
				_unique: 0,

				//
				// Depreciated
				// The following properties are retained for backwards compatiblity only.
				// The should not be used in new projects and will be removed in a future
				// version
				//

				/**
	    * Version check function.
	    *  @type function
	    *  @depreciated Since 1.10
	    */
				fnVersionCheck: DataTable.fnVersionCheck,

				/**
	    * Index for what 'this' index API functions should use
	    *  @type int
	    *  @deprecated Since v1.10
	    */
				iApiIndex: 0,

				/**
	    * jQuery UI class container
	    *  @type object
	    *  @deprecated Since v1.10
	    */
				oJUIClasses: {},

				/**
	    * Software version
	    *  @type string
	    *  @deprecated Since v1.10
	    */
				sVersion: DataTable.version
			};

			//
			// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
			//
			$.extend(_ext, {
				afnFiltering: _ext.search,
				aTypes: _ext.type.detect,
				ofnSearch: _ext.type.search,
				oSort: _ext.type.order,
				afnSortData: _ext.order,
				aoFeatures: _ext.feature,
				oApi: _ext.internal,
				oStdClasses: _ext.classes,
				oPagination: _ext.pager
			});

			$.extend(DataTable.ext.classes, {
				"sTable": "dataTable",
				"sNoFooter": "no-footer",

				/* Paging buttons */
				"sPageButton": "paginate_button",
				"sPageButtonActive": "current",
				"sPageButtonDisabled": "disabled",

				/* Striping classes */
				"sStripeOdd": "odd",
				"sStripeEven": "even",

				/* Empty row */
				"sRowEmpty": "dataTables_empty",

				/* Features */
				"sWrapper": "dataTables_wrapper",
				"sFilter": "dataTables_filter",
				"sInfo": "dataTables_info",
				"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
				"sLength": "dataTables_length",
				"sProcessing": "dataTables_processing",

				/* Sorting */
				"sSortAsc": "sorting_asc",
				"sSortDesc": "sorting_desc",
				"sSortable": "sorting", /* Sortable in both directions */
				"sSortableAsc": "sorting_asc_disabled",
				"sSortableDesc": "sorting_desc_disabled",
				"sSortableNone": "sorting_disabled",
				"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */

				/* Filtering */
				"sFilterInput": "",

				/* Page length */
				"sLengthSelect": "",

				/* Scrolling */
				"sScrollWrapper": "dataTables_scroll",
				"sScrollHead": "dataTables_scrollHead",
				"sScrollHeadInner": "dataTables_scrollHeadInner",
				"sScrollBody": "dataTables_scrollBody",
				"sScrollFoot": "dataTables_scrollFoot",
				"sScrollFootInner": "dataTables_scrollFootInner",

				/* Misc */
				"sHeaderTH": "",
				"sFooterTH": "",

				// Deprecated
				"sSortJUIAsc": "",
				"sSortJUIDesc": "",
				"sSortJUI": "",
				"sSortJUIAscAllowed": "",
				"sSortJUIDescAllowed": "",
				"sSortJUIWrapper": "",
				"sSortIcon": "",
				"sJUIHeader": "",
				"sJUIFooter": ""
			});

			(function () {

				// Reused strings for better compression. Closure compiler appears to have a
				// weird edge case where it is trying to expand strings rather than use the
				// variable version. This results in about 200 bytes being added, for very
				// little preference benefit since it this run on script load only.
				var _empty = '';
				_empty = '';

				var _stateDefault = _empty + 'ui-state-default';
				var _sortIcon = _empty + 'css_right ui-icon ui-icon-';
				var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';

				$.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
					/* Full numbers paging buttons */
					"sPageButton": "fg-button ui-button " + _stateDefault,
					"sPageButtonActive": "ui-state-disabled",
					"sPageButtonDisabled": "ui-state-disabled",

					/* Features */
					"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi " + "ui-buttonset-multi paging_", /* Note that the type is postfixed */

					/* Sorting */
					"sSortAsc": _stateDefault + " sorting_asc",
					"sSortDesc": _stateDefault + " sorting_desc",
					"sSortable": _stateDefault + " sorting",
					"sSortableAsc": _stateDefault + " sorting_asc_disabled",
					"sSortableDesc": _stateDefault + " sorting_desc_disabled",
					"sSortableNone": _stateDefault + " sorting_disabled",
					"sSortJUIAsc": _sortIcon + "triangle-1-n",
					"sSortJUIDesc": _sortIcon + "triangle-1-s",
					"sSortJUI": _sortIcon + "carat-2-n-s",
					"sSortJUIAscAllowed": _sortIcon + "carat-1-n",
					"sSortJUIDescAllowed": _sortIcon + "carat-1-s",
					"sSortJUIWrapper": "DataTables_sort_wrapper",
					"sSortIcon": "DataTables_sort_icon",

					/* Scrolling */
					"sScrollHead": "dataTables_scrollHead " + _stateDefault,
					"sScrollFoot": "dataTables_scrollFoot " + _stateDefault,

					/* Misc */
					"sHeaderTH": _stateDefault,
					"sFooterTH": _stateDefault,
					"sJUIHeader": _headerFooter + " ui-corner-tl ui-corner-tr",
					"sJUIFooter": _headerFooter + " ui-corner-bl ui-corner-br"
				});
			})();

			var extPagination = DataTable.ext.pager;

			function _numbers(page, pages) {
				var numbers = [],
				    buttons = extPagination.numbers_length,
				    half = Math.floor(buttons / 2),
				    i = 1;

				if (pages <= buttons) {
					numbers = _range(0, pages);
				} else if (page <= half) {
					numbers = _range(0, buttons - 2);
					numbers.push('ellipsis');
					numbers.push(pages - 1);
				} else if (page >= pages - 1 - half) {
					numbers = _range(pages - (buttons - 2), pages);
					numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6
					numbers.splice(0, 0, 0);
				} else {
					numbers = _range(page - half + 2, page + half - 1);
					numbers.push('ellipsis');
					numbers.push(pages - 1);
					numbers.splice(0, 0, 'ellipsis');
					numbers.splice(0, 0, 0);
				}

				numbers.DT_el = 'span';
				return numbers;
			}

			$.extend(extPagination, {
				simple: function simple(page, pages) {
					return ['previous', 'next'];
				},

				full: function full(page, pages) {
					return ['first', 'previous', 'next', 'last'];
				},

				simple_numbers: function simple_numbers(page, pages) {
					return ['previous', _numbers(page, pages), 'next'];
				},

				full_numbers: function full_numbers(page, pages) {
					return ['first', 'previous', _numbers(page, pages), 'next', 'last'];
				},

				// For testing and plug-ins to use
				_numbers: _numbers,

				// Number of number buttons (including ellipsis) to show. _Must be odd!_
				numbers_length: 7
			});

			$.extend(true, DataTable.ext.renderer, {
				pageButton: {
					_: function _(settings, host, idx, buttons, page, pages) {
						var classes = settings.oClasses;
						var lang = settings.oLanguage.oPaginate;
						var btnDisplay,
						    btnClass,
						    counter = 0;

						var attach = function attach(container, buttons) {
							var i, ien, node, button;
							var clickHandler = function clickHandler(e) {
								_fnPageChange(settings, e.data.action, true);
							};

							for (i = 0, ien = buttons.length; i < ien; i++) {
								button = buttons[i];

								if ($.isArray(button)) {
									var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);
									attach(inner, button);
								} else {
									btnDisplay = '';
									btnClass = '';

									switch (button) {
										case 'ellipsis':
											container.append('<span class="ellipsis">&#x2026;</span>');
											break;

										case 'first':
											btnDisplay = lang.sFirst;
											btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
											break;

										case 'previous':
											btnDisplay = lang.sPrevious;
											btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
											break;

										case 'next':
											btnDisplay = lang.sNext;
											btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
											break;

										case 'last':
											btnDisplay = lang.sLast;
											btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
											break;

										default:
											btnDisplay = button + 1;
											btnClass = page === button ? classes.sPageButtonActive : '';
											break;
									}

									if (btnDisplay) {
										node = $('<a>', {
											'class': classes.sPageButton + ' ' + btnClass,
											'aria-controls': settings.sTableId,
											'data-dt-idx': counter,
											'tabindex': settings.iTabIndex,
											'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
										}).html(btnDisplay).appendTo(container);

										_fnBindAction(node, { action: button }, clickHandler);

										counter++;
									}
								}
							}
						};

						// IE9 throws an 'unknown error' if document.activeElement is used
						// inside an iframe or frame. Try / catch the error. Not good for
						// accessibility, but neither are frames.
						var activeEl;

						try {
							// Because this approach is destroying and recreating the paging
							// elements, focus is lost on the select button which is bad for
							// accessibility. So we want to restore focus once the draw has
							// completed
							activeEl = $(document.activeElement).data('dt-idx');
						} catch (e) {}

						attach($(host).empty(), buttons);

						if (activeEl) {
							$(host).find('[data-dt-idx=' + activeEl + ']').focus();
						}
					}
				}
			});

			// Built in type detection. See model.ext.aTypes for information about
			// what is required from this methods.
			$.extend(DataTable.ext.type.detect, [
			// Plain numbers - first since V8 detects some plain numbers as dates
			function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _isNumber(d, decimal) ? 'num' + decimal : null;
			},

			// Dates (only those recognised by the browser's Date.parse)
			function (d, settings) {
				// V8 will remove any unknown characters at the start and end of the
				// expression, leading to false matches such as `$245.12` or `10%` being
				// a valid date. See forum thread 18941 for detail.
				if (d && !(d instanceof Date) && (!_re_date_start.test(d) || !_re_date_end.test(d))) {
					return null;
				}
				var parsed = Date.parse(d);
				return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;
			},

			// Formatted numbers
			function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
			},

			// HTML numeric
			function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
			},

			// HTML numeric, formatted
			function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
			},

			// HTML (this is strict checking - there must be html)
			function (d, settings) {
				return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;
			}]);

			// Filter formatting functions. See model.ext.ofnSearch for information about
			// what is required from these methods.
			//
			// Note that additional search methods are added for the html numbers and
			// html formatted numbers by `_addNumericSort()` when we know what the decimal
			// place is

			$.extend(DataTable.ext.type.search, {
				html: function html(data) {
					return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ").replace(_re_html, "") : '';
				},

				string: function string(data) {
					return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ") : data;
				}
			});

			var __numericReplace = function __numericReplace(d, decimalPlace, re1, re2) {
				if (d !== 0 && (!d || d === '-')) {
					return -Infinity;
				}

				// If a decimal place other than `.` is used, it needs to be given to the
				// function so we can detect it and replace with a `.` which is the only
				// decimal place Javascript recognises - it is not locale aware.
				if (decimalPlace) {
					d = _numToDecimal(d, decimalPlace);
				}

				if (d.replace) {
					if (re1) {
						d = d.replace(re1, '');
					}

					if (re2) {
						d = d.replace(re2, '');
					}
				}

				return d * 1;
			};

			// Add the numeric 'deformatting' functions for sorting and search. This is done
			// in a function to provide an easy ability for the language options to add
			// additional methods if a non-period decimal place is used.
			function _addNumericSort(decimalPlace) {
				$.each({
					// Plain numbers
					"num": function num(d) {
						return __numericReplace(d, decimalPlace);
					},

					// Formatted numbers
					"num-fmt": function numFmt(d) {
						return __numericReplace(d, decimalPlace, _re_formatted_numeric);
					},

					// HTML numeric
					"html-num": function htmlNum(d) {
						return __numericReplace(d, decimalPlace, _re_html);
					},

					// HTML numeric, formatted
					"html-num-fmt": function htmlNumFmt(d) {
						return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
					}
				}, function (key, fn) {
					// Add the ordering method
					_ext.type.order[key + decimalPlace + '-pre'] = fn;

					// For HTML types add a search formatter that will strip the HTML
					if (key.match(/^html\-/)) {
						_ext.type.search[key + decimalPlace] = _ext.type.search.html;
					}
				});
			}

			// Default sort methods
			$.extend(_ext.type.order, {
				// Dates
				"date-pre": function datePre(d) {
					return Date.parse(d) || 0;
				},

				// html
				"html-pre": function htmlPre(a) {
					return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + '';
				},

				// string
				"string-pre": function stringPre(a) {
					// This is a little complex, but faster than always calling toString,
					// http://jsperf.com/tostring-v-check
					return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();
				},

				// string-asc and -desc are retained only for compatibility with the old
				// sort methods
				"string-asc": function stringAsc(x, y) {
					return x < y ? -1 : x > y ? 1 : 0;
				},

				"string-desc": function stringDesc(x, y) {
					return x < y ? 1 : x > y ? -1 : 0;
				}
			});

			// Numeric sorting types - order doesn't matter here
			_addNumericSort('');

			$.extend(true, DataTable.ext.renderer, {
				header: {
					_: function _(settings, cell, column, classes) {
						// No additional mark-up required
						// Attach a sort listener to update on sort - note that using the
						// `DT` namespace will allow the event to be removed automatically
						// on destroy, while the `dt` namespaced event is the one we are
						// listening for
						$(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
							if (settings !== ctx) {
								// need to check this this is the host
								return; // table, not a nested one
							}

							var colIdx = column.idx;

							cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
						});
					},

					jqueryui: function jqueryui(settings, cell, column, classes) {
						$('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell);

						// Attach a sort listener to update on sort
						$(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
							if (settings !== ctx) {
								return;
							}

							var colIdx = column.idx;

							cell.removeClass(classes.sSortAsc + " " + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);

							cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + " " + classes.sSortJUIDesc + " " + classes.sSortJUI + " " + classes.sSortJUIAscAllowed + " " + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);
						});
					}
				}
			});

			/*
	   * Public helper functions. These aren't used internally by DataTables, or
	   * called by any of the options passed into DataTables, but they can be used
	   * externally by developers working with DataTables. They are helper functions
	   * to make working with DataTables a little bit easier.
	   */

			/**
	   * Helpers for `columns.render`.
	   *
	   * The options defined here can be used with the `columns.render` initialisation
	   * option to provide a display renderer. The following functions are defined:
	   *
	   * * `number` - Will format numeric data (defined by `columns.data`) for
	   *   display, retaining the original unformatted data for sorting and filtering.
	   *   It takes 4 parameters:
	   *   * `string` - Thousands grouping separator
	   *   * `string` - Decimal point indicator
	   *   * `integer` - Number of decimal points to show
	   *   * `string` (optional) - Prefix.
	   *
	   * @example
	   *   // Column definition using the number renderer
	   *   {
	   *     data: "salary",
	   *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	   *   }
	   *
	   * @namespace
	   */
			DataTable.render = {
				number: function number(thousands, decimal, precision, prefix) {
					return {
						display: function display(d) {
							if (typeof d !== 'number' && typeof d !== 'string') {
								return d;
							}

							var negative = d < 0 ? '-' : '';
							d = Math.abs(parseFloat(d));

							var intPart = parseInt(d, 10);
							var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';

							return negative + (prefix || '') + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart;
						}
					};
				}
			};

			/*
	   * This is really a good bit rubbish this method of exposing the internal methods
	   * publicly... - To be fixed in 2.0 using methods on the prototype
	   */

			/**
	   * Create a wrapper function for exporting an internal functions to an external API.
	   *  @param {string} fn API function name
	   *  @returns {function} wrapped function
	   *  @memberof DataTable#internal
	   */
			function _fnExternApiFunc(fn) {
				return function () {
					var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
					return DataTable.ext.internal[fn].apply(this, args);
				};
			}

			/**
	   * Reference to internal functions for use by plug-in developers. Note that
	   * these methods are references to internal functions and are considered to be
	   * private. If you use these methods, be aware that they are liable to change
	   * between versions.
	   *  @namespace
	   */
			$.extend(DataTable.ext.internal, {
				_fnExternApiFunc: _fnExternApiFunc,
				_fnBuildAjax: _fnBuildAjax,
				_fnAjaxUpdate: _fnAjaxUpdate,
				_fnAjaxParameters: _fnAjaxParameters,
				_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
				_fnAjaxDataSrc: _fnAjaxDataSrc,
				_fnAddColumn: _fnAddColumn,
				_fnColumnOptions: _fnColumnOptions,
				_fnAdjustColumnSizing: _fnAdjustColumnSizing,
				_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
				_fnColumnIndexToVisible: _fnColumnIndexToVisible,
				_fnVisbleColumns: _fnVisbleColumns,
				_fnGetColumns: _fnGetColumns,
				_fnColumnTypes: _fnColumnTypes,
				_fnApplyColumnDefs: _fnApplyColumnDefs,
				_fnHungarianMap: _fnHungarianMap,
				_fnCamelToHungarian: _fnCamelToHungarian,
				_fnLanguageCompat: _fnLanguageCompat,
				_fnBrowserDetect: _fnBrowserDetect,
				_fnAddData: _fnAddData,
				_fnAddTr: _fnAddTr,
				_fnNodeToDataIndex: _fnNodeToDataIndex,
				_fnNodeToColumnIndex: _fnNodeToColumnIndex,
				_fnGetCellData: _fnGetCellData,
				_fnSetCellData: _fnSetCellData,
				_fnSplitObjNotation: _fnSplitObjNotation,
				_fnGetObjectDataFn: _fnGetObjectDataFn,
				_fnSetObjectDataFn: _fnSetObjectDataFn,
				_fnGetDataMaster: _fnGetDataMaster,
				_fnClearTable: _fnClearTable,
				_fnDeleteIndex: _fnDeleteIndex,
				_fnInvalidate: _fnInvalidate,
				_fnGetRowElements: _fnGetRowElements,
				_fnCreateTr: _fnCreateTr,
				_fnBuildHead: _fnBuildHead,
				_fnDrawHead: _fnDrawHead,
				_fnDraw: _fnDraw,
				_fnReDraw: _fnReDraw,
				_fnAddOptionsHtml: _fnAddOptionsHtml,
				_fnDetectHeader: _fnDetectHeader,
				_fnGetUniqueThs: _fnGetUniqueThs,
				_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
				_fnFilterComplete: _fnFilterComplete,
				_fnFilterCustom: _fnFilterCustom,
				_fnFilterColumn: _fnFilterColumn,
				_fnFilter: _fnFilter,
				_fnFilterCreateSearch: _fnFilterCreateSearch,
				_fnEscapeRegex: _fnEscapeRegex,
				_fnFilterData: _fnFilterData,
				_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
				_fnUpdateInfo: _fnUpdateInfo,
				_fnInfoMacros: _fnInfoMacros,
				_fnInitialise: _fnInitialise,
				_fnInitComplete: _fnInitComplete,
				_fnLengthChange: _fnLengthChange,
				_fnFeatureHtmlLength: _fnFeatureHtmlLength,
				_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
				_fnPageChange: _fnPageChange,
				_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
				_fnProcessingDisplay: _fnProcessingDisplay,
				_fnFeatureHtmlTable: _fnFeatureHtmlTable,
				_fnScrollDraw: _fnScrollDraw,
				_fnApplyToChildren: _fnApplyToChildren,
				_fnCalculateColumnWidths: _fnCalculateColumnWidths,
				_fnThrottle: _fnThrottle,
				_fnConvertToWidth: _fnConvertToWidth,
				_fnScrollingWidthAdjust: _fnScrollingWidthAdjust,
				_fnGetWidestNode: _fnGetWidestNode,
				_fnGetMaxLenString: _fnGetMaxLenString,
				_fnStringToCss: _fnStringToCss,
				_fnScrollBarWidth: _fnScrollBarWidth,
				_fnSortFlatten: _fnSortFlatten,
				_fnSort: _fnSort,
				_fnSortAria: _fnSortAria,
				_fnSortListener: _fnSortListener,
				_fnSortAttachListener: _fnSortAttachListener,
				_fnSortingClasses: _fnSortingClasses,
				_fnSortData: _fnSortData,
				_fnSaveState: _fnSaveState,
				_fnLoadState: _fnLoadState,
				_fnSettingsFromNode: _fnSettingsFromNode,
				_fnLog: _fnLog,
				_fnMap: _fnMap,
				_fnBindAction: _fnBindAction,
				_fnCallbackReg: _fnCallbackReg,
				_fnCallbackFire: _fnCallbackFire,
				_fnLengthOverflow: _fnLengthOverflow,
				_fnRenderer: _fnRenderer,
				_fnDataSource: _fnDataSource,
				_fnRowAttributes: _fnRowAttributes,
				_fnCalculateEnd: function _fnCalculateEnd() {} // Used by a lot of plug-ins, but redundant
				// in 1.10, so this dead-end function is
				// added to prevent errors
			});

			// jQuery access
			$.fn.dataTable = DataTable;

			// Legacy aliases
			$.fn.dataTableSettings = DataTable.settings;
			$.fn.dataTableExt = DataTable.ext;

			// With a capital `D` we return a DataTables API instance rather than a
			// jQuery object
			$.fn.DataTable = function (opts) {
				return $(this).dataTable(opts).api();
			};

			// All properties that are available to $.fn.dataTable should also be
			// available on $.fn.DataTable
			$.each(DataTable, function (prop, val) {
				$.fn.DataTable[prop] = val;
			});

			// Information about events fired by DataTables - for documentation.
			/**
	   * Draw event, fired whenever the table is redrawn on the page, at the same
	   * point as fnDrawCallback. This may be useful for binding events or
	   * performing calculations when the table is altered at all.
	   *  @name DataTable#draw.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   */

			/**
	   * Search event, fired when the searching applied to the table (using the
	   * built-in global search, or column filters) is altered.
	   *  @name DataTable#search.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   */

			/**
	   * Page change event, fired when the paging of the table is altered.
	   *  @name DataTable#page.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   */

			/**
	   * Order event, fired when the ordering applied to the table is altered.
	   *  @name DataTable#order.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   */

			/**
	   * DataTables initialisation complete event, fired when the table is fully
	   * drawn, including Ajax data loaded, if Ajax data is required.
	   *  @name DataTable#init.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} oSettings DataTables settings object
	   *  @param {object} json The JSON object request from the server - only
	   *    present if client-side Ajax sourced data is used</li></ol>
	   */

			/**
	   * State save event, fired when the table has changed state a new state save
	   * is required. This event allows modification of the state saving object
	   * prior to actually doing the save, including addition or other state
	   * properties (for plug-ins) or modification of a DataTables core property.
	   *  @name DataTable#stateSaveParams.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} oSettings DataTables settings object
	   *  @param {object} json The state information to be saved
	   */

			/**
	   * State load event, fired when the table is loading state from the stored
	   * data, but prior to the settings object being modified by the saved state
	   * - allowing modification of the saved state is required or loading of
	   * state for a plug-in.
	   *  @name DataTable#stateLoadParams.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} oSettings DataTables settings object
	   *  @param {object} json The saved state information
	   */

			/**
	   * State loaded event, fired when state has been loaded from stored data and
	   * the settings object has been modified by the loaded data.
	   *  @name DataTable#stateLoaded.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} oSettings DataTables settings object
	   *  @param {object} json The saved state information
	   */

			/**
	   * Processing event, fired when DataTables is doing some kind of processing
	   * (be it, order, searcg or anything else). It can be used to indicate to
	   * the end user that there is something happening, or that something has
	   * finished.
	   *  @name DataTable#processing.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} oSettings DataTables settings object
	   *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	   */

			/**
	   * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	   * request to made to the server for new data. This event is called before
	   * DataTables processed the returned data, so it can also be used to pre-
	   * process the data returned from the server, if needed.
	   *
	   * Note that this trigger is called in `fnServerData`, if you override
	   * `fnServerData` and which to use this event, you need to trigger it in you
	   * success function.
	   *  @name DataTable#xhr.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   *  @param {object} json JSON returned from the server
	   *
	   *  @example
	   *     // Use a custom property returned from the server in another DOM element
	   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	   *       $('#status').html( json.status );
	   *     } );
	   *
	   *  @example
	   *     // Pre-process the data returned from the server
	   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	   *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	   *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	   *       }
	   *       // Note no return - manipulate the data directly in the JSON object.
	   *     } );
	   */

			/**
	   * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	   * or passing the bDestroy:true parameter in the initialisation object. This
	   * can be used to remove bound events, added DOM nodes, etc.
	   *  @name DataTable#destroy.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   */

			/**
	   * Page length change event, fired when number of records to show on each
	   * page (the length) is changed.
	   *  @name DataTable#length.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   *  @param {integer} len New length
	   */

			/**
	   * Column sizing has changed.
	   *  @name DataTable#column-sizing.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   */

			/**
	   * Column visibility has changed.
	   *  @name DataTable#column-visibility.dt
	   *  @event
	   *  @param {event} e jQuery event object
	   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	   *  @param {int} column Column index
	   *  @param {bool} vis `false` if column now hidden, or `true` if visible
	   */

			return $.fn.dataTable;
		});
	})(window, document);
	/** @lends <global> */ // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).

/***/ },

/***/ 133:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables Bootstrap 3 integration
	 * ©2011-2014 SpryMedia Ltd - datatables.net/license
	 */

	"use strict";

	(function (window, document, undefined) {

	    var factory = function factory($, DataTable) {
	        "use strict";

	        /* Set the defaults for DataTables initialisation */
	        $.extend(true, DataTable.defaults, {
	            dom: "<'row'<'col-sm-6'l><'col-sm-6'f>>" + "<'row'<'col-sm-12'tr>>" + "<'row'<'col-sm-6'i><'col-sm-6'p>>",
	            renderer: 'bootstrap'
	        });

	        /* Default class modification */
	        $.extend(DataTable.ext.classes, {
	            sWrapper: "dataTables_wrapper form-inline dt-bootstrap",
	            sFilterInput: "form-control input-sm",
	            sLengthSelect: "form-control input-sm"
	        });

	        /* Bootstrap paging button renderer */
	        DataTable.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {
	            var api = new DataTable.Api(settings);
	            var classes = settings.oClasses;
	            var lang = settings.oLanguage.oPaginate;
	            var btnDisplay, btnClass;

	            var attach = function attach(container, buttons) {
	                var i, ien, node, button;
	                var clickHandler = function clickHandler(e) {
	                    e.preventDefault();
	                    if (!$(e.currentTarget).hasClass('disabled')) {
	                        api.page(e.data.action).draw(false);
	                    }
	                };

	                for (i = 0, ien = buttons.length; i < ien; i++) {
	                    button = buttons[i];

	                    if ($.isArray(button)) {
	                        attach(container, button);
	                    } else {
	                        btnDisplay = '';
	                        btnClass = '';

	                        switch (button) {
	                            case 'ellipsis':
	                                btnDisplay = '&hellip;';
	                                btnClass = 'disabled';
	                                break;

	                            case 'first':
	                                btnDisplay = lang.sFirst;
	                                btnClass = button + (page > 0 ? '' : ' disabled');
	                                break;

	                            case 'previous':
	                                btnDisplay = lang.sPrevious;
	                                btnClass = button + (page > 0 ? '' : ' disabled');
	                                break;

	                            case 'next':
	                                btnDisplay = lang.sNext;
	                                btnClass = button + (page < pages - 1 ? '' : ' disabled');
	                                break;

	                            case 'last':
	                                btnDisplay = lang.sLast;
	                                btnClass = button + (page < pages - 1 ? '' : ' disabled');
	                                break;

	                            default:
	                                btnDisplay = button + 1;
	                                btnClass = page === button ? 'active' : '';
	                                break;
	                        }

	                        if (btnDisplay) {
	                            node = $('<li>', {
	                                'class': classes.sPageButton + ' ' + btnClass,
	                                'aria-controls': settings.sTableId,
	                                'tabindex': settings.iTabIndex,
	                                'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
	                            }).append($('<a>', {
	                                'href': '#'
	                            }).html(btnDisplay)).appendTo(container);

	                            settings.oApi._fnBindAction(node, { action: button }, clickHandler);
	                        }
	                    }
	                }
	            };

	            attach($(host).empty().html('<ul class="pagination"/>').children('ul'), buttons);
	        };

	        /*
	         * TableTools Bootstrap compatibility
	         * Required TableTools 2.1+
	         */
	        if (DataTable.TableTools) {
	            // Set the classes that TableTools uses to something suitable for Bootstrap
	            $.extend(true, DataTable.TableTools.classes, {
	                "container": "DTTT btn-group",
	                "buttons": {
	                    "normal": "btn btn-default",
	                    "disabled": "disabled"
	                },
	                "collection": {
	                    "container": "DTTT_dropdown dropdown-menu",
	                    "buttons": {
	                        "normal": "",
	                        "disabled": "disabled"
	                    }
	                },
	                "print": {
	                    "info": "DTTT_print_info"
	                },
	                "select": {
	                    "row": "active"
	                }
	            });

	            // Have the collection use a bootstrap compatible drop down
	            $.extend(true, DataTable.TableTools.DEFAULTS.oTags, {
	                "collection": {
	                    "container": "ul",
	                    "button": "li",
	                    "liner": "a"
	                }
	            });
	        }
	    }; // /factory

	    // Define as an AMD module if possible
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(112), __webpack_require__(132)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node/CommonJS
	        factory(require('jquery'), require('datatables'));
	    } else if (jQuery) {
	        // Otherwise simply initialise as normal, stopping multiple evaluation
	        factory(jQuery, jQuery.fn.dataTable);
	    }
	})(window, document);
	/**
	 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
	 * DataTables 1.10 or newer.
	 *
	 * This file sets the defaults and adds options to DataTables to style its
	 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
	 * for further information.
	 */

/***/ },

/***/ 134:
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var $ = __webpack_require__(112);
	var d3 = __webpack_require__(135);
	var Datamap = __webpack_require__(136);

	var m_width = $("#mapcontainer").width(),
	    m_ratio = .42,
	    m_height = m_width * m_ratio;

	module.exports = {
	    drawMap: function drawMap() {
	        // @@@ pull this url from a data- attribute so we can use url reverser and not hardcode the url
	        d3.json("/uw/country_map_data.json", function (error, map_data) {
	            var map = new Datamap({
	                element: document.getElementById('mapcontainer'),
	                responsive: true,
	                width: m_width,
	                height: m_height,
	                fills: map_data["fills"],
	                data: map_data["country_data"],
	                geographyConfig: {
	                    hideAntarctica: true,
	                    borderColor: "#202020",
	                    highlightOnHover: true,
	                    highlightBorderWidth: 2,
	                    highlightFillColor: 'rgba(128,128,128,0.5)',
	                    popupTemplate: function popupTemplate(geography, data) {
	                        if (data) {
	                            geography.properties.url = data.url;
	                            return '<div class="hoverinfo"><div class="flag flag-' + data.country_code.toLowerCase() + '"> </div><strong>' + geography.properties.name + '</strong><br/>' + data.gateway_languages.join('<br/>') + '</div>';
	                        } else return '<div class="hoverinfo"><strong>' + geography.properties.name + '</strong></div>';
	                    }
	                },
	                done: function done(datamap) {
	                    datamap.svg.selectAll('.datamaps-subunit').on('click', function (geography) {
	                        var $this = d3.select(this);
	                        var previousAttributes = JSON.parse($this.attr('data-previousAttributes'));
	                        for (var attr in previousAttributes) {
	                            $this.style(attr, previousAttributes[attr]);
	                        }
	                        window.location.href = geography.properties.url;
	                    });
	                    this.element.style.paddingBottom = "38%";
	                }
	            });

	            d3.select(window).on('resize', function () {
	                map.resize();
	            });
	        });
	    },
	    submitDownloadForm: function submitDownloadForm(output_format) {
	        // Get the d3js SVG element
	        var tmp = document.getElementById("mapcontainer");
	        var svg = tmp.getElementsByTagName("svg")[0];
	        // Extract the data as SVG text string
	        var svg_xml = new XMLSerializer().serializeToString(svg);

	        // Submit the <FORM> to the server.
	        // The result will be a file to download.
	        var form = document.getElementById("svgform");
	        form['output_format'].value = output_format;
	        form['data'].value = svg_xml;
	        form.submit();
	    }
	};

/***/ },

/***/ 135:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(function () {
	  var d3 = {
	    version: "3.5.6"
	  };
	  var d3_arraySlice = [].slice,
	      d3_array = function d3_array(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function (list) {
	        var i = list.length,
	            array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function () {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype,
	          d3_element_setAttribute = d3_element_prototype.setAttribute,
	          d3_element_setAttributeNS = d3_element_prototype.setAttributeNS,
	          d3_style_prototype = this.CSSStyleDeclaration.prototype,
	          d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function (name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function (space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function (name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function (a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function (array, f) {
	    var i = -1,
	        n = array.length,
	        a,
	        b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function (array, f) {
	    var i = -1,
	        n = array.length,
	        a,
	        b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function (array, f) {
	    var i = -1,
	        n = array.length,
	        a,
	        b,
	        c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [a, c];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function (array, f) {
	    var s = 0,
	        n = array.length,
	        a,
	        i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function (array, f) {
	    var s = 0,
	        n = array.length,
	        a,
	        i = -1,
	        j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a;else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a;else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function (values, p) {
	    var H = (values.length - 1) * p + 1,
	        h = Math.floor(H),
	        v = +values[h - 1],
	        e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function (array, f) {
	    var numbers = [],
	        n = array.length,
	        a,
	        i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function (array, f) {
	    var n = array.length,
	        m = 0,
	        a,
	        d,
	        s = 0,
	        i = -1,
	        j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function () {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function left(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
	        }
	        return lo;
	      },
	      right: function right(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function (f) {
	    return d3_bisector(f.length === 1 ? function (d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function (array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0,
	        t,
	        i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function (array, indexes) {
	    var i = indexes.length,
	        permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function (array) {
	    var i = 0,
	        n = array.length - 1,
	        p0,
	        p1 = array[0],
	        pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [p0 = p1, p1 = array[++i]];
	    return pairs;
	  };
	  d3.zip = function () {
	    if (!(n = arguments.length)) return [];
	    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m;) {
	      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n;) {
	        zip[j] = arguments[j][i];
	      }
	    }
	    return zips;
	  };
	  function d3_zipLength(d) {
	    return d.length;
	  }
	  d3.transpose = function (matrix) {
	    return d3.zip.apply(d3, matrix);
	  };
	  d3.keys = function (map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function (map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function (map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function (arrays) {
	    var n = arrays.length,
	        m,
	        i = -1,
	        j = 0,
	        merged,
	        array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function (start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [],
	        k = d3_range_integerScale(abs(step)),
	        i = -1,
	        j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k);else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function (object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function (key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1,
	          n = object.length,
	          o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__",
	      d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function get(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function set(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function values() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function entries() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function forEach(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function () {
	    var nest = {},
	        keys = [],
	        sortKeys = [],
	        sortValues,
	        rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1,
	          n = array.length,
	          key = keys[depth++],
	          keyValue,
	          object,
	          setter,
	          valuesByKey = new d3_Map(),
	          values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [object]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function (keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function (keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [],
	          sortKey = sortKeys[depth++];
	      map.forEach(function (key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function (a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function (array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function (array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function (d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function (order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function (order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function (f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function (array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function add(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function forEach(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function (target, source) {
	    var i = 1,
	        n = arguments.length,
	        method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function () {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];
	  function d3_noop() {}
	  d3.dispatch = function () {
	    var dispatch = new d3_dispatch(),
	        i = -1,
	        n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function (type, listener) {
	    var i = type.indexOf("."),
	        name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [],
	        listenerByName = new d3_Map();
	    function event() {
	      var z = listeners,
	          i = -1,
	          n = z.length,
	          l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function (name, listener) {
	      var l = listenerByName.get(name),
	          i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event,
	        s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(),
	        i = 0,
	        n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function (thiz, argumentz) {
	      return function (e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function (s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = ({}).__proto__ ? function (object, prototype) {
	    object.__proto__ = prototype;
	  } : function (object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function d3_select(s, n) {
	    return n.querySelector(s);
	  },
	      d3_selectAll = function d3_selectAll(s, n) {
	    return n.querySelectorAll(s);
	  },
	      _d3_selectMatches = function d3_selectMatches(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    _d3_selectMatches = function (n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return _d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function (s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    _d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function () {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function (selector) {
	    var subgroups = [],
	        subgroup,
	        subnode,
	        group,
	        node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m;) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n;) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function () {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function (selector) {
	    var subgroups = [],
	        subgroup,
	        node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m;) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function () {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: "http://www.w3.org/1999/xhtml",
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function qualify(name) {
	      var i = name.indexOf(":"),
	          prefix = name;
	      if (i >= 0) {
	        prefix = name.slice(0, i);
	        name = name.slice(i + 1);
	      }
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function (name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name);else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local);else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function (name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(),
	            n = (name = d3_selection_classes(name)).length,
	            i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1,
	          x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function (node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function (name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name);else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function (name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name];else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function (value) {
	    return arguments.length ? this.each(typeof value === "function" ? function () {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function () {
	      this.textContent = "";
	    } : function () {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function (value) {
	    return arguments.length ? this.each(typeof value === "function" ? function () {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function () {
	      this.innerHTML = "";
	    } : function () {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function (name) {
	    name = d3_selection_creator(name);
	    return this.select(function () {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument,
	          namespace = this.namespaceURI;
	      return namespace ? document.createElementNS(namespace, name) : document.createElement(name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function (name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function () {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function () {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function (value, key) {
	    var i = -1,
	        n = this.length,
	        group,
	        node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i,
	          n = group.length,
	          m = groupData.length,
	          n0 = Math.min(n, m),
	          updateNodes = new Array(m),
	          enterNodes = new Array(m),
	          exitNodes = new Array(n),
	          node,
	          nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(),
	            keyValues = new Array(n),
	            keyValue;
	        for (i = -1; ++i < n;) {
	          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {
	            exitNodes[i] = node;
	          } else {
	            nodeByKeyValue.set(keyValue, node);
	          }
	          keyValues[i] = keyValue;
	        }
	        for (i = -1; ++i < m;) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n;) {
	          if (nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0;) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (; i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (; i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]),
	        update = d3_selection([]),
	        exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function () {
	      return enter;
	    };
	    update.exit = function () {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function (value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function (filter) {
	    var subgroups = [],
	        subgroup,
	        group,
	        node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function () {
	      return _d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function () {
	    for (var j = -1, m = this.length; ++j < m;) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function (comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m;) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function (a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function (callback) {
	    return d3_selection_each(this, function (node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function (callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function () {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function () {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function () {
	    var n = 0;
	    d3_selection_each(this, function () {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function (selector) {
	    var subgroups = [],
	        subgroup,
	        subnode,
	        upgroup,
	        group,
	        node;
	    for (var j = -1, m = this.length; ++j < m;) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n;) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function (name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function (d, i, j) {
	      var group = enter[j].update,
	          n = group.length,
	          node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n);
	      return node;
	    };
	  }
	  d3.select = function (node) {
	    var group;
	    if (typeof node === "string") {
	      group = [d3_select(node, d3_document)];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [node];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([group]);
	  };
	  d3.selectAll = function (nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = nodes;
	      group.parentNode = null;
	    }
	    return d3_selection([group]);
	  };
	  d3_selectionPrototype.on = function (type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type,
	        i = type.indexOf("."),
	        wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"),
	          match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function (k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function (e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function (e) {
	      var target = this,
	          related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect,
	      d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId,
	        click = "click" + name,
	        w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style,
	          select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function (suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function off() {
	          w.on(click, null);
	        };
	        w.on(click, function () {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function (container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY;else point.x = e.clientX, point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [point.x, point.y];
	    }
	    var rect = container.getBoundingClientRect();
	    return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop];
	  }
	  d3.touch = function (container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function () {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"),
	        origin = null,
	        mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"),
	        touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function () {
	        var that = this,
	            target = d3.event.target,
	            parent = that.parentNode,
	            dispatch = event.of(that, arguments),
	            dragged = 0,
	            dragId = id(),
	            dragName = ".drag" + (dragId == null ? "" : "-" + dragId),
	            dragOffset,
	            dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended),
	            dragRestore = d3_event_dragSuppress(target),
	            position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [dragOffset.x - position0[0], dragOffset.y - position0[1]];
	        } else {
	          dragOffset = [0, 0];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId),
	              dx,
	              dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged && d3.event.target === target);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function (x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function (container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function (touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6,
	      ε2 = ε * ε,
	      π = Math.PI,
	      τ = 2 * π,
	      τε = τ - ε,
	      halfπ = π / 2,
	      d3_radians = π / 180,
	      d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2,
	      ρ2 = 2,
	      ρ4 = 4;
	  d3.interpolateZoom = function (p0, p1) {
	    var ux0 = p0[0],
	        uy0 = p0[1],
	        w0 = p0[2],
	        ux1 = p1[0],
	        uy1 = p1[1],
	        w1 = p1[2];
	    var dx = ux1 - ux0,
	        dy = uy1 - uy0,
	        d2 = dx * dx + dy * dy,
	        d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1),
	        dr = r1 - r0,
	        S = (dr || Math.log(w1 / w0)) / ρ;
	    function interpolate(t) {
	      var s = t * S;
	      if (dr) {
	        var coshr0 = d3_cosh(r0),
	            u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0)];
	      }
	      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s)];
	    }
	    interpolate.duration = S * 1e3;
	    return interpolate;
	  };
	  d3.behavior.zoom = function () {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    },
	        translate0,
	        center0,
	        center,
	        size = [960, 500],
	        scaleExtent = d3_behavior_zoomInfinity,
	        duration = 250,
	        zooming = 0,
	        mousedown = "mousedown.zoom",
	        mousemove = "mousemove.zoom",
	        mouseup = "mouseup.zoom",
	        mousewheelTimer,
	        touchstart = "touchstart.zoom",
	        touchtime,
	        event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"),
	        x0,
	        x1,
	        y0,
	        y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function () {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function () {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function () {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function (g) {
	      g.each(function () {
	        var dispatch = event.of(this, arguments),
	            view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function () {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function () {
	            var dx = size[0],
	                dy = size[1],
	                cx = center0 ? center0[0] : dx / 2,
	                cy = center0 ? center0[1] : dy / 2,
	                i = d3.interpolateZoom([(cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k], [(cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k]);
	            return function (t) {
	              var l = i(t),
	                  k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function () {
	            zoomended(dispatch);
	          }).each("end.zoom", function () {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function (_) {
	      if (!arguments.length) return [view.x, view.y];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function (_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: +_
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function (_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [+_[0], +_[1]];
	      return zoom;
	    };
	    zoom.center = function (_) {
	      if (!arguments.length) return center;
	      center = _ && [+_[0], +_[1]];
	      return zoom;
	    };
	    zoom.size = function (_) {
	      if (!arguments.length) return size;
	      size = _ && [+_[0], +_[1]];
	      return zoom;
	    };
	    zoom.duration = function (_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function (z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function (z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [(p[0] - view.x) / view.k, (p[1] - view.y) / view.k];
	    }
	    function point(l) {
	      return [l[0] * view.k + view.x, l[1] * view.k + view.y];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function (x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function (y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (! zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [view.x, view.y]
	      });
	    }
	    function zoomended(dispatch) {
	      if (! --zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this,
	          target = d3.event.target,
	          dispatch = event.of(that, arguments),
	          dragged = 0,
	          subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended),
	          location0 = location(d3.mouse(that)),
	          dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged && d3.event.target === target);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this,
	          dispatch = event.of(that, arguments),
	          locations0 = {},
	          distance0 = 0,
	          scale0,
	          zoomName = ".zoom-" + d3.event.changedTouches[0].identifier,
	          touchmove = "touchmove" + zoomName,
	          touchend = "touchend" + zoomName,
	          targets = [],
	          subject = d3.select(that),
	          dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function (t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(),
	            now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0],
	              q = touches[1],
	              dx = p[0] - q[0],
	              dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that),
	            p0,
	            l0,
	            p1,
	            l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1,
	              scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
	          l0 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer);else d3_selection_interrupt.call(this), translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function () {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this),
	          k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [0, Infinity],
	      d3_behavior_zoomDelta,
	      d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function () {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function (k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function (k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function () {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360;else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function (k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function (k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function () {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047,
	      d3_lab_Y = 1,
	      d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function (k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function (k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function () {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116,
	        x = y + a / 500,
	        z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~ ~r, this.g = ~ ~g, this.b = ~ ~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function (k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r,
	        g = this.g,
	        b = this.b,
	        i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function (k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function () {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function () {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    format = format.toLowerCase();
	    var r = 0,
	        g = 0,
	        b = 0,
	        m1,
	        m2,
	        color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format);
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	        case "hsl":
	          {
	            return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	          }

	        case "rgb":
	          {
	            return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	          }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255),
	        max = Math.max(r, g, b),
	        d = max - min,
	        h,
	        s,
	        l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0);else if (g == max) h = (b - r) / d + 2;else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X),
	        y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y),
	        z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function (key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function () {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function (url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {},
	        dispatch = d3.dispatch("beforesend", "progress", "load", "error"),
	        headers = {},
	        request = new XMLHttpRequest(),
	        responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status,
	          result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function (event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function (name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name];else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function (value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function (value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function (value) {
	      response = value;
	      return xhr;
	    };
	    ["get", "post"].forEach(function (method) {
	      xhr[method] = function () {
	        return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function (method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function (request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function () {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function (error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function (delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"),
	        delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function (_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function (request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function (text, f) {
	      var o;
	      return dsv.parseRows(text, function (row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function (name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function (row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function (text, f) {
	      var EOL = {},
	          EOF = {},
	          rows = [],
	          N = text.length,
	          I = 0,
	          n = 0,
	          t,
	          eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return (eol = false, EOL);
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++),
	              k = 1;
	          if (c === 10) eol = true;else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function (rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(),
	          fields = [];
	      rows.forEach(function (row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
	        return fields.map(function (field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function (rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead,
	      d3_timer_queueTail,
	      d3_timer_interval,
	      d3_timer_timeout,
	      d3_timer_active,
	      d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function (callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function (callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay,
	        timer = {
	      c: callback,
	      t: time,
	      f: false,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer;else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  };
	  function d3_timer_step() {
	    var now = d3_timer_mark(),
	        delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function () {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now();
	    d3_timer_active = d3_timer_queueHead;
	    while (d3_timer_active) {
	      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
	      d3_timer_active = d3_timer_active.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0,
	        t1 = d3_timer_queueHead,
	        time = Infinity;
	    while (t1) {
	      if (t1.f) {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      } else {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function (x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"].map(d3_formatPrefix);
	  d3.formatPrefix = function (value, precision) {
	    var i = 0;
	    if (value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function (d) {
	        return d / k;
	      } : function (d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal,
	        locale_thousands = locale.thousands,
	        locale_grouping = locale.grouping,
	        locale_currency = locale.currency,
	        formatGroup = locale_grouping && locale_thousands ? function (value, width) {
	      var i = value.length,
	          t = [],
	          j = 0,
	          g = locale_grouping[0],
	          length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function (specifier) {
	      var match = d3_format_re.exec(specifier),
	          fill = match[1] || " ",
	          align = match[2] || ">",
	          sign = match[3] || "-",
	          symbol = match[4] || "",
	          zfill = match[5],
	          width = +match[6],
	          comma = match[7],
	          precision = match[8],
	          type = match[9],
	          scale = 1,
	          prefix = "",
	          suffix = "",
	          integer = false,
	          exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	        case "n":
	          comma = true;
	          type = "g";
	          break;

	        case "%":
	          scale = 100;
	          suffix = "%";
	          type = "f";
	          break;

	        case "p":
	          scale = 100;
	          suffix = "%";
	          type = "r";
	          break;

	        case "b":
	        case "o":
	        case "x":
	        case "X":
	          if (symbol === "#") prefix = "0" + type.toLowerCase();

	        case "c":
	          exponent = false;

	        case "d":
	          integer = true;
	          precision = 0;
	          break;

	        case "s":
	          scale = -1;
	          type = "r";
	          break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision));else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function (value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."),
	            before,
	            after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = "";else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length),
	            padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function b(x) {
	      return x.toString(2);
	    },
	    c: function c(x) {
	      return String.fromCharCode(x);
	    },
	    o: function o(x) {
	      return x.toString(8);
	    },
	    x: function x(_x) {
	      return _x.toString(16);
	    },
	    X: function X(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function g(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function e(x, p) {
	      return x.toExponential(p);
	    },
	    f: function f(x, p) {
	      return x.toFixed(p);
	    },
	    r: function r(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {},
	      d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function getDate() {
	      return this._.getUTCDate();
	    },
	    getDay: function getDay() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function getFullYear() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function getHours() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function getMilliseconds() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function getMinutes() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function getMonth() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function getSeconds() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function getTime() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function getTimezoneOffset() {
	      return 0;
	    },
	    valueOf: function valueOf() {
	      return this._.valueOf();
	    },
	    setDate: function setDate() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function setDay() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function setFullYear() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function setHours() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function setMilliseconds() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function setMinutes() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function setMonth() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function setSeconds() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function setTime() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date),
	          d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0),
	          times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function (date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function (date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function (date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function (date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function (date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function (date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function (date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function (date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"].forEach(function (day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function (date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function (date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function (date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function (date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime,
	        locale_date = locale.date,
	        locale_time = locale.time,
	        locale_periods = locale.periods,
	        locale_days = locale.days,
	        locale_shortDays = locale.shortDays,
	        locale_months = locale.months,
	        locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [],
	            i = -1,
	            j = 0,
	            c,
	            p,
	            f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function (string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        },
	            i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc,
	            date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j);else if ("w" in d && ("W" in d || "U" in d)) {
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function () {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c,
	          p,
	          t,
	          i = 0,
	          n = template.length,
	          m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function (template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function (string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(),
	        d3_time_dayRe = d3_time_formatRe(locale_days),
	        d3_time_dayLookup = d3_time_formatLookup(locale_days),
	        d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays),
	        d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays),
	        d3_time_monthRe = d3_time_formatRe(locale_months),
	        d3_time_monthLookup = d3_time_formatLookup(locale_months),
	        d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths),
	        d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function (p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function a(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function A(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function b(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function B(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function d(_d, p) {
	        return d3_time_formatPad(_d.getDate(), p, 2);
	      },
	      e: function e(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function H(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function I(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function j(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function L(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function m(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function M(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function p(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function S(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function U(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function w(d) {
	        return d.getDay();
	      },
	      W: function W(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function y(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function Y(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function _() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  },
	      d3_time_numberRe = /^\s*\d+/,
	      d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "",
	        string = (sign ? -value : value) + "",
	        length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(),
	        i = -1,
	        n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return (/^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, i + 5) : -1
	    );
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(),
	        zs = z > 0 ? "-" : "+",
	        zh = abs(z) / 60 | 0,
	        zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length,
	        i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function (date) {
	      var i = 0,
	          f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function (locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [3],
	    currency: ["$", ""],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: ["AM", "PM"],
	    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function add(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t;else this.s = d3_adderTemp.t;
	    },
	    reset: function reset() {
	      this.s = this.t = 0;
	    },
	    valueOf: function valueOf() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b,
	        bv = x - a,
	        av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function (object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function Feature(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function FeatureCollection(object, listener) {
	      var features = object.features,
	          i = -1,
	          n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function Sphere(object, listener) {
	      listener.sphere();
	    },
	    Point: function Point(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function MultiPoint(object, listener) {
	      var coordinates = object.coordinates,
	          i = -1,
	          n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function LineString(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function MultiLineString(object, listener) {
	      var coordinates = object.coordinates,
	          i = -1,
	          n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function Polygon(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function MultiPolygon(object, listener) {
	      var coordinates = object.coordinates,
	          i = -1,
	          n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function GeometryCollection(object, listener) {
	      var geometries = object.geometries,
	          i = -1,
	          n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1,
	        n = coordinates.length - closed,
	        coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1,
	        n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function (object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum,
	      d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function sphere() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function polygonStart() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function polygonEnd() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function (λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0,
	          sdλ = dλ >= 0 ? 1 : -1,
	          adλ = sdλ * dλ,
	          cosφ = Math.cos(φ),
	          sinφ = Math.sin(φ),
	          k = sinφ0 * sinφ,
	          u = cosφ0 * cosφ + k * Math.cos(adλ),
	          v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function () {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0],
	        φ = spherical[1],
	        cosφ = Math.cos(φ);
	    return [cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ)];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [vector[0] * k, vector[1] * k, vector[2] * k];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2])];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = (function () {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function polygonStart() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function polygonEnd() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);else if (dλSum > ε) φ1 = 90;else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [λ0 = λ, λ1 = λ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([λ * d3_radians, φ * d3_radians]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p),
	            equatorial = [normal[1], -normal[0], 0],
	            inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_,
	            s = dλ > 0 ? 1 : -1,
	            λi = inflection[0] * d3_degrees * s,
	            antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if ((λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ))) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function (feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity,
	            dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[λ0, φ0], [λ1, φ1]];
	    };
	  })();
	  d3.geo.centroid = function (object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2,
	        y = d3_geo_centroidY2,
	        z = d3_geo_centroidZ2,
	        m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [NaN, NaN];
	    }
	    return [Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function polygonStart() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function polygonEnd() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function (λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians),
	          x = cosφ * Math.cos(λ),
	          y = cosφ * Math.sin(λ),
	          z = Math.sin(φ),
	          w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function (λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function () {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians),
	          x = cosφ * Math.cos(λ),
	          y = cosφ * Math.sin(λ),
	          z = Math.sin(φ),
	          cx = y0 * z - z0 * y,
	          cy = z0 * x - x0 * z,
	          cz = x0 * y - y0 * x,
	          m = Math.sqrt(cx * cx + cy * cy + cz * cz),
	          u = x0 * x + y0 * y + z0 * z,
	          v = m && -d3_acos(u) / m,
	          w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return (x = a(x, y), b(x[0], x[1]));
	    }
	    if (a.invert && b.invert) compose.invert = function (x, y) {
	      return (x = b.invert(x, y), x && a.invert(x[0], x[1]));
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [],
	        clip = [];
	    segments.forEach(function (segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n,
	          p0 = segment[0],
	          p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true),
	          b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0],
	        points,
	        point;
	    while (1) {
	      var current = start,
	          isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n,
	        i = 0,
	        a = array[0],
	        b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function (rotate, listener) {
	      var line = clipLine(listener),
	          rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function polygonStart() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function polygonEnd() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function sphere() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(),
	          ringListener = clipLine(buffer),
	          polygonStarted = false,
	          polygon,
	          ring;
	      function pointRing(λ, φ) {
	        ring.push([λ, φ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(),
	            ringSegments = buffer.buffer(),
	            segment,
	            n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1,
	              i = -1,
	              point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [],
	        line;
	    return {
	      lineStart: function lineStart() {
	        lines.push(line = []);
	      },
	      point: function point(λ, φ) {
	        line.push([λ, φ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function buffer() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function rejoin() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [-π, -π / 2]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN,
	        φ0 = NaN,
	        sλ0 = NaN,
	        clean;
	    return {
	      lineStart: function lineStart() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function point(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π,
	            dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function lineEnd() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: (function (_clean) {
	        function clean() {
	          return _clean.apply(this, arguments);
	        }

	        clean.toString = function () {
	          return _clean.toString();
	        };

	        return clean;
	      })(function () {
	        return 2 - clean;
	      })
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0,
	        cosφ1,
	        sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0],
	        parallel = point[1],
	        meridianNormal = [Math.sin(meridian), -Math.cos(meridian), 0],
	        polarAngle = 0,
	        winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i],
	          m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0],
	          λ0 = point0[0],
	          φ0 = point0[1] / 2 + π / 4,
	          sinφ0 = Math.sin(φ0),
	          cosφ0 = Math.cos(φ0),
	          j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0],
	            φ = point[1] / 2 + π / 4,
	            sinφ = Math.sin(φ),
	            cosφ = Math.cos(φ),
	            dλ = λ - λ0,
	            sdλ = dλ >= 0 ? 1 : -1,
	            adλ = sdλ * dλ,
	            antimeridian = adλ > π,
	            k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (! j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius),
	        smallRadius = cr > 0,
	        notHemisphere = abs(cr) > ε,
	        interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-π, radius - π]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function lineStart() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function point(λ, φ) {
	          var point1 = [λ, φ],
	              point2,
	              v = visible(λ, φ),
	              c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function lineEnd() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: (function (_clean2) {
	          function clean() {
	            return _clean2.apply(this, arguments);
	          }

	          clean.toString = function () {
	            return _clean2.toString();
	          };

	          return clean;
	        })(function () {
	          return clean | (v00 && v0) << 1;
	        })
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a),
	          pb = d3_geo_cartesian(b);
	      var n1 = [1, 0, 0],
	          n2 = d3_geo_cartesianCross(pa, pb),
	          n2n2 = d3_geo_cartesianDot(n2, n2),
	          n1n2 = n2[0],
	          determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant,
	          c2 = -cr * n1n2 / determinant,
	          n1xn2 = d3_geo_cartesianCross(n1, n2),
	          A = d3_geo_cartesianScale(n1, c1),
	          B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2,
	          w = d3_geo_cartesianDot(A, u),
	          uu = d3_geo_cartesianDot(u, u),
	          t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2),
	          q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0],
	          λ1 = b[0],
	          φ0 = a[1],
	          φ1 = b[1],
	          z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0,
	          polar = abs(δλ - π) < ε,
	          meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [q, d3_geo_spherical(q1)];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius,
	          code = 0;
	      if (λ < -r) code |= 1;else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4;else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function (line) {
	      var a = line.a,
	          b = line.b,
	          ax = a.x,
	          ay = a.y,
	          bx = b.x,
	          by = b.y,
	          t0 = 0,
	          t1 = 1,
	          dx = bx - ax,
	          dy = by - ay,
	          r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function () {
	    var x0,
	        y0,
	        x1,
	        y1,
	        _stream,
	        clip,
	        clipExtent = {
	      stream: function stream(output) {
	        if (_stream) _stream.valid = false;
	        _stream = clip(output);
	        _stream.valid = true;
	        return _stream;
	      },
	      extent: function extent(_) {
	        if (!arguments.length) return [[x0, y0], [x1, y1]];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (_stream) _stream.valid = false, _stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([[0, 0], [960, 500]]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function (listener) {
	      var listener_ = listener,
	          bufferListener = d3_geo_clipBufferListener(),
	          clipLine = d3_geom_clipLine(x0, y0, x1, y1),
	          segments,
	          polygon,
	          ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function polygonStart() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function polygonEnd() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([x0, y1]),
	              inside = clean && clipStartInside,
	              visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0,
	            n = polygon.length,
	            y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0,
	            a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([x, y]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y);else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1),
	          cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0,
	        φ1 = π / 3,
	        m = d3_geo_projectionMutator(projectAt),
	        p = m(φ0, φ1);
	    p.parallels = function (_) {
	      if (!arguments.length) return [φ0 / π * 180, φ1 / π * 180];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0),
	        n = (sinφ0 + Math.sin(φ1)) / 2,
	        C = 1 + sinφ0 * (2 * n - sinφ0),
	        ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ)];
	    }
	    forward.invert = function (x, y) {
	      var ρ0_y = ρ0 - y;
	      return [Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n))];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function () {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function () {
	    return d3.geo.conicEqualArea().rotate([96, 0]).center([-.6, 38.7]).parallels([29.5, 45.5]).scale(1070);
	  };
	  d3.geo.albersUsa = function () {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]);
	    var hawaii = d3.geo.conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]);
	    var point,
	        pointStream = {
	      point: (function (_point) {
	        function point(_x2, _x3) {
	          return _point.apply(this, arguments);
	        }

	        point.toString = function () {
	          return _point.toString();
	        };

	        return point;
	      })(function (x, y) {
	        point = [x, y];
	      })
	    },
	        lower48Point,
	        alaskaPoint,
	        hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0],
	          y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function (coordinates) {
	      var k = lower48.scale(),
	          t = lower48.translate(),
	          x = (coordinates[0] - t[0]) / k,
	          y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function (stream) {
	      var lower48Stream = lower48.stream(stream),
	          alaskaStream = alaska.stream(stream),
	          hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function point(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function sphere() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function lineStart() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function lineEnd() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function polygonStart() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function polygonEnd() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function (_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function (_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function (_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(),
	          x = +_[0],
	          y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([[x - .455 * k, y - .238 * k], [x + .455 * k, y + .238 * k]]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([x - .307 * k, y + .201 * k]).clipExtent([[x - .425 * k + ε, y + .12 * k + ε], [x - .214 * k - ε, y + .234 * k - ε]]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([x - .205 * k, y + .212 * k]).clipExtent([[x - .214 * k + ε, y + .166 * k + ε], [x - .115 * k - ε, y + .234 * k - ε]]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum,
	      d3_geo_pathAreaPolygon,
	      d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function polygonStart() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function polygonEnd() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function (x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function () {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5),
	        buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function lineStart() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function polygonStart() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function polygonEnd() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function pointRadius(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function result() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function polygonStart() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function polygonEnd() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function (x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0,
	          dy = y - y0,
	          z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function (x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0,
	          dy = y - y0,
	          z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function () {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var _pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function lineStart() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function polygonStart() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function polygonEnd() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function pointRadius(_) {
	        _pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + _pointRadius, y);
	      context.arc(x, y, _pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5,
	        cosMinDistance = Math.cos(30 * d3_radians),
	        maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function (x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function polygonStart() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function polygonEnd() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([λ, φ]),
	            p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0,
	          dy = y1 - y0,
	          d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1,
	            b = b0 + b1,
	            c = c0 + c1,
	            m = Math.sqrt(a * a + b * b + c * c),
	            φ2 = Math.asin(c /= m),
	            λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a),
	            p = project(λ2, φ2),
	            x2 = p[0],
	            y2 = p[1],
	            dx2 = x2 - x0,
	            dy2 = y2 - y0,
	            dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function (_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function () {
	    var pointRadius = 4.5,
	        projection,
	        context,
	        projectStream,
	        contextStream,
	        cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function (object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function (object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2] : d3_geo_centroidZ1 ? [d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1] : d3_geo_centroidZ0 ? [d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0] : [NaN, NaN];
	    };
	    path.bounds = function (object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [[d3_geo_pathBoundsX0, d3_geo_pathBoundsY0], [d3_geo_pathBoundsX1, d3_geo_pathBoundsY1]];
	    };
	    path.projection = function (_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function (_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function (_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function (x, y) {
	      return project([x * d3_degrees, y * d3_degrees]);
	    });
	    return function (stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function (methods) {
	    return {
	      stream: function stream(_stream2) {
	        var transform = new d3_geo_transform(_stream2);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function point(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function sphere() {
	      this.stream.sphere();
	    },
	    lineStart: function lineStart() {
	      this.stream.lineStart();
	    },
	    lineEnd: function lineEnd() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function polygonStart() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function polygonEnd() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function sphere() {
	        stream.sphere();
	      },
	      lineStart: function lineStart() {
	        stream.lineStart();
	      },
	      lineEnd: function lineEnd() {
	        stream.lineEnd();
	      },
	      polygonStart: function polygonStart() {
	        stream.polygonStart();
	      },
	      polygonEnd: function polygonEnd() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function () {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project,
	        rotate,
	        projectRotate,
	        projectResample = d3_geo_resample(function (x, y) {
	      x = project(x, y);
	      return [x[0] * k + δx, δy - x[1] * k];
	    }),
	        k = 150,
	        x = 480,
	        y = 250,
	        λ = 0,
	        φ = 0,
	        δλ = 0,
	        δφ = 0,
	        δγ = 0,
	        δx,
	        δy,
	        preclip = d3_geo_clipAntimeridian,
	        postclip = d3_identity,
	        clipAngle = null,
	        clipExtent = null,
	        stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [point[0] * k + δx, δy - point[1] * k];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [point[0] * d3_degrees, point[1] * d3_degrees];
	    }
	    projection.stream = function (output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function (_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function (_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function (_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function (_) {
	      if (!arguments.length) return [x, y];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function (_) {
	      if (!arguments.length) return [λ * d3_degrees, φ * d3_degrees];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function (_) {
	      if (!arguments.length) return [δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function () {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function (x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [λ, φ];
	  }
	  (d3.geo.equirectangular = function () {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function (rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return (coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates);
	    }
	    forward.invert = function (coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return (coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates);
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function (λ, φ) {
	      return (λ += δλ, [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ]);
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ),
	        sinδφ = Math.sin(δφ),
	        cosδγ = Math.cos(δγ),
	        sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ),
	          x = Math.cos(λ) * cosφ,
	          y = Math.sin(λ) * cosφ,
	          z = Math.sin(φ),
	          k = z * cosδφ + x * sinδφ;
	      return [Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ)];
	    }
	    rotation.invert = function (λ, φ) {
	      var cosφ = Math.cos(φ),
	          x = Math.cos(λ) * cosφ,
	          y = Math.sin(λ) * cosφ,
	          z = Math.sin(φ),
	          k = z * cosδγ - y * sinδγ;
	      return [Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ)];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function () {
	    var origin = [0, 0],
	        angle,
	        precision = 6,
	        interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin,
	          rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert,
	          ring = [];
	      interpolate(null, null, 1, {
	        point: function point(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ring]
	      };
	    }
	    circle.origin = function (x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function (x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function (_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius),
	        sr = Math.sin(radius);
	    return function (from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([cr, -sr * Math.cos(t), -sr * Math.sin(t)]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function (a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians,
	        φ0 = a[1] * d3_radians,
	        φ1 = b[1] * d3_radians,
	        sinΔλ = Math.sin(Δλ),
	        cosΔλ = Math.cos(Δλ),
	        sinφ0 = Math.sin(φ0),
	        cosφ0 = Math.cos(φ0),
	        sinφ1 = Math.sin(φ1),
	        cosφ1 = Math.cos(φ1),
	        t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function () {
	    var x1,
	        x0,
	        X1,
	        X0,
	        y1,
	        y0,
	        Y1,
	        Y0,
	        dx = 10,
	        dy = dx,
	        DX = 90,
	        DY = 360,
	        x,
	        y,
	        X,
	        Y,
	        precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function () {
	      return lines().map(function (coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function () {
	      return {
	        type: "Polygon",
	        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
	      };
	    };
	    graticule.extent = function (_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function (_) {
	      if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function (_) {
	      if (!arguments.length) return [[x0, y0], [x1, y1]];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function (_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function (_) {
	      if (!arguments.length) return [DX, DY];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function (_) {
	      if (!arguments.length) return [dx, dy];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function (_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([[-180, -90 + ε], [180, 90 - ε]]).minorExtent([[-180, -80 - ε], [180, 80 + ε]]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function (x) {
	      return y.map(function (y) {
	        return [x, y];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function (y) {
	      return x.map(function (x) {
	        return [x, y];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function () {
	    var source = d3_source,
	        source_,
	        target = d3_target,
	        target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [source_ || source.apply(this, arguments), target_ || target.apply(this, arguments)]
	      };
	    }
	    greatArc.distance = function () {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function (_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function (_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function () {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function (source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0),
	        sy0 = Math.sin(y0),
	        cy1 = Math.cos(y1),
	        sy1 = Math.sin(y1),
	        kx0 = cy0 * Math.cos(x0),
	        ky0 = cy0 * Math.sin(x0),
	        kx1 = cy1 * Math.cos(x1),
	        ky1 = cy1 * Math.sin(x1),
	        d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))),
	        k = 1 / Math.sin(d);
	    var interpolate = d ? function (t) {
	      var B = Math.sin(t *= d) * k,
	          A = Math.sin(d - t) * k,
	          x = A * kx0 + B * kx1,
	          y = A * ky0 + B * ky1,
	          z = A * sy0 + B * sy1;
	      return [Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees];
	    } : function () {
	      return [x0 * d3_degrees, y0 * d3_degrees];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function (object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function (λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function () {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians),
	          cosφ = Math.cos(φ),
	          t = abs((λ *= d3_radians) - λ0),
	          cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ),
	          cosφ = Math.cos(φ),
	          k = scale(cosλ * cosφ);
	      return [k * cosφ * Math.sin(λ), k * Math.sin(φ)];
	    }
	    azimuthal.invert = function (x, y) {
	      var ρ = Math.sqrt(x * x + y * y),
	          c = angle(ρ),
	          sinc = Math.sin(c),
	          cosc = Math.cos(c);
	      return [Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ)];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function (cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function (ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function () {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function (cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function () {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0),
	        t = function t(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    },
	        n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)),
	        F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ)];
	    }
	    forward.invert = function (x, y) {
	      var ρ0_y = F - y,
	          ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function () {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0),
	        n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0),
	        G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ)];
	    }
	    forward.invert = function (x, y) {
	      var ρ0_y = G - y;
	      return [Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y)];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function () {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function (cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function () {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [λ, Math.log(Math.tan(π / 4 + φ / 2))];
	  }
	  d3_geo_mercator.invert = function (x, y) {
	    return [x, 2 * Math.atan(Math.exp(y)) - halfπ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project),
	        scale = m.scale,
	        translate = m.translate,
	        clipExtent = m.clipExtent,
	        clipAuto;
	    m.scale = function () {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function () {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function (_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(),
	              t = translate();
	          clipExtent([[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function () {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function () {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function () {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function (cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function (ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function () {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [Math.log(Math.tan(π / 4 + φ / 2)), -λ];
	  }
	  d3_geo_transverseMercator.invert = function (x, y) {
	    return [-y, 2 * Math.atan(Math.exp(x)) - halfπ];
	  };
	  (d3.geo.transverseMercator = function () {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator),
	        center = projection.center,
	        rotate = projection.rotate;
	    projection.center = function (_) {
	      return _ ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	    };
	    projection.rotate = function (_) {
	      return _ ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	    };
	    return rotate([0, 0, 90]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function (vertices) {
	    var x = d3_geom_pointX,
	        y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x),
	          fy = d3_functor(y),
	          i,
	          n = data.length,
	          points = [],
	          flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([+fx.call(this, data[i], i), +fy.call(this, data[i], i), i]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([points[i][0], -points[i][1]]);
	      var upper = d3_geom_hullUpper(points),
	          lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0],
	          skipRight = lower[lower.length - 1] === upper[upper.length - 1],
	          polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function (_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function (_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length,
	        hull = [0, 1],
	        hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function (coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function () {
	    var i = -1,
	        n = this.length,
	        a,
	        b = this[n - 1],
	        area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function (k) {
	    var i = -1,
	        n = this.length,
	        x = 0,
	        y = 0,
	        a,
	        b = this[n - 1],
	        c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [x * k, y * k];
	  };
	  d3_geom_polygonPrototype.clip = function (subject) {
	    var input,
	        closed = d3_geom_polygonClosed(subject),
	        i = -1,
	        n = this.length - d3_geom_polygonClosed(this),
	        j,
	        m,
	        a = this[n - 1],
	        b,
	        c,
	        d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0],
	        x3 = a[0],
	        x21 = d[0] - x1,
	        x43 = b[0] - x3,
	        y1 = c[1],
	        y3 = a[1],
	        y21 = d[1] - y1,
	        y43 = b[1] - y3,
	        ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [x1 + ua * x21, y1 + ua * y21];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0],
	        b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges,
	      d3_geom_voronoiCells,
	      d3_geom_voronoiBeaches,
	      d3_geom_voronoiBeachPool = [],
	      d3_geom_voronoiFirstCircle,
	      d3_geom_voronoiCircles,
	      d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle,
	        x = circle.x,
	        y = circle.cy,
	        vertex = {
	      x: x,
	      y: y
	    },
	        previous = beach.P,
	        next = beach.N,
	        disappearing = [beach];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length,
	        iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x,
	        directrix = site.y,
	        lArc,
	        rArc,
	        dxl,
	        dxr,
	        node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L;else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site,
	        ax = lSite.x,
	        ay = lSite.y,
	        bx = site.x - ax,
	        by = site.y - ay,
	        rSite = rArc.site,
	        cx = rSite.x - ax,
	        cy = rSite.y - ay,
	        d = 2 * (bx * cy - by * cx),
	        hb = bx * bx + by * by,
	        hc = cx * cx + cy * cy,
	        vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site,
	        rfocx = site.x,
	        rfocy = site.y,
	        pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x,
	        lfocy = site.y,
	        plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx,
	        aby2 = 1 / pby2 - 1 / plby2,
	        b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function () {
	    var halfEdges = this.edges,
	        iHalfEdge = halfEdges.length,
	        edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0],
	        x1 = extent[1][0],
	        y0 = extent[0][1],
	        y1 = extent[1][1],
	        x2,
	        y2,
	        x3,
	        y3,
	        cells = d3_geom_voronoiCells,
	        iCell = cells.length,
	        cell,
	        iHalfEdge,
	        halfEdges,
	        nHalfEdges,
	        start,
	        end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P,
	        rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site,
	        cSite = arc.site,
	        rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x,
	        by = cSite.y,
	        ax = lSite.x - bx,
	        ay = lSite.y - by,
	        cx = rSite.x - bx,
	        cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay,
	        hc = cx * cx + cy * cy,
	        x = (cy * ha - ay * hc) / d,
	        y = (ax * hc - cx * ha) / d,
	        cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null,
	        node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L;else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R;else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges,
	        clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]),
	        i = edges.length,
	        e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a,
	        x0 = extent[0][0],
	        x1 = extent[1][0],
	        y0 = extent[0][1],
	        y1 = extent[1][1],
	        lSite = edge.l,
	        rSite = edge.r,
	        lx = lSite.x,
	        ly = lSite.y,
	        rx = rSite.x,
	        ry = rSite.y,
	        fx = (lx + rx) / 2,
	        fy = (ly + ry) / 2,
	        fm,
	        fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        };else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        };else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          };else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          };else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a,
	        vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function start() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function end() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function insert(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function remove(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U,
	          sibling,
	          left = node.L,
	          right = node.R,
	          next,
	          red;
	      if (!left) next = right;else if (!right) next = left;else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next;else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node,
	        q = node.R,
	        parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q;else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node,
	        q = node.L,
	        parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q;else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(),
	        x0,
	        y0,
	        circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function (points) {
	    var x = d3_geom_pointX,
	        y = d3_geom_pointY,
	        fx = x,
	        fy = y,
	        clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length),
	          x0 = clipExtent[0][0],
	          y0 = clipExtent[0][1],
	          x1 = clipExtent[1][0],
	          y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {
	        var edges = cell.edges,
	            site = cell.site,
	            polygon = polygons[i] = edges.length ? edges.map(function (e) {
	          var s = e.start();
	          return [s.x, s.y];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [[x0, y1], [x1, y1], [x1, y0], [x0, y0]] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function (d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function (data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {
	        return edge.l && edge.r;
	      }).map(function (edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function (data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {
	        var site = cell.site,
	            edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder),
	            j = -1,
	            m = edges.length,
	            e0,
	            s0,
	            e1 = edges[m - 1].edge,
	            s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([data[i], data[s0.i], data[s1.i]]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function (_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function (_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function (_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function (_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [[0, 0], _]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [[-1e6, -1e6], [1e6, 1e6]];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function (vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function (points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX,
	        y = d3_geom_pointY,
	        compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d,
	          fx = d3_functor(x),
	          fy = d3_functor(y),
	          xs,
	          ys,
	          i,
	          n,
	          x1_,
	          y1_,
	          x2_,
	          y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i),
	              y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_,
	          dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx;else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x,
	              ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5,
	            ym = (y1 + y2) * .5,
	            right = x >= xm,
	            below = y >= ym,
	            i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm;else x2 = xm;
	        if (below) y1 = ym;else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function (d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function (f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function (point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function (_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function (_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function (_) {
	      if (!arguments.length) return x1 == null ? null : [[x1, y1], [x2, y2]];
	      if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function (_) {
	      if (!arguments.length) return x1 == null ? null : [x2 - x1, y2 - y1];
	      if (_ == null) x1 = y1 = x2 = y2 = null;else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5,
	          sy = (y1 + y2) * .5,
	          children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity,
	        closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point,
	            dx = x - node.x,
	            dy = y - node.y,
	            distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes,
	          xm = (x1 + x2) * .5,
	          ym = (y1 + y2) * .5,
	          right = x >= xm,
	          below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	          case 0:
	            find(node, x1, y1, xm, ym);
	            break;

	          case 1:
	            find(node, xm, y1, x2, ym);
	            break;

	          case 2:
	            find(node, x1, ym, xm, y2);
	            break;

	          case 3:
	            find(node, xm, ym, x2, y2);
	            break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r,
	        ag = a.g,
	        ab = a.b,
	        br = b.r - ar,
	        bg = b.g - ag,
	        bb = b.b - ab;
	    return function (t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {},
	        c = {},
	        k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function (t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function (t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0,
	        am,
	        bm,
	        bs,
	        i = -1,
	        s = [],
	        q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs;else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm;else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs;else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function (t) {
	      return b(t) + "";
	    }) : function () {
	      return b;
	    } : (b = q.length, function (t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	      d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length,
	        f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b)));
	    return f;
	  }
	  d3.interpolators = [function (a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  }];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [],
	        c = [],
	        na = a.length,
	        nb = b.length,
	        n0 = Math.min(a.length, b.length),
	        i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (; i < na; ++i) c[i] = a[i];
	    for (; i < nb; ++i) c[i] = b[i];
	    return function (t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function d3_ease_default() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function quad() {
	      return d3_ease_quad;
	    },
	    cubic: function cubic() {
	      return d3_ease_cubic;
	    },
	    sin: function sin() {
	      return d3_ease_sin;
	    },
	    exp: function exp() {
	      return d3_ease_exp;
	    },
	    circle: function circle() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function bounce() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function outIn(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function (name) {
	    var i = name.indexOf("-"),
	        t = i >= 0 ? name.slice(0, i) : name,
	        m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function (t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function (t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function (t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t,
	        t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function (t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a);else a = 1, s = p / 4;
	    return function (t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function (t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h,
	        ac = a.c,
	        al = a.l,
	        bh = b.h - ah,
	        bc = b.c - ac,
	        bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;
	    return function (t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h,
	        as = a.s,
	        al = a.l,
	        bh = b.h - ah,
	        bs = b.s - as,
	        bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah;else if (bh > 180) bh -= 360;else if (bh < -180) bh += 360;
	    return function (t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l,
	        aa = a.a,
	        ab = a.b,
	        bl = b.l - al,
	        ba = b.a - aa,
	        bb = b.b - ab;
	    return function (t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function (t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function (string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function (string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [m.a, m.b],
	        r1 = [m.c, m.d],
	        kx = d3_transformNormalize(r0),
	        kz = d3_transformDot(r0, r1),
	        ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [m.e, m.f];
	    this.scale = [kx, ky];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function () {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransform(a, b) {
	    var s = [],
	        q = [],
	        n,
	        A = d3.transform(a),
	        B = d3.transform(b),
	        ta = A.translate,
	        tb = B.translate,
	        ra = A.rotate,
	        rb = B.rotate,
	        wa = A.skew,
	        wb = B.skew,
	        ka = A.scale,
	        kb = B.scale;
	    if (ta[0] != tb[0] || ta[1] != tb[1]) {
	      s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: 1,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: 3,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    } else {
	      s.push("");
	    }
	    if (ra != rb) {
	      if (ra - rb > 180) rb += 360;else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(s.pop() + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(s.pop() + "rotate(" + rb + ")");
	    }
	    if (wa != wb) {
	      q.push({
	        i: s.push(s.pop() + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(s.pop() + "skewX(" + wb + ")");
	    }
	    if (ka[0] != kb[0] || ka[1] != kb[1]) {
	      n = s.push(s.pop() + "scale(", null, ",", null, ")");
	      q.push({
	        i: n - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: n - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] != 1 || kb[1] != 1) {
	      s.push(s.pop() + "scale(" + kb + ")");
	    }
	    n = q.length;
	    return function (t) {
	      var i = -1,
	          o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function (x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function (x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function () {
	    return function (links) {
	      var paths = [],
	          i = -1,
	          n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source,
	        end = link.target,
	        lca = d3_layout_bundleLeastCommonAncestor(start, end),
	        points = [start];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [],
	        parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a),
	        bNodes = d3_layout_bundleAncestors(b),
	        aNode = aNodes.pop(),
	        bNode = bNodes.pop(),
	        sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function () {
	    var chord = {},
	        chords,
	        groups,
	        matrix,
	        n,
	        padding = 0,
	        sortGroups,
	        sortSubgroups,
	        sortChords;
	    function relayout() {
	      var subgroups = {},
	          groupSums = [],
	          groupIndex = d3.range(n),
	          subgroupIndex = [],
	          k,
	          x,
	          x0,
	          i,
	          j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function (a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function (d, i) {
	          d.sort(function (a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i],
	              dj = subgroupIndex[di][j],
	              v = matrix[di][dj],
	              a0 = x,
	              a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: (x - x0) / k
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j],
	              target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function (a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function (x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function (x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function (x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function (x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function (x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function () {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function () {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function () {
	    var force = {},
	        event = d3.dispatch("start", "tick", "end"),
	        size = [1, 1],
	        drag,
	        alpha,
	        friction = .9,
	        linkDistance = d3_layout_forceLinkDistance,
	        linkStrength = d3_layout_forceLinkStrength,
	        charge = -30,
	        chargeDistance2 = d3_layout_forceChargeDistance2,
	        gravity = .1,
	        theta2 = .64,
	        nodes = [],
	        links = [],
	        distances,
	        strengths,
	        charges;
	    function repulse(node) {
	      return function (quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x,
	              dy = quad.cy - node.y,
	              dw = x2 - x1,
	              dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function () {
	      if ((alpha *= .99) < .005) {
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length,
	          m = links.length,
	          q,
	          i,
	          o,
	          s,
	          t,
	          l,
	          k,
	          x,
	          y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight / (t.weight + s.weight));
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function (x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function (x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function (x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function (x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function (x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function (x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function (x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function (x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function (x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function (x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function (x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) alpha = x;else alpha = 0;
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        d3.timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function () {
	      var i,
	          n = nodes.length,
	          m = links.length,
	          w = size[0],
	          h = size[1],
	          neighbors,
	          o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i);else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i);else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i);else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i],
	            j = -1,
	            l = candidates.length,
	            x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function () {
	      return force.alpha(.1);
	    };
	    force.stop = function () {
	      return force.alpha(0);
	    };
	    force.drag = function () {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0,
	        cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes,
	          n = nodes.length,
	          i = -1,
	          c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20,
	      d3_layout_forceLinkStrength = 1,
	      d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function () {
	    var sort = d3_layout_hierarchySort,
	        children = d3_layout_hierarchyChildren,
	        value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [root],
	          nodes = [],
	          node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function (node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function (x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function (x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function (x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function (root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function (node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function (node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [node];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [node],
	        nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1,
	            n,
	            children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function (parent) {
	      return (parent.children || []).map(function (child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function () {
	    var hierarchy = d3.layout.hierarchy(),
	        size = [1, 1];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1,
	            n,
	            c,
	            d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children,
	          d = 0;
	      if (children && (n = children.length)) {
	        var i = -1,
	            n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function (x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function () {
	    var value = Number,
	        sort = d3_layout_pieSortByValue,
	        startAngle = 0,
	        endAngle = τ,
	        padAngle = 0;
	    function pie(data) {
	      var n = data.length,
	          values = data.map(function (d, i) {
	        return +value.call(pie, d, i);
	      }),
	          a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle),
	          da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a,
	          p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)),
	          pa = p * (da < 0 ? -1 : 1),
	          k = (da - n * pa) / d3.sum(values),
	          index = d3.range(n),
	          arcs = [],
	          v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {
	        return values[j] - values[i];
	      } : function (i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function (i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function (_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function (_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function (_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function (_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function (_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function () {
	    var values = d3_identity,
	        order = d3_layout_stackOrderDefault,
	        offset = d3_layout_stackOffsetZero,
	        out = d3_layout_stackOut,
	        x = d3_layout_stackX,
	        y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function (d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function (d) {
	        return d.map(function (v, i) {
	          return [x.call(stack, v, i), y.call(stack, v, i)];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length,
	          n,
	          i,
	          j,
	          o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function (x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function (x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function (x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function (z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function (z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function (z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function insideOut(data) {
	      var n = data.length,
	          i,
	          j,
	          max = data.map(d3_layout_stackMaxIndex),
	          sums = data.map(d3_layout_stackReduceSum),
	          index = d3.range(n).sort(function (a, b) {
	        return max[a] - max[b];
	      }),
	          top = 0,
	          bottom = 0,
	          tops = [],
	          bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function reverse(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function silhouette(data) {
	      var n = data.length,
	          m = data[0].length,
	          sums = [],
	          max = 0,
	          i,
	          j,
	          o,
	          y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function wiggle(data) {
	      var n = data.length,
	          x = data[0],
	          m = x.length,
	          i,
	          j,
	          k,
	          s1,
	          s2,
	          s3,
	          dx,
	          o,
	          o0,
	          y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function expand(data) {
	      var n = data.length,
	          m = data[0].length,
	          k = 1 / n,
	          i,
	          j,
	          o,
	          y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o;else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1,
	        m = data[0].length,
	        y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1,
	        j = 0,
	        v = array[0][1],
	        k,
	        n = array.length;
	    for (; i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function () {
	    var frequency = true,
	        valuer = Number,
	        ranger = d3_layout_histogramRange,
	        binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [],
	          values = data.map(valuer, this),
	          range = ranger.call(this, values, i),
	          thresholds = binner.call(this, range, values, i),
	          bin,
	          i = -1,
	          n = values.length,
	          m = thresholds.length - 1,
	          k = frequency ? 1 : 1 / n,
	          x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function (x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function (x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function (x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function (range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function (x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1,
	        b = +range[0],
	        m = (range[1] - b) / n,
	        f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [d3.min(values), d3.max(values)];
	  }
	  d3.layout.pack = function () {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort),
	        padding = 0,
	        size = [1, 1],
	        radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i),
	          root = nodes[0],
	          w = size[0],
	          h = size[1],
	          r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function () {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function (d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function (d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function (d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function (_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function (_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function (_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x,
	        dy = b.y - a.y,
	        dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes,
	        xMin = Infinity,
	        xMax = -Infinity,
	        yMin = Infinity,
	        yMax = -Infinity,
	        a,
	        b,
	        c,
	        i,
	        j,
	        k,
	        n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0,
	              s1 = 1,
	              s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j);else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2,
	        cy = (yMin + yMax) / 2,
	        cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1,
	          n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r,
	        dx = b.x - a.x,
	        dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r,
	          dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc),
	          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function () {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null),
	        separation = d3_layout_treeSeparation,
	        size = [1, 1],
	        nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i),
	          root0 = nodes[0],
	          root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode);else {
	        var left = root0,
	            right = root0,
	            bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function (node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x,
	            kx = size[0] / (right.x + separation(right, left) / 2 + tx),
	            ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function (node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [root0]
	      },
	          queue = [root1],
	          node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children,
	          siblings = v.parent.children,
	          w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v,
	            vop = v,
	            vim = w,
	            vom = vip.parent.children[0],
	            sip = vip.m,
	            sop = vop.m,
	            sim = vim.m,
	            som = vom.m,
	            shift;
	        while ((vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip)) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function (x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function (x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function (x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children,
	        n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0,
	        change = 0,
	        children = v.children,
	        i = children.length,
	        w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function () {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null),
	        separation = d3_layout_treeSeparation,
	        size = [1, 1],
	        nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i),
	          root = nodes[0],
	          previousNode,
	          x = 0;
	      d3_layout_hierarchyVisitAfter(root, function (node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root),
	          right = d3_layout_clusterRight(root),
	          x0 = left.x - separation(left, right) / 2,
	          x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function (node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function (node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function (x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function (x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function (x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function (child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function (x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(_x4) {
	    var _again = true;

	    _function: while (_again) {
	      var node = _x4;
	      children = undefined;
	      _again = false;

	      var children = node.children;
	      if (children && children.length) {
	        _x4 = children[0];
	        _again = true;
	        continue _function;
	      } else {
	        return node;
	      }
	    }
	  }
	  function d3_layout_clusterRight(_x5) {
	    var _again2 = true;

	    _function2: while (_again2) {
	      var node = _x5;
	      children = n = undefined;
	      _again2 = false;

	      var children = node.children,
	          n;
	      if (children && (n = children.length)) {
	        _x5 = children[n - 1];
	        _again2 = true;
	        continue _function2;
	      } else {
	        return node;
	      }
	    }
	  }
	  d3.layout.treemap = function () {
	    var hierarchy = d3.layout.hierarchy(),
	        round = Math.round,
	        size = [1, 1],
	        padding = null,
	        pad = d3_layout_treemapPadNull,
	        sticky = false,
	        stickies,
	        mode = "squarify",
	        ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1,
	          n = children.length,
	          child,
	          area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node),
	            row = [],
	            remaining = children.slice(),
	            child,
	            best = Infinity,
	            score,
	            u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy),
	            n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node),
	            remaining = children.slice(),
	            child,
	            row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area,
	          r,
	          rmax = 0,
	          rmin = Infinity,
	          i = -1,
	          n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1,
	          n = row.length,
	          x = rect.x,
	          y = rect.y,
	          v = u ? round(row.area / u) : 0,
	          o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d),
	          root = nodes[0];
	      root.x = 0;
	      root.y = 0;
	      root.dx = size[0];
	      root.dy = size[1];
	      if (stickies) hierarchy.revalue(root);
	      scale([root], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function (x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function (x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p, p] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [x, x, x, x], padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function (x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function (x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function (x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function (x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3],
	        y = node.y + padding[0],
	        dx = node.dx - padding[1] - padding[3],
	        dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function normal(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function () {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function logNormal() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function () {
	        return Math.exp(random());
	      };
	    },
	    bates: function bates(m) {
	      var random = d3.random.irwinHall(m);
	      return function () {
	        return random() / m;
	      };
	    },
	    irwinHall: function irwinHall(m) {
	      return function () {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0],
	        stop = domain[domain.length - 1];
	    return start < stop ? [start, stop] : [stop, start];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]),
	        i = interpolate(range[0], range[1]);
	    return function (x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0,
	        i1 = domain.length - 1,
	        x0 = domain[i0],
	        x1 = domain[i1],
	        dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function floor(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function ceil(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [],
	        i = [],
	        j = 0,
	        k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function (x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function () {
	    return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear,
	          uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function (y) {
	      return input(y);
	    };
	    scale.domain = function (x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function (x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function (x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function (x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function (x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function (m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function (m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function (m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function () {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain),
	        span = extent[1] - extent[0],
	        step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)),
	        err = m / span * step;
	    if (err <= .15) step *= 10;else if (err <= .35) step *= 5;else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function (d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function () {
	    return d3_scale_log(d3.scale.linear().domain([0, 1]), 10, true, [1, 10]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function (x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function (x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function (_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function () {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function () {
	      var extent = d3_scaleExtent(domain),
	          ticks = [],
	          u = extent[0],
	          v = extent[1],
	          i = Math.floor(log(u)),
	          j = Math.ceil(log(v)),
	          n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (; i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (; i++ < j;) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function (n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat;else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(.1, n / scale.ticks().length),
	          f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, Math.floor),
	          e;
	      return function (d) {
	        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function () {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"),
	      d3_scale_logNiceNegative = {
	    floor: function floor(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function ceil(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function () {
	    return d3_scale_pow(d3.scale.linear(), 1, [0, 1]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent),
	        powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function (x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function (x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function (m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function (m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function (m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function (x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function () {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function (x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function () {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function () {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [[]]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function (i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function (x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1,
	          n = x.length,
	          xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function (x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function (x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0],
	          stop = x[1],
	          step = domain.length < 2 ? (start = (start + stop) / 2, 0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function (x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0],
	          stop = x[1],
	          step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function (x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0],
	          start = x[reverse - 0],
	          stop = x[1 - reverse],
	          step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function (x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0],
	          start = x[reverse - 0],
	          stop = x[1 - reverse],
	          step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function () {
	      return rangeBand;
	    };
	    scale.rangeExtent = function () {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function () {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function () {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function () {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function () {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function () {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175].map(d3_rgbString);
	  var d3_category20 = [2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725].map(d3_rgbString);
	  var d3_category20b = [3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654].map(d3_rgbString);
	  var d3_category20c = [3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081].map(d3_rgbString);
	  d3.scale.quantile = function () {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0,
	          q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function (x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function (x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function () {
	      return thresholds;
	    };
	    scale.invertExtent = function (y) {
	      y = range.indexOf(y);
	      return y < 0 ? [NaN, NaN] : [y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1]];
	    };
	    scale.copy = function () {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function () {
	    return d3_scale_quantize(0, 1, [0, 1]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function (x) {
	      if (!arguments.length) return [x0, x1];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function (x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function (y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [y, y + 1 / kx];
	    };
	    scale.copy = function () {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function () {
	    return d3_scale_threshold([.5], [0, 1]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function (_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function (_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function (y) {
	      y = range.indexOf(y);
	      return [domain[y - 1], domain[y]];
	    };
	    scale.copy = function () {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function () {
	    return d3_scale_identity([0, 1]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function (x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function (m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function (m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function () {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function () {
	    var innerRadius = d3_svg_arcInnerRadius,
	        outerRadius = d3_svg_arcOuterRadius,
	        cornerRadius = d3_zero,
	        padRadius = d3_svg_arcAuto,
	        startAngle = d3_svg_arcStartAngle,
	        endAngle = d3_svg_arcEndAngle,
	        padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)),
	          r1 = Math.max(0, +outerRadius.apply(this, arguments)),
	          a0 = startAngle.apply(this, arguments) - halfπ,
	          a1 = endAngle.apply(this, arguments) - halfπ,
	          da = Math.abs(a1 - a0),
	          cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc,
	          cr,
	          rp,
	          ap,
	          p0 = 0,
	          p1 = 0,
	          x0,
	          y0,
	          x1,
	          y1,
	          x2,
	          y2,
	          x3,
	          y3,
	          path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var oc = x3 == null ? [x2, y2] : x1 == null ? [x0, y0] : d3_geom_polygonIntersect([x0, y0], [x3, y3], [x1, y1], [x2, y2]),
	            ax = x0 - oc[0],
	            ay = y0 - oc[1],
	            bx = x1 - oc[0],
	            by = y1 - oc[1],
	            kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
	            lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	        if (x1 != null) {
	          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)),
	              t30 = d3_svg_arcCornerTangents(x3 == null ? [x2, y2] : [x3, y3], [x0, y0], r1, rc1, cw),
	              t12 = d3_svg_arcCornerTangents([x1, y1], [x2, y2], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)),
	              t03 = d3_svg_arcCornerTangents([x0, y0], [x3, y3], r0, -rc0, cw),
	              t21 = d3_svg_arcCornerTangents([x2, y2], x1 == null ? [x0, y0] : [x1, y1], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function (v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function (v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function (v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function (v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function (v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function (v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function (v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function () {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [Math.cos(a) * r, Math.sin(a) * r];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0],
	        y01 = p0[1] - p1[1],
	        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
	        ox = lo * y01,
	        oy = -lo * x01,
	        x1 = p0[0] + ox,
	        y1 = p0[1] + oy,
	        x2 = p1[0] + ox,
	        y2 = p1[1] + oy,
	        x3 = (x1 + x2) / 2,
	        y3 = (y1 + y2) / 2,
	        dx = x2 - x1,
	        dy = y2 - y1,
	        d2 = dx * dx + dy * dy,
	        r = r1 - rc,
	        D = x1 * y2 - x2 * y1,
	        d = (dy < 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D),
	        cx0 = (D * dy - dx * d) / d2,
	        cy0 = (-D * dx - dy * d) / d2,
	        cx1 = (D * dy + dx * d) / d2,
	        cy1 = (-D * dx + dy * d) / d2,
	        dx0 = cx0 - x3,
	        dy0 = cy0 - y3,
	        dx1 = cx1 - x3,
	        dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [[cx0 - ox, cy0 - oy], [cx0 * r1 / r, cy0 * r1 / r]];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX,
	        y = d3_geom_pointY,
	        defined = d3_true,
	        interpolate = d3_svg_lineLinear,
	        interpolateKey = interpolate.key,
	        tension = .7;
	    function line(data) {
	      var segments = [],
	          points = [],
	          i = -1,
	          n = data.length,
	          d,
	          fx = d3_functor(x),
	          fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([+fx.call(this, d, i), +fy.call(this, d, i)]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function (_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function (_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function (_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function (_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function (_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function () {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function (key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.join("L");
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return d3_svg_lineLinear(points) + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0,
	        n = points.length,
	        p = points[0],
	        path = [p[0], ",", p[1]];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0,
	        n = points.length,
	        p = points[0],
	        path = [p[0], ",", p[1]];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0,
	        n = points.length,
	        p = points[0],
	        path = [p[0], ",", p[1]];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length,
	        path = "",
	        p0 = points[0],
	        p = points[1],
	        t0 = tangents[0],
	        t = t0,
	        pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [],
	        a = (1 - tension) / 2,
	        p0,
	        p1 = points[0],
	        p2 = points[1],
	        i = 1,
	        n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1,
	        n = points.length,
	        pi = points[0],
	        x0 = pi[0],
	        y0 = pi[1],
	        px = [x0, x0, x0, (pi = points[1])[0]],
	        py = [y0, y0, y0, pi[1]],
	        path = [x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [],
	        i = -1,
	        n = points.length,
	        pi,
	        px = [0],
	        py = [0];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path,
	        i = -1,
	        n = points.length,
	        m = n + 4,
	        pi,
	        px = [],
	        py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0],
	          y0 = points[0][1],
	          dx = points[n][0] - x0,
	          dy = points[n][1] - y0,
	          i = -1,
	          p,
	          t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [0, 2 / 3, 1 / 3, 0],
	      d3_svg_lineBasisBezier2 = [0, 1 / 3, 2 / 3, 0],
	      d3_svg_lineBasisBezier3 = [0, 1 / 6, 2 / 3, 1 / 6];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0,
	        j = points.length - 1,
	        m = [],
	        p0 = points[0],
	        p1 = points[1],
	        d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [],
	        d,
	        a,
	        b,
	        s,
	        m = d3_svg_lineFiniteDifferences(points),
	        i = -1,
	        j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([s || 0, m[i] * s || 0]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function () {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point,
	        i = -1,
	        n = points.length,
	        r,
	        a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX,
	        x1 = d3_geom_pointX,
	        y0 = 0,
	        y1 = d3_geom_pointY,
	        defined = d3_true,
	        interpolate = d3_svg_lineLinear,
	        interpolateKey = interpolate.key,
	        interpolateReverse = interpolate,
	        L = "L",
	        tension = .7;
	    function area(data) {
	      var segments = [],
	          points0 = [],
	          points1 = [],
	          i = -1,
	          n = data.length,
	          d,
	          fx0 = d3_functor(x0),
	          fy0 = d3_functor(y0),
	          fx1 = x0 === x1 ? function () {
	        return x;
	      } : d3_functor(x1),
	          fy1 = y0 === y1 ? function () {
	        return y;
	      } : d3_functor(y1),
	          x,
	          y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([x = +fx0.call(this, d, i), y = +fy0.call(this, d, i)]);
	          points1.push([+fx1.call(this, d, i), +fy1.call(this, d, i)]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function (_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function (_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function (_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function (_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function (_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function (_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function (_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function (_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _;else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function (_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function () {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function () {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function () {
	    var source = d3_source,
	        target = d3_target,
	        radius = d3_svg_chordRadius,
	        startAngle = d3_svg_arcStartAngle,
	        endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i),
	          t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i),
	          r = radius.call(self, subgroup, i),
	          a0 = startAngle.call(self, subgroup, i) - halfπ,
	          a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [r * Math.cos(a0), r * Math.sin(a0)],
	        p1: [r * Math.cos(a1), r * Math.sin(a1)]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function (v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function (v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function (v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function (v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function (v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function () {
	    var source = d3_source,
	        target = d3_target,
	        projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i),
	          p3 = target.call(this, d, i),
	          m = (p0.y + p3.y) / 2,
	          p = [p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function (x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function (x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function (x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [d.x, d.y];
	  }
	  d3.svg.diagonal.radial = function () {
	    var diagonal = d3.svg.diagonal(),
	        projection = d3_svg_diagonalProjection,
	        projection_ = diagonal.projection;
	    diagonal.projection = function (x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function () {
	      var d = projection.apply(this, arguments),
	          r = d[0],
	          a = d[1] - halfπ;
	      return [r * Math.cos(a), r * Math.sin(a)];
	    };
	  }
	  d3.svg.symbol = function () {
	    var type = d3_svg_symbolType,
	        size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function (x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function (x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function cross(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function diamond(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)),
	          rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function square(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function triangleDown(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
	          ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function triangleUp(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3),
	          ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3),
	      d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function (name) {
	    var id = d3_transitionInheritId || ++d3_transitionId,
	        ns = d3_transitionNamespace(name),
	        subgroups = [],
	        subgroup,
	        node,
	        transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m;) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function (name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function () {
	      var lock, active;
	      if ((lock = this[ns]) && (active = lock[lock.active])) {
	        if (--lock.count) delete lock[lock.active];else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [],
	      d3_transitionId = 0,
	      d3_transitionInheritId,
	      d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function (selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function (selector) {
	    var id = this.id,
	        ns = this.namespace,
	        subgroups = [],
	        subgroup,
	        subnode,
	        node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m;) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function (selector) {
	    var id = this.id,
	        ns = this.namespace,
	        subgroups = [],
	        subgroup,
	        subnodes,
	        node,
	        subnode,
	        transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m;) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n;) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o;) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function (filter) {
	    var subgroups = [],
	        subgroup,
	        group,
	        node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function (name, tween) {
	    var id = this.id,
	        ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function (node) {
	      node[ns][id].tween.remove(name);
	    } : function (node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id,
	        ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function (node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function (node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function (nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate,
	        name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function () {
	        var a = this.getAttribute(name),
	            i;
	        return a !== b && (i = interpolate(a, b), function (t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function () {
	        var a = this.getAttributeNS(name.space, name.local),
	            i;
	        return a !== b && (i = interpolate(a, b), function (t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function (nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function (t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function (t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function (name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function () {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name),
	            i;
	        return a !== b && (i = d3_interpolate(a, b), function (t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function (name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function (t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function (value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function () {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function () {
	    var ns = this.namespace;
	    return this.each("end.transition", function () {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function (value) {
	    var id = this.id,
	        ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function (node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function (value) {
	    var id = this.id,
	        ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function (node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function (value) {
	    var id = this.id,
	        ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function (node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function (type, listener) {
	    var id = this.id,
	        ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit,
	          inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function (node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function (node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function () {
	    var id0 = this.id,
	        id1 = ++d3_transitionId,
	        ns = this.namespace,
	        subgroups = [],
	        subgroup,
	        group,
	        node,
	        transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }),
	        transition = lock[id];
	    if (!transition) {
	      var time = inherit.time;
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	      d3.timer(function (elapsed) {
	        var delay = transition.delay,
	            duration,
	            ease,
	            timer = d3_timer_active,
	            tweened = [];
	        timer.t = delay + time;
	        if (delay <= elapsed) return start(elapsed - delay);
	        timer.c = start;
	        function start(elapsed) {
	          if (lock.active > id) return stop();
	          var active = lock[lock.active];
	          if (active) {
	            --lock.count;
	            delete lock[lock.active];
	            active.event && active.event.interrupt.call(node, node.__data__, active.index);
	          }
	          lock.active = id;
	          transition.event && transition.event.start.call(node, node.__data__, i);
	          transition.tween.forEach(function (key, value) {
	            if (value = value.call(node, node.__data__, i)) {
	              tweened.push(value);
	            }
	          });
	          ease = transition.ease;
	          duration = transition.duration;
	          d3.timer(function () {
	            timer.c = tick(elapsed || 1) ? d3_true : tick;
	            return 1;
	          }, 0, time);
	        }
	        function tick(elapsed) {
	          if (lock.active !== id) return 1;
	          var t = elapsed / duration,
	              e = ease(t),
	              n = tweened.length;
	          while (n > 0) {
	            tweened[--n].call(node, e);
	          }
	          if (t >= 1) {
	            transition.event && transition.event.end.call(node, node.__data__, i);
	            return stop();
	          }
	        }
	        function stop() {
	          if (--lock.count) delete lock[id];else delete node[ns];
	          return 1;
	        }
	      }, 0, time);
	    }
	  }
	  d3.svg.axis = function () {
	    var scale = d3.scale.linear(),
	        orient = d3_svg_axisDefaultOrient,
	        innerTickSize = 6,
	        outerTickSize = 6,
	        tickPadding = 3,
	        tickArguments_ = [10],
	        tickValues = null,
	        tickFormat_;
	    function axis(g) {
	      g.each(function () {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale,
	            scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues,
	            tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_,
	            tick = g.selectAll(".tick").data(ticks, scale1),
	            tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε),
	            tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(),
	            tickUpdate = d3.transition(tick.order()).style("opacity", 1),
	            tickSpacing = Math.max(innerTickSize, 0) + tickPadding,
	            tickTransform;
	        var range = d3_scaleRange(scale1),
	            path = g.selectAll(".domain").data([0]),
	            pathUpdate = (path.enter().append("path").attr("class", "domain"), d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"),
	            lineUpdate = tickUpdate.select("line"),
	            text = tick.select("text").text(tickFormat),
	            textEnter = tickEnter.select("text"),
	            textUpdate = tickUpdate.select("text"),
	            sign = orient === "top" || orient === "left" ? -1 : 1,
	            x1,
	            x2,
	            y1,
	            y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1,
	              dx = x.rangeBand() / 2;
	          scale0 = scale1 = function (d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function (x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function (x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function () {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = arguments;
	      return axis;
	    };
	    axis.tickValues = function (x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function (x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function (x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function (x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function (x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function (x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function () {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom",
	      d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function (d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function (d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function () {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"),
	        x = null,
	        y = null,
	        xExtent = [0, 0],
	        yExtent = [0, 0],
	        xExtentDomain,
	        yExtentDomain,
	        xClamp = true,
	        yClamp = true,
	        resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function () {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([0]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([0]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function (d) {
	          return "resize " + d;
	        }).style("cursor", function (d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function (d) {
	          return (/[ew]$/.test(d) ? -3 : null
	          );
	        }).attr("y", function (d) {
	          return (/^[ns]/.test(d) ? -3 : null
	          );
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g),
	            backgroundUpdate = d3.transition(background),
	            range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function (g) {
	      g.each(function () {
	        var event_ = event.of(this, arguments),
	            extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        },
	            extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function () {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function () {
	            var xi = d3_interpolateArray(xExtent, extent1.x),
	                yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function (t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function () {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function (d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this,
	          eventTarget = d3.select(d3.event.target),
	          event_ = event.of(target, arguments),
	          g = d3.select(target),
	          resizing = eventTarget.datum(),
	          resizingX = !/^(n|s)$/.test(resizing) && x,
	          resizingY = !/^(e|w)$/.test(resizing) && y,
	          dragging = eventTarget.classed("extent"),
	          dragRestore = d3_event_dragSuppress(target),
	          center,
	          origin = d3.mouse(target),
	          offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing),
	            ey = +/^n/.test(resizing);
	        offset = [xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1]];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target),
	            moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [(xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale),
	            r0 = range[0],
	            r1 = range[1],
	            position = origin[i],
	            extent = i ? yExtent : xExtent,
	            size = extent[1] - extent[0],
	            min,
	            max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null;else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function (z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function (z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function (z) {
	      if (!arguments.length) return x && y ? [xClamp, yClamp] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1];else if (x) xClamp = !!z;else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function (z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [[x0, y0], [x1, y1]] : x ? [x0, x1] : y && [y0, y1];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [x0, x1];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [x0, x1];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [y0, y1];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [y0, y1];
	      }
	      return brush;
	    };
	    brush.clear = function () {
	      if (!brush.empty()) {
	        xExtent = [0, 0], yExtent = [0, 0];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function () {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [["n", "e", "s", "w", "nw", "ne", "se", "sw"], ["e", "w"], ["n", "s"], []];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function (string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function (date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function (date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function (date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function (date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function (date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function (date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function (date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function (date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function (date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function (date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function (date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function (date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function (x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function (x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0],
	          target = span / count,
	          i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [methods.year, d3_scale_linearTickRange(extent.map(function (d) {
	        return d / 31536e6;
	      }), count)[2]] : !i ? [d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2]] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function (interval, skip) {
	      var domain = scale.domain(),
	          extent = d3_scaleExtent(domain),
	          method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function floor(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function ceil(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function (interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()),
	          method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [{
	        range: interval
	      }, skip];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function () {
	      return format;
	    };
	    scale.copy = function () {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6];
	  var d3_time_scaleLocalMethods = [[d3_time.second, 1], [d3_time.second, 5], [d3_time.second, 15], [d3_time.second, 30], [d3_time.minute, 1], [d3_time.minute, 5], [d3_time.minute, 15], [d3_time.minute, 30], [d3_time.hour, 1], [d3_time.hour, 3], [d3_time.hour, 6], [d3_time.hour, 12], [d3_time.day, 1], [d3_time.day, 2], [d3_time.week, 1], [d3_time.month, 1], [d3_time.month, 3], [d3_time.year, 1]];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([[".%L", function (d) {
	    return d.getMilliseconds();
	  }], [":%S", function (d) {
	    return d.getSeconds();
	  }], ["%I:%M", function (d) {
	    return d.getMinutes();
	  }], ["%I %p", function (d) {
	    return d.getHours();
	  }], ["%a %d", function (d) {
	    return d.getDay() && d.getDate() != 1;
	  }], ["%b %d", function (d) {
	    return d.getDate() != 1;
	  }], ["%B", function (d) {
	    return d.getMonth();
	  }], ["%Y", d3_true]]);
	  var d3_time_scaleMilliseconds = {
	    range: function range(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function () {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function (m) {
	    return [m[0].utc, m[1]];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([[".%L", function (d) {
	    return d.getUTCMilliseconds();
	  }], [":%S", function (d) {
	    return d.getUTCSeconds();
	  }], ["%I:%M", function (d) {
	    return d.getUTCMinutes();
	  }], ["%I %p", function (d) {
	    return d.getUTCHours();
	  }], ["%a %d", function (d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  }], ["%b %d", function (d) {
	    return d.getUTCDate() != 1;
	  }], ["%B", function (d) {
	    return d.getUTCMonth();
	  }], ["%Y", d3_true]]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function () {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function (request) {
	    return request.responseText;
	  });
	  d3.json = function (url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function (url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function (request) {
	    return request.responseXML;
	  });
	  if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if (typeof module === "object" && module.exports) module.exports = d3;
	  this.d3 = d3;
	})();

/***/ },

/***/ 136:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	(function () {
	    var svg;

	    //save off default references
	    var d3 = window.d3,
	        topojson = window.topojson;

	    var defaultOptions = {
	        scope: 'world',
	        responsive: false,
	        setProjection: setProjection,
	        projection: 'equirectangular',
	        dataType: 'json',
	        done: function done() {},
	        fills: {
	            defaultFill: '#ABDDA4'
	        },
	        geographyConfig: {
	            dataUrl: null,
	            hideAntarctica: true,
	            borderWidth: 1,
	            borderColor: '#FDFDFD',
	            popupTemplate: function popupTemplate(geography, data) {
	                return '<div class="hoverinfo"><strong>' + geography.properties.name + '</strong></div>';
	            },
	            popupOnHover: true,
	            highlightOnHover: true,
	            highlightFillColor: '#FC8D59',
	            highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
	            highlightBorderWidth: 2
	        },
	        projectionConfig: {
	            rotation: [97, 0]
	        },
	        bubblesConfig: {
	            borderWidth: 2,
	            borderColor: '#FFFFFF',
	            popupOnHover: true,
	            popupTemplate: function popupTemplate(geography, data) {
	                return '<div class="hoverinfo"><strong>' + data.name + '</strong></div>';
	            },
	            fillOpacity: 0.75,
	            animate: true,
	            highlightOnHover: true,
	            highlightFillColor: '#FC8D59',
	            highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
	            highlightBorderWidth: 2,
	            highlightFillOpacity: 0.85,
	            exitDelay: 100
	        },
	        arcConfig: {
	            strokeColor: '#DD1C77',
	            strokeWidth: 1,
	            arcSharpness: 1,
	            animationSpeed: 600
	        }
	    };

	    function addContainer(element, height, width) {
	        this.svg = d3.select(element).append('svg').attr('width', width || element.offsetWidth).attr('data-width', width || element.offsetWidth).attr('class', 'datamap').attr('height', height || element.offsetHeight).style('overflow', 'hidden'); // IE10+ doesn't respect height/width when map is zoomed in

	        if (this.options.responsive) {
	            d3.select(this.options.element).style({ 'position': 'relative', 'padding-bottom': '60%' });
	            d3.select(this.options.element).select('svg').style({ 'position': 'absolute', 'width': '100%', 'height': '100%' });
	            d3.select(this.options.element).select('svg').select('g').selectAll('path').style('vector-effect', 'non-scaling-stroke');
	        }

	        return this.svg;
	    }

	    // setProjection takes the svg element and options
	    function setProjection(element, options) {
	        var width = options.width || element.offsetWidth;
	        var height = options.height || element.offsetHeight;
	        var projection, path;
	        var svg = this.svg;

	        if (options && typeof options.scope === 'undefined') {
	            options.scope = 'world';
	        }

	        if (options.scope === 'usa') {
	            projection = d3.geo.albersUsa().scale(width).translate([width / 2, height / 2]);
	        } else if (options.scope === 'world') {
	            projection = d3.geo[options.projection]().scale((width + 1) / 2 / Math.PI).translate([width / 2, height / (options.projection === "mercator" ? 1.45 : 1.8)]);
	        }

	        if (options.projection === 'orthographic') {

	            svg.append("defs").append("path").datum({ type: "Sphere" }).attr("id", "sphere").attr("d", path);

	            svg.append("use").attr("class", "stroke").attr("xlink:href", "#sphere");

	            svg.append("use").attr("class", "fill").attr("xlink:href", "#sphere");
	            projection.scale(250).clipAngle(90).rotate(options.projectionConfig.rotation);
	        }

	        path = d3.geo.path().projection(projection);

	        return { path: path, projection: projection };
	    }

	    function addStyleBlock() {
	        if (d3.select('.datamaps-style-block').empty()) {
	            d3.select('head').append('style').attr('class', 'datamaps-style-block').html('.datamap path.datamaps-graticule { fill: none; stroke: #777; stroke-width: 0.5px; stroke-opacity: .5; pointer-events: none; } .datamap .labels {pointer-events: none;} .datamap path {stroke: #FFFFFF; stroke-width: 1px;} .datamaps-legend dt, .datamaps-legend dd { float: left; margin: 0 3px 0 0;} .datamaps-legend dd {width: 20px; margin-right: 6px; border-radius: 3px;} .datamaps-legend {padding-bottom: 20px; z-index: 1001; position: absolute; left: 4px; font-size: 12px; font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;} .datamaps-hoverover {display: none; font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; } .hoverinfo {padding: 4px; border-radius: 1px; background-color: #FFF; box-shadow: 1px 1px 5px #CCC; font-size: 12px; border: 1px solid #CCC; } .hoverinfo hr {border:1px dotted #CCC; }');
	        }
	    }

	    function drawSubunits(data) {
	        var fillData = this.options.fills,
	            colorCodeData = this.options.data || {},
	            geoConfig = this.options.geographyConfig;

	        var subunits = this.svg.select('g.datamaps-subunits');
	        if (subunits.empty()) {
	            subunits = this.addLayer('datamaps-subunits', null, true);
	        }

	        var geoData = topojson.feature(data, data.objects[this.options.scope]).features;
	        if (geoConfig.hideAntarctica) {
	            geoData = geoData.filter(function (feature) {
	                return feature.id !== "ATA";
	            });
	        }

	        var geo = subunits.selectAll('path.datamaps-subunit').data(geoData);

	        geo.enter().append('path').attr('d', this.path).attr('class', function (d) {
	            return 'datamaps-subunit ' + d.id;
	        }).attr('data-info', function (d) {
	            return JSON.stringify(colorCodeData[d.id]);
	        }).style('fill', function (d) {
	            var fillColor;

	            if (colorCodeData[d.id]) {
	                fillColor = fillData[colorCodeData[d.id].fillKey];
	            }

	            return fillColor || fillData.defaultFill;
	        }).style('stroke-width', geoConfig.borderWidth).style('stroke', geoConfig.borderColor);
	    }

	    function handleGeographyConfig() {
	        var hoverover;
	        var svg = this.svg;
	        var self = this;
	        var options = this.options.geographyConfig;

	        if (options.highlightOnHover || options.popupOnHover) {
	            svg.selectAll('.datamaps-subunit').on('mouseover', function (d) {
	                var $this = d3.select(this);

	                if (options.highlightOnHover) {
	                    var previousAttributes = {
	                        'fill': $this.style('fill'),
	                        'stroke': $this.style('stroke'),
	                        'stroke-width': $this.style('stroke-width'),
	                        'fill-opacity': $this.style('fill-opacity')
	                    };

	                    $this.style('fill', options.highlightFillColor).style('stroke', options.highlightBorderColor).style('stroke-width', options.highlightBorderWidth).style('fill-opacity', options.highlightFillOpacity).attr('data-previousAttributes', JSON.stringify(previousAttributes));

	                    //as per discussion on https://github.com/markmarkoh/datamaps/issues/19
	                    if (!/((MSIE)|(Trident))/.test) {
	                        moveToFront.call(this);
	                    }
	                }

	                if (options.popupOnHover) {
	                    self.updatePopup($this, d, options, svg);
	                }
	            }).on('mouseout', function () {
	                var $this = d3.select(this);

	                if (options.highlightOnHover) {
	                    //reapply previous attributes
	                    var previousAttributes = JSON.parse($this.attr('data-previousAttributes'));
	                    for (var attr in previousAttributes) {
	                        $this.style(attr, previousAttributes[attr]);
	                    }
	                }
	                $this.on('mousemove', null);
	                d3.selectAll('.datamaps-hoverover').style('display', 'none');
	            });
	        }

	        function moveToFront() {
	            this.parentNode.appendChild(this);
	        }
	    }

	    //plugin to add a simple map legend
	    function addLegend(layer, data, options) {
	        data = data || {};
	        if (!this.options.fills) {
	            return;
	        }

	        var html = '<dl>';
	        var label = '';
	        if (data.legendTitle) {
	            html = '<h2>' + data.legendTitle + '</h2>' + html;
	        }
	        for (var fillKey in this.options.fills) {

	            if (fillKey === 'defaultFill') {
	                if (!data.defaultFillName) {
	                    continue;
	                }
	                label = data.defaultFillName;
	            } else {
	                if (data.labels && data.labels[fillKey]) {
	                    label = data.labels[fillKey];
	                } else {
	                    label = fillKey + ': ';
	                }
	            }
	            html += '<dt>' + label + '</dt>';
	            html += '<dd style="background-color:' + this.options.fills[fillKey] + '">&nbsp;</dd>';
	        }
	        html += '</dl>';

	        var hoverover = d3.select(this.options.element).append('div').attr('class', 'datamaps-legend').html(html);
	    }

	    function addGraticule(layer, options) {
	        var graticule = d3.geo.graticule();
	        this.svg.insert("path", '.datamaps-subunits').datum(graticule).attr("class", "datamaps-graticule").attr("d", this.path);
	    }

	    function handleArcs(layer, data, options) {
	        var self = this,
	            svg = this.svg;

	        if (!data || data && !data.slice) {
	            throw "Datamaps Error - arcs must be an array";
	        }

	        if (typeof options === "undefined") {
	            options = defaultOptions.arcConfig;
	        }

	        var arcs = layer.selectAll('path.datamaps-arc').data(data, JSON.stringify);

	        var path = d3.geo.path().projection(self.projection);

	        var arc = d3.geo.greatArc().source(function (d) {
	            return [d.origin.longitude, d.origin.latitude];
	        }).target(function (d) {
	            return [d.destination.longitude, d.destination.latitude];
	        });

	        arcs.enter().append('svg:path').attr('class', 'datamaps-arc').style('stroke-linecap', 'round').style('stroke', function (datum) {
	            if (datum.options && datum.options.strokeColor) {
	                return datum.options.strokeColor;
	            }
	            return options.strokeColor;
	        }).style('fill', 'none').style('stroke-width', function (datum) {
	            if (datum.options && datum.options.strokeWidth) {
	                return datum.options.strokeWidth;
	            }
	            return options.strokeWidth;
	        }).attr('d', function (datum) {
	            var originXY = self.latLngToXY(datum.origin.latitude, datum.origin.longitude);
	            var destXY = self.latLngToXY(datum.destination.latitude, datum.destination.longitude);
	            var midXY = [(originXY[0] + destXY[0]) / 2, (originXY[1] + destXY[1]) / 2];
	            if (options.greatArc) {
	                return path(arc(datum));
	            }
	            return "M" + originXY[0] + ',' + originXY[1] + "S" + (midXY[0] + 50 * options.arcSharpness) + "," + (midXY[1] - 75 * options.arcSharpness) + "," + destXY[0] + "," + destXY[1];
	        }).transition().delay(100).style('fill', function () {
	            /*
	              Thank you Jake Archibald, this is awesome.
	              Source: http://jakearchibald.com/2013/animated-line-drawing-svg/
	            */
	            var length = this.getTotalLength();
	            this.style.transition = this.style.WebkitTransition = 'none';
	            this.style.strokeDasharray = length + ' ' + length;
	            this.style.strokeDashoffset = length;
	            this.getBoundingClientRect();
	            this.style.transition = this.style.WebkitTransition = 'stroke-dashoffset ' + options.animationSpeed + 'ms ease-out';
	            this.style.strokeDashoffset = '0';
	            return 'none';
	        });

	        arcs.exit().transition().style('opacity', 0).remove();
	    }

	    function handleLabels(layer, options) {
	        var self = this;
	        options = options || {};
	        var labelStartCoodinates = this.projection([-67.707617, 42.722131]);
	        this.svg.selectAll(".datamaps-subunit").attr("data-foo", function (d) {
	            var center = self.path.centroid(d);
	            var xOffset = 7.5,
	                yOffset = 5;

	            if (["FL", "KY", "MI"].indexOf(d.id) > -1) xOffset = -2.5;
	            if (d.id === "NY") xOffset = -1;
	            if (d.id === "MI") yOffset = 18;
	            if (d.id === "LA") xOffset = 13;

	            var x, y;

	            x = center[0] - xOffset;
	            y = center[1] + yOffset;

	            var smallStateIndex = ["VT", "NH", "MA", "RI", "CT", "NJ", "DE", "MD", "DC"].indexOf(d.id);
	            if (smallStateIndex > -1) {
	                var yStart = labelStartCoodinates[1];
	                x = labelStartCoodinates[0];
	                y = yStart + smallStateIndex * (2 + (options.fontSize || 12));
	                layer.append("line").attr("x1", x - 3).attr("y1", y - 5).attr("x2", center[0]).attr("y2", center[1]).style("stroke", options.labelColor || "#000").style("stroke-width", options.lineWidth || 1);
	            }

	            layer.append("text").attr("x", x).attr("y", y).style("font-size", (options.fontSize || 10) + 'px').style("font-family", options.fontFamily || "Verdana").style("fill", options.labelColor || "#000").text(d.id);
	            return "bar";
	        });
	    }

	    function handleBubbles(layer, data, options) {
	        var self = this,
	            fillData = this.options.fills,
	            svg = this.svg;

	        if (!data || data && !data.slice) {
	            throw "Datamaps Error - bubbles must be an array";
	        }

	        var bubbles = layer.selectAll('circle.datamaps-bubble').data(data, JSON.stringify);

	        bubbles.enter().append('svg:circle').attr('class', 'datamaps-bubble').attr('cx', function (datum) {
	            var latLng;
	            if (datumHasCoords(datum)) {
	                latLng = self.latLngToXY(datum.latitude, datum.longitude);
	            } else if (datum.centered) {
	                latLng = self.path.centroid(svg.select('path.' + datum.centered).data()[0]);
	            }
	            if (latLng) return latLng[0];
	        }).attr('cy', function (datum) {
	            var latLng;
	            if (datumHasCoords(datum)) {
	                latLng = self.latLngToXY(datum.latitude, datum.longitude);
	            } else if (datum.centered) {
	                latLng = self.path.centroid(svg.select('path.' + datum.centered).data()[0]);
	            }
	            if (latLng) return latLng[1];;
	        }).attr('r', 0) //for animation purposes
	        .attr('data-info', function (d) {
	            return JSON.stringify(d);
	        }).style('stroke', function (datum) {
	            return typeof datum.borderColor !== 'undefined' ? datum.borderColor : options.borderColor;
	        }).style('stroke-width', function (datum) {
	            return typeof datum.borderWidth !== 'undefined' ? datum.borderWidth : options.borderWidth;
	        }).style('fill-opacity', function (datum) {
	            return typeof datum.fillOpacity !== 'undefined' ? datum.fillOpacity : options.fillOpacity;
	        }).style('fill', function (datum) {
	            var fillColor = fillData[datum.fillKey];
	            return fillColor || fillData.defaultFill;
	        }).on('mouseover', function (datum) {
	            var $this = d3.select(this);

	            if (options.highlightOnHover) {
	                //save all previous attributes for mouseout
	                var previousAttributes = {
	                    'fill': $this.style('fill'),
	                    'stroke': $this.style('stroke'),
	                    'stroke-width': $this.style('stroke-width'),
	                    'fill-opacity': $this.style('fill-opacity')
	                };

	                $this.style('fill', options.highlightFillColor).style('stroke', options.highlightBorderColor).style('stroke-width', options.highlightBorderWidth).style('fill-opacity', options.highlightFillOpacity).attr('data-previousAttributes', JSON.stringify(previousAttributes));
	            }

	            if (options.popupOnHover) {
	                self.updatePopup($this, datum, options, svg);
	            }
	        }).on('mouseout', function (datum) {
	            var $this = d3.select(this);

	            if (options.highlightOnHover) {
	                //reapply previous attributes
	                var previousAttributes = JSON.parse($this.attr('data-previousAttributes'));
	                for (var attr in previousAttributes) {
	                    $this.style(attr, previousAttributes[attr]);
	                }
	            }

	            d3.selectAll('.datamaps-hoverover').style('display', 'none');
	        }).transition().duration(400).attr('r', function (datum) {
	            return datum.radius;
	        });

	        bubbles.exit().transition().delay(options.exitDelay).attr("r", 0).remove();

	        function datumHasCoords(datum) {
	            return typeof datum !== 'undefined' && typeof datum.latitude !== 'undefined' && typeof datum.longitude !== 'undefined';
	        }
	    }

	    //stolen from underscore.js
	    function defaults(obj) {
	        Array.prototype.slice.call(arguments, 1).forEach(function (source) {
	            if (source) {
	                for (var prop in source) {
	                    if (obj[prop] == null) obj[prop] = source[prop];
	                }
	            }
	        });
	        return obj;
	    }
	    /**************************************
	               Public Functions
	    ***************************************/

	    function Datamap(options) {

	        if (typeof d3 === 'undefined' || typeof topojson === 'undefined') {
	            throw new Error('Include d3.js (v3.0.3 or greater) and topojson on this page before creating a new map');
	        }

	        //set options for global use
	        this.options = defaults(options, defaultOptions);
	        this.options.geographyConfig = defaults(options.geographyConfig, defaultOptions.geographyConfig);
	        this.options.projectionConfig = defaults(options.projectionConfig, defaultOptions.projectionConfig);
	        this.options.bubblesConfig = defaults(options.bubblesConfig, defaultOptions.bubblesConfig);
	        this.options.arcConfig = defaults(options.arcConfig, defaultOptions.arcConfig);

	        //add the SVG container
	        if (d3.select(this.options.element).select('svg').length > 0) {
	            addContainer.call(this, this.options.element, this.options.height, this.options.width);
	        }

	        /* Add core plugins to this instance */
	        this.addPlugin('bubbles', handleBubbles);
	        this.addPlugin('legend', addLegend);
	        this.addPlugin('arc', handleArcs);
	        this.addPlugin('labels', handleLabels);
	        this.addPlugin('graticule', addGraticule);

	        //append style block with basic hoverover styles
	        if (!this.options.disableDefaultStyles) {
	            addStyleBlock();
	        }

	        return this.draw();
	    }

	    // resize map
	    Datamap.prototype.resize = function () {

	        var self = this;
	        var options = self.options;

	        if (options.responsive) {
	            var prefix = '-webkit-transform' in document.body.style ? '-webkit-' : '-moz-transform' in document.body.style ? '-moz-' : '-ms-transform' in document.body.style ? '-ms-' : '',
	                newsize = options.element.clientWidth,
	                oldsize = d3.select(options.element).select('svg').attr('data-width');

	            d3.select(options.element).select('svg').selectAll('g').style(prefix + 'transform', 'scale(' + newsize / oldsize + ')');
	        }
	    };

	    // actually draw the features(states & countries)
	    Datamap.prototype.draw = function () {
	        //save off in a closure
	        var self = this;
	        var options = self.options;

	        //set projections and paths based on scope
	        var pathAndProjection = options.setProjection.apply(self, [options.element, options]);

	        this.path = pathAndProjection.path;
	        this.projection = pathAndProjection.projection;

	        //if custom URL for topojson data, retrieve it and render
	        if (options.geographyConfig.dataUrl) {
	            d3.json(options.geographyConfig.dataUrl, function (error, results) {
	                if (error) throw new Error(error);
	                self.customTopo = results;
	                draw(results);
	            });
	        } else {
	            draw(this[options.scope + 'Topo'] || options.geographyConfig.dataJson);
	        }

	        return this;

	        function draw(data) {
	            // if fetching remote data, draw the map first then call `updateChoropleth`
	            if (self.options.dataUrl) {
	                //allow for csv or json data types
	                d3[self.options.dataType](self.options.dataUrl, function (data) {
	                    //in the case of csv, transform data to object
	                    if (self.options.dataType === 'csv' && (data && data.slice)) {
	                        var tmpData = {};
	                        for (var i = 0; i < data.length; i++) {
	                            tmpData[data[i].id] = data[i];
	                        }
	                        data = tmpData;
	                    }
	                    Datamaps.prototype.updateChoropleth.call(self, data);
	                });
	            }
	            drawSubunits.call(self, data);
	            handleGeographyConfig.call(self);

	            if (self.options.geographyConfig.popupOnHover || self.options.bubblesConfig.popupOnHover) {
	                hoverover = d3.select(self.options.element).append('div').attr('class', 'datamaps-hoverover').style('z-index', 10001).style('position', 'absolute');
	            }

	            //fire off finished callback
	            self.options.done(self);
	        }
	    };
	    /**************************************
	                  TopoJSON
	    ***************************************/
	    Datamap.prototype.worldTopo = {
	        "type": "Topology",
	        "objects": {
	            "world": {
	                "type": "GeometryCollection",
	                "geometries": [{
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Afghanistan"
	                    },
	                    "id": "AFG",
	                    "arcs": [[0, 1, 2, 3, 4, 5]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Angola"
	                    },
	                    "id": "AGO",
	                    "arcs": [[[6, 7, 8, 9]], [[10, 11, 12]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Albania"
	                    },
	                    "id": "ALB",
	                    "arcs": [[13, 14, 15, 16, 17]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "United Arab Emirates"
	                    },
	                    "id": "ARE",
	                    "arcs": [[18, 19, 20, 21, 22]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Argentina"
	                    },
	                    "id": "ARG",
	                    "arcs": [[[23, 24]], [[25, 26, 27, 28, 29, 30]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Armenia"
	                    },
	                    "id": "ARM",
	                    "arcs": [[31, 32, 33, 34, 35]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Antarctica"
	                    },
	                    "id": "ATA",
	                    "arcs": [[[36]], [[37]], [[38]], [[39]], [[40]], [[41]], [[42]], [[43]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "French Southern and Antarctic Lands"
	                    },
	                    "id": "ATF",
	                    "arcs": [[44]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Australia"
	                    },
	                    "id": "AUS",
	                    "arcs": [[[45]], [[46]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Austria"
	                    },
	                    "id": "AUT",
	                    "arcs": [[47, 48, 49, 50, 51, 52, 53]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Azerbaijan"
	                    },
	                    "id": "AZE",
	                    "arcs": [[[54, -35]], [[55, 56, -33, 57, 58]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Burundi"
	                    },
	                    "id": "BDI",
	                    "arcs": [[59, 60, 61]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Belgium"
	                    },
	                    "id": "BEL",
	                    "arcs": [[62, 63, 64, 65, 66]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Benin"
	                    },
	                    "id": "BEN",
	                    "arcs": [[67, 68, 69, 70, 71]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Burkina Faso"
	                    },
	                    "id": "BFA",
	                    "arcs": [[72, 73, 74, -70, 75, 76]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Bangladesh"
	                    },
	                    "id": "BGD",
	                    "arcs": [[77, 78, 79]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Bulgaria"
	                    },
	                    "id": "BGR",
	                    "arcs": [[80, 81, 82, 83, 84, 85]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "The Bahamas"
	                    },
	                    "id": "BHS",
	                    "arcs": [[[86]], [[87]], [[88]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Bosnia and Herzegovina"
	                    },
	                    "id": "BIH",
	                    "arcs": [[89, 90, 91]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Belarus"
	                    },
	                    "id": "BLR",
	                    "arcs": [[92, 93, 94, 95, 96]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Belize"
	                    },
	                    "id": "BLZ",
	                    "arcs": [[97, 98, 99]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Bolivia"
	                    },
	                    "id": "BOL",
	                    "arcs": [[100, 101, 102, 103, -31]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Brazil"
	                    },
	                    "id": "BRA",
	                    "arcs": [[-27, 104, -103, 105, 106, 107, 108, 109, 110, 111, 112]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Brunei"
	                    },
	                    "id": "BRN",
	                    "arcs": [[113, 114]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Bhutan"
	                    },
	                    "id": "BTN",
	                    "arcs": [[115, 116]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Botswana"
	                    },
	                    "id": "BWA",
	                    "arcs": [[117, 118, 119, 120]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Central African Republic"
	                    },
	                    "id": "CAF",
	                    "arcs": [[121, 122, 123, 124, 125, 126, 127]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Canada"
	                    },
	                    "id": "CAN",
	                    "arcs": [[[128]], [[129]], [[130]], [[131]], [[132]], [[133]], [[134]], [[135]], [[136]], [[137]], [[138, 139, 140, 141]], [[142]], [[143]], [[144]], [[145]], [[146]], [[147]], [[148]], [[149]], [[150]], [[151]], [[152]], [[153]], [[154]], [[155]], [[156]], [[157]], [[158]], [[159]], [[160]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Switzerland"
	                    },
	                    "id": "CHE",
	                    "arcs": [[-51, 161, 162, 163]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Chile"
	                    },
	                    "id": "CHL",
	                    "arcs": [[[-24, 164]], [[-30, 165, 166, -101]]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "China"
	                    },
	                    "id": "CHN",
	                    "arcs": [[[167]], [[168, 169, 170, 171, 172, 173, -117, 174, 175, 176, 177, -4, 178, 179, 180, 181, 182, 183]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Ivory Coast"
	                    },
	                    "id": "CIV",
	                    "arcs": [[184, 185, 186, 187, -73, 188]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Cameroon"
	                    },
	                    "id": "CMR",
	                    "arcs": [[189, 190, 191, 192, 193, 194, -128, 195]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Democratic Republic of the Congo"
	                    },
	                    "id": "COD",
	                    "arcs": [[196, 197, -60, 198, 199, -10, 200, -13, 201, -126, 202]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Republic of the Congo"
	                    },
	                    "id": "COG",
	                    "arcs": [[-12, 203, 204, -196, -127, -202]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Colombia"
	                    },
	                    "id": "COL",
	                    "arcs": [[205, 206, 207, 208, 209, -107, 210]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Costa Rica"
	                    },
	                    "id": "CRI",
	                    "arcs": [[211, 212, 213, 214]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Cuba"
	                    },
	                    "id": "CUB",
	                    "arcs": [[215]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Northern Cyprus"
	                    },
	                    "id": "-99",
	                    "arcs": [[216, 217]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Cyprus"
	                    },
	                    "id": "CYP",
	                    "arcs": [[218, -218]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Czech Republic"
	                    },
	                    "id": "CZE",
	                    "arcs": [[-53, 219, 220, 221]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Germany"
	                    },
	                    "id": "DEU",
	                    "arcs": [[222, 223, -220, -52, -164, 224, 225, -64, 226, 227, 228]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Djibouti"
	                    },
	                    "id": "DJI",
	                    "arcs": [[229, 230, 231, 232]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Denmark"
	                    },
	                    "id": "DNK",
	                    "arcs": [[[233]], [[-229, 234]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Dominican Republic"
	                    },
	                    "id": "DOM",
	                    "arcs": [[235, 236]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Algeria"
	                    },
	                    "id": "DZA",
	                    "arcs": [[237, 238, 239, 240, 241, 242, 243, 244]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Ecuador"
	                    },
	                    "id": "ECU",
	                    "arcs": [[245, -206, 246]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Egypt"
	                    },
	                    "id": "EGY",
	                    "arcs": [[247, 248, 249, 250, 251]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Eritrea"
	                    },
	                    "id": "ERI",
	                    "arcs": [[252, 253, 254, -233]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Spain"
	                    },
	                    "id": "ESP",
	                    "arcs": [[255, 256, 257, 258]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Estonia"
	                    },
	                    "id": "EST",
	                    "arcs": [[259, 260, 261]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Ethiopia"
	                    },
	                    "id": "ETH",
	                    "arcs": [[-232, 262, 263, 264, 265, 266, 267, -253]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Finland"
	                    },
	                    "id": "FIN",
	                    "arcs": [[268, 269, 270, 271]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Fiji"
	                    },
	                    "id": "FJI",
	                    "arcs": [[[272]], [[273, 274]], [[275, -275]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Falkland Islands"
	                    },
	                    "id": "FLK",
	                    "arcs": [[276]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "France"
	                    },
	                    "id": "FRA",
	                    "arcs": [[[277]], [[278, -225, -163, 279, 280, -257, 281, -66]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "French Guiana"
	                    },
	                    "id": "GUF",
	                    "arcs": [[282, 283, 284, 285, -111]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Gabon"
	                    },
	                    "id": "GAB",
	                    "arcs": [[286, 287, -190, -205]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "United Kingdom"
	                    },
	                    "id": "GBR",
	                    "arcs": [[[288, 289]], [[290]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Georgia"
	                    },
	                    "id": "GEO",
	                    "arcs": [[291, 292, -58, -32, 293]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Ghana"
	                    },
	                    "id": "GHA",
	                    "arcs": [[294, -189, -77, 295]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Guinea"
	                    },
	                    "id": "GIN",
	                    "arcs": [[296, 297, 298, 299, 300, 301, -187]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Gambia"
	                    },
	                    "id": "GMB",
	                    "arcs": [[302, 303]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Guinea Bissau"
	                    },
	                    "id": "GNB",
	                    "arcs": [[304, 305, -300]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Equatorial Guinea"
	                    },
	                    "id": "GNQ",
	                    "arcs": [[306, -191, -288]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Greece"
	                    },
	                    "id": "GRC",
	                    "arcs": [[[307]], [[308, -15, 309, -84, 310]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Greenland"
	                    },
	                    "id": "GRL",
	                    "arcs": [[311]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Guatemala"
	                    },
	                    "id": "GTM",
	                    "arcs": [[312, 313, -100, 314, 315, 316]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Guyana"
	                    },
	                    "id": "GUY",
	                    "arcs": [[317, 318, -109, 319]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Honduras"
	                    },
	                    "id": "HND",
	                    "arcs": [[320, 321, -316, 322, 323]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Croatia"
	                    },
	                    "id": "HRV",
	                    "arcs": [[324, -92, 325, 326, 327, 328]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Haiti"
	                    },
	                    "id": "HTI",
	                    "arcs": [[-237, 329]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Hungary"
	                    },
	                    "id": "HUN",
	                    "arcs": [[-48, 330, 331, 332, 333, -329, 334]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Indonesia"
	                    },
	                    "id": "IDN",
	                    "arcs": [[[335]], [[336, 337]], [[338]], [[339]], [[340]], [[341]], [[342]], [[343]], [[344, 345]], [[346]], [[347]], [[348, 349]], [[350]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "India"
	                    },
	                    "id": "IND",
	                    "arcs": [[-177, 351, -175, -116, -174, 352, -80, 353, 354]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Ireland"
	                    },
	                    "id": "IRL",
	                    "arcs": [[355, -289]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Iran"
	                    },
	                    "id": "IRN",
	                    "arcs": [[356, -6, 357, 358, 359, 360, -55, -34, -57, 361]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Iraq"
	                    },
	                    "id": "IRQ",
	                    "arcs": [[362, 363, 364, 365, 366, 367, -360]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Iceland"
	                    },
	                    "id": "ISL",
	                    "arcs": [[368]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Israel"
	                    },
	                    "id": "ISR",
	                    "arcs": [[369, 370, 371, -252, 372, 373, 374]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Italy"
	                    },
	                    "id": "ITA",
	                    "arcs": [[[375]], [[376]], [[377, 378, -280, -162, -50]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Jamaica"
	                    },
	                    "id": "JAM",
	                    "arcs": [[379]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Jordan"
	                    },
	                    "id": "JOR",
	                    "arcs": [[-370, 380, -366, 381, 382, -372, 383]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Japan"
	                    },
	                    "id": "JPN",
	                    "arcs": [[[384]], [[385]], [[386]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Kazakhstan"
	                    },
	                    "id": "KAZ",
	                    "arcs": [[387, 388, 389, 390, -181, 391]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Kenya"
	                    },
	                    "id": "KEN",
	                    "arcs": [[392, 393, 394, 395, -265, 396]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Kyrgyzstan"
	                    },
	                    "id": "KGZ",
	                    "arcs": [[-392, -180, 397, 398]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Cambodia"
	                    },
	                    "id": "KHM",
	                    "arcs": [[399, 400, 401, 402]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "South Korea"
	                    },
	                    "id": "KOR",
	                    "arcs": [[403, 404]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Kosovo"
	                    },
	                    "id": "-99",
	                    "arcs": [[-18, 405, 406, 407]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Kuwait"
	                    },
	                    "id": "KWT",
	                    "arcs": [[408, 409, -364]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Laos"
	                    },
	                    "id": "LAO",
	                    "arcs": [[410, 411, -172, 412, -401]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Lebanon"
	                    },
	                    "id": "LBN",
	                    "arcs": [[-374, 413, 414]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Liberia"
	                    },
	                    "id": "LBR",
	                    "arcs": [[415, 416, -297, -186]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Libya"
	                    },
	                    "id": "LBY",
	                    "arcs": [[417, -245, 418, 419, -250, 420, 421]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Sri Lanka"
	                    },
	                    "id": "LKA",
	                    "arcs": [[422]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Lesotho"
	                    },
	                    "id": "LSO",
	                    "arcs": [[423]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Lithuania"
	                    },
	                    "id": "LTU",
	                    "arcs": [[424, 425, 426, -93, 427]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Luxembourg"
	                    },
	                    "id": "LUX",
	                    "arcs": [[-226, -279, -65]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Latvia"
	                    },
	                    "id": "LVA",
	                    "arcs": [[428, -262, 429, -94, -427]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Morocco"
	                    },
	                    "id": "MAR",
	                    "arcs": [[-242, 430, 431]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Moldova"
	                    },
	                    "id": "MDA",
	                    "arcs": [[432, 433]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Madagascar"
	                    },
	                    "id": "MDG",
	                    "arcs": [[434]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Mexico"
	                    },
	                    "id": "MEX",
	                    "arcs": [[435, -98, -314, 436, 437]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Macedonia"
	                    },
	                    "id": "MKD",
	                    "arcs": [[-408, 438, -85, -310, -14]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Mali"
	                    },
	                    "id": "MLI",
	                    "arcs": [[439, -239, 440, -74, -188, -302, 441]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Myanmar"
	                    },
	                    "id": "MMR",
	                    "arcs": [[442, -78, -353, -173, -412, 443]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Montenegro"
	                    },
	                    "id": "MNE",
	                    "arcs": [[444, -326, -91, 445, -406, -17]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Mongolia"
	                    },
	                    "id": "MNG",
	                    "arcs": [[446, -183]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Mozambique"
	                    },
	                    "id": "MOZ",
	                    "arcs": [[447, 448, 449, 450, 451, 452, 453, 454]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Mauritania"
	                    },
	                    "id": "MRT",
	                    "arcs": [[455, 456, 457, -240, -440]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Malawi"
	                    },
	                    "id": "MWI",
	                    "arcs": [[-455, 458, 459]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Malaysia"
	                    },
	                    "id": "MYS",
	                    "arcs": [[[460, 461]], [[-349, 462, -115, 463]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Namibia"
	                    },
	                    "id": "NAM",
	                    "arcs": [[464, -8, 465, -119, 466]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "New Caledonia"
	                    },
	                    "id": "NCL",
	                    "arcs": [[467]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Niger"
	                    },
	                    "id": "NER",
	                    "arcs": [[-75, -441, -238, -418, 468, -194, 469, -71]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Nigeria"
	                    },
	                    "id": "NGA",
	                    "arcs": [[470, -72, -470, -193]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Nicaragua"
	                    },
	                    "id": "NIC",
	                    "arcs": [[471, -324, 472, -213]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Netherlands"
	                    },
	                    "id": "NLD",
	                    "arcs": [[-227, -63, 473]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Norway"
	                    },
	                    "id": "NOR",
	                    "arcs": [[[474, -272, 475, 476]], [[477]], [[478]], [[479]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Nepal"
	                    },
	                    "id": "NPL",
	                    "arcs": [[-352, -176]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "New Zealand"
	                    },
	                    "id": "NZL",
	                    "arcs": [[[480]], [[481]]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Oman"
	                    },
	                    "id": "OMN",
	                    "arcs": [[[482, 483, -22, 484]], [[-20, 485]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Pakistan"
	                    },
	                    "id": "PAK",
	                    "arcs": [[-178, -355, 486, -358, -5]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Panama"
	                    },
	                    "id": "PAN",
	                    "arcs": [[487, -215, 488, -208]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Peru"
	                    },
	                    "id": "PER",
	                    "arcs": [[-167, 489, -247, -211, -106, -102]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Philippines"
	                    },
	                    "id": "PHL",
	                    "arcs": [[[490]], [[491]], [[492]], [[493]], [[494]], [[495]], [[496]]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Papua New Guinea"
	                    },
	                    "id": "PNG",
	                    "arcs": [[[497]], [[498]], [[-345, 499]], [[500]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Poland"
	                    },
	                    "id": "POL",
	                    "arcs": [[-224, 501, 502, -428, -97, 503, 504, -221]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Puerto Rico"
	                    },
	                    "id": "PRI",
	                    "arcs": [[505]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "North Korea"
	                    },
	                    "id": "PRK",
	                    "arcs": [[506, 507, -405, 508, -169]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Portugal"
	                    },
	                    "id": "PRT",
	                    "arcs": [[-259, 509]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Paraguay"
	                    },
	                    "id": "PRY",
	                    "arcs": [[-104, -105, -26]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Qatar"
	                    },
	                    "id": "QAT",
	                    "arcs": [[510, 511]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Romania"
	                    },
	                    "id": "ROU",
	                    "arcs": [[512, -434, 513, 514, -81, 515, -333]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Russia"
	                    },
	                    "id": "RUS",
	                    "arcs": [[[516]], [[-503, 517, -425]], [[518, 519]], [[520]], [[521]], [[522]], [[523]], [[524]], [[525]], [[526, -507, -184, -447, -182, -391, 527, -59, -293, 528, 529, -95, -430, -261, 530, -269, -475, 531, -520]], [[532]], [[533]], [[534]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Rwanda"
	                    },
	                    "id": "RWA",
	                    "arcs": [[535, -61, -198, 536]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Western Sahara"
	                    },
	                    "id": "ESH",
	                    "arcs": [[-241, -458, 537, -431]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Saudi Arabia"
	                    },
	                    "id": "SAU",
	                    "arcs": [[538, -382, -365, -410, 539, -512, 540, -23, -484, 541]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Sudan"
	                    },
	                    "id": "SDN",
	                    "arcs": [[542, 543, -123, 544, -421, -249, 545, -254, -268, 546]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "South Sudan"
	                    },
	                    "id": "SSD",
	                    "arcs": [[547, -266, -396, 548, -203, -125, 549, -543]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Senegal"
	                    },
	                    "id": "SEN",
	                    "arcs": [[550, -456, -442, -301, -306, 551, -304]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Solomon Islands"
	                    },
	                    "id": "SLB",
	                    "arcs": [[[552]], [[553]], [[554]], [[555]], [[556]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Sierra Leone"
	                    },
	                    "id": "SLE",
	                    "arcs": [[557, -298, -417]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "El Salvador"
	                    },
	                    "id": "SLV",
	                    "arcs": [[558, -317, -322]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Somaliland"
	                    },
	                    "id": "-99",
	                    "arcs": [[-263, -231, 559, 560]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Somalia"
	                    },
	                    "id": "SOM",
	                    "arcs": [[-397, -264, -561, 561]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Republic of Serbia"
	                    },
	                    "id": "SRB",
	                    "arcs": [[-86, -439, -407, -446, -90, -325, -334, -516]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Suriname"
	                    },
	                    "id": "SUR",
	                    "arcs": [[562, -285, 563, -283, -110, -319]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Slovakia"
	                    },
	                    "id": "SVK",
	                    "arcs": [[-505, 564, -331, -54, -222]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Slovenia"
	                    },
	                    "id": "SVN",
	                    "arcs": [[-49, -335, -328, 565, -378]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Sweden"
	                    },
	                    "id": "SWE",
	                    "arcs": [[-476, -271, 566]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Swaziland"
	                    },
	                    "id": "SWZ",
	                    "arcs": [[567, -451]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Syria"
	                    },
	                    "id": "SYR",
	                    "arcs": [[-381, -375, -415, 568, 569, -367]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Chad"
	                    },
	                    "id": "TCD",
	                    "arcs": [[-469, -422, -545, -122, -195]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Togo"
	                    },
	                    "id": "TGO",
	                    "arcs": [[570, -296, -76, -69]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Thailand"
	                    },
	                    "id": "THA",
	                    "arcs": [[571, -462, 572, -444, -411, -400]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Tajikistan"
	                    },
	                    "id": "TJK",
	                    "arcs": [[-398, -179, -3, 573]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Turkmenistan"
	                    },
	                    "id": "TKM",
	                    "arcs": [[-357, 574, -389, 575, -1]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "East Timor"
	                    },
	                    "id": "TLS",
	                    "arcs": [[576, -337]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Trinidad and Tobago"
	                    },
	                    "id": "TTO",
	                    "arcs": [[577]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Tunisia"
	                    },
	                    "id": "TUN",
	                    "arcs": [[-244, 578, -419]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Turkey"
	                    },
	                    "id": "TUR",
	                    "arcs": [[[-294, -36, -361, -368, -570, 579]], [[-311, -83, 580]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Taiwan"
	                    },
	                    "id": "TWN",
	                    "arcs": [[581]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "United Republic of Tanzania"
	                    },
	                    "id": "TZA",
	                    "arcs": [[-394, 582, -448, -460, 583, -199, -62, -536, 584]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Uganda"
	                    },
	                    "id": "UGA",
	                    "arcs": [[-537, -197, -549, -395, -585]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Ukraine"
	                    },
	                    "id": "UKR",
	                    "arcs": [[-530, 585, -514, -433, -513, -332, -565, -504, -96]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Uruguay"
	                    },
	                    "id": "URY",
	                    "arcs": [[-113, 586, -28]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "United States of America"
	                    },
	                    "id": "USA",
	                    "arcs": [[[587]], [[588]], [[589]], [[590]], [[591]], [[592, -438, 593, -139]], [[594]], [[595]], [[596]], [[-141, 597]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Uzbekistan"
	                    },
	                    "id": "UZB",
	                    "arcs": [[-576, -388, -399, -574, -2]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Venezuela"
	                    },
	                    "id": "VEN",
	                    "arcs": [[598, -320, -108, -210]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Vietnam"
	                    },
	                    "id": "VNM",
	                    "arcs": [[599, -402, -413, -171]]
	                }, {
	                    "type": "MultiPolygon",
	                    "properties": {
	                        "name": "Vanuatu"
	                    },
	                    "id": "VUT",
	                    "arcs": [[[600]], [[601]]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "West Bank"
	                    },
	                    "id": "PSE",
	                    "arcs": [[-384, -371]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Yemen"
	                    },
	                    "id": "YEM",
	                    "arcs": [[602, -542, -483]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "South Africa"
	                    },
	                    "id": "ZAF",
	                    "arcs": [[-467, -118, 603, -452, -568, -450, 604], [-424]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Zambia"
	                    },
	                    "id": "ZMB",
	                    "arcs": [[-459, -454, 605, -120, -466, -7, -200, -584]]
	                }, {
	                    "type": "Polygon",
	                    "properties": {
	                        "name": "Zimbabwe"
	                    },
	                    "id": "ZWE",
	                    "arcs": [[-604, -121, -606, -453]]
	                }]
	            }
	        },
	        "arcs": [[[6700, 7164], [28, -23], [21, 8], [6, 27], [22, 9], [15, 18], [6, 47], [23, 11], [5, 21], [13, -15], [8, -2]], [[6847, 7265], [16, -1], [20, -12]], [[6883, 7252], [9, -7], [20, 19], [9, -12], [9, 27], [17, -1], [4, 9], [3, 24], [12, 20], [15, -13], [-3, -18], [9, -3], [-3, -50], [11, -19], [10, 12], [12, 6], [17, 27], [19, -5], [29, 0]], [[7082, 7268], [5, -17]], [[7087, 7251], [-16, -6], [-14, -11], [-32, -7], [-30, -13], [-16, -25], [6, -25], [4, -30], [-14, -25], [1, -22], [-8, -22], [-26, 2], [11, -39], [-18, -15], [-12, -35], [2, -36], [-11, -16], [-10, 5], [-22, -8], [-3, -16], [-20, 0], [-16, -34], [-1, -50], [-36, -24], [-19, 5], [-6, -13], [-16, 7], [-28, -8], [-47, 30]], [[6690, 6820], [25, 53], [-2, 38], [-21, 10], [-2, 38], [-9, 47], [12, 32], [-12, 9], [7, 43], [12, 74]], [[5664, 4412], [3, -18], [-4, -29], [5, -28], [-4, -22], [3, -20], [-58, 1], [-2, -188], [19, -49], [18, -37]], [[5644, 4022], [-51, -24], [-67, 9], [-19, 28], [-113, -3], [-4, -4], [-17, 27], [-18, 2], [-16, -10], [-14, -12]], [[5325, 4035], [-2, 38], [4, 51], [9, 55], [2, 25], [9, 53], [6, 24], [16, 39], [9, 26], [3, 44], [-1, 34], [-9, 21], [-7, 36], [-7, 35], [2, 12], [8, 24], [-8, 57], [-6, 39], [-14, 38], [3, 11]], [[5342, 4697], [11, 8], [8, -1], [10, 7], [82, -1], [7, -44], [8, -35], [6, -19], [11, -31], [18, 5], [9, 8], [16, -8], [4, 14], [7, 35], [17, 2], [2, 10], [14, 1], [-3, -22], [34, 1], [1, -37], [5, -23], [-4, -36], [2, -36], [9, -22], [-1, -70], [7, 5], [12, -1], [17, 8], [13, -3]], [[5338, 4715], [-8, 45]], [[5330, 4760], [12, 25], [8, 10], [10, -20]], [[5360, 4775], [-10, -12], [-4, -16], [-1, -25], [-7, -7]], [[5571, 7530], [-3, -20], [4, -25], [11, -15]], [[5583, 7470], [0, -15], [-9, -9], [-2, -19], [-13, -29]], [[5559, 7398], [-5, 5], [0, 13], [-15, 19], [-3, 29], [2, 40], [4, 18], [-4, 10]], [[5538, 7532], [-2, 18], [12, 29], [1, -11], [8, 6]], [[5557, 7574], [6, -16], [7, -6], [1, -22]], [[6432, 6490], [5, 3], [1, -16], [22, 9], [23, -2], [17, -1], [19, 39], [20, 38], [18, 37]], [[6557, 6597], [5, -20]], [[6562, 6577], [4, -47]], [[6566, 6530], [-14, 0], [-3, -39], [5, -8], [-12, -12], [0, -24], [-8, -24], [-1, -24]], [[6533, 6399], [-6, -12], [-83, 29], [-11, 60], [-1, 14]], [[3140, 1814], [-17, 2], [-30, 0], [0, 132]], [[3093, 1948], [11, -27], [14, -45], [36, -35], [39, -15], [-13, -30], [-26, -2], [-14, 20]], [[3258, 3743], [51, -96], [23, -9], [34, -44], [29, -23], [4, -26], [-28, -90], [28, -16], [32, -9], [22, 10], [25, 45], [4, 52]], [[3482, 3537], [14, 11], [14, -34], [-1, -47], [-23, -33], [-19, -24], [-31, -57], [-37, -81]], [[3399, 3272], [-7, -47], [-7, -61], [0, -58], [-6, -14], [-2, -38]], [[3377, 3054], [-2, -31], [35, -50], [-4, -41], [18, -26], [-2, -29], [-26, -75], [-42, -32], [-55, -12], [-31, 6], [6, -36], [-6, -44], [5, -30], [-16, -20], [-29, -8], [-26, 21], [-11, -15], [4, -59], [18, -18], [16, 19], [8, -31], [-26, -18], [-22, -37], [-4, -59], [-7, -32], [-26, 0], [-22, -31], [-8, -44], [28, -43], [26, -12], [-9, -53], [-33, -33], [-18, -70], [-25, -23], [-12, -28], [9, -61], [19, -34], [-12, 3]], [[3095, 1968], [-26, 9], [-67, 8], [-11, 34], [0, 45], [-18, -4], [-10, 21], [-3, 63], [22, 26], [9, 37], [-4, 30], [15, 51], [10, 78], [-3, 35], [12, 11], [-3, 22], [-13, 12], [10, 25], [-13, 22], [-6, 68], [11, 12], [-5, 72], [7, 61], [7, 52], [17, 22], [-9, 58], [0, 54], [21, 38], [-1, 50], [16, 57], [0, 55], [-7, 11], [-13, 102], [17, 60], [-2, 58], [10, 53], [18, 56], [20, 36], [-9, 24], [6, 19], [-1, 98], [30, 29], [10, 62], [-3, 14]], [[3136, 3714], [23, 54], [36, -15], [16, -42], [11, 47], [32, -2], [4, -13]], [[6210, 7485], [39, 9]], [[6249, 7494], [5, -15], [11, -10], [-6, -15], [15, -21], [-8, -18], [12, -16], [13, -10], [0, -41]], [[6291, 7348], [-10, -2]], [[6281, 7346], [-11, 34], [0, 10], [-12, -1], [-9, 16], [-5, -1]], [[6244, 7404], [-11, 17], [-21, 15], [3, 28], [-5, 21]], [[3345, 329], [-8, -30], [-8, -27], [-59, 8], [-62, -3], [-34, 20], [0, 2], [-16, 17], [63, -2], [60, -6], [20, 24], [15, 21], [29, -24]], [[577, 361], [-53, -8], [-36, 21], [-17, 21], [-1, 3], [-18, 16], [17, 22], [52, -9], [28, -18], [21, -21], [7, -27]], [[3745, 447], [35, -26], [12, -36], [3, -25], [1, -30], [-43, -19], [-45, -15], [-52, -14], [-59, -11], [-65, 3], [-37, 20], [5, 24], [59, 16], [24, 20], [18, 26], [12, 22], [17, 20], [18, 25], [14, 0], [41, 12], [42, -12]], [[1633, 715], [36, -9], [33, 10], [-16, -20], [-26, -15], [-39, 4], [-27, 21], [6, 20], [33, -11]], [[1512, 716], [43, -23], [-17, 3], [-36, 5], [-38, 17], [20, 12], [28, -14]], [[2250, 808], [31, -8], [30, 7], [17, -34], [-22, 5], [-34, -2], [-34, 2], [-38, -4], [-28, 12], [-15, 24], [18, 11], [35, -8], [40, -5]], [[3098, 866], [4, -27], [-5, -23], [-8, -22], [-33, -8], [-31, -12], [-36, 1], [14, 24], [-33, -9], [-31, -8], [-21, 18], [-2, 24], [30, 23], [20, 7], [32, -2], [8, 30], [1, 22], [0, 47], [16, 28], [25, 9], [15, -22], [6, -22], [12, -26], [10, -26], [7, -26]], [[3371, 1268], [-11, -13], [-21, 9], [-23, -6], [-19, -14], [-20, -15], [-14, -17], [-4, -23], [2, -22], [13, -20], [-19, -14], [-26, -4], [-15, -20], [-17, -19], [-17, -25], [-4, -22], [9, -24], [15, -19], [23, -14], [21, -18], [12, -23], [6, -22], [8, -24], [13, -19], [8, -22], [4, -55], [8, -22], [2, -23], [9, -23], [-4, -31], [-15, -24], [-17, -20], [-37, -8], [-12, -21], [-17, -20], [-42, -22], [-37, -9], [-35, -13], [-37, -13], [-22, -24], [-45, -2], [-49, 2], [-44, -4], [-47, 0], [9, -24], [42, -10], [31, -16], [18, -21], [-31, -19], [-48, 6], [-40, -15], [-2, -24], [-1, -23], [33, -20], [6, -22], [35, -22], [59, -9], [50, -16], [40, -19], [50, -18], [70, -10], [68, -16], [47, -17], [52, -20], [27, -28], [13, -22], [34, 21], [46, 17], [48, 19], [58, 15], [49, 16], [69, 1], [68, -8], [56, -14], [18, 26], [39, 17], [70, 1], [55, 13], [52, 13], [58, 8], [62, 10], [43, 15], [-20, 21], [-12, 21], [0, 22], [-54, -2], [-57, -10], [-54, 0], [-8, 22], [4, 44], [12, 13], [40, 14], [47, 14], [34, 17], [33, 18], [25, 23], [38, 10], [38, 8], [19, 5], [43, 2], [41, 8], [34, 12], [34, 14], [30, 14], [39, 18], [24, 20], [26, 17], [9, 24], [-30, 13], [10, 25], [18, 18], [29, 12], [31, 14], [28, 18], [22, 23], [13, 28], [21, 16], [33, -3], [13, -20], [34, -2], [1, 22], [14, 23], [30, -6], [7, -22], [33, -3], [36, 10], [35, 7], [31, -3], [12, -25], [31, 20], [28, 10], [31, 9], [31, 8], [29, 14], [31, 9], [24, 13], [17, 20], [20, -15], [29, 8], [20, -27], [16, -21], [32, 11], [12, 24], [28, 16], [37, -4], [11, -22], [22, 22], [30, 7], [33, 3], [29, -2], [31, -7], [30, -3], [13, -20], [18, -17], [31, 10], [32, 3], [32, 0], [31, 1], [28, 8], [29, 7], [25, 16], [26, 11], [28, 5], [21, 17], [15, 32], [16, 20], [29, -10], [11, -21], [24, -13], [29, 4], [19, -21], [21, -15], [28, 14], [10, 26], [25, 10], [29, 20], [27, 8], [33, 11], [22, 13], [22, 14], [22, 13], [26, -7], [25, 21], [18, 16], [26, -1], [23, 14], [6, 21], [23, 16], [23, 11], [28, 10], [25, 4], [25, -3], [26, -6], [22, -16], [3, -26], [24, -19], [17, -17], [33, -7], [19, -16], [23, -16], [26, -3], [23, 11], [24, 24], [26, -12], [27, -7], [26, -7], [27, -5], [28, 0], [23, -61], [-1, -15], [-4, -27], [-26, -15], [-22, -22], [4, -23], [31, 1], [-4, -23], [-14, -22], [-13, -24], [21, -19], [32, -6], [32, 11], [15, 23], [10, 22], [15, 18], [17, 18], [7, 21], [15, 29], [18, 5], [31, 3], [28, 7], [28, 9], [14, 23], [8, 22], [19, 22], [27, 15], [23, 12], [16, 19], [15, 11], [21, 9], [27, -6], [25, 6], [28, 7], [30, -4], [20, 17], [14, 39], [11, -16], [13, -28], [23, -12], [27, -4], [26, 7], [29, -5], [26, -1], [17, 6], [24, -4], [21, -12], [25, 8], [30, 0], [25, 8], [29, -8], [19, 19], [14, 20], [19, 16], [35, 44], [18, -8], [21, -16], [18, -21], [36, -36], [27, -1], [25, 0], [30, 7], [30, 8], [23, 16], [19, 18], [31, 2], [21, 13], [22, -12], [14, -18], [19, -19], [31, 2], [19, -15], [33, -15], [35, -5], [29, 4], [21, 19], [19, 18], [25, 5], [25, -8], [29, -6], [26, 9], [25, 0], [24, -6], [26, -5], [25, 10], [30, 9], [28, 3], [32, 0], [25, 5], [25, 5], [8, 29], [1, 24], [17, -16], [5, -27], [10, -24], [11, -20], [23, -10], [32, 4], [36, 1], [25, 3], [37, 0], [26, 1], [36, -2], [31, -5], [20, -18], [-5, -22], [18, -18], [30, -13], [31, -15], [35, -11], [38, -9], [28, -9], [32, -2], [18, 20], [24, -16], [21, -19], [25, -13], [34, -6], [32, -7], [13, -23], [32, -14], [21, -21], [31, -9], [32, 1], [30, -4], [33, 1], [34, -4], [31, -8], [28, -14], [29, -12], [20, -17], [-3, -23], [-15, -21], [-13, -27], [-9, -21], [-14, -24], [-36, -9], [-16, -21], [-36, -13], [-13, -23], [-19, -22], [-20, -18], [-11, -25], [-7, -22], [-3, -26], [0, -22], [16, -23], [6, -22], [13, -21], [52, -8], [11, -26], [-50, -9], [-43, -13], [-52, -2], [-24, -34], [-5, -27], [-12, -22], [-14, -22], [37, -20], [14, -24], [24, -22], [33, -20], [39, -19], [42, -18], [64, -19], [14, -29], [80, -12], [5, -5], [21, -17], [77, 15], [63, -19], [48, -14], [-9997, -1], [24, 35], [50, -19], [3, 2], [30, 19], [4, 0], [3, -1], [40, -25], [35, 25], [7, 3], [81, 11], [27, -14], [13, -7], [41, -20], [79, -15], [63, -18], [107, -14], [80, 16], [118, -11], [67, -19], [73, 17], [78, 17], [6, 27], [-110, 3], [-89, 14], [-24, 23], [-74, 12], [5, 27], [10, 24], [10, 22], [-5, 25], [-46, 16], [-22, 21], [-43, 18], [68, -3], [64, 9], [40, -20], [50, 18], [45, 22], [23, 19], [-10, 25], [-36, 16], [-41, 17], [-57, 4], [-50, 8], [-54, 6], [-18, 22], [-36, 18], [-21, 21], [-9, 67], [14, -6], [25, -18], [45, 6], [44, 8], [23, -26], [44, 6], [37, 13], [35, 16], [32, 20], [41, 5], [-1, 22], [-9, 22], [8, 21], [36, 11], [16, -20], [42, 12], [32, 15], [40, 1], [38, 6], [37, 13], [30, 13], [34, 13], [22, -4], [19, -4], [41, 8], [37, -10], [38, 1], [37, 8], [37, -6], [41, -6], [39, 3], [40, -2], [42, -1], [38, 3], [28, 17], [34, 9], [35, -13], [33, 11], [30, 21], [18, -19], [9, -21], [18, -19], [29, 17], [33, -22], [38, -7], [32, -16], [39, 3], [36, 11], [41, -3], [38, -8], [38, -10], [15, 25], [-18, 20], [-14, 21], [-36, 5], [-15, 22], [-6, 22], [-10, 43], [21, -8], [36, -3], [36, 3], [33, -9], [28, -17], [12, -21], [38, -4], [36, 9], [38, 11], [34, 7], [28, -14], [37, 5], [24, 45], [23, -27], [32, -10], [34, 6], [23, -23], [37, -3], [33, -7], [34, -12], [21, 22], [11, 20], [28, -23], [38, 6], [28, -13], [19, -19], [37, 5], [29, 13], [29, 15], [33, 8], [39, 7], [36, 8], [27, 13], [16, 19], [7, 25], [-3, 24], [-9, 24], [-10, 23], [-9, 23], [-7, 21], [-1, 23], [2, 23], [13, 22], [11, 24], [5, 23], [-6, 26], [-3, 23], [14, 27], [15, 17], [18, 22], [19, 19], [22, 17], [11, 25], [15, 17], [18, 15], [26, 3], [18, 19], [19, 11], [23, 7], [20, 15], [16, 19], [22, 7], [16, -15], [-10, -20], [-29, -17]], [[6914, 2185], [18, -19], [26, -7], [1, -11], [-7, -27], [-43, -4], [-1, 31], [4, 25], [2, 12]], [[9038, 2648], [27, -21], [15, 8], [22, 12], [16, -4], [2, -70], [-9, -21], [-3, -47], [-10, 16], [-19, -41], [-6, 3], [-17, 2], [-17, 50], [-4, 39], [-16, 52], [1, 27], [18, -5]], [[8987, 4244], [10, -46], [18, 22], [9, -25], [13, -23], [-3, -26], [6, -51], [5, -29], [7, -7], [7, -51], [-3, -30], [9, -40], [31, -31], [19, -28], [19, -26], [-4, -14], [16, -37], [11, -64], [11, 13], [11, -26], [7, 9], [5, -63], [19, -36], [13, -22], [22, -48], [8, -48], [1, -33], [-2, -37], [13, -50], [-2, -52], [-5, -28], [-7, -52], [1, -34], [-6, -43], [-12, -53], [-21, -29], [-10, -46], [-9, -29], [-8, -51], [-11, -30], [-7, -44], [-4, -41], [2, -18], [-16, -21], [-31, -2], [-26, -24], [-13, -23], [-17, -26], [-23, 27], [-17, 10], [5, 31], [-15, -11], [-25, -43], [-24, 16], [-15, 9], [-16, 4], [-27, 17], [-18, 37], [-5, 45], [-7, 30], [-13, 24], [-27, 7], [9, 28], [-7, 44], [-13, -41], [-25, -11], [14, 33], [5, 34], [10, 29], [-2, 44], [-22, -50], [-18, -21], [-10, -47], [-22, 25], [1, 31], [-18, 43], [-14, 22], [5, 14], [-36, 35], [-19, 2], [-27, 29], [-50, -6], [-36, -21], [-31, -20], [-27, 4], [-29, -30], [-24, -14], [-6, -31], [-10, -24], [-23, -1], [-18, -5], [-24, 10], [-20, -6], [-19, -3], [-17, -31], [-8, 2], [-14, -16], [-13, -19], [-21, 2], [-18, 0], [-30, 38], [-15, 11], [1, 34], [14, 8], [4, 14], [-1, 21], [4, 41], [-3, 35], [-15, 60], [-4, 33], [1, 34], [-11, 38], [-1, 18], [-12, 23], [-4, 47], [-16, 46], [-4, 26], [13, -26], [-10, 55], [14, -17], [8, -23], [0, 30], [-14, 47], [-3, 18], [-6, 18], [3, 34], [6, 15], [4, 29], [-3, 35], [11, 42], [2, -45], [12, 41], [22, 20], [14, 25], [21, 22], [13, 4], [7, -7], [22, 22], [17, 6], [4, 13], [8, 6], [15, -2], [29, 18], [15, 26], [7, 31], [17, 30], [1, 24], [1, 32], [19, 50], [12, -51], [12, 12], [-10, 28], [9, 29], [12, -13], [3, 45], [15, 29], [7, 23], [14, 10], [0, 17], [13, -7], [0, 15], [12, 8], [14, 8], [20, -27], [16, -35], [17, 0], [18, -6], [-6, 33], [13, 47], [13, 15], [-5, 15], [12, 34], [17, 21], [14, -7], [24, 11], [-1, 30], [-20, 19], [15, 9], [18, -15], [15, -24], [23, -15], [8, 6], [17, -18], [17, 17], [10, -5], [7, 11], [12, -29], [-7, -32], [-11, -24], [-9, -2], [3, -23], [-8, -30], [-10, -29], [2, -17], [22, -32], [21, -19], [15, -20], [20, -35], [8, 0], [14, -15], [4, -19], [27, -20], [18, 20], [6, 32], [5, 26], [4, 33], [8, 47], [-4, 28], [2, 17], [-3, 34], [4, 45], [5, 12], [-4, 20], [7, 31], [5, 32], [1, 17], [10, 22], [8, -29], [2, -37], [7, -7], [1, -25], [10, -30], [2, -33], [-1, -22]], [[5471, 7900], [-2, -24], [-16, 0], [6, -13], [-9, -38]], [[5450, 7825], [-6, -10], [-24, -1], [-14, -13], [-23, 4]], [[5383, 7805], [-40, 15], [-6, 21], [-27, -10], [-4, -12], [-16, 9]], [[5290, 7828], [-15, 1], [-12, 11], [4, 15], [-1, 10]], [[5266, 7865], [8, 3], [14, -16], [4, 16], [25, -3], [20, 11], [13, -2], [9, -12], [2, 10], [-4, 38], [10, 8], [10, 27]], [[5377, 7945], [21, -19], [15, 24], [10, 5], [22, -18], [13, 3], [13, -12]], [[5471, 7928], [-3, -7], [3, -21]], [[6281, 7346], [-19, 8], [-14, 27], [-4, 23]], [[6349, 7527], [15, -31], [14, -42], [13, -2], [8, -16], [-23, -5], [-5, -46], [-4, -21], [-11, -13], [1, -30]], [[6357, 7321], [-7, -3], [-17, 31], [10, 30], [-9, 17], [-10, -4], [-33, -44]], [[6249, 7494], [6, 10], [21, -17], [15, -4], [4, 7], [-14, 32], [7, 9]], [[6288, 7531], [8, -2], [19, -36], [13, -4], [4, 15], [17, 23]], [[5814, 4792], [-1, 71], [-7, 27]], [[5806, 4890], [17, -5], [8, 34], [15, -4]], [[5846, 4915], [1, -23], [6, -14], [1, -19], [-7, -12], [-11, -31], [-10, -22], [-12, -2]], [[5092, 8091], [20, -5], [26, 12], [17, -25], [16, -14]], [[5171, 8059], [-4, -40]], [[5167, 8019], [-7, -2], [-3, -33]], [[5157, 7984], [-24, 26], [-14, -4], [-20, 28], [-13, 23], [-13, 1], [-4, 21]], [[5069, 8079], [23, 12]], [[5074, 5427], [-23, -7]], [[5051, 5420], [-7, 41], [2, 136], [-6, 12], [-1, 29], [-10, 21], [-8, 17], [3, 31]], [[5024, 5707], [10, 7], [6, 26], [13, 5], [6, 18]], [[5059, 5763], [10, 17], [10, 0], [21, -34]], [[5100, 5746], [-1, -19], [6, -35], [-6, -24], [3, -16], [-13, -37], [-9, -18], [-5, -37], [1, -38], [-2, -95]], [[4921, 5627], [-19, 15], [-13, -2], [-10, -15], [-12, 13], [-5, 19], [-13, 13]], [[4849, 5670], [-1, 34], [7, 26], [-1, 20], [23, 48], [4, 41], [7, 14], [14, -8], [11, 12], [4, 16], [22, 26], [5, 19], [26, 24], [15, 9], [7, -12], [18, 0]], [[5010, 5939], [-2, -28], [3, -27], [16, -39], [1, -28], [32, -14], [-1, -40]], [[5024, 5707], [-24, 1]], [[5000, 5708], [-13, 5], [-9, -9], [-12, 4], [-48, -3], [-1, -33], [4, -45]], [[7573, 6360], [0, -43], [-10, 9], [2, -47]], [[7565, 6279], [-8, 30], [-1, 31], [-6, 28], [-11, 34], [-26, 3], [3, -25], [-9, -32], [-12, 12], [-4, -11], [-8, 6], [-11, 5]], [[7472, 6360], [-4, 49], [-10, 45], [5, 35], [-17, 16], [6, 22], [18, 22], [-20, 31], [9, 40], [22, -26], [14, -3], [2, -41], [26, -8], [26, 1], [16, -10], [-13, -50], [-12, -3], [-9, -34], [16, -31], [4, 38], [8, 0], [14, -93]], [[5629, 7671], [8, -25], [11, 5], [21, -9], [41, -4], [13, 16], [33, 13], [20, -21], [17, -6]], [[5793, 7640], [-15, -25], [-10, -42], [9, -34]], [[5777, 7539], [-24, 8], [-28, -18]], [[5725, 7529], [0, -30], [-26, -5], [-19, 20], [-22, -16], [-21, 2]], [[5637, 7500], [-2, 39], [-14, 19]], [[5621, 7558], [5, 8], [-3, 7], [4, 19], [11, 18], [-14, 26], [-2, 21], [7, 14]], [[2846, 6461], [-7, -3], [-7, 34], [-10, 17], [6, 38], [8, -3], [10, -49], [0, -34]], [[2838, 6628], [-30, -10], [-2, 22], [13, 5], [18, -2], [1, -15]], [[2861, 6628], [-5, -42], [-5, 8], [0, 31], [-12, 23], [0, 7], [22, -27]], [[5527, 7708], [10, 0], [-7, -26], [14, -23], [-4, -28], [-7, -2]], [[5533, 7629], [-5, -6], [-9, -13], [-4, -33]], [[5515, 7577], [-25, 23], [-10, 24], [-11, 13], [-12, 22], [-6, 19], [-14, 27], [6, 25], [10, -14], [6, 12], [13, 2], [24, -10], [19, 1], [12, -13]], [[5652, 8242], [27, 0], [30, 22], [6, 34], [23, 19], [-3, 26]], [[5735, 8343], [17, 10], [30, 23]], [[5782, 8376], [29, -15], [4, -15], [15, 7], [27, -14], [3, -27], [-6, -16], [17, -39], [12, -11], [-2, -11], [19, -10], [8, -16], [-11, -13], [-23, 2], [-5, -5], [7, -20], [6, -37]], [[5882, 8136], [-23, -4], [-9, -13], [-2, -30], [-11, 6], [-25, -3], [-7, 14], [-11, -10], [-10, 8], [-22, 1], [-31, 15], [-28, 4], [-22, -1], [-15, -16], [-13, -2]], [[5653, 8105], [-1, 26], [-8, 27], [17, 12], [0, 24], [-8, 22], [-1, 26]], [[2524, 6110], [-1, 8], [4, 3], [5, -7], [10, 36], [5, 0]], [[2547, 6150], [0, -8], [5, -1], [0, -16], [-5, -25], [3, -9], [-3, -21], [2, -6], [-4, -30], [-5, -16], [-5, -1], [-6, -21]], [[2529, 5996], [-8, 0], [2, 67], [1, 47]], [[3136, 3714], [-20, -8], [-11, 82], [-15, 66], [9, 57], [-15, 25], [-4, 43], [-13, 40]], [[3067, 4019], [17, 64], [-12, 49], [7, 20], [-5, 22], [10, 30], [1, 50], [1, 41], [6, 20], [-24, 96]], [[3068, 4411], [21, -5], [14, 1], [6, 18], [25, 24], [14, 22], [37, 10], [-3, -44], [3, -23], [-2, -40], [30, -53], [31, -9], [11, -23], [19, -11], [11, -17], [18, 0], [16, -17], [1, -34], [6, -18], [0, -25], [-8, -1], [11, -69], [53, -2], [-4, -35], [3, -23], [15, -16], [6, -37], [-4, -47], [-8, -26], [3, -33], [-9, -12]], [[3384, 3866], [-1, 18], [-25, 30], [-26, 1], [-49, -17], [-13, -52], [-1, -32], [-11, -71]], [[3482, 3537], [6, 34], [3, 35], [1, 32], [-10, 11], [-11, -9], [-10, 2], [-4, 23], [-2, 54], [-5, 18], [-19, 16], [-11, -12], [-30, 11], [2, 81], [-8, 33]], [[3068, 4411], [-15, -11], [-13, 7], [2, 90], [-23, -35], [-24, 2], [-11, 31], [-18, 4], [5, 25], [-15, 36], [-11, 53], [7, 11], [0, 25], [17, 17], [-3, 32], [7, 20], [2, 28], [32, 40], [22, 11], [4, 9], [25, -2]], [[3058, 4804], [13, 162], [0, 25], [-4, 34], [-12, 22], [0, 42], [15, 10], [6, -6], [1, 23], [-16, 6], [-1, 37], [54, -2], [10, 21], [7, -19], [6, -35], [5, 8]], [[3142, 5132], [15, -32], [22, 4], [5, 18], [21, 14], [11, 10], [4, 25], [19, 17], [-1, 12], [-24, 5], [-3, 37], [1, 40], [-13, 15], [5, 6], [21, -8], [22, -15], [8, 14], [20, 9], [31, 23], [10, 22], [-3, 17]], [[3313, 5365], [14, 2], [7, -13], [-4, -26], [9, -9], [7, -28], [-8, -20], [-4, -51], [7, -30], [2, -27], [17, -28], [14, -3], [3, 12], [8, 3], [13, 10], [9, 16], [15, -5], [7, 2]], [[3429, 5170], [15, -5], [3, 12], [-5, 12], [3, 17], [11, -5], [13, 6], [16, -13]], [[3485, 5194], [12, -12], [9, 16], [6, -3], [4, -16], [13, 4], [11, 22], [8, 44], [17, 54]], [[3565, 5303], [9, 3], [7, -33], [16, -103], [14, -10], [1, -41], [-21, -48], [9, -18], [49, -9], [1, -60], [21, 39], [35, -21], [46, -36], [14, -35], [-5, -32], [33, 18], [54, -32], [41, 3], [41, -49], [36, -66], [21, -17], [24, -3], [10, -18], [9, -76], [5, -35], [-11, -98], [-14, -39], [-39, -82], [-18, -67], [-21, -51], [-7, -1], [-7, -43], [2, -111], [-8, -91], [-3, -39], [-9, -23], [-5, -79], [-28, -77], [-5, -61], [-22, -26], [-7, -35], [-30, 0], [-44, -23], [-19, -26], [-31, -18], [-33, -47], [-23, -58], [-5, -44], [5, -33], [-5, -60], [-6, -28], [-20, -33], [-31, -104], [-24, -47], [-19, -27], [-13, -57], [-18, -33]], [[3517, 3063], [-8, 33], [13, 28], [-16, 40], [-22, 33], [-29, 38], [-10, -2], [-28, 46], [-18, -7]], [[8172, 5325], [11, 22], [23, 32]], [[8206, 5379], [-1, -29], [-2, -37], [-13, 1], [-6, -20], [-12, 31]], [[7546, 6698], [12, -19], [-2, -36], [-23, -2], [-23, 4], [-18, -9], [-25, 22], [-1, 12]], [[7466, 6670], [19, 44], [15, 15], [20, -14], [14, -1], [12, -16]], [[5817, 3752], [-39, -43], [-25, -44], [-10, -40], [-8, -22], [-15, -4], [-5, -29], [-3, -18], [-17, -14], [-23, 3], [-13, 17], [-12, 7], [-14, -14], [-6, -28], [-14, -18], [-13, -26], [-20, -6], [-6, 20], [2, 36], [-16, 56], [-8, 9]], [[5552, 3594], [0, 173], [27, 2], [1, 210], [21, 2], [43, 21], [10, -24], [18, 23], [9, 0], [15, 13]], [[5696, 4014], [5, -4]], [[5701, 4010], [11, -48], [5, -10], [9, -34], [32, -65], [12, -7], [0, -20], [8, -38], [21, -9], [18, -27]], [[5424, 5496], [23, 4], [5, 16], [5, -2], [7, -13], [34, 23], [12, 23], [15, 20], [-3, 21], [8, 6], [27, -4], [26, 27], [20, 65], [14, 24], [18, 10]], [[5635, 5716], [3, -26], [16, -36], [0, -25], [-5, -24], [2, -18], [10, -18]], [[5661, 5569], [21, -25]], [[5682, 5544], [15, -24], [0, -19], [19, -31], [12, -26], [7, -35], [20, -24], [5, -18]], [[5760, 5367], [-9, -7], [-18, 2], [-21, 6], [-10, -5], [-5, -14], [-9, -2], [-10, 12], [-31, -29], [-13, 6], [-4, -5], [-8, -35], [-21, 11], [-20, 6], [-18, 22], [-23, 20], [-15, -19], [-10, -30], [-3, -41]], [[5512, 5265], [-18, 3], [-19, 10], [-16, -32], [-15, -55]], [[5444, 5191], [-3, 18], [-1, 27], [-13, 19], [-10, 30], [-2, 21], [-13, 31], [2, 18], [-3, 25], [2, 45], [7, 11], [14, 60]], [[3231, 7808], [20, -8], [26, 1], [-14, -24], [-10, -4], [-35, 25], [-7, 20], [10, 18], [10, -28]], [[3283, 7958], [-14, -1], [-36, 19], [-26, 28], [10, 5], [37, -15], [28, -25], [1, -11]], [[1569, 7923], [-14, -8], [-46, 27], [-8, 21], [-25, 21], [-5, 16], [-28, 11], [-11, 32], [2, 14], [30, -13], [17, -9], [26, -6], [9, -21], [14, -28], [28, -24], [11, -33]], [[3440, 8052], [-18, -52], [18, 20], [19, -12], [-10, -21], [25, -16], [12, 14], [28, -18], [-8, -43], [19, 10], [4, -32], [8, -36], [-11, -52], [-13, -2], [-18, 11], [6, 48], [-8, 8], [-32, -52], [-17, 2], [20, 28], [-27, 14], [-30, -3], [-54, 2], [-4, 17], [17, 21], [-12, 16], [24, 36], [28, 94], [18, 33], [24, 21], [13, -3], [-6, -16], [-15, -37]], [[1313, 8250], [27, 5], [-8, -67], [24, -48], [-11, 0], [-17, 27], [-10, 27], [-14, 19], [-5, 26], [1, 19], [13, -8]], [[2798, 8730], [-11, -31], [-12, 5], [-8, 17], [2, 4], [10, 18], [12, -1], [7, -12]], [[2725, 8762], [-33, -32], [-19, 1], [-6, 16], [20, 27], [38, 0], [0, -12]], [[2634, 8936], [5, -26], [15, 9], [16, -15], [30, -20], [32, -19], [2, -28], [21, 5], [20, -20], [-25, -18], [-43, 14], [-16, 26], [-27, -31], [-40, -31], [-9, 35], [-38, -6], [24, 30], [4, 46], [9, 54], [20, -5]], [[2892, 9024], [-31, -3], [-7, 29], [12, 34], [26, 8], [21, -17], [1, -25], [-4, -8], [-18, -18]], [[2343, 9140], [-17, -21], [-38, 18], [-22, -6], [-38, 26], [24, 19], [19, 25], [30, -16], [17, -11], [8, -11], [17, -23]], [[3135, 7724], [-18, 33], [0, 81], [-13, 17], [-18, -10], [-10, 16], [-21, -45], [-8, -46], [-10, -27], [-12, -9], [-9, -3], [-3, -15], [-51, 0], [-42, 0], [-12, -11], [-30, -42], [-3, -5], [-9, -23], [-26, 0], [-27, 0], [-12, -10], [4, -11], [2, -18], [0, -6], [-36, -30], [-29, -9], [-32, -31], [-7, 0], [-10, 9], [-3, 8], [1, 6], [6, 21], [13, 33], [8, 35], [-5, 51], [-6, 53], [-29, 28], [3, 11], [-4, 7], [-8, 0], [-5, 9], [-2, 14], [-5, -6], [-7, 2], [1, 6], [-6, 6], [-3, 15], [-21, 19], [-23, 20], [-27, 23], [-26, 21], [-25, -17], [-9, 0], [-34, 15], [-23, -8], [-27, 19], [-28, 9], [-19, 4], [-9, 10], [-5, 32], [-9, 0], [-1, -23], [-57, 0], [-95, 0], [-94, 0], [-84, 0], [-83, 0], [-82, 0], [-85, 0], [-27, 0], [-82, 0], [-79, 0]], [[1588, 7952], [-4, 0], [-54, 58], [-20, 26], [-50, 24], [-15, 53], [3, 36], [-35, 25], [-5, 48], [-34, 43], [0, 30]], [[1374, 8295], [15, 29], [0, 37], [-48, 37], [-28, 68], [-17, 42], [-26, 27], [-19, 24], [-14, 31], [-28, -20], [-27, -33], [-25, 39], [-19, 26], [-27, 16], [-28, 2], [0, 337], [1, 219]], [[1084, 9176], [51, -14], [44, -29], [29, -5], [24, 24], [34, 19], [41, -7], [42, 26], [45, 14], [20, -24], [20, 14], [6, 27], [20, -6], [47, -53], [37, 40], [3, -45], [34, 10], [11, 17], [34, -3], [42, -25], [65, -22], [38, -10], [28, 4], [37, -30], [-39, -29], [50, -13], [75, 7], [24, 11], [29, -36], [31, 30], [-29, 25], [18, 20], [34, 3], [22, 6], [23, -14], [28, -32], [31, 5], [49, -27], [43, 9], [40, -1], [-3, 37], [25, 10], [43, -20], [0, -56], [17, 47], [23, -1], [12, 59], [-30, 36], [-32, 24], [2, 65], [33, 43], [37, -9], [28, -26], [38, -67], [-25, -29], [52, -12], [-1, -60], [38, 46], [33, -38], [-9, -44], [27, -40], [29, 43], [21, 51], [1, 65], [40, -5], [41, -8], [37, -30], [2, -29], [-21, -31], [20, -32], [-4, -29], [-54, -41], [-39, -9], [-29, 18], [-8, -30], [-27, -50], [-8, -26], [-32, -40], [-40, -4], [-22, -25], [-2, -38], [-32, -7], [-34, -48], [-30, -67], [-11, -46], [-1, -69], [40, -10], [13, -55], [13, -45], [39, 12], [51, -26], [28, -22], [20, -28], [35, -17], [29, -24], [46, -4], [30, -6], [-4, -51], [8, -59], [21, -66], [41, -56], [21, 19], [15, 61], [-14, 93], [-20, 31], [45, 28], [31, 41], [16, 41], [-3, 40], [-19, 50], [-33, 44], [32, 62], [-12, 54], [-9, 92], [19, 14], [48, -16], [29, -6], [23, 15], [25, -20], [35, -34], [8, -23], [50, -4], [-1, -50], [9, -74], [25, -10], [21, -35], [40, 33], [26, 65], [19, 28], [21, -53], [36, -75], [31, -71], [-11, -37], [37, -33], [25, -34], [44, -15], [18, -19], [11, -50], [22, -8], [11, -22], [2, -67], [-20, -22], [-20, -21], [-46, -21], [-35, -48], [-47, -10], [-59, 13], [-42, 0], [-29, -4], [-23, -43], [-35, -26], [-40, -78], [-32, -54], [23, 9], [45, 78], [58, 49], [42, 6], [24, -29], [-26, -40], [9, -63], [9, -45], [36, -29], [46, 8], [28, 67], [2, -43], [17, -22], [-34, -38], [-61, -36], [-28, -23], [-31, -43], [-21, 4], [-1, 50], [48, 49], [-44, -2], [-31, -7]], [[1829, 9377], [-14, -27], [61, 17], [39, -29], [31, 30], [26, -20], [23, -58], [14, 25], [-20, 60], [24, 9], [28, -9], [31, -24], [17, -58], [9, -41], [47, -30], [50, -28], [-3, -26], [-46, -4], [18, -23], [-9, -22], [-51, 9], [-48, 16], [-32, -3], [-52, -20], [-70, -9], [-50, -6], [-15, 28], [-38, 16], [-24, -6], [-35, 47], [19, 6], [43, 10], [39, -3], [36, 11], [-54, 13], [-59, -4], [-39, 1], [-15, 22], [64, 23], [-42, -1], [-49, 16], [23, 44], [20, 24], [74, 36], [29, -12]], [[2097, 9395], [-24, -39], [-44, 41], [10, 9], [37, 2], [21, -13]], [[2879, 9376], [3, -16], [-30, 2], [-30, 1], [-30, -8], [-8, 3], [-31, 32], [1, 21], [14, 4], [63, -6], [48, -33]], [[2595, 9379], [22, -36], [26, 47], [70, 24], [48, -61], [-4, -38], [55, 17], [26, 23], [62, -30], [38, -28], [3, -25], [52, 13], [29, -38], [67, -23], [24, -24], [26, -55], [-51, -28], [66, -38], [44, -13], [40, -55], [44, -3], [-9, -42], [-49, -69], [-34, 26], [-44, 57], [-36, -8], [-3, -34], [29, -34], [38, -27], [11, -16], [18, -58], [-9, -43], [-35, 16], [-70, 47], [39, -51], [29, -35], [5, -21], [-76, 24], [-59, 34], [-34, 29], [10, 17], [-42, 30], [-40, 29], [0, -18], [-80, -9], [-23, 20], [18, 44], [52, 1], [57, 7], [-9, 21], [10, 30], [36, 57], [-8, 27], [-11, 20], [-42, 29], [-57, 20], [18, 15], [-29, 36], [-25, 4], [-22, 20], [-14, -18], [-51, -7], [-101, 13], [-59, 17], [-45, 9], [-23, 21], [29, 27], [-39, 0], [-9, 60], [21, 53], [29, 24], [72, 16], [-21, -39]], [[2212, 9420], [33, -12], [50, 7], [7, -17], [-26, -28], [42, -26], [-5, -53], [-45, -23], [-27, 5], [-19, 23], [-69, 45], [0, 19], [57, -7], [-31, 38], [33, 29]], [[2411, 9357], [-30, -45], [-32, 3], [-17, 52], [1, 29], [14, 25], [28, 16], [58, -2], [53, -14], [-42, -53], [-33, -11]], [[1654, 9275], [-73, -29], [-15, 26], [-64, 31], [12, 25], [19, 43], [24, 39], [-27, 36], [94, 10], [39, -13], [71, -3], [27, -17], [30, -25], [-35, -15], [-68, -41], [-34, -42], [0, -25]], [[2399, 9487], [-15, -23], [-40, 5], [-34, 15], [15, 27], [40, 16], [24, -21], [10, -19]], [[2264, 9590], [21, -27], [1, -31], [-13, -44], [-46, -6], [-30, 10], [1, 34], [-45, -4], [-2, 45], [30, -2], [41, 21], [40, -4], [2, 8]], [[1994, 9559], [11, -21], [25, 10], [29, -2], [5, -29], [-17, -28], [-94, -10], [-70, -25], [-43, -2], [-3, 20], [57, 26], [-125, -7], [-39, 10], [38, 58], [26, 17], [78, -20], [50, -35], [48, -5], [-40, 57], [26, 21], [29, -7], [9, -28]], [[2370, 9612], [30, -19], [55, 0], [24, -19], [-6, -22], [32, -14], [17, -14], [38, -2], [40, -5], [44, 13], [57, 5], [45, -5], [30, -22], [6, -24], [-17, -16], [-42, -13], [-35, 8], [-80, -10], [-57, -1], [-45, 8], [-74, 19], [-9, 32], [-4, 29], [-27, 26], [-58, 7], [-32, 19], [10, 24], [58, -4]], [[1772, 9645], [-4, -46], [-21, -20], [-26, -3], [-52, -26], [-44, -9], [-38, 13], [47, 44], [57, 39], [43, -1], [38, 9]], [[2393, 9637], [-13, -2], [-52, 4], [-7, 17], [56, -1], [19, -11], [-3, -7]], [[1939, 9648], [-52, -17], [-41, 19], [23, 19], [40, 6], [39, -10], [-9, -17]], [[1954, 9701], [-34, -11], [-46, 0], [0, 8], [29, 18], [14, -3], [37, -12]], [[2338, 9669], [-41, -12], [-23, 13], [-12, 23], [-2, 24], [36, -2], [16, -4], [33, -21], [-7, -21]], [[2220, 9685], [11, -25], [-45, 7], [-46, 19], [-62, 2], [27, 18], [-34, 14], [-2, 22], [55, -8], [75, -21], [21, -28]], [[2583, 9764], [33, -20], [-38, -17], [-51, -45], [-50, -4], [-57, 8], [-30, 24], [0, 21], [22, 16], [-50, 0], [-31, 19], [-18, 27], [20, 26], [19, 18], [28, 4], [-12, 14], [65, 3], [35, -32], [47, -12], [46, -11], [22, -39]], [[3097, 9967], [74, -4], [60, -8], [51, -16], [-2, -16], [-67, -25], [-68, -12], [-25, -14], [61, 1], [-66, -36], [-45, -17], [-48, -48], [-57, -10], [-18, -12], [-84, -6], [39, -8], [-20, -10], [23, -29], [-26, -21], [-43, -16], [-13, -24], [-39, -17], [4, -14], [48, 3], [0, -15], [-74, -35], [-73, 16], [-81, -9], [-42, 7], [-52, 3], [-4, 29], [52, 13], [-14, 43], [17, 4], [74, -26], [-38, 38], [-45, 11], [23, 23], [49, 14], [8, 21], [-39, 23], [-12, 31], [76, -3], [22, -6], [43, 21], [-62, 7], [-98, -4], [-49, 20], [-23, 24], [-32, 17], [-6, 21], [41, 11], [32, 2], [55, 9], [41, 22], [34, -3], [30, -16], [21, 32], [37, 9], [50, 7], [85, 2], [14, -6], [81, 10], [60, -4], [60, -4]], [[5290, 7828], [-3, -24], [-12, -10], [-20, 7], [-6, -24], [-14, -2], [-5, 10], [-15, -20], [-13, -3], [-12, 13]], [[5190, 7775], [-10, 25], [-13, -9], [0, 27], [21, 33], [-1, 15], [12, -5], [8, 10]], [[5207, 7871], [24, -1], [5, 13], [30, -18]], [[3140, 1814], [-10, -24], [-23, -18], [-14, 2], [-16, 5], [-21, 18], [-29, 8], [-35, 33], [-28, 32], [-38, 66], [23, -12], [39, -40], [36, -21], [15, 27], [9, 41], [25, 24], [20, -7]], [[3095, 1968], [-25, 0], [-13, -14], [-25, -22], [-5, -55], [-11, -1], [-32, 19], [-32, 41], [-34, 34], [-9, 37], [8, 35], [-14, 39], [-4, 101], [12, 57], [30, 45], [-43, 18], [27, 52], [9, 98], [31, -21], [15, 123], [-19, 15], [-9, -73], [-17, 8], [9, 84], [9, 110], [13, 40], [-8, 58], [-2, 66], [11, 2], [17, 96], [20, 94], [11, 88], [-6, 89], [8, 49], [-3, 72], [16, 73], [5, 114], [9, 123], [9, 132], [-2, 96], [-6, 84]], [[3045, 3974], [14, 15], [8, 30]], [[8064, 6161], [-24, -28], [-23, 18], [0, 51], [13, 26], [31, 17], [16, -1], [6, -23], [-12, -26], [-7, -34]], [[8628, 7562], [-18, 35], [-11, -33], [-43, -26], [4, -31], [-24, 2], [-13, 19], [-19, -42], [-30, -32], [-23, -38]], [[8451, 7416], [-39, -17], [-20, -27], [-30, -17], [15, 28], [-6, 23], [22, 40], [-15, 30], [-24, -20], [-32, -41], [-17, -39], [-27, -2], [-14, -28], [15, -40], [22, -10], [1, -26], [22, -17], [31, 42], [25, -23], [18, -2], [4, -31], [-39, -16], [-13, -32], [-27, -30], [-14, -41], [30, -33], [11, -58], [17, -54], [18, -45], [0, -44], [-17, -16], [6, -32], [17, -18], [-5, -48], [-7, -47], [-15, -5], [-21, -64], [-22, -78], [-26, -70], [-38, -55], [-39, -50], [-31, -6], [-17, -27], [-10, 20], [-15, -30], [-39, -29], [-29, -9], [-10, -63], [-15, -3], [-8, 43], [7, 22], [-37, 19], [-13, -9]], [[8001, 6331], [-28, 15], [-14, 24], [5, 34], [-26, 11], [-13, 22], [-24, -31], [-27, -7], [-22, 0], [-15, -14]], [[7837, 6385], [-14, -9], [4, -68], [-15, 2], [-2, 14]], [[7810, 6324], [-1, 24], [-20, -17], [-12, 11], [-21, 22], [8, 49], [-18, 12], [-6, 54], [-30, -10], [4, 70], [26, 50], [1, 48], [-1, 46], [-12, 14], [-9, 35], [-16, -5]], [[7703, 6727], [-30, 9], [9, 25], [-13, 36], [-20, -24], [-23, 14], [-32, -37], [-25, -44], [-23, -8]], [[7466, 6670], [-2, 47], [-17, -13]], [[7447, 6704], [-32, 6], [-32, 14], [-22, 26], [-22, 11], [-9, 29], [-16, 8], [-28, 39], [-22, 18], [-12, -14]], [[7252, 6841], [-38, 41], [-28, 37], [-7, 65], [20, -7], [1, 30], [-12, 30], [3, 48], [-30, 69]], [[7161, 7154], [-45, 24], [-8, 46], [-21, 27]], [[7082, 7268], [-4, 34], [1, 23], [-17, 13], [-9, -6], [-7, 55]], [[7046, 7387], [8, 13], [-4, 14], [26, 28], [20, 12], [29, -8], [11, 38], [35, 7], [10, 23], [44, 32], [4, 13]], [[7229, 7559], [-2, 34], [19, 15], [-25, 103], [55, 24], [14, 13], [20, 106], [55, -20], [15, 27], [2, 59], [23, 6], [21, 39]], [[7426, 7965], [11, 5]], [[7437, 7970], [7, -41], [23, -32], [40, -22], [19, -47], [-10, -70], [10, -25], [33, -10], [37, -8], [33, -37], [18, -7], [12, -54], [17, -35], [30, 1], [58, -13], [36, 8], [28, -9], [41, -36], [34, 0], [12, -18], [32, 32], [45, 20], [42, 2], [32, 21], [20, 32], [20, 20], [-5, 19], [-9, 23], [15, 38], [15, -5], [29, -12], [28, 31], [42, 23], [20, 39], [20, 17], [40, 8], [22, -7], [3, 21], [-25, 41], [-22, 19], [-22, -22], [-27, 10], [-16, -8], [-7, 24], [20, 59], [13, 45]], [[8240, 8005], [34, -23], [39, 38], [-1, 26], [26, 62], [15, 19], [0, 33], [-16, 14], [23, 29], [35, 11], [37, 2], [41, -18], [25, -22], [17, -59], [10, -26], [10, -36], [10, -58], [49, -19], [32, -42], [12, -55], [42, 0], [24, 23], [46, 17], [-15, -53], [-11, -21], [-9, -65], [-19, -58], [-33, 11], [-24, -21], [7, -51], [-4, -69], [-14, -2], [0, -30]], [[4920, 5353], [-12, -1], [-20, 12], [-18, -1], [-33, -10], [-19, -18], [-27, -21], [-6, 1]], [[4785, 5315], [2, 49], [3, 7], [-1, 24], [-12, 24], [-8, 4], [-8, 17], [6, 26], [-3, 28], [1, 18]], [[4765, 5512], [5, 0], [1, 25], [-2, 12], [3, 8], [10, 7], [-7, 47], [-6, 25], [2, 20], [5, 4]], [[4776, 5660], [4, 6], [8, -9], [21, -1], [5, 18], [5, -1], [8, 6], [4, -25], [7, 7], [11, 9]], [[4921, 5627], [7, -84], [-11, -50], [-8, -66], [12, -51], [-1, -23]], [[5363, 5191], [-4, 4], [-16, -8], [-17, 8], [-13, -4]], [[5313, 5191], [-45, 1]], [[5268, 5192], [4, 47], [-11, 39], [-13, 10], [-6, 27], [-7, 8], [1, 16]], [[5236, 5339], [7, 42], [13, 57], [8, 1], [17, 34], [10, 1], [16, -24], [19, 20], [2, 25], [7, 23], [4, 30], [15, 25], [5, 41], [6, 13], [4, 31], [7, 37], [24, 46], [1, 20], [3, 10], [-11, 24]], [[5393, 5795], [1, 19], [8, 3]], [[5402, 5817], [11, -38], [2, -39], [-1, -39], [15, -54], [-15, 1], [-8, -4], [-13, 6], [-6, -28], [16, -35], [13, -10], [3, -24], [9, -41], [-4, -16]], [[5444, 5191], [-2, -31], [-22, 14], [-22, 15], [-35, 2]], [[5856, 5265], [-2, -69], [11, -8], [-9, -21], [-10, -16], [-11, -31], [-6, -27], [-1, -48], [-7, -22], [0, -45]], [[5821, 4978], [-8, -16], [-1, -35], [-4, -5], [-2, -32]], [[5814, 4792], [5, -55], [-2, -30], [5, -35], [16, -33], [15, -74]], [[5853, 4565], [-11, 6], [-37, -10], [-7, -7], [-8, -38], [6, -26], [-5, -70], [-3, -59], [7, -11], [19, -23], [8, 11], [2, -64], [-21, 1], [-11, 32], [-10, 25], [-22, 9], [-6, 31], [-17, -19], [-22, 8], [-10, 27], [-17, 6], [-13, -2], [-2, 19], [-9, 1]], [[5342, 4697], [-4, 18]], [[5360, 4775], [8, -6], [9, 23], [15, -1], [2, -17], [11, -10], [16, 37], [16, 29], [7, 19], [-1, 48], [12, 58], [13, 30], [18, 29], [3, 18], [1, 22], [5, 21], [-2, 33], [4, 52], [5, 37], [8, 32], [2, 36]], [[5760, 5367], [17, -49], [12, -7], [8, 10], [12, -4], [16, 12], [6, -25], [25, -39]], [[5330, 4760], [-22, 62]], [[5308, 4822], [21, 33], [-11, 39], [10, 15], [19, 7], [2, 26], [15, -28], [24, -2], [9, 27], [3, 40], [-3, 46], [-13, 35], [12, 68], [-7, 12], [-21, -5], [-7, 31], [2, 25]], [[2906, 5049], [-12, 14], [-14, 19], [-7, -9], [-24, 8], [-7, 25], [-5, -1], [-28, 34]], [[2809, 5139], [-3, 18], [10, 5], [-1, 29], [6, 22], [14, 4], [12, 37], [10, 31], [-10, 14], [5, 34], [-6, 54], [6, 16], [-4, 50], [-12, 31]], [[2836, 5484], [4, 29], [9, -4], [5, 17], [-6, 35], [3, 9]], [[2851, 5570], [14, -2], [21, 41], [12, 6], [0, 20], [5, 50], [16, 27], [17, 1], [3, 13], [21, -5], [22, 30], [11, 13], [14, 28], [9, -3], [8, -16], [-6, -20]], [[3018, 5753], [-18, -10], [-7, -29], [-10, -17], [-8, -22], [-4, -42], [-8, -35], [15, -4], [3, -27], [6, -13], [3, -24], [-4, -22], [1, -12], [7, -5], [7, -20], [36, 5], [16, -7], [19, -51], [11, 6], [20, -3], [16, 7], [10, -10], [-5, -32], [-6, -20], [-2, -42], [5, -40], [8, -17], [1, -13], [-14, -30], [10, -13], [8, -21], [8, -58]], [[3058, 4804], [-14, 31], [-8, 1], [18, 61], [-21, 27], [-17, -5], [-10, 10], [-15, -15], [-21, 7], [-16, 62], [-13, 15], [-9, 28], [-19, 28], [-7, -5]], [[2695, 5543], [-15, 14], [-6, 12], [4, 10], [-1, 13], [-8, 14], [-11, 12], [-10, 8], [-1, 17], [-8, 10], [2, -17], [-5, -14], [-7, 17], [-9, 5], [-4, 12], [1, 18], [3, 19], [-8, 8], [7, 12]], [[2619, 5713], [4, 7], [18, -15], [7, 7], [9, -5], [4, -12], [8, -4], [7, 13]], [[2676, 5704], [7, -32], [11, -24], [13, -25]], [[2707, 5623], [-11, -6], [0, -23], [6, -9], [-4, -7], [1, -11], [-2, -12], [-2, -12]], [[2715, 6427], [23, -4], [22, 0], [26, -21], [11, -21], [26, 6], [10, -13], [24, -37], [17, -27], [9, 1], [17, -12], [-2, -17], [20, -2], [21, -24], [-3, -14], [-19, -7], [-18, -3], [-19, 4], [-40, -5], [18, 32], [-11, 16], [-18, 4], [-9, 17], [-7, 33], [-16, -2], [-26, 16], [-8, 12], [-36, 10], [-10, 11], [11, 15], [-28, 3], [-20, -31], [-11, -1], [-4, -14], [-14, -7], [-12, 6], [15, 18], [6, 22], [13, 13], [14, 11], [21, 6], [7, 6]], [[5909, 7133], [2, 1], [4, 14], [20, -1], [25, 18], [-19, -25], [2, -11]], [[5943, 7129], [-3, 2], [-5, -5], [-4, 1], [-2, -2], [0, 6], [-2, 4], [-6, 0], [-7, -5], [-5, 3]], [[5943, 7129], [1, -5], [-28, -24], [-14, 8], [-7, 23], [14, 2]], [[5377, 7945], [-16, 25], [-14, 15], [-3, 25], [-5, 17], [21, 13], [10, 15], [20, 11], [7, 11], [7, -6], [13, 6]], [[5417, 8077], [13, -19], [21, -5], [-2, -17], [15, -12], [4, 15], [19, -6], [3, -19], [20, -3], [13, -29]], [[5523, 7982], [-8, 0], [-4, -11], [-7, -3], [-2, -13], [-5, -3], [-1, -5], [-9, -7], [-12, 1], [-4, -13]], [[5275, 8306], [1, -23], [28, -14], [-1, -21], [29, 11], [15, 16], [32, -23], [13, -19]], [[5392, 8233], [6, -30], [-8, -16], [11, -21], [6, -31], [-2, -21], [12, -37]], [[5207, 7871], [3, 42], [14, 40], [-40, 11], [-13, 16]], [[5171, 7980], [2, 26], [-6, 13]], [[5171, 8059], [-5, 62], [17, 0], [7, 22], [6, 54], [-5, 20]], [[5191, 8217], [6, 13], [23, 3], [5, -13], [19, 29], [-6, 22], [-2, 34]], [[5236, 8305], [21, -8], [18, 9]], [[6196, 5808], [7, -19], [-1, -24], [-16, -14], [12, -16]], [[6198, 5735], [-10, -32]], [[6188, 5703], [-7, 11], [-6, -5], [-16, 1], [0, 18], [-2, 17], [9, 27], [10, 26]], [[6176, 5798], [12, -5], [8, 15]], [[5352, 8343], [-17, -48], [-29, 33], [-4, 25], [41, 19], [9, -29]], [[5236, 8305], [-11, 32], [-1, 61], [5, 16], [8, 17], [24, 4], [10, 16], [22, 17], [-1, -30], [-8, -20], [4, -16], [15, -9], [-7, -22], [-8, 6], [-20, -42], [7, -29]], [[3008, 6222], [3, 10], [22, 0], [16, -15], [8, 1], [5, -21], [15, 1], [-1, -17], [12, -2], [14, -22], [-10, -24], [-14, 13], [-12, -3], [-9, 3], [-5, -11], [-11, -3], [-4, 14], [-10, -8], [-11, -41], [-7, 10], [-1, 17]], [[3008, 6124], [0, 16], [-7, 17], [7, 10], [2, 23], [-2, 32]], [[5333, 6444], [-95, -112], [-81, -117], [-39, -26]], [[5118, 6189], [-31, -6], [0, 38], [-13, 10], [-17, 16], [-7, 28], [-94, 129], [-93, 129]], [[4863, 6533], [-105, 143]], [[4758, 6676], [1, 11], [0, 4]], [[4759, 6691], [0, 70], [44, 44], [28, 9], [23, 16], [11, 29], [32, 24], [1, 44], [16, 5], [13, 22], [36, 9], [5, 23], [-7, 13], [-10, 62], [-1, 36], [-11, 38]], [[4939, 7135], [27, 32], [30, 11], [17, 24], [27, 18], [47, 11], [46, 4], [14, -8], [26, 23], [30, 0], [11, -13], [19, 3]], [[5233, 7240], [-5, -30], [4, -56], [-6, -49], [-18, -33], [3, -45], [23, -35], [0, -14], [17, -24], [12, -106]], [[5263, 6848], [9, -52], [1, -28], [-5, -48], [2, -27], [-3, -32], [2, -37], [-11, -25], [17, -43], [1, -25], [10, -33], [13, 11], [22, -28], [12, -37]], [[2769, 4856], [15, 45], [-6, 25], [-11, -27], [-16, 26], [5, 16], [-4, 54], [9, 9], [5, 37], [11, 38], [-2, 24], [15, 13], [19, 23]], [[2906, 5049], [4, -45], [-9, -39], [-30, -62], [-33, -23], [-17, -51], [-6, -40], [-15, -24], [-12, 29], [-11, 7], [-12, -5], [-1, 22], [8, 14], [-3, 24]], [[5969, 6800], [-7, -23], [-6, -45], [-8, -31], [-6, -10], [-10, 19], [-12, 26], [-20, 85], [-3, -5], [12, -63], [17, -59], [21, -92], [10, -32], [9, -34], [25, -65], [-6, -10], [1, -39], [33, -53], [4, -12]], [[6023, 6357], [-110, 0], [-107, 0], [-112, 0]], [[5694, 6357], [0, 218], [0, 210], [-8, 47], [7, 37], [-5, 25], [10, 29]], [[5698, 6923], [37, 0], [27, -15], [28, -18], [13, -9], [21, 19], [11, 17], [25, 5], [20, -8], [7, -29], [7, 19], [22, -14], [22, -3], [13, 15]], [[5951, 6902], [18, -102]], [[6176, 5798], [-10, 20], [-11, 34], [-12, 19], [-8, 21], [-24, 23], [-19, 1], [-7, 12], [-16, -14], [-17, 27], [-8, -44], [-33, 13]], [[6011, 5910], [-3, 23], [12, 87], [3, 39], [9, 18], [20, 10], [14, 34]], [[6066, 6121], [16, -69], [8, -54], [15, -29], [38, -55], [16, -34], [15, -34], [8, -20], [14, -18]], [[4749, 7532], [1, 42], [-11, 25], [39, 43], [34, -11], [37, 1], [30, -10], [23, 3], [45, -2]], [[4947, 7623], [11, -23], [51, -27], [10, 13], [31, -27], [32, 8]], [[5082, 7567], [2, -35], [-26, -39], [-36, -12], [-2, -20], [-18, -33], [-10, -48], [11, -34], [-16, -26], [-6, -39], [-21, -11], [-20, -46], [-35, -1], [-27, 1], [-17, -21], [-11, -22], [-13, 5], [-11, 20], [-8, 34], [-26, 9]], [[4792, 7249], [-2, 20], [10, 22], [4, 16], [-9, 17], [7, 39], [-11, 36], [12, 5], [1, 27], [5, 9], [0, 46], [13, 16], [-8, 30], [-16, 2], [-5, -8], [-16, 0], [-7, 29], [-11, -8], [-10, -15]], [[5675, 8472], [3, 35], [-10, -8], [-18, 21], [-2, 34], [35, 17], [35, 8], [30, -10], [29, 2]], [[5777, 8571], [4, -10], [-20, -34], [8, -55], [-12, -19]], [[5757, 8453], [-22, 0], [-24, 22], [-13, 7], [-23, -10]], [[6188, 5703], [-6, -21], [10, -32], [10, -29], [11, -21], [90, -70], [24, 0]], [[6327, 5530], [-79, -177], [-36, -3], [-25, -41], [-17, -1], [-8, -19]], [[6162, 5289], [-19, 0], [-11, 20], [-26, -25], [-8, -24], [-18, 4], [-6, 7], [-7, -1], [-9, 0], [-35, 50], [-19, 0], [-10, 20], [0, 33], [-14, 10]], [[5980, 5383], [-17, 64], [-12, 14], [-5, 23], [-14, 29], [-17, 4], [9, 34], [15, 2], [4, 18]], [[5943, 5571], [0, 53]], [[5943, 5624], [8, 62], [13, 16], [3, 24], [12, 45], [17, 30], [11, 58], [4, 51]], [[5794, 9138], [-4, -42], [42, -39], [-26, -45], [33, -67], [-19, -51], [25, -43], [-11, -39], [41, -40], [-11, -31], [-25, -34], [-60, -75]], [[5779, 8632], [-50, -5], [-49, -21], [-45, -13], [-16, 32], [-27, 20], [6, 58], [-14, 53], [14, 35], [25, 37], [63, 64], [19, 12], [-3, 25], [-39, 28]], [[5663, 8957], [-9, 23], [-1, 91], [-43, 40], [-37, 29]], [[5573, 9140], [17, 16], [30, -32], [37, 3], [30, -14], [26, 26], [14, 44], [43, 20], [35, -24], [-11, -41]], [[9954, 4033], [9, -17], [-4, -31], [-17, -8], [-16, 7], [-2, 26], [10, 21], [13, -8], [7, 10]], [[0, 4079], [9981, -14], [-17, -13], [-4, 23], [14, 12], [9, 3], [-9983, 18]], [[0, 4108], [0, -29]], [[0, 4108], [6, 3], [-4, -28], [-2, -4]], [[3300, 1994], [33, 36], [24, -15], [16, 24], [22, -27], [-8, -21], [-37, -17], [-13, 20], [-23, -26], [-14, 26]], [[5265, 7548], [-9, -46], [-13, 12], [-6, 40], [5, 22], [18, 22], [5, -50]], [[5157, 7984], [6, -6], [8, 2]], [[5190, 7775], [-2, -17], [9, -22], [-10, -18], [7, -46], [15, -8], [-3, -25]], [[5206, 7639], [-25, -34], [-55, 16], [-40, -19], [-4, -35]], [[4947, 7623], [14, 35], [5, 118], [-28, 62], [-21, 30], [-42, 23], [-3, 43], [36, 12], [47, -15], [-9, 67], [26, -25], [65, 46], [8, 48], [24, 12]], [[3485, 5194], [7, 25], [3, 27]], [[3495, 5246], [4, 26], [-10, 34]], [[3489, 5306], [-3, 41], [15, 51]], [[3501, 5398], [9, -7], [21, -14], [29, -50], [5, -24]], [[5308, 4822], [-29, 60], [-18, 49], [-17, 61], [1, 19], [6, 19], [7, 43], [5, 44]], [[5263, 5117], [10, 4], [40, -1], [0, 71]], [[4827, 8240], [-21, 12], [-17, -1], [6, 32], [-6, 32]], [[4789, 8315], [23, 2], [30, -37], [-15, -40]], [[4916, 8521], [-30, -63], [29, 8], [30, -1], [-7, -48], [-25, -53], [29, -4], [2, -6], [25, -69], [19, -10], [17, -67], [8, -24], [33, -11], [-3, -38], [-14, -17], [11, -30], [-25, -31], [-37, 0], [-48, -16], [-13, 12], [-18, -28], [-26, 7], [-19, -23], [-15, 12], [41, 62], [25, 13], [-1, 0], [-43, 9], [-8, 24], [29, 18], [-15, 32], [5, 39], [42, -6], [4, 35], [-19, 36], [0, 1], [-34, 10], [-7, 16], [10, 27], [-9, 16], [-15, -28], [-1, 57], [-14, 30], [10, 61], [21, 48], [23, -4], [33, 4]], [[6154, 7511], [4, 26], [-7, 40], [-16, 22], [-16, 6], [-10, 19]], [[6109, 7624], [4, 6], [23, -10], [41, -9], [38, -28], [5, -11], [17, 9], [25, -13], [9, -24], [17, -13]], [[6210, 7485], [-27, 29], [-29, -3]], [[5029, 5408], [-44, -35], [-15, -20], [-25, -17], [-25, 17]], [[5000, 5708], [-2, -18], [12, -30], [0, -43], [2, -47], [7, -21], [-6, -54], [2, -29], [8, -37], [6, -21]], [[4765, 5512], [-8, 1], [-5, -24], [-8, 1], [-6, 12], [2, 24], [-11, 36], [-8, -7], [-6, -1]], [[4715, 5554], [-7, -3], [0, 21], [-4, 16], [0, 17], [-6, 25], [-7, 21], [-23, 0], [-6, -11], [-8, -1], [-4, -13], [-4, -17], [-14, -26]], [[4632, 5583], [-13, 35], [-10, 24], [-8, 7], [-6, 12], [-4, 26], [-4, 13], [-8, 10]], [[4579, 5710], [13, 29], [8, -2], [7, 10], [6, 0], [5, 8], [-3, 20], [3, 6], [1, 20]], [[4619, 5801], [13, -1], [20, -14], [6, 1], [3, 7], [15, -5], [4, 4]], [[4680, 5793], [1, -22], [5, 0], [7, 8], [5, -2], [7, -15], [12, -5], [8, 13], [9, 8], [6, 8], [6, -1], [6, -13], [3, -17], [12, -24], [-6, -16], [-1, -19], [6, 6], [3, -7], [-1, -17], [8, -18]], [[4532, 5834], [3, 27]], [[4535, 5861], [31, 1], [6, 14], [9, 1], [11, -14], [8, -1], [9, 10], [6, -17], [-12, -13], [-12, 1], [-12, 13], [-10, -14], [-5, -1], [-7, -8], [-25, 1]], [[4579, 5710], [-15, 24], [-11, 4], [-7, 17], [1, 9], [-9, 13], [-2, 12]], [[4536, 5789], [15, 10], [9, -2], [8, 7], [51, -3]], [[5263, 5117], [-5, 9], [10, 66]], [[5658, 7167], [15, -20], [22, 3], [20, -4], [0, -10], [15, 7], [-4, -18], [-40, -5], [1, 10], [-34, 12], [5, 25]], [[5723, 7469], [-17, 2], [-14, 6], [-34, -16], [19, -33], [-14, -10], [-15, 0], [-15, 31], [-5, -13], [6, -36], [14, -27], [-10, -13], [15, -27], [14, -18], [0, -33], [-25, 16], [8, -30], [-18, -7], [11, -52], [-19, -1], [-23, 26], [-10, 47], [-5, 40], [-11, 27], [-14, 34], [-2, 16]], [[5583, 7470], [18, 6], [11, 13], [15, -2], [5, 11], [5, 2]], [[5725, 7529], [13, -16], [-8, -37], [-7, -7]], [[3701, 9939], [93, 35], [97, -2], [36, 21], [98, 6], [222, -7], [174, -47], [-52, -23], [-106, -3], [-150, -5], [14, -11], [99, 7], [83, -21], [54, 18], [23, -21], [-30, -34], [71, 22], [135, 23], [83, -12], [15, -25], [-113, -42], [-16, -14], [-88, -10], [64, -3], [-32, -43], [-23, -38], [1, -66], [33, -38], [-43, -3], [-46, -19], [52, -31], [6, -50], [-30, -6], [36, -50], [-61, -5], [32, -24], [-9, -20], [-39, -10], [-39, 0], [35, -40], [0, -26], [-55, 24], [-14, -15], [37, -15], [37, -36], [10, -48], [-49, -11], [-22, 22], [-34, 34], [10, -40], [-33, -31], [73, -2], [39, -3], [-75, -52], [-75, -46], [-81, -21], [-31, 0], [-29, -23], [-38, -62], [-60, -42], [-19, -2], [-37, -15], [-40, -13], [-24, -37], [0, -41], [-15, -39], [-45, -47], [11, -47], [-12, -48], [-14, -58], [-39, -4], [-41, 49], [-56, 0], [-27, 32], [-18, 58], [-49, 73], [-14, 39], [-3, 53], [-39, 54], [10, 44], [-18, 21], [27, 69], [42, 22], [11, 25], [6, 46], [-32, -21], [-15, -9], [-25, -8], [-34, 19], [-2, 40], [11, 31], [25, 1], [57, -15], [-48, 37], [-24, 20], [-28, -8], [-23, 15], [31, 55], [-17, 22], [-22, 41], [-34, 62], [-35, 23], [0, 25], [-74, 34], [-59, 5], [-74, -3], [-68, -4], [-32, 19], [-49, 37], [73, 19], [56, 3], [-119, 15], [-62, 24], [3, 23], [106, 28], [101, 29], [11, 21], [-75, 22], [24, 23], [97, 41], [40, 7], [-12, 26], [66, 16], [86, 9], [85, 1], [30, -19], [74, 33], [66, -22], [39, -5], [58, -19], [-66, 32], [4, 25]], [[2497, 5869], [-14, 10], [-17, 1], [-13, 12], [-15, 24]], [[2438, 5916], [1, 18], [3, 13], [-4, 12], [13, 48], [36, 0], [1, 20], [-5, 4], [-3, 12], [-10, 14], [-11, 20], [13, 0], [0, 33], [26, 0], [26, 0]], [[2529, 5996], [10, -11], [2, 9], [8, -7]], [[2549, 5987], [-13, -23], [-13, -16], [-2, -12], [2, -11], [-5, -15]], [[2518, 5910], [-7, -4], [2, -7], [-6, -6], [-9, -15], [-1, -9]], [[3340, 5552], [18, -22], [17, -38], [1, -31], [10, -1], [15, -29], [11, -21]], [[3412, 5410], [-4, -53], [-17, -15], [1, -14], [-5, -31], [13, -42], [9, -1], [3, -33], [17, -51]], [[3313, 5365], [-19, 45], [7, 16], [0, 27], [17, 10], [7, 11], [-10, 22], [3, 21], [22, 35]], [[2574, 5825], [-5, 18], [-8, 5]], [[2561, 5848], [2, 24], [-4, 6], [-6, 4], [-12, -7], [-1, 8], [-8, 10], [-6, 12], [-8, 5]], [[2549, 5987], [3, -3], [6, 11], [8, 1], [3, -5], [4, 3], [13, -6], [13, 2], [9, 6], [3, 7], [9, -3], [6, -4], [8, 1], [5, 5], [13, -8], [4, -1], [9, -11], [8, -13], [10, -9], [7, -17]], [[2690, 5943], [-9, 2], [-4, -8], [-10, -8], [-7, 0], [-6, -8], [-6, 3], [-4, 9], [-3, -2], [-4, -14], [-3, 1], [0, -12], [-10, -17], [-5, -7], [-3, -7], [-8, 12], [-6, -16], [-6, 1], [-6, -2], [0, -29], [-4, 0], [-3, -14], [-9, -2]], [[5522, 7770], [7, -23], [9, -17], [-11, -22]], [[5515, 7577], [-3, -10]], [[5512, 7567], [-26, 22], [-16, 21], [-26, 18], [-23, 43], [6, 5], [-13, 25], [-1, 19], [-17, 10], [-9, -26], [-8, 20], [0, 21], [1, 1]], [[5380, 7746], [20, -2], [5, 9], [9, -9], [11, -1], [0, 16], [10, 6], [2, 24], [23, 16]], [[5460, 7805], [8, -7], [21, -26], [23, -11], [10, 9]], [[3008, 6124], [-19, 10], [-13, -5], [-17, 5], [-13, -11], [-15, 18], [3, 19], [25, -8], [21, -5], [10, 13], [-12, 26], [0, 23], [-18, 9], [7, 16], [17, -3], [24, -9]], [[5471, 7900], [14, -15], [10, -6], [24, 7], [2, 12], [11, 2], [14, 9], [3, -4], [13, 8], [6, 13], [9, 4], [30, -18], [6, 6]], [[5613, 7918], [15, -16], [2, -16]], [[5630, 7886], [-17, -12], [-13, -40], [-17, -40], [-22, -11]], [[5561, 7783], [-17, 2], [-22, -15]], [[5460, 7805], [-6, 20], [-4, 0]], [[8352, 4453], [-11, -2], [-37, 42], [26, 11], [14, -18], [10, -17], [-2, -16]], [[8471, 4532], [2, -11], [1, -18]], [[8474, 4503], [-18, -45], [-24, -13], [-3, 8], [2, 20], [12, 36], [28, 23]], [[8274, 4579], [10, -16], [17, 5], [7, -25], [-32, -12], [-19, -8], [-15, 1], [10, 34], [15, 0], [7, 21]], [[8413, 4579], [-4, -32], [-42, -17], [-37, 7], [0, 22], [22, 12], [18, -18], [18, 5], [25, 21]], [[8017, 4657], [53, -6], [6, 25], [51, -29], [10, -38], [42, -11], [34, -35], [-31, -23], [-31, 24], [-25, -1], [-29, 4], [-26, 11], [-32, 22], [-21, 6], [-11, -7], [-51, 24], [-5, 25], [-25, 5], [19, 56], [34, -3], [22, -23], [12, -5], [4, -21]], [[8741, 4690], [-14, -40], [-3, 45], [5, 21], [6, 20], [7, -17], [-1, -29]], [[8534, 4853], [-11, -19], [-19, 10], [-5, 26], [28, 3], [7, -20]], [[8623, 4875], [10, -45], [-23, 24], [-23, 5], [-16, -4], [-19, 2], [6, 33], [35, 2], [30, -17]], [[8916, 4904], [0, -193], [1, -192]], [[8917, 4519], [-25, 48], [-28, 12], [-7, -17], [-35, -1], [12, 48], [17, 16], [-7, 64], [-14, 50], [-53, 50], [-23, 5], [-42, 54], [-8, -28], [-11, -5], [-6, 21], [0, 26], [-21, 29], [29, 21], [20, -1], [-2, 16], [-41, 0], [-11, 35], [-25, 11], [-11, 29], [37, 14], [14, 20], [45, -25], [4, -22], [8, -95], [29, -35], [23, 62], [32, 36], [25, 0], [23, -21], [21, -21], [30, -11]], [[8478, 5141], [-22, -58], [-21, -12], [-27, 12], [-46, -3], [-24, -8], [-4, -45], [24, -53], [15, 27], [52, 20], [-2, -27], [-12, 9], [-12, -35], [-25, -23], [27, -76], [-5, -20], [25, -68], [-1, -39], [-14, -17], [-11, 20], [13, 49], [-27, -23], [-7, 16], [3, 23], [-20, 35], [3, 57], [-19, -18], [2, -69], [1, -84], [-17, -9], [-12, 18], [8, 54], [-4, 57], [-12, 1], [-9, 40], [12, 39], [4, 47], [14, 89], [5, 24], [24, 44], [22, -18], [35, -8], [32, 3], [27, 43], [5, -14]], [[8574, 5124], [-2, -51], [-14, 6], [-4, -36], [11, -32], [-8, -7], [-11, 38], [-8, 75], [6, 47], [9, 22], [2, -32], [16, -5], [3, -25]], [[8045, 5176], [5, -39], [19, -34], [18, 12], [18, -4], [16, 30], [13, 5], [26, -17], [23, 13], [14, 82], [11, 21], [10, 67], [32, 0], [24, -10]], [[8274, 5302], [-16, -53], [20, -56], [-5, -28], [32, -54], [-33, -7], [-10, -40], [2, -54], [-27, -40], [-1, -59], [-10, -91], [-5, 21], [-31, -26], [-11, 36], [-20, 3], [-14, 19], [-33, -21], [-10, 29], [-18, -4], [-23, 7], [-4, 79], [-14, 17], [-13, 50], [-4, 52], [3, 55], [16, 39]], [[7939, 4712], [-31, -1], [-24, 49], [-35, 48], [-12, 36], [-21, 48], [-14, 44], [-21, 83], [-24, 49], [-9, 51], [-10, 46], [-25, 37], [-14, 51], [-21, 33], [-29, 65], [-3, 30], [18, -2], [43, -12], [25, -57], [21, -40], [16, -25], [26, -63], [28, -1], [23, -41], [16, -49], [22, -27], [-12, -49], [16, -20], [10, -2], [5, -41], [10, -33], [20, -5], [14, -37], [-7, -74], [-1, -91]], [[7252, 6841], [-17, -27], [-11, -55], [27, -23], [26, -29], [36, -33], [38, -8], [16, -30], [22, -5], [33, -14], [23, 1], [4, 23], [-4, 38], [2, 25]], [[7703, 6727], [2, -22], [-10, -11], [2, -36], [-19, 10], [-36, -41], [0, -33], [-15, -50], [-1, -29], [-13, -48], [-21, 13], [-1, -61], [-7, -20], [3, -25], [-14, -14]], [[7472, 6360], [-4, -21], [-19, 1], [-34, -13], [2, -44], [-15, -35], [-40, -40], [-31, -69], [-21, -38], [-28, -38], [0, -27], [-13, -15], [-26, -21], [-12, -3], [-9, -45], [6, -77], [1, -49], [-11, -56], [0, -101], [-15, -2], [-12, -46], [8, -19], [-25, -17], [-10, -40], [-11, -17], [-26, 55], [-13, 83], [-11, 60], [-9, 28], [-15, 56], [-7, 74], [-5, 37], [-25, 81], [-12, 115], [-8, 75], [0, 72], [-5, 55], [-41, -35], [-19, 7], [-36, 71], [13, 22], [-8, 23], [-33, 50]], [[6893, 6457], [19, 40], [61, -1], [-6, 51], [-15, 30], [-4, 46], [-18, 26], [31, 62], [32, -4], [29, 61], [18, 60], [27, 60], [-1, 42], [24, 34], [-23, 29], [-9, 40], [-10, 52], [14, 25], [42, -14], [31, 9], [26, 49]], [[4827, 8240], [5, -42], [-21, -53], [-49, -35], [-40, 9], [23, 62], [-15, 60], [38, 46], [21, 28]], [[6497, 7255], [25, 12], [19, 33], [19, -1], [12, 11], [20, -6], [31, -30], [22, -6], [31, -53], [21, -2], [3, -49]], [[6690, 6820], [14, -31], [11, -36], [27, -26], [1, -52], [13, -10], [2, -27], [-40, -30], [-10, -69]], [[6708, 6539], [-53, 18], [-30, 13], [-31, 8], [-12, 73], [-13, 10], [-22, -11], [-28, -28], [-34, 20], [-28, 45], [-27, 17], [-18, 56], [-21, 79], [-15, -10], [-17, 20], [-11, -24]], [[6348, 6825], [-15, 32], [0, 31], [-9, 0], [5, 43], [-15, 45], [-34, 32], [-19, 56], [6, 46], [14, 21], [-2, 34], [-18, 18], [-18, 70]], [[6243, 7253], [-15, 48], [5, 18], [-8, 68], [19, 17]], [[6357, 7321], [9, -43], [26, -13], [20, -29], [39, -10], [44, 15], [2, 14]], [[6348, 6825], [-16, 3]], [[6332, 6828], [-19, 5], [-20, -56]], [[6293, 6777], [-52, 4], [-78, 119], [-41, 41], [-34, 16]], [[6088, 6957], [-11, 72]], [[6077, 7029], [61, 62], [11, 71], [-3, 43], [16, 15], [14, 37]], [[6176, 7257], [12, 9], [32, -8], [10, -15], [13, 10]], [[4597, 8984], [-7, -39], [31, -40], [-36, -45], [-80, -41], [-24, -10], [-36, 8], [-78, 19], [28, 26], [-61, 29], [49, 12], [-1, 17], [-58, 14], [19, 38], [42, 9], [43, -40], [42, 32], [35, -17], [45, 32], [47, -4]], [[5992, 6990], [-5, -19]], [[5987, 6971], [-10, 8], [-6, -39], [7, -7], [-7, -8], [-1, -15], [13, 8]], [[5983, 6918], [0, -23], [-14, -95]], [[5951, 6902], [8, 19], [-2, 4], [8, 27], [5, 45], [4, 15], [1, 0]], [[5975, 7012], [9, 0], [3, 11], [7, 0]], [[5994, 7023], [1, -24], [-4, -9], [1, 0]], [[5431, 7316], [-10, -46], [4, -19], [-6, -30], [-21, 22], [-14, 7], [-39, 30], [4, 30], [32, -6], [28, 7], [22, 5]], [[5255, 7492], [17, -42], [-4, -78], [-13, 4], [-11, -20], [-10, 16], [-2, 71], [-6, 34], [15, -3], [14, 18]], [[5383, 7805], [-3, -29], [7, -25]], [[5387, 7751], [-22, 8], [-23, -20], [1, -30], [-3, -17], [9, -30], [26, -29], [14, -49], [31, -48], [22, 0], [7, -13], [-8, -11], [25, -22], [20, -18], [24, -30], [3, -11], [-5, -22], [-16, 28], [-24, 10], [-12, -39], [20, -21], [-3, -31], [-11, -4], [-15, -50], [-12, -5], [0, 18], [6, 32], [6, 12], [-11, 35], [-8, 29], [-12, 8], [-8, 25], [-18, 11], [-12, 24], [-21, 4], [-21, 26], [-26, 39], [-19, 34], [-8, 58], [-14, 7], [-23, 20], [-12, -8], [-16, -28], [-12, -4]], [[2845, 6150], [19, -5], [14, -15], [5, -16], [-19, -1], [-9, -10], [-15, 10], [-16, 21], [3, 14], [12, 4], [6, -2]], [[5992, 6990], [31, -24], [54, 63]], [[6088, 6957], [-5, -8], [-56, -30], [28, -59], [-9, -10], [-5, -20], [-21, -8], [-7, -21], [-12, -19], [-31, 10]], [[5970, 6792], [-1, 8]], [[5983, 6918], [4, 17], [0, 36]], [[8739, 7075], [4, -20], [-16, -36], [-11, 19], [-15, -14], [-7, -34], [-18, 16], [0, 28], [15, 36], [16, -7], [12, 25], [20, -13]], [[8915, 7252], [-10, -47], [4, -30], [-14, -42], [-35, -27], [-49, -4], [-40, -67], [-19, 22], [-1, 44], [-48, -13], [-33, -27], [-32, -2], [28, -43], [-19, -101], [-18, -24], [-13, 23], [7, 53], [-18, 17], [-11, 41], [26, 18], [15, 37], [28, 30], [20, 41], [55, 17], [30, -12], [29, 105], [19, -28], [40, 59], [16, 23], [18, 72], [-5, 67], [11, 37], [30, 11], [15, -82], [-1, -48], [-25, -59], [0, -61]], [[8997, 7667], [19, -12], [20, 25], [6, -67], [-41, -16], [-25, -59], [-43, 41], [-15, -65], [-31, -1], [-4, 59], [14, 46], [29, 3], [8, 82], [9, 46], [32, -62], [22, -20]], [[6970, 7554], [-15, -10], [-37, -42], [-12, -42], [-11, 0], [-7, 28], [-36, 2], [-5, 48], [-14, 0], [2, 60], [-33, 43], [-48, -5], [-32, -8], [-27, 53], [-22, 22], [-43, 43], [-6, 5], [-71, -35], [1, -218]], [[6554, 7498], [-14, -3], [-20, 46], [-18, 17], [-32, -12], [-12, -20]], [[6458, 7526], [-2, 14], [7, 25], [-5, 21], [-32, 20], [-13, 53], [-15, 15], [-1, 19], [27, -6], [1, 44], [23, 9], [25, -9], [5, 58], [-5, 36], [-28, -2], [-24, 14], [-32, -26], [-26, -12]], [[6363, 7799], [-14, 9], [3, 31], [-18, 39], [-20, -2], [-24, 40], [16, 45], [-8, 12], [22, 65], [29, -34], [3, 43], [58, 64], [43, 2], [61, -41], [33, -24], [30, 25], [44, 1], [35, -30], [8, 17], [39, -2], [7, 28], [-45, 40], [27, 29], [-5, 16], [26, 15], [-20, 41], [13, 20], [104, 21], [13, 14], [70, 22], [25, 24], [50, -12], [9, -61], [29, 14], [35, -20], [-2, -32], [27, 3], [69, 56], [-10, -19], [35, -46], [62, -150], [15, 31], [39, -34], [39, 16], [16, -11], [13, -34], [20, -12], [11, -25], [36, 8], [15, -36]], [[7229, 7559], [-17, 9], [-14, 21], [-42, 6], [-46, 2], [-10, -6], [-39, 24], [-16, -12], [-4, -35], [-46, 21], [-18, -9], [-7, -26]], [[6155, 4958], [-20, -24], [-7, -24], [-10, -4], [-4, -42], [-9, -24], [-5, -39], [-12, -20]], [[6088, 4781], [-40, 59], [-1, 35], [-101, 120], [-5, 6]], [[5941, 5001], [0, 63], [8, 24], [14, 39], [10, 43], [-13, 68], [-3, 30], [-13, 41]], [[5944, 5309], [17, 35], [19, 39]], [[6162, 5289], [-24, -67], [0, -215], [17, -49]], [[7046, 7387], [-53, -9], [-34, 19], [-30, -4], [3, 34], [30, -10], [10, 18]], [[6972, 7435], [21, -6], [36, 43], [-33, 31], [-20, -15], [-21, 22], [24, 39], [-9, 5]], [[7849, 5777], [-7, 72], [18, 49], [36, 11], [26, -8]], [[7922, 5901], [23, -23], [12, 40], [25, -21]], [[7982, 5897], [6, -40], [-3, -71], [-47, -45], [13, -36], [-30, -4], [-24, -24]], [[7897, 5677], [-23, 9], [-11, 30], [-14, 61]], [[8564, 7339], [24, -70], [7, -38], [0, -68], [-10, -33], [-25, -11], [-22, -25], [-25, -5], [-3, 32], [5, 45], [-13, 61], [21, 10], [-19, 51]], [[8504, 7288], [2, 5], [12, -2], [11, 27], [20, 2], [11, 4], [4, 15]], [[5557, 7574], [5, 13]], [[5562, 7587], [7, 4], [4, 20], [5, 3], [4, -8], [5, -4], [3, -10], [5, -2], [5, -11], [4, 0], [-3, -14], [-3, -7], [1, -5]], [[5599, 7553], [-6, -2], [-17, -9], [-1, -12], [-4, 0]], [[6332, 6828], [6, -26], [-3, -13], [9, -45]], [[6344, 6744], [-19, -1], [-7, 28], [-25, 6]], [[7922, 5901], [9, 26], [1, 50], [-22, 52], [-2, 58], [-21, 48], [-21, 4], [-6, -20], [-16, -2], [-8, 10], [-30, -35], [0, 53], [7, 62], [-19, 3], [-2, 36], [-12, 18]], [[7780, 6264], [6, 21], [24, 39]], [[7837, 6385], [17, -47], [12, -54], [34, 0], [11, -52], [-18, -15], [-8, -21], [34, -36], [23, -70], [17, -52], [21, -41], [7, -41], [-5, -59]], [[5975, 7012], [10, 49], [14, 41], [0, 2]], [[5999, 7104], [13, -3], [4, -23], [-15, -22], [-7, -33]], [[4785, 5315], [-7, 0], [-29, 28], [-25, 45], [-24, 32], [-18, 38]], [[4682, 5458], [6, 19], [2, 17], [12, 33], [13, 27]], [[5412, 6408], [-20, -22], [-15, 33], [-44, 25]], [[5263, 6848], [13, 14], [3, 25], [-3, 24], [19, 23], [8, 19], [14, 17], [2, 45]], [[5319, 7015], [32, -20], [12, 5], [23, -10], [37, -26], [13, -53], [25, -11], [39, -25], [30, -29], [13, 15], [13, 27], [-6, 45], [9, 29], [20, 28], [19, 8], [37, -12], [10, -27], [10, 0], [9, -10], [28, -7], [6, -19]], [[5694, 6357], [0, -118], [-32, 0], [0, -25]], [[5662, 6214], [-111, 113], [-111, 113], [-28, -32]], [[7271, 5502], [-4, -62], [-12, -16], [-24, -14], [-13, 47], [-5, 85], [13, 96], [19, -33], [13, -42], [13, -61]], [[5804, 3347], [10, -18], [-9, -29], [-4, -19], [-16, -9], [-5, -19], [-10, -6], [-21, 46], [15, 37], [15, 23], [13, 12], [12, -18]], [[5631, 8267], [-2, 15], [3, 16], [-13, 10], [-29, 10]], [[5590, 8318], [-6, 50]], [[5584, 8368], [32, 18], [47, -4], [27, 6], [4, -12], [15, -4], [26, -29]], [[5652, 8242], [-7, 19], [-14, 6]], [[5584, 8368], [1, 44], [14, 37], [26, 20], [22, -44], [22, 1], [6, 46]], [[5757, 8453], [14, -14], [2, -28], [9, -35]], [[4759, 6691], [-4, 0], [0, -31], [-17, -2], [-9, -14], [-13, 0], [-10, 8], [-23, -6], [-9, -46], [-9, -5], [-13, -74], [-38, -64], [-9, -81], [-12, -27], [-3, -21], [-63, -5]], [[4527, 6323], [1, 27], [11, 17], [9, 30], [-2, 20], [10, 42], [15, 38], [9, 9], [8, 35], [0, 31], [10, 37], [19, 21], [18, 60], [0, 1], [14, 23], [26, 6], [22, 41], [14, 16], [23, 49], [-7, 73], [10, 51], [4, 31], [18, 40], [28, 27], [21, 25], [18, 61], [9, 36], [20, 0], [17, -25], [26, 4], [29, -13], [12, -1]], [[5739, 7906], [6, 9], [19, 6], [20, -19], [12, -2], [12, -16], [-2, -20], [11, -9], [4, -25], [9, -15], [-2, -9], [5, -6], [-7, -4], [-16, 1], [-3, 9], [-6, -5], [2, -11], [-7, -19], [-5, -20], [-7, -6]], [[5784, 7745], [-5, 27], [3, 25], [-1, 26], [-16, 35], [-9, 25], [-9, 17], [-8, 6]], [[6376, 4321], [7, -25], [7, -39], [4, -71], [7, -28], [-2, -28], [-5, -18], [-10, 35], [-5, -18], [5, -43], [-2, -25], [-8, -14], [-1, -50], [-11, -69], [-14, -81], [-17, -112], [-11, -82], [-12, -69], [-23, -14], [-24, -25], [-16, 15], [-22, 21], [-8, 31], [-2, 53], [-10, 47], [-2, 42], [5, 43], [13, 10], [0, 20], [13, 45], [2, 37], [-6, 28], [-5, 38], [-2, 54], [9, 33], [4, 38], [14, 2], [15, 12], [11, 10], [12, 1], [16, 34], [23, 36], [8, 30], [-4, 25], [12, -7], [15, 41], [1, 36], [9, 26], [10, -25]], [[2301, 6586], [-10, -52], [-5, -43], [-2, -79], [-3, -29], [5, -32], [9, -29], [5, -45], [19, -44], [6, -34], [11, -29], [29, -16], [12, -25], [24, 17], [21, 6], [21, 11], [18, 10], [17, 24], [7, 34], [2, 50], [5, 17], [19, 16], [29, 13], [25, -2], [17, 5], [6, -12], [-1, -29], [-15, -35], [-6, -36], [5, -10], [-4, -26], [-7, -46], [-7, 15], [-6, -1]], [[2438, 5916], [-32, 64], [-14, 19], [-23, 16], [-15, -5], [-22, -22], [-14, -6], [-20, 16], [-21, 11], [-26, 27], [-21, 8], [-31, 28], [-23, 28], [-7, 16], [-16, 3], [-28, 19], [-12, 27], [-30, 34], [-14, 37], [-6, 29], [9, 5], [-3, 17], [7, 16], [0, 20], [-10, 27], [-2, 23], [-9, 30], [-25, 59], [-28, 46], [-13, 37], [-24, 24], [-5, 14], [4, 37], [-14, 13], [-17, 29], [-7, 41], [-14, 5], [-17, 31], [-13, 29], [-1, 19], [-15, 44], [-10, 45], [1, 23], [-20, 23], [-10, -2], [-15, 16], [-5, -24], [5, -28], [2, -45], [10, -24], [21, -41], [4, -14], [4, -4], [4, -20], [5, 1], [6, -38], [8, -15], [6, -21], [17, -30], [10, -55], [8, -26], [8, -28], [1, -31], [13, -2], [12, -27], [10, -26], [-1, -11], [-12, -21], [-5, 0], [-7, 36], [-18, 33], [-20, 29], [-14, 15], [1, 43], [-5, 32], [-13, 19], [-19, 26], [-4, -8], [-7, 16], [-17, 14], [-16, 34], [2, 5], [11, -4], [11, 22], [1, 27], [-22, 42], [-16, 17], [-10, 36], [-11, 39], [-12, 47], [-12, 54]], [[1746, 6980], [32, 4], [35, 7], [-2, -12], [41, -29], [64, -41], [55, 0], [22, 0], [0, 24], [48, 0], [10, -20], [15, -19], [16, -26], [9, -31], [7, -32], [15, -18], [23, -18], [17, 47], [23, 1], [19, -24], [14, -40], [10, -35], [16, -34], [6, -41], [8, -28], [22, -18], [20, -13], [10, 2]], [[5599, 7553], [9, 4], [13, 1]], [[4661, 5921], [10, 11], [4, 35], [9, 1], [20, -16], [15, 11], [11, -4], [4, 13], [112, 1], [6, 42], [-5, 7], [-13, 255], [-14, 255], [43, 1]], [[5118, 6189], [0, -136], [-15, -39], [-2, -37], [-25, -9], [-38, -5], [-10, -21], [-18, -3]], [[4680, 5793], [1, 18], [-2, 23], [-11, 16], [-5, 34], [-2, 37]], [[7737, 5644], [-3, 44], [9, 45], [-10, 35], [3, 65], [-12, 30], [-9, 71], [-5, 75], [-12, 49], [-18, -30], [-32, -42], [-15, 5], [-17, 14], [9, 73], [-6, 56], [-21, 68], [3, 21], [-16, 7], [-20, 49]], [[7780, 6264], [-16, -14], [-16, -26], [-20, -2], [-12, -64], [-12, -11], [14, -52], [17, -43], [12, -39], [-11, -51], [-9, -11], [6, -30], [19, -47], [3, -33], [0, -27], [11, -54], [-16, -55], [-13, -61]], [[5538, 7532], [-6, 4], [-8, 19], [-12, 12]], [[5533, 7629], [8, -10], [4, -9], [9, -6], [10, -12], [-2, -5]], [[7437, 7970], [29, 10], [53, 51], [42, 28], [24, -18], [29, -1], [19, -28], [28, -2], [40, -15], [27, 41], [-11, 35], [28, 61], [31, -24], [26, -7], [32, -15], [6, -44], [39, -25], [26, 11], [36, 7], [27, -7], [28, -29], [16, -30], [26, 1], [35, -10], [26, 15], [36, 9], [41, 42], [17, -6], [14, -20], [33, 5]], [[5959, 4377], [21, 5], [34, -17], [7, 8], [19, 1], [10, 18], [17, -1], [30, 23], [22, 34]], [[6119, 4448], [5, -26], [-1, -59], [3, -52], [1, -92], [5, -29], [-8, -43], [-11, -41], [-18, -36], [-25, -23], [-31, -28], [-32, -64], [-10, -11], [-20, -42], [-11, -13], [-3, -42], [14, -45], [5, -35], [0, -17], [5, 3], [-1, -58], [-4, -28], [6, -10], [-4, -25], [-11, -21], [-23, -20], [-34, -32], [-12, -21], [3, -25], [7, -4], [-3, -31]], [[5911, 3478], [-21, 0]], [[5890, 3478], [-2, 26], [-4, 27]], [[5884, 3531], [-3, 21], [5, 66], [-7, 42], [-13, 83]], [[5866, 3743], [29, 67], [7, 43], [5, 5], [3, 35], [-5, 17], [1, 44], [6, 41], [0, 75], [-15, 19], [-13, 4], [-6, 15], [-13, 12], [-23, -1], [-2, 22]], [[5840, 4141], [-2, 42], [84, 49]], [[5922, 4232], [16, -28], [8, 5], [11, -15], [1, -23], [-6, -28], [2, -42], [19, -36], [8, 41], [12, 12], [-2, 76], [-12, 43], [-10, 19], [-10, -1], [-7, 77], [7, 45]], [[4661, 5921], [-18, 41], [-17, 43], [-18, 16], [-13, 17], [-16, -1], [-13, -12], [-14, 5], [-10, -19]], [[4542, 6011], [-2, 32], [8, 29], [3, 55], [-3, 59], [-3, 29], [2, 30], [-7, 28], [-14, 25]], [[4526, 6298], [6, 20], [108, -1], [-5, 86], [7, 30], [26, 5], [-1, 152], [91, -4], [0, 90]], [[5922, 4232], [-15, 15], [9, 55], [9, 21], [-6, 49], [6, 48], [5, 16], [-7, 50], [-14, 26]], [[5909, 4512], [28, -11], [5, -16], [10, -28], [7, -80]], [[7836, 5425], [7, -5], [16, -36], [12, -40], [2, -39], [-3, -27], [2, -21], [2, -35], [10, -16], [11, -52], [-1, -20], [-19, -4], [-27, 44], [-32, 47], [-4, 30], [-16, 39], [-4, 49], [-10, 32], [4, 43], [-7, 25]], [[7779, 5439], [5, 11], [23, -26], [2, -30], [18, 7], [9, 24]], [[8045, 5176], [21, -20], [21, 11], [6, 50], [12, 11], [33, 13], [20, 47], [14, 37]], [[8206, 5379], [22, 41], [14, 47], [11, 0], [14, -30], [1, -26], [19, -16], [23, -18], [-2, -23], [-19, -3], [5, -29], [-20, -20]], [[5453, 3369], [-20, 45], [-11, 43], [-6, 58], [-7, 42], [-9, 91], [-1, 71], [-3, 32], [-11, 25], [-15, 48], [-14, 71], [-6, 37], [-23, 58], [-2, 45]], [[5644, 4022], [23, 14], [18, -4], [11, -13], [0, -5]], [[5552, 3594], [0, -218], [-25, -30], [-15, -4], [-17, 11], [-13, 4], [-4, 25], [-11, 17], [-14, -30]], [[9604, 3812], [23, -36], [14, -28], [-10, -14], [-16, 16], [-19, 27], [-18, 31], [-19, 42], [-4, 20], [12, -1], [16, -20], [12, -20], [9, -17]], [[5412, 6408], [7, -92], [10, -15], [1, -19], [11, -20], [-6, -25], [-11, -120], [-1, -77], [-35, -56], [-12, -78], [11, -22], [0, -38], [18, -1], [-3, -28]], [[5393, 5795], [-5, -1], [-19, 64], [-6, 3], [-22, -33], [-21, 17], [-15, 3], [-8, -8], [-17, 2], [-16, -25], [-14, -2], [-34, 31], [-13, -15], [-14, 1], [-10, 23], [-28, 22], [-30, -7], [-7, -13], [-4, -34], [-8, -24], [-2, -53]], [[5236, 5339], [-29, -21], [-11, 3], [-10, -13], [-23, 1], [-15, 37], [-9, 43], [-19, 39], [-21, -1], [-25, 0]], [[2619, 5713], [-10, 18], [-13, 24], [-6, 20], [-12, 19], [-13, 26], [3, 9], [4, -9], [2, 5]], [[2690, 5943], [-2, -5], [-2, -13], [3, -22], [-6, -20], [-3, -24], [-1, -26], [1, -15], [1, -27], [-4, -6], [-3, -25], [2, -15], [-6, -16], [2, -16], [4, -9]], [[5092, 8091], [14, 16], [24, 87], [38, 25], [23, -2]], [[5863, 9167], [-47, -24], [-22, -5]], [[5573, 9140], [-17, -2], [-4, -39], [-53, 9], [-7, -33], [-27, 1], [-18, -42], [-28, -66], [-43, -83], [10, -20], [-10, -24], [-27, 1], [-18, -55], [2, -79], [17, -29], [-9, -70], [-23, -40], [-12, -34]], [[5306, 8535], [-19, 36], [-55, -69], [-37, -13], [-38, 30], [-10, 63], [-9, 137], [26, 38], [73, 49], [55, 61], [51, 82], [66, 115], [47, 44], [76, 74], [61, 26], [46, -3], [42, 49], [51, -3], [50, 12], [87, -43], [-36, -16], [30, -37]], [[5686, 9657], [-62, -24], [-49, 13], [19, 16], [-16, 19], [57, 11], [11, -22], [40, -13]], [[5506, 9766], [92, -44], [-70, -23], [-15, -44], [-25, -11], [-13, -49], [-34, -2], [-59, 36], [25, 21], [-42, 17], [-54, 50], [-21, 46], [75, 21], [16, -20], [39, 0], [11, 21], [40, 2], [35, -21]], [[5706, 9808], [55, -21], [-41, -32], [-81, -7], [-82, 10], [-5, 16], [-40, 1], [-30, 27], [86, 17], [40, -14], [28, 17], [70, -14]], [[9805, 2640], [6, -24], [20, 24], [8, -25], [0, -25], [-10, -27], [-18, -44], [-14, -24], [10, -28], [-22, -1], [-23, -22], [-8, -39], [-16, -60], [-21, -26], [-14, -17], [-26, 1], [-18, 20], [-30, 4], [-5, 22], [15, 43], [35, 59], [18, 11], [20, 22], [24, 31], [16, 31], [13, 44], [10, 15], [5, 33], [19, 27], [6, -25]], [[9849, 2922], [20, -63], [1, 41], [13, -16], [4, -45], [22, -19], [19, -5], [16, 22], [14, -6], [-7, -53], [-8, -34], [-22, 1], [-7, -18], [3, -25], [-4, -11], [-11, -32], [-14, -41], [-21, -23], [-5, 15], [-12, 9], [16, 48], [-9, 33], [-30, 23], [1, 22], [20, 20], [5, 46], [-1, 38], [-12, 40], [1, 10], [-13, 25], [-22, 52], [-12, 42], [11, 4], [15, -33], [21, -15], [8, -52]], [[6475, 6041], [-9, 41], [-22, 98]], [[6444, 6180], [83, 59], [19, 118], [-13, 42]], [[6566, 6530], [12, -40], [16, -22], [20, -8], [17, -10], [12, -34], [8, -20], [10, -7], [0, -13], [-10, -36], [-5, -16], [-12, -19], [-10, -41], [-13, 3], [-5, -14], [-5, -30], [4, -39], [-3, -7], [-13, 0], [-17, -22], [-3, -29], [-6, -12], [-18, 0], [-10, -15], [0, -24], [-14, -16], [-15, 5], [-19, -19], [-12, -4]], [[6557, 6597], [8, 20], [3, -5], [-2, -25], [-4, -10]], [[6893, 6457], [-20, 15], [-9, 43], [-21, 45], [-51, -12], [-45, -1], [-39, -8]], [[2836, 5484], [-9, 17], [-6, 32], [7, 16], [-7, 4], [-5, 20], [-14, 16], [-12, -4], [-6, -20], [-11, -15], [-6, -2], [-3, -13], [13, -32], [-7, -7], [-4, -9], [-13, -3], [-5, 35], [-4, -10], [-9, 4], [-5, 24], [-12, 3], [-7, 7], [-12, 0], [-1, -13], [-3, 9]], [[2707, 5623], [10, -22], [-1, -12], [11, -3], [3, 5], [8, -14], [13, 4], [12, 15], [17, 12], [9, 17], [16, -3], [-1, -6], [15, -2], [12, -10], [10, -18], [10, -16]], [[3045, 3974], [-28, 33], [-2, 25], [-55, 59], [-50, 65], [-22, 36], [-11, 49], [4, 17], [-23, 77], [-28, 109], [-26, 118], [-11, 27], [-9, 43], [-21, 39], [-20, 24], [9, 26], [-14, 57], [9, 41], [22, 37]], [[8510, 5555], [2, -40], [2, -33], [-9, -54], [-11, 60], [-13, -30], [9, -43], [-8, -28], [-32, 35], [-8, 42], [8, 28], [-17, 28], [-9, -24], [-13, 2], [-21, -33], [-4, 17], [11, 50], [17, 17], [15, 22], [10, -27], [21, 17], [5, 26], [19, 1], [-1, 46], [22, -28], [3, -30], [2, -21]], [[8443, 5665], [-10, -20], [-9, -37], [-8, -17], [-17, 40], [5, 16], [7, 17], [3, 36], [16, 4], [-5, -40], [21, 57], [-3, -56]], [[8291, 5608], [-37, -56], [14, 41], [20, 37], [16, 41], [15, 58], [5, -48], [-18, -33], [-15, -40]], [[8385, 5760], [16, -18], [18, 0], [0, -25], [-13, -25], [-18, -18], [-1, 28], [2, 30], [-4, 28]], [[8485, 5776], [8, -66], [-21, 16], [0, -20], [7, -37], [-13, -13], [-1, 42], [-9, 3], [-4, 36], [16, -5], [0, 22], [-17, 45], [27, -1], [7, -22]], [[8375, 5830], [-7, -51], [-12, 29], [-15, 45], [24, -2], [10, -21]], [[8369, 6151], [17, -17], [9, 15], [2, -15], [-4, -24], [9, -43], [-7, -49], [-16, -19], [-5, -48], [7, -47], [14, -7], [13, 7], [34, -32], [-2, -32], [9, -15], [-3, -27], [-22, 29], [-10, 31], [-7, -22], [-18, 36], [-25, -9], [-14, 13], [1, 25], [9, 15], [-8, 13], [-4, -21], [-14, 34], [-4, 26], [-1, 56], [11, -19], [3, 92], [9, 54], [17, 0]], [[9329, 4655], [-8, -6], [-12, 22], [-12, 38], [-6, 45], [4, 6], [3, -18], [8, -13], [14, -38], [13, -20], [-4, -16]], [[9221, 4734], [-15, -5], [-4, -17], [-15, -14], [-15, -14], [-14, 0], [-23, 18], [-16, 16], [2, 18], [25, -8], [15, 4], [5, 29], [4, 1], [2, -31], [16, 4], [8, 20], [16, 21], [-4, 35], [17, 1], [6, -9], [-1, -33], [-9, -36]], [[8916, 4904], [48, -41], [51, -34], [19, -30], [16, -30], [4, -34], [46, -37], [7, -31], [-25, -7], [6, -39], [25, -39], [18, -62], [15, 2], [-1, -27], [22, -10], [-9, -11], [30, -25], [-3, -17], [-18, -4], [-7, 16], [-24, 6], [-28, 9], [-22, 38], [-16, 32], [-14, 52], [-36, 26], [-24, -17], [-17, -20], [4, -43], [-22, -20], [-16, 9], [-28, 3]], [[9253, 4792], [-9, -16], [-5, 35], [-6, 23], [-13, 19], [-16, 25], [-20, 18], [8, 14], [15, -17], [9, -13], [12, -14], [11, -25], [11, -19], [3, -30]], [[5392, 8233], [19, 18], [43, 27], [35, 20], [28, -10], [2, -14], [27, -1]], [[5546, 8273], [34, -7], [51, 1]], [[5653, 8105], [14, -52], [-3, -17], [-14, -6], [-25, -50], [7, -26], [-6, 3]], [[5626, 7957], [-26, 23], [-20, -8], [-13, 6], [-17, -13], [-14, 21], [-11, -8], [-2, 4]], [[3159, 6151], [14, -5], [5, -12], [-7, -15], [-21, 1], [-17, -2], [-1, 25], [4, 9], [23, -1]], [[8628, 7562], [4, -10]], [[8632, 7552], [-11, 3], [-12, -20], [-8, -20], [1, -42], [-14, -13], [-5, -11], [-11, -17], [-18, -10], [-12, -16], [-1, -25], [-3, -7], [11, -9], [15, -26]], [[8504, 7288], [-13, 11], [-4, -11], [-8, -5], [-1, 11], [-7, 5], [-8, 10], [8, 26], [7, 7], [-3, 11], [7, 31], [-2, 10], [-16, 7], [-13, 15]], [[4792, 7249], [-11, -15], [-14, 8], [-15, -6], [5, 46], [-3, 36], [-12, 6], [-7, 22], [2, 39], [11, 21], [2, 24], [6, 36], [-1, 25], [-5, 21], [-1, 20]], [[6411, 6520], [-2, 43], [7, 31], [8, 6], [8, -18], [1, -35], [-6, -35]], [[6427, 6512], [-8, -4], [-8, 12]], [[5630, 7886], [12, 13], [17, -7], [18, 0], [13, -14], [10, 9], [20, 5], [7, 14], [12, 0]], [[5784, 7745], [12, -11], [13, 9], [13, -10]], [[5822, 7733], [0, -15], [-13, -13], [-9, 6], [-7, -71]], [[5629, 7671], [-5, 10], [6, 10], [-7, 7], [-8, -13], [-17, 17], [-2, 25], [-17, 14], [-3, 18], [-15, 24]], [[8989, 8056], [28, -105], [-41, 19], [-17, -85], [27, -61], [-1, -41], [-21, 36], [-18, -46], [-5, 50], [3, 57], [-3, 64], [6, 45], [2, 79], [-17, 58], [3, 80], [25, 28], [-11, 27], [13, 8], [7, -39], [10, -57], [-1, -58], [11, -59]], [[5546, 8273], [6, 26], [38, 19]], [[0, 9132], [68, -45], [73, -59], [-3, -37], [19, -15], [-6, 43], [75, -8], [55, -56], [-28, -26], [-46, -6], [0, -57], [-11, -13], [-26, 2], [-22, 21], [-36, 17], [-7, 26], [-28, 9], [-31, -7], [-16, 20], [6, 22], [-33, -14], [13, -28], [-16, -25]], [[0, 8896], [0, 236]], [[0, 9282], [9999, -40], [-30, -3], [-5, 19], [-9964, 24]], [[0, 9282], [4, 3], [23, 0], [40, -17], [-2, -8], [-29, -14], [-36, -4], [0, 40]], [[8988, 9383], [-42, -1], [-57, 7], [-5, 3], [27, 23], [34, 6], [40, -23], [3, -15]], [[9186, 9493], [-32, -23], [-44, 5], [-52, 23], [7, 20], [51, -9], [70, -16]], [[9029, 9522], [-22, -44], [-102, 1], [-46, -14], [-55, 39], [15, 40], [37, 11], [73, -2], [100, -31]], [[6598, 9235], [-17, -5], [-91, 8], [-7, 26], [-50, 16], [-4, 32], [28, 13], [-1, 32], [55, 50], [-25, 7], [66, 52], [-7, 27], [62, 31], [91, 38], [93, 11], [48, 22], [54, 8], [19, -23], [-19, -19], [-98, -29], [-85, -28], [-86, -57], [-42, -57], [-43, -57], [5, -49], [54, -49]], [[0, 8896], [9963, -26], [-36, 4], [25, -31], [17, -49], [13, -16], [3, -24], [-7, -16], [-52, 13], [-78, -44], [-25, -7], [-42, -42], [-40, -36], [-11, -27], [-39, 41], [-73, -46], [-12, 22], [-27, -26], [-37, 8], [-9, -38], [-33, -58], [1, -24], [31, -13], [-4, -86], [-25, -2], [-12, -49], [11, -26], [-48, -30], [-10, -67], [-41, -15], [-9, -60], [-40, -55], [-10, 41], [-12, 86], [-15, 131], [13, 82], [23, 35], [2, 28], [43, 13], [50, 75], [47, 60], [50, 48], [23, 83], [-34, -5], [-17, -49], [-70, -65], [-23, 73], [-72, -20], [-69, -99], [23, -36], [-62, -16], [-43, -6], [2, 43], [-43, 9], [-35, -29], [-85, 10], [-91, -18], [-90, -115], [-106, -139], [43, -8], [14, -37], [27, -13], [18, 30], [30, -4], [40, -65], [1, -50], [-21, -59], [-3, -71], [-12, -94], [-42, -86], [-9, -41], [-38, -69], [-38, -68], [-18, -35], [-37, -34], [-17, -1], [-17, 29], [-38, -44], [-4, -19]], [[6363, 7799], [-12, -35], [-27, -10], [-28, -61], [25, -56], [-2, -40], [30, -70]], [[6109, 7624], [-35, 49], [-32, 23], [-24, 34], [20, 10], [23, 49], [-15, 24], [41, 24], [-1, 13], [-25, -10]], [[6061, 7840], [1, 26], [14, 17], [27, 4], [5, 20], [-7, 33], [12, 30], [-1, 18], [-41, 19], [-16, -1], [-17, 28], [-21, -9], [-35, 20], [0, 12], [-10, 26], [-22, 3], [-2, 18], [7, 12], [-18, 33], [-29, -5], [-8, 3], [-7, -14], [-11, 3]], [[5777, 8571], [31, 33], [-29, 28]], [[5863, 9167], [29, 20], [46, -35], [76, -14], [105, -67], [21, -28], [2, -40], [-31, -31], [-45, -15], [-124, 44], [-21, -7], [45, -43], [2, -28], [2, -60], [36, -18], [22, -15], [3, 28], [-17, 26], [18, 22], [67, -37], [24, 15], [-19, 43], [65, 58], [25, -4], [26, -20], [16, 40], [-23, 35], [14, 36], [-21, 36], [78, -18], [16, -34], [-35, -7], [0, -33], [22, -20], [43, 13], [7, 38], [58, 28], [97, 50], [20, -3], [-27, -35], [35, -7], [19, 21], [52, 1], [42, 25], [31, -36], [32, 39], [-29, 35], [14, 19], [82, -18], [39, -18], [100, -68], [19, 31], [-28, 31], [-1, 13], [-34, 6], [10, 28], [-15, 46], [-1, 19], [51, 53], [18, 54], [21, 11], [74, -15], [5, -33], [-26, -48], [17, -19], [9, -41], [-6, -81], [31, -36], [-12, -40], [-55, -84], [32, -8], [11, 21], [31, 15], [7, 29], [24, 29], [-16, 33], [13, 39], [-31, 5], [-6, 33], [22, 59], [-36, 48], [50, 40], [-7, 42], [14, 2], [15, -33], [-11, -57], [29, -11], [-12, 43], [46, 23], [58, 3], [51, -34], [-25, 49], [-2, 63], [48, 12], [67, -2], [60, 7], [-23, 31], [33, 39], [31, 2], [54, 29], [74, 8], [9, 16], [73, 6], [23, -14], [62, 32], [51, -1], [8, 25], [26, 25], [66, 25], [48, -19], [-38, -15], [63, -9], [7, -29], [25, 14], [82, -1], [62, -29], [23, -22], [-7, -30], [-31, -18], [-73, -33], [-21, -17], [35, -8], [41, -15], [25, 11], [14, -38], [12, 15], [44, 10], [90, -10], [6, -28], [116, -9], [2, 46], [59, -11], [44, 1], [45, -32], [13, -37], [-17, -25], [35, -47], [44, -24], [27, 62], [44, -26], [48, 16], [53, -18], [21, 16], [45, -8], [-20, 55], [37, 25], [251, -38], [24, -35], [72, -45], [112, 11], [56, -10], [23, -24], [-4, -44], [35, -16], [37, 12], [49, 1], [52, -11], [53, 6], [49, -52], [34, 19], [-23, 37], [13, 27], [88, -17], [58, 4], [80, -29], [-9960, -25]], [[7918, 9684], [-157, -23], [51, 77], [23, 7], [21, -4], [70, -33], [-8, -24]], [[6420, 9816], [-37, -8], [-25, -4], [-4, -10], [-33, -10], [-30, 14], [16, 19], [-62, 2], [54, 10], [43, 1], [5, -16], [16, 14], [26, 10], [42, -13], [-11, -9]], [[7775, 9718], [-60, -8], [-78, 17], [-46, 23], [-21, 42], [-38, 12], [72, 40], [60, 14], [54, -30], [64, -57], [-7, -53]], [[5844, 4990], [11, -33], [-1, -35], [-8, -7]], [[5821, 4978], [7, -6], [16, 18]], [[4526, 6298], [1, 25]], [[6188, 6023], [-4, 26], [-8, 17], [-2, 24], [-15, 21], [-15, 50], [-7, 48], [-20, 40], [-12, 10], [-18, 56], [-4, 41], [2, 35], [-16, 66], [-13, 23], [-15, 12], [-10, 34], [2, 13], [-8, 31], [-8, 13], [-11, 44], [-17, 48], [-14, 40], [-14, 0], [5, 33], [1, 20], [3, 24]], [[6344, 6744], [11, -51], [14, -13], [5, -21], [18, -25], [2, -24], [-3, -20], [4, -20], [8, -16], [4, -20], [4, -14]], [[6427, 6512], [5, -22]], [[6444, 6180], [-80, -23], [-26, -26], [-20, -62], [-13, -10], [-7, 20], [-11, -3], [-27, 6], [-5, 5], [-32, -1], [-7, -5], [-12, 15], [-7, -29], [3, -25], [-12, -19]], [[5943, 5617], [-4, 1], [0, 29], [-3, 20], [-14, 24], [-4, 42], [4, 44], [-13, 4], [-2, -13], [-17, -3], [7, -17], [2, -36], [-15, -32], [-14, -43], [-14, -6], [-23, 34], [-11, -12], [-3, -17], [-14, -11], [-1, -12], [-28, 0], [-3, 12], [-20, 2], [-10, -10], [-8, 5], [-14, 34], [-5, 17], [-20, -9], [-8, -27], [-7, -53], [-10, -11], [-8, -6]], [[5663, 5567], [-2, 2]], [[5635, 5716], [0, 14], [-10, 17], [-1, 35], [-5, 23], [-10, -4], [3, 22], [7, 25], [-3, 24], [9, 18], [-6, 14], [7, 36], [13, 44], [24, -4], [-1, 234]], [[6023, 6357], [9, -58], [-6, -10], [4, -61], [11, -71], [10, -14], [15, -22]], [[5943, 5624], [0, -7]], [[5943, 5617], [0, -46]], [[5944, 5309], [-17, -28], [-20, 1], [-22, -14], [-18, 13], [-11, -16]], [[5682, 5544], [-19, 23]], [[4535, 5861], [-11, 46], [-14, 21], [12, 11], [14, 41], [6, 31]], [[4536, 5789], [-4, 45]], [[9502, 4438], [8, -20], [-19, 0], [-11, 37], [17, -15], [5, -2]], [[9467, 4474], [-11, -1], [-17, 6], [-5, 9], [1, 23], [19, -9], [9, -12], [4, -16]], [[9490, 4490], [-4, -11], [-21, 52], [-5, 35], [9, 0], [10, -47], [11, -29]], [[9440, 4565], [1, -12], [-22, 25], [-15, 21], [-10, 20], [4, 6], [13, -14], [23, -27], [6, -19]], [[9375, 4623], [-5, -3], [-13, 14], [-11, 24], [1, 10], [17, -25], [11, -20]], [[4682, 5458], [-8, 5], [-20, 24], [-14, 31], [-5, 22], [-3, 43]], [[2561, 5848], [-3, -14], [-16, 1], [-10, 6], [-12, 12], [-15, 3], [-8, 13]], [[6198, 5735], [9, -11], [5, -25], [13, -24], [14, -1], [26, 16], [30, 7], [25, 18], [13, 4], [10, 11], [16, 2]], [[6359, 5732], [0, -1], [0, -25], [0, -59], [0, -31], [-13, -36], [-19, -50]], [[6359, 5732], [9, 1], [13, 9], [14, 6], [14, 20], [10, 0], [1, -16], [-3, -35], [0, -31], [-6, -21], [-7, -64], [-14, -66], [-17, -75], [-24, -87], [-23, -66], [-33, -81], [-28, -48], [-42, -58], [-25, -45], [-31, -72], [-6, -31], [-6, -14]], [[3412, 5410], [34, -11], [2, 10], [23, 4], [30, -15]], [[3489, 5306], [10, -35], [-4, -25]], [[5626, 7957], [-8, -15], [-5, -24]], [[5380, 7746], [7, 5]], [[5663, 8957], [-47, -17], [-27, -41], [4, -36], [-44, -48], [-54, -50], [-20, -84], [20, -41], [26, -33], [-25, -67], [-29, -14], [-11, -99], [-15, -55], [-34, 6], [-16, -47], [-32, -3], [-9, 56], [-23, 67], [-21, 84]], [[5890, 3478], [-5, -26], [-17, -6], [-16, 32], [0, 20], [7, 22], [3, 17], [8, 5], [14, -11]], [[5999, 7104], [-2, 45], [7, 25]], [[6004, 7174], [7, 13], [7, 13], [2, 33], [9, -12], [31, 17], [14, -12], [23, 1], [32, 22], [15, -1], [32, 9]], [[5051, 5420], [-22, -12]], [[7849, 5777], [-25, 28], [-24, -2], [4, 47], [-24, 0], [-2, -65], [-15, -87], [-10, -52], [2, -43], [18, -2], [12, -53], [5, -52], [15, -33], [17, -7], [14, -31]], [[7779, 5439], [-11, 23], [-4, 29], [-15, 34], [-14, 28], [-4, -35], [-5, 33], [3, 37], [8, 56]], [[6883, 7252], [16, 60], [-6, 44], [-20, 14], [7, 26], [23, -3], [13, 33], [9, 38], [37, 13], [-6, -27], [4, -17], [12, 2]], [[6497, 7255], [-5, 42], [4, 62], [-22, 20], [8, 40], [-19, 4], [6, 49], [26, -14], [25, 19], [-20, 35], [-8, 34], [-23, -15], [-3, -43], [-8, 38]], [[6554, 7498], [31, 1], [-4, 29], [24, 21], [23, 34], [37, -31], [3, -47], [11, -12], [30, 2], [9, -10], [14, -61], [32, -41], [18, -28], [29, -29], [37, -25], [-1, -36]], [[8471, 4532], [3, 14], [24, 13], [19, 2], [9, 8], [10, -8], [-10, -16], [-29, -25], [-23, -17]], [[3286, 5693], [16, 8], [6, -2], [-1, -44], [-23, -7], [-5, 6], [8, 16], [-1, 23]], [[5233, 7240], [31, 24], [19, -7], [-1, -30], [24, 22], [2, -12], [-14, -29], [0, -27], [9, -15], [-3, -51], [-19, -29], [6, -33], [14, -1], [7, -28], [11, -9]], [[6004, 7174], [-11, 27], [11, 22], [-17, -5], [-23, 13], [-19, -34], [-43, -6], [-22, 31], [-30, 2], [-6, -24], [-20, -7], [-26, 31], [-31, -1], [-16, 59], [-21, 33], [14, 46], [-18, 28], [31, 56], [43, 3], [12, 45], [53, -8], [33, 38], [32, 17], [46, 1], [49, -42], [40, -22], [32, 9], [24, -6], [33, 31]], [[5777, 7539], [3, -23], [25, -19], [-5, -14], [-33, -3], [-12, -19], [-23, -31], [-9, 27], [0, 12]], [[8382, 6499], [-17, -95], [-12, -49], [-14, 50], [-4, 44], [17, 58], [22, 45], [13, -18], [-5, -35]], [[6088, 4781], [-12, -73], [1, -33], [18, -22], [1, -15], [-8, -36], [2, -18], [-2, -28], [10, -37], [11, -58], [10, -13]], [[5909, 4512], [-15, 18], [-18, 10], [-11, 10], [-12, 15]], [[5844, 4990], [10, 8], [31, -1], [56, 4]], [[6061, 7840], [-22, -5], [-18, -19], [-26, -3], [-24, -22], [1, -37], [14, -14], [28, 4], [-5, -21], [-31, -11], [-37, -34], [-16, 12], [6, 28], [-30, 17], [5, 12], [26, 19], [-8, 14], [-43, 15], [-2, 22], [-25, -8], [-11, -32], [-21, -44]], [[3517, 3063], [-12, -38], [-31, -32], [-21, 11], [-15, -6], [-26, 25], [-18, -1], [-17, 32]], [[679, 6185], [-4, -10], [-7, 8], [1, 17], [-4, 21], [1, 7], [5, 10], [-2, 11], [1, 6], [3, -1], [10, -10], [5, -5], [5, -8], [7, -21], [-1, -3], [-11, -13], [-9, -9]], [[664, 6277], [-9, -4], [-5, 12], [-3, 5], [0, 4], [3, 5], [9, -6], [8, -9], [-3, -7]], [[646, 6309], [-1, -7], [-15, 2], [2, 7], [14, -2]], [[621, 6317], [-2, -3], [-2, 1], [-9, 2], [-4, 13], [-1, 2], [7, 8], [3, -3], [8, -20]], [[574, 6356], [-4, -6], [-9, 11], [1, 4], [5, 6], [6, -1], [1, -14]], [[3135, 7724], [5, -19], [-30, -29], [-29, -20], [-29, -18], [-15, -35], [-4, -13], [-1, -31], [10, -32], [11, -1], [-3, 21], [8, -13], [-2, -17], [-19, -9], [-13, 1], [-20, -10], [-12, -3], [-17, -3], [-23, -17], [41, 11], [8, -11], [-39, -18], [-17, 0], [0, 7], [-8, -16], [8, -3], [-6, -43], [-20, -45], [-2, 15], [-6, 3], [-9, 15], [5, -32], [7, -10], [1, -23], [-9, -23], [-16, -47], [-2, 3], [8, 40], [-14, 22], [-3, 49], [-5, -25], [5, -38], [-18, 10], [19, -19], [1, -57], [8, -4], [3, -20], [4, -59], [-17, -44], [-29, -18], [-18, -34], [-14, -4], [-14, -22], [-4, -20], [-31, -38], [-16, -28], [-13, -35], [-4, -42], [5, -41], [9, -51], [13, -41], [0, -26], [13, -69], [-1, -39], [-1, -23], [-7, -36], [-8, -8], [-14, 7], [-4, 26], [-11, 14], [-15, 51], [-13, 45], [-4, 23], [6, 39], [-8, 33], [-22, 49], [-10, 9], [-28, -27], [-5, 3], [-14, 28], [-17, 14], [-32, -7], [-24, 7], [-21, -5], [-12, -9], [5, -15], [0, -24], [5, -12], [-5, -8], [-10, 9], [-11, -11], [-20, 2], [-20, 31], [-25, -8], [-20, 14], [-17, -4], [-24, -14], [-25, -44], [-27, -25], [-16, -28], [-6, -27], [0, -41], [1, -28], [5, -20]], [[1746, 6980], [-4, 30], [-18, 34], [-13, 7], [-3, 17], [-16, 3], [-10, 16], [-26, 6], [-7, 9], [-3, 32], [-27, 60], [-23, 82], [1, 14], [-13, 19], [-21, 50], [-4, 48], [-15, 32], [6, 49], [-1, 51], [-8, 45], [10, 56], [4, 53], [3, 54], [-5, 79], [-9, 51], [-8, 27], [4, 12], [40, -20], [15, -56], [7, 15], [-5, 49], [-9, 48]], [[750, 8432], [-28, -23], [-14, 15], [-4, 28], [25, 21], [15, 9], [18, -4], [12, -18], [-24, -28]], [[401, 8597], [-18, -9], [-18, 11], [-17, 16], [28, 10], [22, -6], [3, -22]], [[230, 8826], [17, -12], [17, 6], [23, -15], [27, -8], [-2, -7], [-21, -12], [-21, 13], [-11, 11], [-24, -4], [-7, 5], [2, 23]], [[1374, 8295], [-15, 22], [-25, 19], [-8, 52], [-36, 47], [-15, 56], [-26, 4], [-44, 2], [-33, 17], [-57, 61], [-27, 11], [-49, 21], [-38, -5], [-55, 27], [-33, 25], [-30, -12], [5, -41], [-15, -4], [-32, -12], [-25, -20], [-30, -13], [-4, 35], [12, 58], [30, 18], [-8, 15], [-35, -33], [-19, -39], [-40, -42], [20, -29], [-26, -42], [-30, -25], [-28, -18], [-7, -26], [-43, -31], [-9, -28], [-32, -25], [-20, 5], [-25, -17], [-29, -20], [-23, -20], [-47, -16], [-5, 9], [31, 28], [27, 18], [29, 33], [35, 6], [14, 25], [38, 35], [6, 12], [21, 21], [5, 44], [14, 35], [-32, -18], [-9, 11], [-15, -22], [-18, 30], [-8, -21], [-10, 29], [-28, -23], [-17, 0], [-3, 35], [5, 21], [-17, 22], [-37, -12], [-23, 28], [-19, 14], [0, 34], [-22, 25], [11, 34], [23, 33], [10, 30], [22, 4], [19, -9], [23, 28], [20, -5], [21, 19], [-5, 27], [-16, 10], [21, 23], [-17, -1], [-30, -13], [-8, -13], [-22, 13], [-39, -6], [-41, 14], [-12, 24], [-35, 34], [39, 25], [62, 29], [23, 0], [-4, -30], [59, 2], [-23, 37], [-34, 23], [-20, 29], [-26, 25], [-38, 19], [15, 31], [49, 2], [35, 27], [7, 29], [28, 28], [28, 6], [52, 27], [26, -4], [42, 31], [42, -12], [21, -27], [12, 11], [47, -3], [-2, -14], [43, -10], [28, 6], [59, -18], [53, -6], [21, -8], [37, 10], [42, -18], [31, -8]], [[3018, 5753], [-1, -14], [-16, -7], [9, -26], [0, -31], [-12, -35], [10, -47], [12, 4], [6, 43], [-8, 21], [-2, 45], [35, 24], [-4, 27], [10, 19], [10, -41], [19, -1], [18, -33], [1, -20], [25, 0], [30, 6], [16, -27], [21, -7], [16, 18], [0, 15], [34, 4], [34, 1], [-24, -18], [10, -28], [22, -4], [21, -29], [4, -48], [15, 2], [11, -14]], [[8001, 6331], [-37, -51], [-24, -56], [-6, -41], [22, -62], [25, -77], [26, -37], [17, -47], [12, -109], [-3, -104], [-24, -39], [-31, -38], [-23, -49], [-35, -55], [-10, 37], [8, 40], [-21, 34]], [[9661, 4085], [-9, -8], [-9, 26], [1, 16], [17, -34]], [[9641, 4175], [4, -47], [-7, 7], [-6, -3], [-4, 16], [0, 45], [13, -18]], [[6475, 6041], [-21, -16], [-5, -26], [-1, -20], [-27, -25], [-45, -28], [-24, -41], [-13, -3], [-8, 3], [-16, -25], [-18, -11], [-23, -3], [-7, -3], [-6, -16], [-8, -4], [-4, -15], [-14, 1], [-9, -8], [-19, 3], [-7, 35], [1, 32], [-5, 17], [-5, 44], [-8, 24], [5, 3], [-2, 27], [3, 12], [-1, 25]], [[5817, 3752], [11, 0], [14, -10], [9, 7], [15, -6]], [[5911, 3478], [-7, -43], [-3, -49], [-7, -27], [-19, -30], [-5, -8], [-12, -30], [-8, -31], [-16, -42], [-31, -61], [-20, -36], [-21, -26], [-29, -23], [-14, -3], [-3, -17], [-17, 9], [-14, -11], [-30, 11], [-17, -7], [-12, 3], [-28, -23], [-24, -10], [-17, -22], [-13, -1], [-11, 21], [-10, 1], [-12, 26], [-1, -8], [-4, 16], [0, 34], [-9, 40], [9, 11], [0, 45], [-19, 55], [-14, 50], [0, 1], [-20, 76]], [[5840, 4141], [-21, -8], [-15, -23], [-4, -21], [-10, -4], [-24, -49], [-15, -38], [-10, -2], [-9, 7], [-31, 7]]],
	        "transform": {
	            "scale": [0.036003600360036005, 0.016927109510951093],
	            "translate": [-180, -85.609038]
	        }
	    };
	    Datamap.prototype.usaTopo = '__USA__';

	    /**************************************
	                  Utilities
	    ***************************************/

	    //convert lat/lng coords to X / Y coords
	    Datamap.prototype.latLngToXY = function (lat, lng) {
	        return this.projection([lng, lat]);
	    };

	    //add <g> layer to root SVG
	    Datamap.prototype.addLayer = function (className, id, first) {
	        var layer;
	        if (first) {
	            layer = this.svg.insert('g', ':first-child');
	        } else {
	            layer = this.svg.append('g');
	        }
	        return layer.attr('id', id || '').attr('class', className || '');
	    };

	    Datamap.prototype.updateChoropleth = function (data) {
	        var svg = this.svg;
	        for (var subunit in data) {
	            if (data.hasOwnProperty(subunit)) {
	                var color;
	                var subunitData = data[subunit];
	                if (!subunit) {
	                    continue;
	                } else if (typeof subunitData === "string") {
	                    color = subunitData;
	                } else if (typeof subunitData.color === "string") {
	                    color = subunitData.color;
	                } else {
	                    color = this.options.fills[subunitData.fillKey];
	                }
	                //if it's an object, overriding the previous data
	                if (subunitData === Object(subunitData)) {
	                    this.options.data[subunit] = defaults(subunitData, this.options.data[subunit] || {});
	                    var geo = this.svg.select('.' + subunit).attr('data-info', JSON.stringify(this.options.data[subunit]));
	                }
	                svg.selectAll('.' + subunit).transition().style('fill', color);
	            }
	        }
	    };

	    Datamap.prototype.updatePopup = function (element, d, options) {
	        var self = this;
	        element.on('mousemove', null);
	        element.on('mousemove', function () {
	            var position = d3.mouse(self.options.element);
	            d3.select(self.svg[0][0].parentNode).select('.datamaps-hoverover').style('top', position[1] + 30 + "px").html(function () {
	                var data = JSON.parse(element.attr('data-info'));
	                //if ( !data ) return '';
	                return options.popupTemplate(d, data);
	            }).style('left', position[0] + "px");
	        });

	        d3.select(self.svg[0][0].parentNode).select('.datamaps-hoverover').style('display', 'block');
	    };

	    Datamap.prototype.addPlugin = function (name, pluginFn) {
	        var self = this;
	        if (typeof Datamap.prototype[name] === "undefined") {
	            Datamap.prototype[name] = function (data, options, callback, createNewLayer) {
	                var layer;
	                if (typeof createNewLayer === "undefined") {
	                    createNewLayer = false;
	                }

	                if (typeof options === 'function') {
	                    callback = options;
	                    options = undefined;
	                }

	                options = defaults(options || {}, defaultOptions[name + 'Config']);

	                //add a single layer, reuse the old layer
	                if (!createNewLayer && this.options[name + 'Layer']) {
	                    layer = this.options[name + 'Layer'];
	                    options = options || this.options[name + 'Options'];
	                } else {
	                    layer = this.addLayer(name);
	                    this.options[name + 'Layer'] = layer;
	                    this.options[name + 'Options'] = options;
	                }
	                pluginFn.apply(this, [layer, data, options]);
	                if (callback) {
	                    callback(layer);
	                }
	            };
	        }
	    };

	    // expose library
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {
	            d3 = __webpack_require__(135);topojson = __webpack_require__(137);return Datamap;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else {
	        window.Datamap = window.Datamaps = Datamap;
	    }

	    if (window.jQuery) {
	        window.jQuery.fn.datamaps = function (options, callback) {
	            options = options || {};
	            options.element = this[0];
	            var datamap = new Datamap(options);
	            if (typeof callback === "function") {
	                callback(datamap, options);
	            }
	            return this;
	        };
	    }
	})();

/***/ },

/***/ 137:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	!(function () {
	  var topojson = {
	    version: "1.6.19",
	    mesh: function mesh(topology) {
	      return object(topology, meshArcs.apply(this, arguments));
	    },
	    meshArcs: meshArcs,
	    merge: function merge(topology) {
	      return object(topology, mergeArcs.apply(this, arguments));
	    },
	    mergeArcs: mergeArcs,
	    feature: featureOrCollection,
	    neighbors: neighbors,
	    presimplify: presimplify
	  };

	  function stitchArcs(topology, arcs) {
	    var stitchedArcs = {},
	        fragmentByStart = {},
	        fragmentByEnd = {},
	        fragments = [],
	        emptyIndex = -1;

	    // Stitch empty arcs first, since they may be subsumed by other arcs.
	    arcs.forEach(function (i, j) {
	      var arc = topology.arcs[i < 0 ? ~i : i],
	          t;
	      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
	        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
	      }
	    });

	    arcs.forEach(function (i) {
	      var e = ends(i),
	          start = e[0],
	          end = e[1],
	          f,
	          g;

	      if (f = fragmentByEnd[start]) {
	        delete fragmentByEnd[f.end];
	        f.push(i);
	        f.end = end;
	        if (g = fragmentByStart[end]) {
	          delete fragmentByStart[g.start];
	          var fg = g === f ? f : f.concat(g);
	          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
	        } else {
	          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	        }
	      } else if (f = fragmentByStart[end]) {
	        delete fragmentByStart[f.start];
	        f.unshift(i);
	        f.start = start;
	        if (g = fragmentByEnd[start]) {
	          delete fragmentByEnd[g.end];
	          var gf = g === f ? f : g.concat(f);
	          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
	        } else {
	          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	        }
	      } else {
	        f = [i];
	        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
	      }
	    });

	    function ends(i) {
	      var arc = topology.arcs[i < 0 ? ~i : i],
	          p0 = arc[0],
	          p1;
	      if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
	        p1[0] += dp[0], p1[1] += dp[1];
	      });else p1 = arc[arc.length - 1];
	      return i < 0 ? [p1, p0] : [p0, p1];
	    }

	    function flush(fragmentByEnd, fragmentByStart) {
	      for (var k in fragmentByEnd) {
	        var f = fragmentByEnd[k];
	        delete fragmentByStart[f.start];
	        delete f.start;
	        delete f.end;
	        f.forEach(function (i) {
	          stitchedArcs[i < 0 ? ~i : i] = 1;
	        });
	        fragments.push(f);
	      }
	    }

	    flush(fragmentByEnd, fragmentByStart);
	    flush(fragmentByStart, fragmentByEnd);
	    arcs.forEach(function (i) {
	      if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
	    });

	    return fragments;
	  }

	  function meshArcs(topology, o, filter) {
	    var _arguments = arguments;

	    var arcs = [];

	    if (arguments.length > 1) {
	      var geomsByArc, geom;
	      var geometryType;

	      (function () {
	        var arc = function arc(i) {
	          var j = i < 0 ? ~i : i;
	          (geomsByArc[j] || (geomsByArc[j] = [])).push({ i: i, g: geom });
	        };

	        var line = function line(arcs) {
	          arcs.forEach(arc);
	        };

	        var polygon = function polygon(arcs) {
	          arcs.forEach(line);
	        };

	        var geometry = function geometry(o) {
	          if (o.type === "GeometryCollection") o.geometries.forEach(geometry);else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
	        };

	        geomsByArc = [];
	        geometryType = {
	          LineString: line,
	          MultiLineString: polygon,
	          Polygon: polygon,
	          MultiPolygon: function MultiPolygon(arcs) {
	            arcs.forEach(polygon);
	          }
	        };

	        geometry(o);

	        geomsByArc.forEach(_arguments.length < 3 ? function (geoms) {
	          arcs.push(geoms[0].i);
	        } : function (geoms) {
	          if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
	        });
	      })();
	    } else {
	      for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);
	    }

	    return { type: "MultiLineString", arcs: stitchArcs(topology, arcs) };
	  }

	  function mergeArcs(topology, objects) {
	    var polygonsByArc = {},
	        polygons = [],
	        components = [];

	    objects.forEach(function (o) {
	      if (o.type === "Polygon") register(o.arcs);else if (o.type === "MultiPolygon") o.arcs.forEach(register);
	    });

	    function register(polygon) {
	      polygon.forEach(function (ring) {
	        ring.forEach(function (arc) {
	          (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
	        });
	      });
	      polygons.push(polygon);
	    }

	    function exterior(ring) {
	      return cartesianRingArea(object(topology, { type: "Polygon", arcs: [ring] }).coordinates[0]) > 0; // TODO allow spherical?
	    }

	    polygons.forEach(function (polygon) {
	      if (!polygon._) {
	        var component = [],
	            neighbors = [polygon];
	        polygon._ = 1;
	        components.push(component);
	        while (polygon = neighbors.pop()) {
	          component.push(polygon);
	          polygon.forEach(function (ring) {
	            ring.forEach(function (arc) {
	              polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
	                if (!polygon._) {
	                  polygon._ = 1;
	                  neighbors.push(polygon);
	                }
	              });
	            });
	          });
	        }
	      }
	    });

	    polygons.forEach(function (polygon) {
	      delete polygon._;
	    });

	    return {
	      type: "MultiPolygon",
	      arcs: components.map(function (polygons) {
	        var arcs = [];

	        // Extract the exterior (unique) arcs.
	        polygons.forEach(function (polygon) {
	          polygon.forEach(function (ring) {
	            ring.forEach(function (arc) {
	              if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
	                arcs.push(arc);
	              }
	            });
	          });
	        });

	        // Stitch the arcs into one or more rings.
	        arcs = stitchArcs(topology, arcs);

	        // If more than one ring is returned,
	        // at most one of these rings can be the exterior;
	        // this exterior ring has the same winding order
	        // as any exterior ring in the original polygons.
	        if ((n = arcs.length) > 1) {
	          var sgn = exterior(polygons[0][0]);
	          for (var i = 0, t; i < n; ++i) {
	            if (sgn === exterior(arcs[i])) {
	              t = arcs[0], arcs[0] = arcs[i], arcs[i] = t;
	              break;
	            }
	          }
	        }

	        return arcs;
	      })
	    };
	  }

	  function featureOrCollection(topology, o) {
	    return o.type === "GeometryCollection" ? {
	      type: "FeatureCollection",
	      features: o.geometries.map(function (o) {
	        return feature(topology, o);
	      })
	    } : feature(topology, o);
	  }

	  function feature(topology, o) {
	    var f = {
	      type: "Feature",
	      id: o.id,
	      properties: o.properties || {},
	      geometry: object(topology, o)
	    };
	    if (o.id == null) delete f.id;
	    return f;
	  }

	  function object(topology, o) {
	    var absolute = transformAbsolute(topology.transform),
	        arcs = topology.arcs;

	    function arc(i, points) {
	      if (points.length) points.pop();
	      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {
	        points.push(p = a[k].slice());
	        absolute(p, k);
	      }
	      if (i < 0) reverse(points, n);
	    }

	    function point(p) {
	      p = p.slice();
	      absolute(p, 0);
	      return p;
	    }

	    function line(arcs) {
	      var points = [];
	      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
	      if (points.length < 2) points.push(points[0].slice());
	      return points;
	    }

	    function ring(arcs) {
	      var points = line(arcs);
	      while (points.length < 4) points.push(points[0].slice());
	      return points;
	    }

	    function polygon(arcs) {
	      return arcs.map(ring);
	    }

	    function geometry(o) {
	      var t = o.type;
	      return t === "GeometryCollection" ? { type: t, geometries: o.geometries.map(geometry) } : t in geometryType ? { type: t, coordinates: geometryType[t](o) } : null;
	    }

	    var geometryType = {
	      Point: function Point(o) {
	        return point(o.coordinates);
	      },
	      MultiPoint: function MultiPoint(o) {
	        return o.coordinates.map(point);
	      },
	      LineString: function LineString(o) {
	        return line(o.arcs);
	      },
	      MultiLineString: function MultiLineString(o) {
	        return o.arcs.map(line);
	      },
	      Polygon: function Polygon(o) {
	        return polygon(o.arcs);
	      },
	      MultiPolygon: function MultiPolygon(o) {
	        return o.arcs.map(polygon);
	      }
	    };

	    return geometry(o);
	  }

	  function reverse(array, n) {
	    var t,
	        j = array.length,
	        i = j - n;while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
	  }

	  function bisect(a, x) {
	    var lo = 0,
	        hi = a.length;
	    while (lo < hi) {
	      var mid = lo + hi >>> 1;
	      if (a[mid] < x) lo = mid + 1;else hi = mid;
	    }
	    return lo;
	  }

	  function neighbors(objects) {
	    var indexesByArc = {},
	        // arc index -> array of object indexes
	    neighbors = objects.map(function () {
	      return [];
	    });

	    function line(arcs, i) {
	      arcs.forEach(function (a) {
	        if (a < 0) a = ~a;
	        var o = indexesByArc[a];
	        if (o) o.push(i);else indexesByArc[a] = [i];
	      });
	    }

	    function polygon(arcs, i) {
	      arcs.forEach(function (arc) {
	        line(arc, i);
	      });
	    }

	    function geometry(o, i) {
	      if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
	        geometry(o, i);
	      });else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
	    }

	    var geometryType = {
	      LineString: line,
	      MultiLineString: polygon,
	      Polygon: polygon,
	      MultiPolygon: function MultiPolygon(arcs, i) {
	        arcs.forEach(function (arc) {
	          polygon(arc, i);
	        });
	      }
	    };

	    objects.forEach(geometry);

	    for (var i in indexesByArc) {
	      for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
	        for (var k = j + 1; k < m; ++k) {
	          var ij = indexes[j],
	              ik = indexes[k],
	              n;
	          if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
	          if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
	        }
	      }
	    }

	    return neighbors;
	  }

	  function presimplify(topology, triangleArea) {
	    var absolute = transformAbsolute(topology.transform),
	        relative = transformRelative(topology.transform),
	        heap = minAreaHeap();

	    if (!triangleArea) triangleArea = cartesianTriangleArea;

	    topology.arcs.forEach(function (arc) {
	      var triangles = [],
	          maxArea = 0,
	          triangle;

	      // To store each point’s effective area, we create a new array rather than
	      // extending the passed-in point to workaround a Chrome/V8 bug (getting
	      // stuck in smi mode). For midpoints, the initial effective area of
	      // Infinity will be computed in the next step.
	      for (var i = 0, n = arc.length, p; i < n; ++i) {
	        p = arc[i];
	        absolute(arc[i] = [p[0], p[1], Infinity], i);
	      }

	      for (var i = 1, n = arc.length - 1; i < n; ++i) {
	        triangle = arc.slice(i - 1, i + 2);
	        triangle[1][2] = triangleArea(triangle);
	        triangles.push(triangle);
	        heap.push(triangle);
	      }

	      for (var i = 0, n = triangles.length; i < n; ++i) {
	        triangle = triangles[i];
	        triangle.previous = triangles[i - 1];
	        triangle.next = triangles[i + 1];
	      }

	      while (triangle = heap.pop()) {
	        var previous = triangle.previous,
	            next = triangle.next;

	        // If the area of the current point is less than that of the previous point
	        // to be eliminated, use the latter's area instead. This ensures that the
	        // current point cannot be eliminated without eliminating previously-
	        // eliminated points.
	        if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;else maxArea = triangle[1][2];

	        if (previous) {
	          previous.next = next;
	          previous[2] = triangle[2];
	          update(previous);
	        }

	        if (next) {
	          next.previous = previous;
	          next[0] = triangle[0];
	          update(next);
	        }
	      }

	      arc.forEach(relative);
	    });

	    function update(triangle) {
	      heap.remove(triangle);
	      triangle[1][2] = triangleArea(triangle);
	      heap.push(triangle);
	    }

	    return topology;
	  };

	  function cartesianRingArea(ring) {
	    var i = -1,
	        n = ring.length,
	        a,
	        b = ring[n - 1],
	        area = 0;

	    while (++i < n) {
	      a = b;
	      b = ring[i];
	      area += a[0] * b[1] - a[1] * b[0];
	    }

	    return area * .5;
	  }

	  function cartesianTriangleArea(triangle) {
	    var a = triangle[0],
	        b = triangle[1],
	        c = triangle[2];
	    return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
	  }

	  function compareArea(a, b) {
	    return a[1][2] - b[1][2];
	  }

	  function minAreaHeap() {
	    var heap = {},
	        array = [],
	        size = 0;

	    heap.push = function (object) {
	      up(array[object._ = size] = object, size++);
	      return size;
	    };

	    heap.pop = function () {
	      if (size <= 0) return;
	      var removed = array[0],
	          object;
	      if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
	      return removed;
	    };

	    heap.remove = function (removed) {
	      var i = removed._,
	          object;
	      if (array[i] !== removed) return; // invalid request
	      if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
	      return i;
	    };

	    function up(object, i) {
	      while (i > 0) {
	        var j = (i + 1 >> 1) - 1,
	            parent = array[j];
	        if (compareArea(object, parent) >= 0) break;
	        array[parent._ = i] = parent;
	        array[object._ = i = j] = object;
	      }
	    }

	    function down(object, i) {
	      while (true) {
	        var r = i + 1 << 1,
	            l = r - 1,
	            j = i,
	            child = array[j];
	        if (l < size && compareArea(array[l], child) < 0) child = array[j = l];
	        if (r < size && compareArea(array[r], child) < 0) child = array[j = r];
	        if (j === i) break;
	        array[child._ = i] = child;
	        array[object._ = i = j] = object;
	      }
	    }

	    return heap;
	  }

	  function transformAbsolute(transform) {
	    if (!transform) return noop;
	    var x0,
	        y0,
	        kx = transform.scale[0],
	        ky = transform.scale[1],
	        dx = transform.translate[0],
	        dy = transform.translate[1];
	    return function (point, i) {
	      if (!i) x0 = y0 = 0;
	      point[0] = (x0 += point[0]) * kx + dx;
	      point[1] = (y0 += point[1]) * ky + dy;
	    };
	  }

	  function transformRelative(transform) {
	    if (!transform) return noop;
	    var x0,
	        y0,
	        kx = transform.scale[0],
	        ky = transform.scale[1],
	        dx = transform.translate[0],
	        dy = transform.translate[1];
	    return function (point, i) {
	      if (!i) x0 = y0 = 0;
	      var x1 = (point[0] - dx) / kx | 0,
	          y1 = (point[1] - dy) / ky | 0;
	      point[0] = x1 - x0;
	      point[1] = y1 - y0;
	      x0 = x1;
	      y0 = y1;
	    };
	  }

	  function noop() {}

	  if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (topojson), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if (typeof module === "object" && module.exports) module.exports = topojson;else this.topojson = topojson;
	})();

/***/ }

/******/ });